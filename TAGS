
config.status,0

configure,792
as_func_success () {as_func_success165,3908
as_func_failure () {as_func_failure168,3950
as_func_ret_success () {as_func_ret_success171,3992
as_func_ret_failure () {as_func_ret_failure174,4030
as_func_success () {as_func_success280,6213
as_func_failure () {as_func_failure283,6255
as_func_ret_success () {as_func_ret_success286,6297
as_func_ret_failure () {as_func_ret_failure289,6335
as_func_success () {as_func_success369,7697
as_func_failure () {as_func_failure372,7739
as_func_ret_success () {as_func_ret_success375,7781
as_func_ret_failure () {as_func_ret_failure378,7819
   function prototypes and stuff, but not '\xHH' hex character constants.prototypes2488,69895
   function prototypes and stuff, but not '\xHH' hex character constants.prototypes3394,94425

inst/include/sqlite3.h,23947
#define _SQLITE3_H__SQLITE3_H_34,1511
# define SQLITE_EXTERN SQLITE_EXTERN49,1760
# define SQLITE_APISQLITE_API53,1817
#define SQLITE_DEPRECATEDSQLITE_DEPRECATED70,2483
#define SQLITE_EXPERIMENTALSQLITE_EXPERIMENTAL71,2509
# undef SQLITE_VERSIONSQLITE_VERSION77,2637
# undef SQLITE_VERSION_NUMBERSQLITE_VERSION_NUMBER80,2696
#define SQLITE_VERSION SQLITE_VERSION110,4095
#define SQLITE_VERSION_NUMBER SQLITE_VERSION_NUMBER111,4136
#define SQLITE_SOURCE_ID SQLITE_SOURCE_ID112,4174
SQLITE_API SQLITE_EXTERN const char sqlite3_version[];sqlite3_version144,5753
typedef struct sqlite3 sqlite3;sqlite3227,9604
  typedef SQLITE_INT64_TYPE sqlite_int64;sqlite_int64246,10327
  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;sqlite_uint64247,10369
  typedef __int64 sqlite_int64;sqlite_int64249,10470
  typedef unsigned __int64 sqlite_uint64;sqlite_uint64250,10502
  typedef long long int sqlite_int64;sqlite_int64252,10550
  typedef unsigned long long int sqlite_uint64;sqlite_uint64253,10588
typedef sqlite_int64 sqlite3_int64;sqlite3_int64255,10643
typedef sqlite_uint64 sqlite3_uint64;sqlite3_uint64256,10679
# define double double263,10867
typedef int (*sqlite3_callback)(void*,int,char**, char**);sqlite3_callback297,12165
#define SQLITE_OK SQLITE_OK380,16159
#define SQLITE_ERROR SQLITE_ERROR382,16246
#define SQLITE_INTERNAL SQLITE_INTERNAL383,16314
#define SQLITE_PERM SQLITE_PERM384,16383
#define SQLITE_ABORT SQLITE_ABORT385,16446
#define SQLITE_BUSY SQLITE_BUSY386,16520
#define SQLITE_LOCKED SQLITE_LOCKED387,16586
#define SQLITE_NOMEM SQLITE_NOMEM388,16658
#define SQLITE_READONLY SQLITE_READONLY389,16714
#define SQLITE_INTERRUPT SQLITE_INTERRUPT390,16789
#define SQLITE_IOERR SQLITE_IOERR391,16870
#define SQLITE_CORRUPT SQLITE_CORRUPT392,16945
#define SQLITE_NOTFOUND SQLITE_NOTFOUND393,17020
#define SQLITE_FULL SQLITE_FULL394,17094
#define SQLITE_CANTOPEN SQLITE_CANTOPEN395,17174
#define SQLITE_PROTOCOL SQLITE_PROTOCOL396,17245
#define SQLITE_EMPTY SQLITE_EMPTY397,17322
#define SQLITE_SCHEMA SQLITE_SCHEMA398,17378
#define SQLITE_TOOBIG SQLITE_TOOBIG399,17444
#define SQLITE_CONSTRAINT SQLITE_CONSTRAINT400,17516
#define SQLITE_MISMATCH SQLITE_MISMATCH401,17588
#define SQLITE_MISUSE SQLITE_MISUSE402,17645
#define SQLITE_NOLFS SQLITE_NOLFS403,17708
#define SQLITE_AUTH SQLITE_AUTH404,17785
#define SQLITE_FORMAT SQLITE_FORMAT405,17844
#define SQLITE_RANGE SQLITE_RANGE406,17914
#define SQLITE_NOTADB SQLITE_NOTADB407,17995
#define SQLITE_ROW SQLITE_ROW408,18073
#define SQLITE_DONE SQLITE_DONE409,18148
#define SQLITE_IOERR_READ SQLITE_IOERR_READ435,19380
#define SQLITE_IOERR_SHORT_READ SQLITE_IOERR_SHORT_READ436,19443
#define SQLITE_IOERR_WRITE SQLITE_IOERR_WRITE437,19506
#define SQLITE_IOERR_FSYNC SQLITE_IOERR_FSYNC438,19569
#define SQLITE_IOERR_DIR_FSYNC SQLITE_IOERR_DIR_FSYNC439,19632
#define SQLITE_IOERR_TRUNCATE SQLITE_IOERR_TRUNCATE440,19695
#define SQLITE_IOERR_FSTAT SQLITE_IOERR_FSTAT441,19758
#define SQLITE_IOERR_UNLOCK SQLITE_IOERR_UNLOCK442,19821
#define SQLITE_IOERR_RDLOCK SQLITE_IOERR_RDLOCK443,19884
#define SQLITE_IOERR_DELETE SQLITE_IOERR_DELETE444,19947
#define SQLITE_IOERR_BLOCKED SQLITE_IOERR_BLOCKED445,20011
#define SQLITE_IOERR_NOMEM SQLITE_IOERR_NOMEM446,20075
#define SQLITE_IOERR_ACCESS SQLITE_IOERR_ACCESS447,20139
#define SQLITE_IOERR_CHECKRESERVEDLOCK SQLITE_IOERR_CHECKRESERVEDLOCK448,20203
#define SQLITE_IOERR_LOCK SQLITE_IOERR_LOCK449,20267
#define SQLITE_IOERR_CLOSE SQLITE_IOERR_CLOSE450,20331
#define SQLITE_IOERR_DIR_CLOSE SQLITE_IOERR_DIR_CLOSE451,20395
#define SQLITE_LOCKED_SHAREDCACHE SQLITE_LOCKED_SHAREDCACHE452,20459
#define SQLITE_OPEN_READONLY SQLITE_OPEN_READONLY462,20760
#define SQLITE_OPEN_READWRITE SQLITE_OPEN_READWRITE463,20840
#define SQLITE_OPEN_CREATE SQLITE_OPEN_CREATE464,20920
#define SQLITE_OPEN_DELETEONCLOSE SQLITE_OPEN_DELETEONCLOSE465,21000
#define SQLITE_OPEN_EXCLUSIVE SQLITE_OPEN_EXCLUSIVE466,21064
#define SQLITE_OPEN_AUTOPROXY SQLITE_OPEN_AUTOPROXY467,21128
#define SQLITE_OPEN_MAIN_DB SQLITE_OPEN_MAIN_DB468,21192
#define SQLITE_OPEN_TEMP_DB SQLITE_OPEN_TEMP_DB469,21256
#define SQLITE_OPEN_TRANSIENT_DB SQLITE_OPEN_TRANSIENT_DB470,21320
#define SQLITE_OPEN_MAIN_JOURNAL SQLITE_OPEN_MAIN_JOURNAL471,21384
#define SQLITE_OPEN_TEMP_JOURNAL SQLITE_OPEN_TEMP_JOURNAL472,21448
#define SQLITE_OPEN_SUBJOURNAL SQLITE_OPEN_SUBJOURNAL473,21512
#define SQLITE_OPEN_MASTER_JOURNAL SQLITE_OPEN_MASTER_JOURNAL474,21576
#define SQLITE_OPEN_NOMUTEX SQLITE_OPEN_NOMUTEX475,21640
#define SQLITE_OPEN_FULLMUTEX SQLITE_OPEN_FULLMUTEX476,21720
#define SQLITE_OPEN_SHAREDCACHE SQLITE_OPEN_SHAREDCACHE477,21800
#define SQLITE_OPEN_PRIVATECACHE SQLITE_OPEN_PRIVATECACHE478,21880
#define SQLITE_IOCAP_ATOMIC SQLITE_IOCAP_ATOMIC500,22840
#define SQLITE_IOCAP_ATOMIC512 SQLITE_IOCAP_ATOMIC512501,22888
#define SQLITE_IOCAP_ATOMIC1K SQLITE_IOCAP_ATOMIC1K502,22936
#define SQLITE_IOCAP_ATOMIC2K SQLITE_IOCAP_ATOMIC2K503,22984
#define SQLITE_IOCAP_ATOMIC4K SQLITE_IOCAP_ATOMIC4K504,23032
#define SQLITE_IOCAP_ATOMIC8K SQLITE_IOCAP_ATOMIC8K505,23080
#define SQLITE_IOCAP_ATOMIC16K SQLITE_IOCAP_ATOMIC16K506,23128
#define SQLITE_IOCAP_ATOMIC32K SQLITE_IOCAP_ATOMIC32K507,23176
#define SQLITE_IOCAP_ATOMIC64K SQLITE_IOCAP_ATOMIC64K508,23224
#define SQLITE_IOCAP_SAFE_APPEND SQLITE_IOCAP_SAFE_APPEND509,23272
#define SQLITE_IOCAP_SEQUENTIAL SQLITE_IOCAP_SEQUENTIAL510,23320
#define SQLITE_LOCK_NONE SQLITE_LOCK_NONE519,23573
#define SQLITE_LOCK_SHARED SQLITE_LOCK_SHARED520,23609
#define SQLITE_LOCK_RESERVED SQLITE_LOCK_RESERVED521,23645
#define SQLITE_LOCK_PENDING SQLITE_LOCK_PENDING522,23681
#define SQLITE_LOCK_EXCLUSIVE SQLITE_LOCK_EXCLUSIVE523,23717
#define SQLITE_SYNC_NORMAL SQLITE_SYNC_NORMAL539,24349
#define SQLITE_SYNC_FULL SQLITE_SYNC_FULL540,24391
#define SQLITE_SYNC_DATAONLY SQLITE_SYNC_DATAONLY541,24433
typedef struct sqlite3_file sqlite3_file;sqlite3_file554,24903
struct sqlite3_file {sqlite3_file555,24945
  const struct sqlite3_io_methods *pMethods;  /* Methods for an open file */pMethods556,24967
typedef struct sqlite3_io_methods sqlite3_io_methods;sqlite3_io_methods646,29087
struct sqlite3_io_methods {sqlite3_io_methods647,29141
  int iVersion;iVersion648,29169
  int (*xClose)(sqlite3_file*);xClose649,29185
  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);xRead650,29217
  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);xWrite651,29286
  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);xTruncate652,29362
  int (*xSync)(sqlite3_file*, int flags);xSync653,29417
  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);xFileSize654,29459
  int (*xLock)(sqlite3_file*, int);xLock655,29516
  int (*xUnlock)(sqlite3_file*, int);xUnlock656,29552
  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);xCheckReservedLock657,29590
  int (*xFileControl)(sqlite3_file*, int op, void *pArg);xFileControl658,29648
  int (*xSectorSize)(sqlite3_file*);xSectorSize659,29706
  int (*xDeviceCharacteristics)(sqlite3_file*);xDeviceCharacteristics660,29743
#define SQLITE_FCNTL_LOCKSTATE SQLITE_FCNTL_LOCKSTATE679,30502
#define SQLITE_GET_LOCKPROXYFILE SQLITE_GET_LOCKPROXYFILE680,30542
#define SQLITE_SET_LOCKPROXYFILE SQLITE_SET_LOCKPROXYFILE681,30582
#define SQLITE_LAST_ERRNO SQLITE_LAST_ERRNO682,30622
typedef struct sqlite3_mutex sqlite3_mutex;sqlite3_mutex694,31008
typedef struct sqlite3_vfs sqlite3_vfs;sqlite3_vfs825,37237
struct sqlite3_vfs {sqlite3_vfs826,37277
  int iVersion;            /* Structure version number */iVersion827,37298
  int szOsFile;            /* Size of subclassed sqlite3_file */szOsFile828,37356
  int mxPathname;          /* Maximum file pathname length */mxPathname829,37421
  sqlite3_vfs *pNext;      /* Next registered VFS */pNext830,37483
  const char *zName;       /* Name of this virtual file system */zName831,37536
  void *pAppData;          /* Pointer to application-specific data */pAppData832,37602
  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,xOpen833,37672
  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);xDelete835,37778
  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);xAccess836,37842
  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);xFullPathname837,37918
  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);xDlOpen838,37997
  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);xDlError839,38054
  void (*xDlClose)(sqlite3_vfs*, void*);xDlClose841,38182
  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);xRandomness842,38223
  int (*xSleep)(sqlite3_vfs*, int microseconds);xSleep843,38282
  int (*xCurrentTime)(sqlite3_vfs*, double*);xCurrentTime844,38331
  int (*xGetLastError)(sqlite3_vfs*, int, char *);xGetLastError845,38377
#define SQLITE_ACCESS_EXISTS SQLITE_ACCESS_EXISTS863,39087
#define SQLITE_ACCESS_READWRITE SQLITE_ACCESS_READWRITE864,39121
#define SQLITE_ACCESS_READ SQLITE_ACCESS_READ865,39155
typedef struct sqlite3_mem_methods sqlite3_mem_methods;sqlite3_mem_methods1072,49770
struct sqlite3_mem_methods {sqlite3_mem_methods1073,49826
  void *(*xMalloc)(int);         /* Memory allocation function */xMalloc1074,49855
  void (*xFree)(void*);          /* Free a prior allocation */xFree1075,49921
  void *(*xRealloc)(void*,int);  /* Resize an allocation */xRealloc1076,49984
  int (*xSize)(void*);           /* Return the size of an allocation */xSize1077,50044
  int (*xRoundup)(int);          /* Round up request size to allocation size */xRoundup1078,50116
  int (*xInit)(void*);           /* Initialize the memory allocator */xInit1079,50196
  void (*xShutdown)(void*);      /* Deinitialize the memory allocator */xShutdown1080,50267
  void *pAppData;                /* Argument to xInit() and xShutdown() */pAppData1081,50340
#define SQLITE_CONFIG_SINGLETHREAD SQLITE_CONFIG_SINGLETHREAD1274,60961
#define SQLITE_CONFIG_MULTITHREAD SQLITE_CONFIG_MULTITHREAD1275,61010
#define SQLITE_CONFIG_SERIALIZED SQLITE_CONFIG_SERIALIZED1276,61059
#define SQLITE_CONFIG_MALLOC SQLITE_CONFIG_MALLOC1277,61108
#define SQLITE_CONFIG_GETMALLOC SQLITE_CONFIG_GETMALLOC1278,61174
#define SQLITE_CONFIG_SCRATCH SQLITE_CONFIG_SCRATCH1279,61240
#define SQLITE_CONFIG_PAGECACHE SQLITE_CONFIG_PAGECACHE1280,61306
#define SQLITE_CONFIG_HEAP SQLITE_CONFIG_HEAP1281,61372
#define SQLITE_CONFIG_MEMSTATUS SQLITE_CONFIG_MEMSTATUS1282,61443
#define SQLITE_CONFIG_MUTEX SQLITE_CONFIG_MUTEX1283,61496
#define SQLITE_CONFIG_GETMUTEX SQLITE_CONFIG_GETMUTEX1284,61564
#define SQLITE_CONFIG_LOOKASIDE SQLITE_CONFIG_LOOKASIDE1286,61699
#define SQLITE_CONFIG_PCACHE SQLITE_CONFIG_PCACHE1287,61752
#define SQLITE_CONFIG_GETPCACHE SQLITE_CONFIG_GETPCACHE1288,61821
#define SQLITE_CONFIG_LOG SQLITE_CONFIG_LOG1289,61890
#define SQLITE_DBCONFIG_LOOKASIDE SQLITE_DBCONFIG_LOOKASIDE1324,63559
#define SQLITE_DENY SQLITE_DENY2010,96134
#define SQLITE_IGNORE SQLITE_IGNORE2011,96204
#define SQLITE_CREATE_INDEX SQLITE_CREATE_INDEX2033,97329
#define SQLITE_CREATE_TABLE SQLITE_CREATE_TABLE2034,97408
#define SQLITE_CREATE_TEMP_INDEX SQLITE_CREATE_TEMP_INDEX2035,97487
#define SQLITE_CREATE_TEMP_TABLE SQLITE_CREATE_TEMP_TABLE2036,97566
#define SQLITE_CREATE_TEMP_TRIGGER SQLITE_CREATE_TEMP_TRIGGER2037,97645
#define SQLITE_CREATE_TEMP_VIEW SQLITE_CREATE_TEMP_VIEW2038,97724
#define SQLITE_CREATE_TRIGGER SQLITE_CREATE_TRIGGER2039,97803
#define SQLITE_CREATE_VIEW SQLITE_CREATE_VIEW2040,97882
#define SQLITE_DELETE SQLITE_DELETE2041,97961
#define SQLITE_DROP_INDEX SQLITE_DROP_INDEX2042,98040
#define SQLITE_DROP_TABLE SQLITE_DROP_TABLE2043,98119
#define SQLITE_DROP_TEMP_INDEX SQLITE_DROP_TEMP_INDEX2044,98198
#define SQLITE_DROP_TEMP_TABLE SQLITE_DROP_TEMP_TABLE2045,98277
#define SQLITE_DROP_TEMP_TRIGGER SQLITE_DROP_TEMP_TRIGGER2046,98356
#define SQLITE_DROP_TEMP_VIEW SQLITE_DROP_TEMP_VIEW2047,98435
#define SQLITE_DROP_TRIGGER SQLITE_DROP_TRIGGER2048,98514
#define SQLITE_DROP_VIEW SQLITE_DROP_VIEW2049,98593
#define SQLITE_INSERT SQLITE_INSERT2050,98672
#define SQLITE_PRAGMA SQLITE_PRAGMA2051,98751
#define SQLITE_READ SQLITE_READ2052,98830
#define SQLITE_SELECT SQLITE_SELECT2053,98909
#define SQLITE_TRANSACTION SQLITE_TRANSACTION2054,98988
#define SQLITE_UPDATE SQLITE_UPDATE2055,99067
#define SQLITE_ATTACH SQLITE_ATTACH2056,99146
#define SQLITE_DETACH SQLITE_DETACH2057,99225
#define SQLITE_ALTER_TABLE SQLITE_ALTER_TABLE2058,99304
#define SQLITE_REINDEX SQLITE_REINDEX2059,99383
#define SQLITE_ANALYZE SQLITE_ANALYZE2060,99462
#define SQLITE_CREATE_VTABLE SQLITE_CREATE_VTABLE2061,99541
#define SQLITE_DROP_VTABLE SQLITE_DROP_VTABLE2062,99620
#define SQLITE_FUNCTION SQLITE_FUNCTION2063,99699
#define SQLITE_SAVEPOINT SQLITE_SAVEPOINT2064,99778
#define SQLITE_COPY SQLITE_COPY2065,99857
typedef struct sqlite3_stmt sqlite3_stmt;sqlite3_stmt2278,110086
#define SQLITE_LIMIT_LENGTH SQLITE_LIMIT_LENGTH2365,113702
#define SQLITE_LIMIT_SQL_LENGTH SQLITE_LIMIT_SQL_LENGTH2366,113751
#define SQLITE_LIMIT_COLUMN SQLITE_LIMIT_COLUMN2367,113800
#define SQLITE_LIMIT_EXPR_DEPTH SQLITE_LIMIT_EXPR_DEPTH2368,113849
#define SQLITE_LIMIT_COMPOUND_SELECT SQLITE_LIMIT_COMPOUND_SELECT2369,113898
#define SQLITE_LIMIT_VDBE_OP SQLITE_LIMIT_VDBE_OP2370,113947
#define SQLITE_LIMIT_FUNCTION_ARG SQLITE_LIMIT_FUNCTION_ARG2371,113996
#define SQLITE_LIMIT_ATTACHED SQLITE_LIMIT_ATTACHED2372,114045
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH SQLITE_LIMIT_LIKE_PATTERN_LENGTH2373,114094
#define SQLITE_LIMIT_VARIABLE_NUMBER SQLITE_LIMIT_VARIABLE_NUMBER2374,114143
#define SQLITE_LIMIT_TRIGGER_DEPTH SQLITE_LIMIT_TRIGGER_DEPTH2375,114192
typedef struct Mem sqlite3_value;sqlite3_value2532,121883
typedef struct sqlite3_context sqlite3_context;sqlite3_context2546,122465
#define SQLITE_INTEGER SQLITE_INTEGER2923,139578
#define SQLITE_FLOAT SQLITE_FLOAT2924,139604
#define SQLITE_BLOB SQLITE_BLOB2925,139630
#define SQLITE_NULL SQLITE_NULL2926,139656
# undef SQLITE_TEXTSQLITE_TEXT2928,139701
# define SQLITE_TEXT SQLITE_TEXT2930,139727
#define SQLITE3_TEXT SQLITE3_TEXT2932,139761
#define SQLITE_UTF8 SQLITE_UTF83250,155612
#define SQLITE_UTF16LE SQLITE_UTF16LE3251,155644
#define SQLITE_UTF16BE SQLITE_UTF16BE3252,155676
#define SQLITE_UTF16 SQLITE_UTF163253,155708
#define SQLITE_ANY SQLITE_ANY3254,155771
#define SQLITE_UTF16_ALIGNED SQLITE_UTF16_ALIGNED3255,155841
typedef void (*sqlite3_destructor_type)(void*);sqlite3_destructor_type3460,165580
#define SQLITE_STATIC SQLITE_STATIC3461,165628
#define SQLITE_TRANSIENT SQLITE_TRANSIENT3462,165684
SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;sqlite3_temp_directory3782,180404
typedef struct sqlite3_vtab sqlite3_vtab;sqlite3_vtab4175,197727
typedef struct sqlite3_index_info sqlite3_index_info;sqlite3_index_info4176,197769
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;sqlite3_vtab_cursor4177,197823
typedef struct sqlite3_module sqlite3_module;sqlite3_module4178,197879
struct sqlite3_module {sqlite3_module4197,198649
  int iVersion;iVersion4198,198673
  int (*xCreate)(sqlite3*, void *pAux,xCreate4199,198689
  int (*xConnect)(sqlite3*, void *pAux,xConnect4202,198824
  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);xBestIndex4205,198960
  int (*xDisconnect)(sqlite3_vtab *pVTab);xDisconnect4206,199023
  int (*xDestroy)(sqlite3_vtab *pVTab);xDestroy4207,199066
  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);xOpen4208,199106
  int (*xClose)(sqlite3_vtab_cursor*);xClose4209,199175
  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,xFilter4210,199214
  int (*xNext)(sqlite3_vtab_cursor*);xNext4212,199334
  int (*xEof)(sqlite3_vtab_cursor*);xEof4213,199372
  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);xColumn4214,199409
  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);xRowid4215,199472
  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);xUpdate4216,199534
  int (*xBegin)(sqlite3_vtab *pVTab);xBegin4217,199608
  int (*xSync)(sqlite3_vtab *pVTab);xSync4218,199646
  int (*xCommit)(sqlite3_vtab *pVTab);xCommit4219,199683
  int (*xRollback)(sqlite3_vtab *pVTab);xRollback4220,199722
  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,xFindFunction4221,199763
  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);xRename4224,199952
struct sqlite3_index_info {sqlite3_index_info4278,202397
  int nConstraint;           /* Number of entries in aConstraint */nConstraint4280,202440
  struct sqlite3_index_constraint {sqlite3_index_constraint4281,202508
     int iColumn;              /* Column on left-hand side of constraint */iColumn4282,202544
     unsigned char op;         /* Constraint operator */op4283,202620
     unsigned char usable;     /* True if this constraint is usable */usable4284,202677
     int iTermOffset;          /* Used internally - xBestIndex should ignore */iTermOffset4285,202748
  } *aConstraint;            /* Table of WHERE clause constraints */aConstraint4286,202828
  int nOrderBy;              /* Number of terms in the ORDER BY clause */nOrderBy4287,202897
  struct sqlite3_index_orderby {sqlite3_index_orderby4288,202971
     int iColumn;              /* Column number */iColumn4289,203004
     unsigned char desc;       /* True for DESC.  False for ASC. */desc4290,203055
  } *aOrderBy;               /* The ORDER BY clause */aOrderBy4291,203123
  struct sqlite3_index_constraint_usage {sqlite3_index_constraint_usage4293,203194
    int argvIndex;           /* if >0, constraint is part of argv to xFilter */argvIndex4294,203236
    unsigned char omit;      /* Do not code a test for this constraint */omit4295,203316
  } *aConstraintUsage;aConstraintUsage4296,203390
  int idxNum;                /* Number used to identify the index */idxNum4297,203413
  char *idxStr;              /* String, possibly obtained from sqlite3_malloc */idxStr4298,203482
  int needToFreeIdxStr;      /* Free idxStr using sqlite3_free() if true */needToFreeIdxStr4299,203563
  int orderByConsumed;       /* True if output is already ordered */orderByConsumed4300,203639
  double estimatedCost;      /* Estimated cost of using this index */estimatedCost4301,203708
#define SQLITE_INDEX_CONSTRAINT_EQ SQLITE_INDEX_CONSTRAINT_EQ4303,203781
#define SQLITE_INDEX_CONSTRAINT_GT SQLITE_INDEX_CONSTRAINT_GT4304,203821
#define SQLITE_INDEX_CONSTRAINT_LE SQLITE_INDEX_CONSTRAINT_LE4305,203861
#define SQLITE_INDEX_CONSTRAINT_LT SQLITE_INDEX_CONSTRAINT_LT4306,203901
#define SQLITE_INDEX_CONSTRAINT_GE SQLITE_INDEX_CONSTRAINT_GE4307,203942
#define SQLITE_INDEX_CONSTRAINT_MATCH SQLITE_INDEX_CONSTRAINT_MATCH4308,203983
struct sqlite3_vtab {sqlite3_vtab4367,206760
  const sqlite3_module *pModule;  /* The module for this virtual table */pModule4368,206782
  int nRef;                       /* NO LONGER USED */nRef4369,206856
  char *zErrMsg;                  /* Error message from sqlite3_mprintf() */zErrMsg4370,206911
struct sqlite3_vtab_cursor {sqlite3_vtab_cursor4392,207865
  sqlite3_vtab *pVtab;      /* Virtual table of this cursor */pVtab4393,207894
typedef struct sqlite3_blob sqlite3_blob;sqlite3_blob4451,210301
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;sqlite3_mutex_methods4843,228225
struct sqlite3_mutex_methods {sqlite3_mutex_methods4844,228285
  int (*xMutexInit)(void);xMutexInit4845,228316
  int (*xMutexEnd)(void);xMutexEnd4846,228343
  sqlite3_mutex *(*xMutexAlloc)(int);xMutexAlloc4847,228369
  void (*xMutexFree)(sqlite3_mutex *);xMutexFree4848,228407
  void (*xMutexEnter)(sqlite3_mutex *);xMutexEnter4849,228446
  int (*xMutexTry)(sqlite3_mutex *);xMutexTry4850,228486
  void (*xMutexLeave)(sqlite3_mutex *);xMutexLeave4851,228523
  int (*xMutexHeld)(sqlite3_mutex *);xMutexHeld4852,228563
  int (*xMutexNotheld)(sqlite3_mutex *);xMutexNotheld4853,228601
#define SQLITE_MUTEX_FAST SQLITE_MUTEX_FAST4900,230636
#define SQLITE_MUTEX_RECURSIVE SQLITE_MUTEX_RECURSIVE4901,230676
#define SQLITE_MUTEX_STATIC_MASTER SQLITE_MUTEX_STATIC_MASTER4902,230716
#define SQLITE_MUTEX_STATIC_MEM SQLITE_MUTEX_STATIC_MEM4903,230756
#define SQLITE_MUTEX_STATIC_MEM2 SQLITE_MUTEX_STATIC_MEM24904,230820
#define SQLITE_MUTEX_STATIC_OPEN SQLITE_MUTEX_STATIC_OPEN4905,230876
#define SQLITE_MUTEX_STATIC_PRNG SQLITE_MUTEX_STATIC_PRNG4906,230942
#define SQLITE_MUTEX_STATIC_LRU SQLITE_MUTEX_STATIC_LRU4907,231006
#define SQLITE_MUTEX_STATIC_LRU2 SQLITE_MUTEX_STATIC_LRU24908,231067
#define SQLITE_TESTCTRL_FIRST SQLITE_TESTCTRL_FIRST4979,234164
#define SQLITE_TESTCTRL_PRNG_SAVE SQLITE_TESTCTRL_PRNG_SAVE4980,234215
#define SQLITE_TESTCTRL_PRNG_RESTORE SQLITE_TESTCTRL_PRNG_RESTORE4981,234266
#define SQLITE_TESTCTRL_PRNG_RESET SQLITE_TESTCTRL_PRNG_RESET4982,234317
#define SQLITE_TESTCTRL_BITVEC_TEST SQLITE_TESTCTRL_BITVEC_TEST4983,234368
#define SQLITE_TESTCTRL_FAULT_INSTALL SQLITE_TESTCTRL_FAULT_INSTALL4984,234419
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS4985,234470
#define SQLITE_TESTCTRL_PENDING_BYTE SQLITE_TESTCTRL_PENDING_BYTE4986,234521
#define SQLITE_TESTCTRL_ASSERT SQLITE_TESTCTRL_ASSERT4987,234572
#define SQLITE_TESTCTRL_ALWAYS SQLITE_TESTCTRL_ALWAYS4988,234623
#define SQLITE_TESTCTRL_RESERVE SQLITE_TESTCTRL_RESERVE4989,234674
#define SQLITE_TESTCTRL_OPTIMIZATIONS SQLITE_TESTCTRL_OPTIMIZATIONS4990,234725
#define SQLITE_TESTCTRL_ISKEYWORD SQLITE_TESTCTRL_ISKEYWORD4991,234776
#define SQLITE_TESTCTRL_LAST SQLITE_TESTCTRL_LAST4992,234827
#define SQLITE_STATUS_MEMORY_USED SQLITE_STATUS_MEMORY_USED5104,240229
#define SQLITE_STATUS_PAGECACHE_USED SQLITE_STATUS_PAGECACHE_USED5105,240274
#define SQLITE_STATUS_PAGECACHE_OVERFLOW SQLITE_STATUS_PAGECACHE_OVERFLOW5106,240319
#define SQLITE_STATUS_SCRATCH_USED SQLITE_STATUS_SCRATCH_USED5107,240364
#define SQLITE_STATUS_SCRATCH_OVERFLOW SQLITE_STATUS_SCRATCH_OVERFLOW5108,240409
#define SQLITE_STATUS_MALLOC_SIZE SQLITE_STATUS_MALLOC_SIZE5109,240454
#define SQLITE_STATUS_PARSER_STACK SQLITE_STATUS_PARSER_STACK5110,240499
#define SQLITE_STATUS_PAGECACHE_SIZE SQLITE_STATUS_PAGECACHE_SIZE5111,240544
#define SQLITE_STATUS_SCRATCH_SIZE SQLITE_STATUS_SCRATCH_SIZE5112,240589
#define SQLITE_DBSTATUS_LOOKASIDE_USED SQLITE_DBSTATUS_LOOKASIDE_USED5153,242257
#define SQLITE_STMTSTATUS_FULLSCAN_STEP SQLITE_STMTSTATUS_FULLSCAN_STEP5204,244279
#define SQLITE_STMTSTATUS_SORT SQLITE_STMTSTATUS_SORT5205,244325
typedef struct sqlite3_pcache sqlite3_pcache;sqlite3_pcache5219,244761
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;sqlite3_pcache_methods5349,251801
struct sqlite3_pcache_methods {sqlite3_pcache_methods5350,251863
  void *pArg;pArg5351,251895
  int (*xInit)(void*);xInit5352,251909
  void (*xShutdown)(void*);xShutdown5353,251932
  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);xCreate5354,251960
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize5355,252018
  int (*xPagecount)(sqlite3_pcache*);xPagecount5356,252073
  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch5357,252111
  void (*xUnpin)(sqlite3_pcache*, void*, int discard);xUnpin5358,252177
  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);xRekey5359,252232
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate5360,252308
  void (*xDestroy)(sqlite3_pcache*);xDestroy5361,252363
typedef struct sqlite3_backup sqlite3_backup;sqlite3_backup5375,252755
# undef doubledouble5727,271133

inst/include/sqlite3ext.h,21592
#define _SQLITE3EXT_H__SQLITE3EXT_H_19,664
typedef struct sqlite3_api_routines sqlite3_api_routines;sqlite3_api_routines22,709
struct sqlite3_api_routines {sqlite3_api_routines34,1141
  void * (*aggregate_context)(sqlite3_context*,int nBytes);aggregate_context35,1171
  int  (*aggregate_count)(sqlite3_context*);aggregate_count36,1231
  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));bind_blob37,1276
  int  (*bind_double)(sqlite3_stmt*,int,double);bind_double38,1349
  int  (*bind_int)(sqlite3_stmt*,int,int);bind_int39,1398
  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);bind_int6440,1441
  int  (*bind_null)(sqlite3_stmt*,int);bind_null41,1495
  int  (*bind_parameter_count)(sqlite3_stmt*);bind_parameter_count42,1535
  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);bind_parameter_index43,1582
  const char * (*bind_parameter_name)(sqlite3_stmt*,int);bind_parameter_name44,1646
  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));bind_text45,1704
  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));bind_text1646,1777
  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);bind_value47,1850
  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);busy_handler48,1912
  int  (*busy_timeout)(sqlite3*,int ms);busy_timeout49,1970
  int  (*changes)(sqlite3*);changes50,2011
  int  (*close)(sqlite3*);close51,2040
  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const char*));collation_needed52,2067
  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const void*));collation_needed1653,2160
  const void * (*column_blob)(sqlite3_stmt*,int iCol);column_blob54,2255
  int  (*column_bytes)(sqlite3_stmt*,int iCol);column_bytes55,2310
  int  (*column_bytes16)(sqlite3_stmt*,int iCol);column_bytes1656,2358
  int  (*column_count)(sqlite3_stmt*pStmt);column_count57,2408
  const char * (*column_database_name)(sqlite3_stmt*,int);column_database_name58,2452
  const void * (*column_database_name16)(sqlite3_stmt*,int);column_database_name1659,2511
  const char * (*column_decltype)(sqlite3_stmt*,int i);column_decltype60,2572
  const void * (*column_decltype16)(sqlite3_stmt*,int);column_decltype1661,2628
  double  (*column_double)(sqlite3_stmt*,int iCol);column_double62,2684
  int  (*column_int)(sqlite3_stmt*,int iCol);column_int63,2736
  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);column_int6464,2782
  const char * (*column_name)(sqlite3_stmt*,int);column_name65,2839
  const void * (*column_name16)(sqlite3_stmt*,int);column_name1666,2889
  const char * (*column_origin_name)(sqlite3_stmt*,int);column_origin_name67,2941
  const void * (*column_origin_name16)(sqlite3_stmt*,int);column_origin_name1668,2998
  const char * (*column_table_name)(sqlite3_stmt*,int);column_table_name69,3057
  const void * (*column_table_name16)(sqlite3_stmt*,int);column_table_name1670,3113
  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);column_text71,3171
  const void * (*column_text16)(sqlite3_stmt*,int iCol);column_text1672,3235
  int  (*column_type)(sqlite3_stmt*,int iCol);column_type73,3292
  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);column_value74,3339
  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);commit_hook75,3397
  int  (*complete)(const char*sql);complete76,3452
  int  (*complete16)(const void*sql);complete1677,3488
  int  (*create_collation)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*));create_collation78,3526
  int  (*create_collation16)(sqlite3*,const void*,int,void*,int(*)(void*,int,const void*,int,const void*));create_collation1679,3632
  int  (*create_function)(sqlite3*,const char*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));create_function80,3740
  int  (*create_function16)(sqlite3*,const void*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));create_function1681,3940
  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);create_module82,4142
  int  (*data_count)(sqlite3_stmt*pStmt);data_count83,4216
  sqlite3 * (*db_handle)(sqlite3_stmt*);db_handle84,4258
  int (*declare_vtab)(sqlite3*,const char*);declare_vtab85,4299
  int  (*enable_shared_cache)(int);enable_shared_cache86,4344
  int  (*errcode)(sqlite3*db);errcode87,4380
  const char * (*errmsg)(sqlite3*);errmsg88,4411
  const void * (*errmsg16)(sqlite3*);errmsg1689,4447
  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);exec90,4485
  int  (*expired)(sqlite3_stmt*);expired91,4553
  int  (*finalize)(sqlite3_stmt*pStmt);finalize92,4587
  void  (*free)(void*);free93,4627
  void  (*free_table)(char**result);free_table94,4651
  int  (*get_autocommit)(sqlite3*);get_autocommit95,4688
  void * (*get_auxdata)(sqlite3_context*,int);get_auxdata96,4724
  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);get_table97,4771
  int  (*global_recover)(void);global_recover98,4839
  void  (*interruptx)(sqlite3*);interruptx99,4871
  sqlite_int64  (*last_insert_rowid)(sqlite3*);last_insert_rowid100,4904
  const char * (*libversion)(void);libversion101,4952
  int  (*libversion_number)(void);libversion_number102,4988
  void *(*malloc)(int);malloc103,5023
  char * (*mprintf)(const char*,...);mprintf104,5047
  int  (*open)(const char*,sqlite3**);open105,5085
  int  (*open16)(const void*,sqlite3**);open16106,5124
  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);prepare107,5165
  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);prepare16108,5238
  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);profile109,5313
  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);progress_handler110,5391
  void *(*realloc)(void*,int);realloc111,5454
  int  (*reset)(sqlite3_stmt*pStmt);reset112,5485
  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));result_blob113,5522
  void  (*result_double)(sqlite3_context*,double);result_double114,5595
  void  (*result_error)(sqlite3_context*,const char*,int);result_error115,5646
  void  (*result_error16)(sqlite3_context*,const void*,int);result_error16116,5705
  void  (*result_int)(sqlite3_context*,int);result_int117,5766
  void  (*result_int64)(sqlite3_context*,sqlite_int64);result_int64118,5811
  void  (*result_null)(sqlite3_context*);result_null119,5867
  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));result_text120,5909
  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));result_text16121,5982
  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));result_text16be122,6057
  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));result_text16le123,6134
  void  (*result_value)(sqlite3_context*,sqlite3_value*);result_value124,6211
  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);rollback_hook125,6269
  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,const char*,const char*),void*);set_authorizer126,6327
  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));set_auxdata127,6435
  char * (*snprintf)(int,char*,const char*,...);snprintf128,6503
  int  (*step)(sqlite3_stmt*);step129,6552
  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,char const**,char const**,int*,int*,int*);table_column_metadata130,6583
  void  (*thread_cleanup)(void);thread_cleanup131,6703
  int  (*total_changes)(sqlite3*);total_changes132,6736
  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);trace133,6771
  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);transfer_bindings134,6839
  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,sqlite_int64),void*);update_hook135,6897
  void * (*user_data)(sqlite3_context*);user_data136,6995
  const void * (*value_blob)(sqlite3_value*);value_blob137,7036
  int  (*value_bytes)(sqlite3_value*);value_bytes138,7082
  int  (*value_bytes16)(sqlite3_value*);value_bytes16139,7121
  double  (*value_double)(sqlite3_value*);value_double140,7162
  int  (*value_int)(sqlite3_value*);value_int141,7205
  sqlite_int64  (*value_int64)(sqlite3_value*);value_int64142,7242
  int  (*value_numeric_type)(sqlite3_value*);value_numeric_type143,7290
  const unsigned char * (*value_text)(sqlite3_value*);value_text144,7336
  const void * (*value_text16)(sqlite3_value*);value_text16145,7391
  const void * (*value_text16be)(sqlite3_value*);value_text16be146,7439
  const void * (*value_text16le)(sqlite3_value*);value_text16le147,7489
  int  (*value_type)(sqlite3_value*);value_type148,7539
  char *(*vmprintf)(const char*,va_list);vmprintf149,7577
  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);overload_function151,7637
  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);prepare_v2153,7732
  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);prepare16_v2154,7807
  int (*clear_bindings)(sqlite3_stmt*);clear_bindings155,7884
  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,void (*xDestroy)(void *));create_module_v2157,7947
  int (*bind_zeroblob)(sqlite3_stmt*,int,int);bind_zeroblob159,8072
  int (*blob_bytes)(sqlite3_blob*);blob_bytes160,8119
  int (*blob_close)(sqlite3_blob*);blob_close161,8155
  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,int,sqlite3_blob**);blob_open162,8191
  int (*blob_read)(sqlite3_blob*,void*,int,int);blob_read163,8290
  int (*blob_write)(sqlite3_blob*,const void*,int,int);blob_write164,8339
  int (*create_collation_v2)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*),void(*)(void*));create_collation_v2165,8395
  int (*file_control)(sqlite3*,const char*,int,void*);file_control166,8518
  sqlite3_int64 (*memory_highwater)(int);memory_highwater167,8573
  sqlite3_int64 (*memory_used)(void);memory_used168,8615
  sqlite3_mutex *(*mutex_alloc)(int);mutex_alloc169,8653
  void (*mutex_enter)(sqlite3_mutex*);mutex_enter170,8691
  void (*mutex_free)(sqlite3_mutex*);mutex_free171,8730
  void (*mutex_leave)(sqlite3_mutex*);mutex_leave172,8768
  int (*mutex_try)(sqlite3_mutex*);mutex_try173,8807
  int (*open_v2)(const char*,sqlite3**,int,const char*);open_v2174,8843
  int (*release_memory)(int);release_memory175,8900
  void (*result_error_nomem)(sqlite3_context*);result_error_nomem176,8930
  void (*result_error_toobig)(sqlite3_context*);result_error_toobig177,8978
  int (*sleep)(int);sleep178,9027
  void (*soft_heap_limit)(int);soft_heap_limit179,9048
  sqlite3_vfs *(*vfs_find)(const char*);vfs_find180,9080
  int (*vfs_register)(sqlite3_vfs*,int);vfs_register181,9121
  int (*vfs_unregister)(sqlite3_vfs*);vfs_unregister182,9162
  int (*xthreadsafe)(void);xthreadsafe183,9201
  void (*result_zeroblob)(sqlite3_context*,int);result_zeroblob184,9229
  void (*result_error_code)(sqlite3_context*,int);result_error_code185,9278
  int (*test_control)(int, ...);test_control186,9329
  void (*randomness)(int,void*);randomness187,9362
  sqlite3 *(*context_db_handle)(sqlite3_context*);context_db_handle188,9395
  int (*extended_result_codes)(sqlite3*,int);extended_result_codes189,9446
  int (*limit)(sqlite3*,int,int);limit190,9492
  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);next_stmt191,9526
  const char *(*sql)(sqlite3_stmt*);sql192,9580
  int (*status)(int,int*,int*,int);status193,9617
#define sqlite3_aggregate_context sqlite3_aggregate_context208,10156
#define sqlite3_aggregate_count sqlite3_aggregate_count210,10257
#define sqlite3_bind_blob sqlite3_bind_blob212,10332
#define sqlite3_bind_double sqlite3_bind_double213,10394
#define sqlite3_bind_int sqlite3_bind_int214,10458
#define sqlite3_bind_int64 sqlite3_bind_int64215,10519
#define sqlite3_bind_null sqlite3_bind_null216,10582
#define sqlite3_bind_parameter_count sqlite3_bind_parameter_count217,10644
#define sqlite3_bind_parameter_index sqlite3_bind_parameter_index218,10717
#define sqlite3_bind_parameter_name sqlite3_bind_parameter_name219,10790
#define sqlite3_bind_text sqlite3_bind_text220,10862
#define sqlite3_bind_text16 sqlite3_bind_text16221,10924
#define sqlite3_bind_value sqlite3_bind_value222,10988
#define sqlite3_busy_handler sqlite3_busy_handler223,11051
#define sqlite3_busy_timeout sqlite3_busy_timeout224,11116
#define sqlite3_changes sqlite3_changes225,11181
#define sqlite3_close sqlite3_close226,11241
#define sqlite3_collation_needed sqlite3_collation_needed227,11299
#define sqlite3_collation_needed16 sqlite3_collation_needed16228,11368
#define sqlite3_column_blob sqlite3_column_blob229,11439
#define sqlite3_column_bytes sqlite3_column_bytes230,11503
#define sqlite3_column_bytes16 sqlite3_column_bytes16231,11568
#define sqlite3_column_count sqlite3_column_count232,11635
#define sqlite3_column_database_name sqlite3_column_database_name233,11700
#define sqlite3_column_database_name16 sqlite3_column_database_name16234,11773
#define sqlite3_column_decltype sqlite3_column_decltype235,11848
#define sqlite3_column_decltype16 sqlite3_column_decltype16236,11916
#define sqlite3_column_double sqlite3_column_double237,11986
#define sqlite3_column_int sqlite3_column_int238,12052
#define sqlite3_column_int64 sqlite3_column_int64239,12115
#define sqlite3_column_name sqlite3_column_name240,12180
#define sqlite3_column_name16 sqlite3_column_name16241,12244
#define sqlite3_column_origin_name sqlite3_column_origin_name242,12310
#define sqlite3_column_origin_name16 sqlite3_column_origin_name16243,12381
#define sqlite3_column_table_name sqlite3_column_table_name244,12454
#define sqlite3_column_table_name16 sqlite3_column_table_name16245,12524
#define sqlite3_column_text sqlite3_column_text246,12596
#define sqlite3_column_text16 sqlite3_column_text16247,12660
#define sqlite3_column_type sqlite3_column_type248,12726
#define sqlite3_column_value sqlite3_column_value249,12790
#define sqlite3_commit_hook sqlite3_commit_hook250,12855
#define sqlite3_complete sqlite3_complete251,12919
#define sqlite3_complete16 sqlite3_complete16252,12980
#define sqlite3_create_collation sqlite3_create_collation253,13043
#define sqlite3_create_collation16 sqlite3_create_collation16254,13112
#define sqlite3_create_function sqlite3_create_function255,13183
#define sqlite3_create_function16 sqlite3_create_function16256,13251
#define sqlite3_create_module sqlite3_create_module257,13321
#define sqlite3_create_module_v2 sqlite3_create_module_v2258,13387
#define sqlite3_data_count sqlite3_data_count259,13456
#define sqlite3_db_handle sqlite3_db_handle260,13519
#define sqlite3_declare_vtab sqlite3_declare_vtab261,13581
#define sqlite3_enable_shared_cache sqlite3_enable_shared_cache262,13646
#define sqlite3_errcode sqlite3_errcode263,13718
#define sqlite3_errmsg sqlite3_errmsg264,13778
#define sqlite3_errmsg16 sqlite3_errmsg16265,13837
#define sqlite3_exec sqlite3_exec266,13898
#define sqlite3_expired sqlite3_expired268,13986
#define sqlite3_finalize sqlite3_finalize270,14053
#define sqlite3_free sqlite3_free271,14114
#define sqlite3_free_table sqlite3_free_table272,14171
#define sqlite3_get_autocommit sqlite3_get_autocommit273,14234
#define sqlite3_get_auxdata sqlite3_get_auxdata274,14301
#define sqlite3_get_table sqlite3_get_table275,14365
#define sqlite3_global_recover sqlite3_global_recover277,14458
#define sqlite3_interrupt sqlite3_interrupt279,14532
#define sqlite3_last_insert_rowid sqlite3_last_insert_rowid280,14595
#define sqlite3_libversion sqlite3_libversion281,14665
#define sqlite3_libversion_number sqlite3_libversion_number282,14728
#define sqlite3_malloc sqlite3_malloc283,14798
#define sqlite3_mprintf sqlite3_mprintf284,14857
#define sqlite3_open sqlite3_open285,14917
#define sqlite3_open16 sqlite3_open16286,14974
#define sqlite3_prepare sqlite3_prepare287,15033
#define sqlite3_prepare16 sqlite3_prepare16288,15093
#define sqlite3_prepare_v2 sqlite3_prepare_v2289,15155
#define sqlite3_prepare16_v2 sqlite3_prepare16_v2290,15218
#define sqlite3_profile sqlite3_profile291,15283
#define sqlite3_progress_handler sqlite3_progress_handler292,15343
#define sqlite3_realloc sqlite3_realloc293,15412
#define sqlite3_reset sqlite3_reset294,15472
#define sqlite3_result_blob sqlite3_result_blob295,15530
#define sqlite3_result_double sqlite3_result_double296,15594
#define sqlite3_result_error sqlite3_result_error297,15660
#define sqlite3_result_error16 sqlite3_result_error16298,15725
#define sqlite3_result_int sqlite3_result_int299,15792
#define sqlite3_result_int64 sqlite3_result_int64300,15855
#define sqlite3_result_null sqlite3_result_null301,15920
#define sqlite3_result_text sqlite3_result_text302,15984
#define sqlite3_result_text16 sqlite3_result_text16303,16048
#define sqlite3_result_text16be sqlite3_result_text16be304,16114
#define sqlite3_result_text16le sqlite3_result_text16le305,16182
#define sqlite3_result_value sqlite3_result_value306,16250
#define sqlite3_rollback_hook sqlite3_rollback_hook307,16315
#define sqlite3_set_authorizer sqlite3_set_authorizer308,16381
#define sqlite3_set_auxdata sqlite3_set_auxdata309,16448
#define sqlite3_snprintf sqlite3_snprintf310,16512
#define sqlite3_step sqlite3_step311,16573
#define sqlite3_table_column_metadata sqlite3_table_column_metadata312,16630
#define sqlite3_thread_cleanup sqlite3_thread_cleanup313,16704
#define sqlite3_total_changes sqlite3_total_changes314,16771
#define sqlite3_trace sqlite3_trace315,16837
#define sqlite3_transfer_bindings sqlite3_transfer_bindings317,16926
#define sqlite3_update_hook sqlite3_update_hook319,17003
#define sqlite3_user_data sqlite3_user_data320,17067
#define sqlite3_value_blob sqlite3_value_blob321,17129
#define sqlite3_value_bytes sqlite3_value_bytes322,17192
#define sqlite3_value_bytes16 sqlite3_value_bytes16323,17256
#define sqlite3_value_double sqlite3_value_double324,17322
#define sqlite3_value_int sqlite3_value_int325,17387
#define sqlite3_value_int64 sqlite3_value_int64326,17449
#define sqlite3_value_numeric_type sqlite3_value_numeric_type327,17513
#define sqlite3_value_text sqlite3_value_text328,17584
#define sqlite3_value_text16 sqlite3_value_text16329,17647
#define sqlite3_value_text16be sqlite3_value_text16be330,17712
#define sqlite3_value_text16le sqlite3_value_text16le331,17779
#define sqlite3_value_type sqlite3_value_type332,17846
#define sqlite3_vmprintf sqlite3_vmprintf333,17909
#define sqlite3_overload_function sqlite3_overload_function334,17970
#define sqlite3_prepare_v2 sqlite3_prepare_v2335,18040
#define sqlite3_prepare16_v2 sqlite3_prepare16_v2336,18103
#define sqlite3_clear_bindings sqlite3_clear_bindings337,18168
#define sqlite3_bind_zeroblob sqlite3_bind_zeroblob338,18235
#define sqlite3_blob_bytes sqlite3_blob_bytes339,18301
#define sqlite3_blob_close sqlite3_blob_close340,18364
#define sqlite3_blob_open sqlite3_blob_open341,18427
#define sqlite3_blob_read sqlite3_blob_read342,18489
#define sqlite3_blob_write sqlite3_blob_write343,18551
#define sqlite3_create_collation_v2 sqlite3_create_collation_v2344,18614
#define sqlite3_file_control sqlite3_file_control345,18686
#define sqlite3_memory_highwater sqlite3_memory_highwater346,18751
#define sqlite3_memory_used sqlite3_memory_used347,18820
#define sqlite3_mutex_alloc sqlite3_mutex_alloc348,18884
#define sqlite3_mutex_enter sqlite3_mutex_enter349,18948
#define sqlite3_mutex_free sqlite3_mutex_free350,19012
#define sqlite3_mutex_leave sqlite3_mutex_leave351,19075
#define sqlite3_mutex_try sqlite3_mutex_try352,19139
#define sqlite3_open_v2 sqlite3_open_v2353,19201
#define sqlite3_release_memory sqlite3_release_memory354,19261
#define sqlite3_result_error_nomem sqlite3_result_error_nomem355,19328
#define sqlite3_result_error_toobig sqlite3_result_error_toobig356,19399
#define sqlite3_sleep sqlite3_sleep357,19471
#define sqlite3_soft_heap_limit sqlite3_soft_heap_limit358,19529
#define sqlite3_vfs_find sqlite3_vfs_find359,19597
#define sqlite3_vfs_register sqlite3_vfs_register360,19658
#define sqlite3_vfs_unregister sqlite3_vfs_unregister361,19723
#define sqlite3_threadsafe sqlite3_threadsafe362,19790
#define sqlite3_result_zeroblob sqlite3_result_zeroblob363,19854
#define sqlite3_result_error_code sqlite3_result_error_code364,19922
#define sqlite3_test_control sqlite3_test_control365,19992
#define sqlite3_randomness sqlite3_randomness366,20057
#define sqlite3_context_db_handle sqlite3_context_db_handle367,20120
#define sqlite3_extended_result_codes sqlite3_extended_result_codes368,20190
#define sqlite3_limit sqlite3_limit369,20264
#define sqlite3_next_stmt sqlite3_next_stmt370,20322
#define sqlite3_sql sqlite3_sql371,20384
#define sqlite3_status sqlite3_status372,20440
#define SQLITE_EXTENSION_INIT1 SQLITE_EXTENSION_INIT1375,20525
#define SQLITE_EXTENSION_INIT2(SQLITE_EXTENSION_INIT2376,20605

src/extensions/extension-functions.c,7774
#define COMPILE_SQLITE_EXTENSIONS_AS_LOADABLE_MODULE COMPILE_SQLITE_EXTENSIONS_AS_LOADABLE_MODULE111,4888
#define HAVE_ACOSH HAVE_ACOSH112,4943
#define HAVE_ASINH HAVE_ASINH113,4964
#define HAVE_ATANH HAVE_ATANH114,4985
#define HAVE_SINH HAVE_SINH115,5006
#define HAVE_COSH HAVE_COSH116,5026
#define HAVE_TANH HAVE_TANH117,5046
#define HAVE_LOG10 HAVE_LOG10118,5066
#define HAVE_ISBLANK HAVE_ISBLANK119,5087
#define SQLITE_SOUNDEX SQLITE_SOUNDEX120,5110
#define HAVE_TRIM HAVE_TRIM121,5135
#define _MAP_H__MAP_H_141,5532
typedef int(*cmp_func)(const void *, const void *);cmp_func150,5757
typedef void(*map_iterator)(void*, int64_t, void*);map_iterator151,5809
typedef struct node{node153,5862
  struct node *l;l154,5883
  struct node *r;r155,5901
  void* data;data156,5919
  int64_t count;count157,5933
} node;node158,5950
typedef struct map{map160,5959
  node *base;base161,5979
  cmp_func cmp;cmp162,5993
  short free;free163,6009
} map;map164,6023
typedef uint8_t         u8;u8200,6614
typedef uint16_t        u16;u16201,6642
typedef int64_t         i64;i64202,6671
static char *sqlite3StrDup( const char *z ) {sqlite3StrDup204,6701
static const u8 xtra_utf8_bytes[256]  = {xtra_utf8_bytes219,7144
static const int xtra_utf8_bits[] =  {xtra_utf8_bits254,8378
static const int utf_mask[] = {utf_mask267,8877
#define READ_UTF8(READ_UTF8275,9030
static int sqlite3ReadUtf8(const unsigned char *z){sqlite3ReadUtf8291,9804
#define SKIP_UTF8(SKIP_UTF8297,9899
static int sqlite3Utf8CharLen(const char *z, int nByte){sqlite3Utf8CharLen308,10344
#define sqliteNextChar(sqliteNextChar329,10808
#define sqliteCharVal(sqliteCharVal330,10866
#define GEN_MATH_WRAP_DOUBLE_1(GEN_MATH_WRAP_DOUBLE_1347,11599
static double acosh(double x){acosh389,12740
static double asinh(double x){asinh397,12877
static double atanh(double x){atanh405,13014
static double cot(double x){cot415,13204
static double coth(double x){coth424,13406
static double sinh(double x){sinh433,13638
static double cosh(double x){cosh441,13767
static double tanh(double x){tanh449,13896
static double log10(double x){log10463,14126
#undef M_PIM_PI479,14437
#define M_PI M_PI485,14523
static double deg2rad(double x){deg2rad489,14602
static double rad2deg(double x){rad2deg494,14696
static void piFunc(sqlite3_context *context, int argc, sqlite3_value **argv){piFunc502,14909
static void squareFunc(sqlite3_context *context, int argc, sqlite3_value **argv){squareFunc511,15242
static void powerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){powerFunc541,16186
static void atn2Func(sqlite3_context *context, int argc, sqlite3_value **argv){atn2Func566,16782
static void signFunc(sqlite3_context *context, int argc, sqlite3_value **argv){signFunc587,17435
static void ceilFunc(sqlite3_context *context, int argc, sqlite3_value **argv){ceilFunc617,18188
static void floorFunc(sqlite3_context *context, int argc, sqlite3_value **argv){floorFunc642,18775
static void replicateFunc(sqlite3_context *context, int argc, sqlite3_value **argv){replicateFunc668,19451
int isblank(char c){isblank712,20795
static void properFunc(sqlite3_context *context, int argc, sqlite3_value **argv){properFunc717,20857
static void padlFunc(sqlite3_context *context, int argc, sqlite3_value **argv){padlFunc763,21883
static void padrFunc(sqlite3_context *context, int argc, sqlite3_value **argv){padrFunc816,23414
static void padcFunc(sqlite3_context *context, int argc, sqlite3_value **argv){padcFunc871,25082
static void strfilterFunc(sqlite3_context *context, int argc, sqlite3_value **argv){strfilterFunc928,26680
static int _substr(const char* z1, const char* z2, int s, const char** p){_substr984,28304
static void charindexFunc(sqlite3_context *context, int argc, sqlite3_value **argv){charindexFunc1032,29283
static void leftFunc(sqlite3_context *context, int argc, sqlite3_value **argv){leftFunc1065,30103
static void rightFunc(sqlite3_context *context, int argc, sqlite3_value **argv){rightFunc1104,31072
const char* ltrim(const char* s){ltrim1154,32011
void rtrim(char* s){rtrim1164,32175
static void ltrimFunc(sqlite3_context *context, int argc, sqlite3_value **argv){ltrimFunc1174,32343
static void rtrimFunc(sqlite3_context *context, int argc, sqlite3_value **argv){rtrimFunc1190,32722
static void trimFunc(sqlite3_context *context, int argc, sqlite3_value **argv){trimFunc1211,33216
static void replaceFunc(sqlite3_context *context, int argc, sqlite3_value **argv){replaceFunc1247,34125
static void reverseFunc(sqlite3_context *context, int argc, sqlite3_value **argv){reverseFunc1315,35554
typedef struct StdevCtx StdevCtx;StdevCtx1358,36523
struct StdevCtx {StdevCtx1359,36557
  double rM;rM1360,36575
  double rS;rS1361,36588
  i64 cnt;          /* number of elements */cnt1362,36601
typedef struct ModeCtx ModeCtx;ModeCtx1373,37074
struct ModeCtx {ModeCtx1374,37106
  i64 riM;            /* integer value found so far */riM1375,37123
  double rdM;         /* double value found so far */rdM1376,37178
  i64 cnt;            /* number of elements so far */cnt1377,37232
  double pcnt;        /* number of elements smaller than a percentile */pcnt1378,37286
  i64 mcnt;           /* maximum number of occurrences (for mode) */mcnt1379,37359
  i64 mn;             /* number of occurrences (for mode and percentiles) */mn1380,37428
  i64 is_double;      /* whether the computation is being done for doubles (>0) or integers (=0) */is_double1381,37505
  map* m;             /* map structure used for the computation */m1382,37605
  int done;           /* whether the answer has been found */done1383,37672
static void varianceStep(sqlite3_context *context, int argc, sqlite3_value **argv){varianceStep1389,37820
static void modeStep(sqlite3_context *context, int argc, sqlite3_value **argv){modeStep1410,38341
static void modeIterate(void* e, i64 c, void* pp){modeIterate1458,39402
static void medianIterate(void* e, i64 c, void* pp){medianIterate1491,40019
static void modeFinalize(sqlite3_context *context){modeFinalize1528,40572
static void _medianFinalize(sqlite3_context *context){_medianFinalize1548,40992
static void medianFinalize(sqlite3_context *context){medianFinalize1570,41495
static void lower_quartileFinalize(sqlite3_context *context){lower_quartileFinalize1582,41740
static void upper_quartileFinalize(sqlite3_context *context){upper_quartileFinalize1594,41993
static void stdevFinalize(sqlite3_context *context){stdevFinalize1606,42239
static void varianceFinalize(sqlite3_context *context){varianceFinalize1619,42528
static void soundex(const u8 *zIn, char *zResult){soundex1636,42882
static void differenceFunc(sqlite3_context *context, int argc, sqlite3_value **argv){differenceFunc1670,43851
int RegisterExtensionFunctions(sqlite3 *db){RegisterExtensionFunctions1708,44770
int sqlite3_extension_init(sqlite3_extension_init1838,50165
map map_make(cmp_func cmp){map_make1846,50401
void* xcalloc(size_t nmemb, size_t size, char* s){xcalloc1854,50481
void xfree(void* p){xfree1859,50584
void node_insert(node** n, cmp_func cmp, void *e){node_insert1863,50619
void map_insert(map *m, void *e){map_insert1885,51043
void node_iterate(node *n, map_iterator iter, void* p){node_iterate1889,51118
void map_iterate(map *m, map_iterator iter, void* p){map_iterate1899,51318
void node_destroy(node *n){node_destroy1903,51409
void map_destroy(map *m){map_destroy1915,51569
int int_cmp(const void *a, const void *b){int_cmp1919,51623
int double_cmp(const void *a, const void *b){double_cmp1931,51854
void print_elem(void *e, int64_t c, void* p){print_elem1943,52084

src/param_binding.c,525
init_bindParams(int num_cols)init_bindParams8,104
static int first_not_used(const int *used_index, int len)first_not_used21,392
void add_data_to_param_binding(RS_SQLite_bindParams *params, int i, SEXP data)add_data_to_param_binding33,627
static int find_by_name(const char *paramName, SEXP colNames)find_by_name64,1555
RS_SQLite_createParameterBinding(int n, SEXP bind_data,RS_SQLite_createParameterBinding79,1972
RS_SQLite_freeParameterBinding(RS_SQLite_bindParams *params)RS_SQLite_freeParameterBinding161,4573

src/param_binding.h,330
#define PARAM_BINDING_H_PARAM_BINDING_H_2,25
typedef struct st_sqlite_bindparams {st_sqlite_bindparams7,96
    int count;count8,134
    int row_count;row_count9,149
    int rows_used;rows_used10,168
    int row_complete;row_complete11,187
    SEXP data;data12,209
} RS_SQLite_bindParams;RS_SQLite_bindParams13,224

src/Rhelpers.h,1862
#define RHELPERS_HRHELPERS_H6,67
#  define singl singl20,317
#  define Sint Sint21,340
#  define charPtr charPtr22,360
#  define C_S_CPY(C_S_CPY23,385
#  define COPY(COPY29,603
#  define COPY_ALL(COPY_ALL30,652
#  define EVAL_IN_FRAME(EVAL_IN_FRAME31,702
#  define GET_FROM_FRAME(GET_FROM_FRAME32,753
#  define ASSIGN_IN_FRAME(ASSIGN_IN_FRAME33,811
#  define Stype Stype38,925
#  define LOGICAL_TYPE	LOGICAL_TYPE39,959
#  define INTEGER_TYPE	INTEGER_TYPE40,990
#  define NUMERIC_TYPE	NUMERIC_TYPE41,1021
#  define SINGLE_TYPE SINGLE_TYPE42,1053
#  define REAL_TYPE REAL_TYPE43,1086
#  define CHARACTER_TYPE CHARACTER_TYPE44,1119
#  define STRING_TYPE STRING_TYPE45,1151
#  define COMPLEX_TYPE	COMPLEX_TYPE46,1183
#  define LIST_TYPE	LIST_TYPE47,1215
#  define S_NULL_ENTRY S_NULL_ENTRY49,1244
#define LGL_EL(LGL_EL68,1921
#define INT_EL(INT_EL69,1967
#define SGL_EL(SGL_EL70,2013
#define FLT_EL(FLT_EL71,2058
#define NUM_EL(NUM_EL72,2094
#define DBL_EL(DBL_EL73,2140
#define RAW_EL(RAW_EL74,2176
#  define LST_EL(LST_EL76,2275
#  define CHR_EL(CHR_EL77,2317
#  define SET_CHR_EL(SET_CHR_EL78,2365
#define LST_CHR_EL(LST_CHR_EL82,2503
#define LST_LGL_EL(LST_LGL_EL83,2558
#define LST_INT_EL(LST_INT_EL84,2613
#define LST_SGL_EL(LST_SGL_EL85,2668
#define LST_FLT_EL(LST_FLT_EL86,2723
#define LST_NUM_EL(LST_NUM_EL87,2773
#define LST_DBL_EL(LST_DBL_EL88,2828
#define LST_RAW_EL(LST_RAW_EL89,2878
#define LST_LST_EL(LST_LST_EL90,2933
#  define SET_LST_CHR_EL(SET_LST_CHR_EL94,3110
#  define SET_LST_CHR_EL(SET_LST_CHR_EL96,3191
#  define NA_SET(NA_SET103,3396
#  define NA_CHR_SET(NA_CHR_SET104,3439
#  define IS_NA(IS_NA105,3491
#  define SET_ROWNAMES(SET_ROWNAMES110,3597
#  define GET_CLASS_NAME(GET_CLASS_NAME111,3662
#  define SET_CLASS_NAME(SET_CLASS_NAME112,3705

src/RS-DBI.c,3450
static RS_DBI_manager *dbManager = NULL;dbManager32,1229
static int HANDLE_LENGTH(SEXP handle)HANDLE_LENGTH34,1271
RS_DBI_allocManager(const char *drvName, Sint max_con,RS_DBI_allocManager42,1446
RS_DBI_freeManager(Mgr_Handle mgrHandle)RS_DBI_freeManager114,3934
RS_DBI_allocConnection(Mgr_Handle mgrHandle, Sint max_res)RS_DBI_allocConnection143,4645
RS_DBI_freeConnection(SEXP conHandle)RS_DBI_freeConnection198,6377
RS_DBI_allocResultSet(SEXP conHandle)RS_DBI_allocResultSet243,7762
void RS_DBI_freeResultSet0(RS_DBI_resultSet *result, RS_DBI_connection *con)RS_DBI_freeResultSet0288,9287
RS_DBI_freeResultSet(Res_Handle rsHandle)RS_DBI_freeResultSet318,10304
RS_DBI_allocFields(int num_fields)RS_DBI_allocFields325,10479
RS_DBI_freeFields(RS_DBI_fields *flds)RS_DBI_freeFields350,11242
RS_DBI_makeDataFrame(SEXP data)RS_DBI_makeDataFrame370,11858
RS_DBI_allocOutput(SEXP output, RS_DBI_fields *flds,RS_DBI_allocOutput394,12449
RS_DBI_validHandle(Db_Handle handle)RS_DBI_validHandle451,13878
RS_DBI_setException(Db_Handle handle, DBI_EXCEPTION exceptionType,RS_DBI_setException479,14634
RS_DBI_errorMessage(const char *msg, DBI_EXCEPTION exception_type)RS_DBI_errorMessage508,15494
void DBI_MSG(char *msg, DBI_EXCEPTION exception_type, char *driver)DBI_MSG529,16074
RS_DBI_copyString(const char *str)RS_DBI_copyString550,16604
RS_DBI_nCopyString(const char *str, size_t len, int del_blanks)RS_DBI_nCopyString564,16963
RS_DBI_copyfields(RS_DBI_fields *flds)RS_DBI_copyfields597,17695
RS_DBI_createNamedList(char **names, Stype *types, Sint *lengths, Sint  n)RS_DBI_createNamedList629,18742
RS_DBI_SclassNames(SEXP type)RS_DBI_SclassNames668,19744
RS_DBI_asMgrHandle(int mgrId)RS_DBI_asMgrHandle700,20494
static void _finalize_con_handle(SEXP xp)_finalize_con_handle716,20909
RS_DBI_asConHandle(int mgrId, int conId, RS_DBI_connection *con)RS_DBI_asConHandle725,21071
DBI_newResultHandle(SEXP xp, SEXP resId)DBI_newResultHandle741,21505
RS_DBI_asResHandle(int mgrId, int conId, int resId, SEXP conxp)RS_DBI_asResHandle748,21678
RS_DBI_getManager(SEXP handle)RS_DBI_getManager771,22353
RS_DBI_getConnection(SEXP conHandle)RS_DBI_getConnection786,22710
RS_DBI_getResultSet(SEXP rsHandle)RS_DBI_getResultSet792,22833
RS_DBI_newEntry(Sint *table, Sint length)RS_DBI_newEntry810,23439
RS_DBI_lookup(Sint *table, Sint length, Sint obj_id)RS_DBI_lookup824,23662
RS_DBI_listEntries(Sint *table, Sint length, Sint *entries)RS_DBI_listEntries843,24094
RS_DBI_freeEntry(Sint *table, Sint indx)RS_DBI_freeEntry855,24280
is_validHandle(SEXP handle, HANDLE_TYPE handleType)is_validHandle863,24425
RS_DBI_managerInfo(Mgr_Handle mgrHandle)RS_DBI_managerInfo907,25955
RS_DBI_connectionInfo(Con_Handle conHandle)RS_DBI_connectionInfo943,27086
RS_DBI_resultSetInfo(Res_Handle rsHandle)RS_DBI_resultSetInfo978,28289
RS_DBI_getFieldDescriptions(RS_DBI_fields *flds)RS_DBI_getFieldDescriptions1007,29183
RS_DBI_getTypeName(Sint t, const struct data_types table[])RS_DBI_getTypeName1041,30287
#define RS_DBI_MAX_IDENTIFIER_LENGTH RS_DBI_MAX_IDENTIFIER_LENGTH1071,31557
RS_DBI_makeSQLNames(SEXP snames)RS_DBI_makeSQLNames1073,31627
void RS_na_set(void *ptr, Stype type)RS_na_set1120,32983
int RS_is_na(void *ptr, Stype type)RS_is_na1145,33378
const struct data_types RS_dataTypeTable[] = {RS_dataTypeTable1170,33856
SEXP DBI_handle_to_string(SEXP xp)DBI_handle_to_string1197,34666

src/RS-DBI.h,5017
#define _RS_DBI_H _RS_DBI_H2,18
# define pid_t pid_t37,1196
# define getpid getpid41,1305
# define pid_t pid_t42,1329
typedef enum enum_dbi_exception {enum_dbi_exception58,1818
  RS_DBI_MESSAGE,RS_DBI_MESSAGE59,1852
  RS_DBI_WARNING,RS_DBI_WARNING60,1870
  RS_DBI_ERROR,RS_DBI_ERROR61,1888
  RS_DBI_TERMINATERS_DBI_TERMINATE62,1904
} DBI_EXCEPTION;DBI_EXCEPTION63,1923
#define Mgr_Handle Mgr_Handle69,2071
#define Con_Handle Con_Handle70,2095
#define Res_Handle Res_Handle71,2119
#define Db_Handle Db_Handle72,2143
typedef enum enum_handle_type {enum_handle_type76,2323
  MGR_HANDLE_TYPE = 1,     /* dbManager handle */MGR_HANDLE_TYPE77,2355
  CON_HANDLE_TYPE = 2,     /* dbConnection handle */CON_HANDLE_TYPE78,2405
  RES_HANDLE_TYPE = 3      /* dbResult handle */RES_HANDLE_TYPE79,2458
} HANDLE_TYPE; HANDLE_TYPE80,2507
static int MGR_ID(SEXP handle)MGR_ID82,2524
static int CON_ID(SEXP handle)CON_ID89,2682
#define RES_ID(RES_ID96,2840
typedef struct st_sdbi_fields {st_sdbi_fields108,3441
  int num_fields;num_fields109,3473
  char  **name;         /* DBMS field names */name110,3491
  Sint  *type;          /* DBMS internal types */type111,3538
  Sint  *length;        /* DBMS lengths in bytes */length112,3588
  Sint  *precision;     /* DBMS num of digits for numeric types */precision113,3640
  Sint  *scale;         /* DBMS num of decimals for numeric types */scale114,3707
  Sint  *nullOk;        /* DBMS indicator for DBMS'  NULL type */nullOk115,3776
  Sint  *isVarLength;   /* DBMS variable-length char type */isVarLength116,3842
  Stype *Sclass;        /* R/S class (type) -- may be overriden */Sclass117,3903
} RS_DBI_fields;RS_DBI_fields119,4027
typedef struct st_sdbi_exception {st_sdbi_exception121,4045
  DBI_EXCEPTION  exceptionType; /* one of RS_DBI_WARN, RS_RBI_ERROR, etc */exceptionType122,4080
  int  errorNum;            /* SQL error number (possibly driver-dependent*/errorNum123,4156
  char *errorMsg;           /* SQL error message */errorMsg124,4233
} RS_DBI_exception;RS_DBI_exception125,4285
typedef struct st_sdbi_resultset {st_sdbi_resultset131,4486
  void  *drvResultSet;   /* the actual (driver's) cursor/result set */drvResultSet132,4521
  void  *drvData;        /* a pointer to driver-specific data */drvData133,4592
  Sint  managerId;       /* the 3 *Id's are used for   */managerId134,4657
  Sint  connectionId;    /* validating stuff coming from S */connectionId135,4715
  Sint  resultSetId;  resultSetId136,4777
  Sint  isSelect;        /* boolean for testing SELECTs */isSelect137,4800
  char  *statement;      /* SQL statement */statement138,4859
  Sint  rowsAffected;    /* used by non-SELECT statements */rowsAffected139,4904
  Sint  rowCount;        /* rows fetched so far (SELECT-types)*/rowCount140,4965
  Sint  completed;       /* have we fetched all rows? */completed141,5030
  RS_DBI_fields *fields;fields142,5087
} RS_DBI_resultSet;RS_DBI_resultSet143,5112
typedef struct st_sdbi_connection {st_sdbi_connection152,5456
  void  *conParams;      /* pointer to connection params (host, user, etc)*/conParams153,5492
  void  *drvConnection;  /* pointer to the actual DBMS connection struct*/drvConnection154,5569
  void  *drvData;        /* to be used at will by individual drivers */drvData155,5644
  RS_DBI_resultSet  **resultSets;    /* vector to result set ptrs  */resultSets156,5716
  Sint   *resultSetIds;resultSetIds157,5786
  Sint   length;                     /* max num of concurrent resultSets */length158,5810
  Sint   num_res;                    /* num of open resultSets */num_res159,5886
  Sint   counter;                    /* total number of queries */counter160,5952
  Sint   managerId;managerId161,6019
  Sint   connectionId; connectionId162,6039
  RS_DBI_exception *exception;exception163,6063
} RS_DBI_connection;RS_DBI_connection164,6094
typedef struct st_sdbi_manager {st_sdbi_manager167,6132
  char *drvName;                    /* what driver are we implementing?*/drvName168,6165
  void *drvData;                    /* to be used by the drv implementation*/drvData169,6239
  RS_DBI_connection **connections;  /* list of dbConnections */connections170,6317
  Sint *connectionIds;              /* array of connectionIds */connectionIds171,6381
  Sint length;                      /* max num of concurrent connections */length172,6446
  Sint num_con;                     /* num of opened connections */num_con173,6522
  Sint counter;                     /* num of connections handled so far*/counter174,6590
  Sint fetch_default_rec;           /* default num of records per fetch */fetch_default_rec175,6665
  Sint managerId;                   /* typically, process id */managerId176,6740
  RS_DBI_exception *exception;    exception177,6804
} RS_DBI_manager;RS_DBI_manager178,6839
struct data_types {data_types263,10497
    char *typeName;typeName264,10517
    Sint typeId;typeId265,10537

src/RS-SQLite.c,2946
char *compiledVarsion = SQLITE_VERSION;compiledVarsion25,925
#define RS_NA_STRING RS_NA_STRING33,1258
RS_SQLite_init(SEXP config_params, SEXP reload, SEXP cache)RS_SQLite_init59,2249
RS_SQLite_closeManager(Mgr_Handle mgrHandle)RS_SQLite_closeManager116,4264
RS_SQLite_cloneConnection(Con_Handle conHandle)RS_SQLite_cloneConnection144,4958
RS_SQLite_allocConParams(const char *dbname, int loadable_extensions,RS_SQLite_allocConParams171,5887
RS_SQLite_freeConParams(RS_SQLite_conParams *conParams)RS_SQLite_freeConParams192,6559
RS_SQLite_setException(RS_DBI_connection *con, int err_no, const char *err_msg)RS_SQLite_setException204,6927
RS_SQLite_freeException(RS_DBI_connection *con)RS_SQLite_freeException229,7622
RS_SQLite_newConnection(Mgr_Handle mgrHandle, SEXP dbfile, SEXP allow_ext,RS_SQLite_newConnection240,7836
RS_SQLite_closeConnection(Con_Handle conHandle)RS_SQLite_closeConnection312,10515
int SQLite_decltype_to_type(const char* decltype)SQLite_decltype_to_type362,12332
int RS_SQLite_get_row_count(sqlite3* db, const char* tname) {RS_SQLite_get_row_count404,13910
SEXP RS_SQLite_quick_column(Con_Handle conHandle, SEXP table, SEXP column)RS_SQLite_quick_column432,14750
static void RSQLite_freeResultSet0(RS_DBI_resultSet *result, RS_DBI_connection *con)RSQLite_freeResultSet0518,17691
exec_error(const char *msg,exec_error536,18293
select_prepared_query(sqlite3_stmt *db_statement,select_prepared_query560,19007
bind_params_to_stmt(RS_SQLite_bindParams *params,bind_params_to_stmt582,19767
non_select_prepared_query(sqlite3_stmt *db_statement,non_select_prepared_query636,21618
Res_Handle RS_SQLite_exec(Con_Handle conHandle, SEXP statement, SEXP bind_data)RS_SQLite_exec682,23291
RS_SQLite_createDataMappings(Res_Handle rsHandle)RS_SQLite_createDataMappings770,26414
static void fill_one_row(sqlite3_stmt *db_statement, SEXP output, int row_idx,fill_one_row851,29315
static int do_select_step(RS_DBI_resultSet *res, int row_idx)do_select_step900,31116
SEXP RS_SQLite_fetch(SEXP rsHandle, SEXP max_rec)RS_SQLite_fetch950,33060
RS_SQLite_getException(SEXP conHandle)RS_SQLite_getException1219,42624
void RSQLite_closeResultSet0(RS_DBI_resultSet *result, RS_DBI_connection *con)RSQLite_closeResultSet01241,43302
RS_SQLite_closeResultSet(SEXP resHandle)RS_SQLite_closeResultSet1250,43592
RS_SQLite_managerInfo(Mgr_Handle mgrHandle)RS_SQLite_managerInfo1265,44158
RSQLite_connectionInfo(Con_Handle conHandle)RSQLite_connectionInfo1325,46256
RS_SQLite_resultSetInfo(Res_Handle rsHandle)RS_SQLite_resultSetInfo1365,47559
RS_SQLite_typeNames(SEXP typeIds)RS_SQLite_typeNames1396,48597
RS_SQLite_importFile(RS_SQLite_importFile1416,49044
RS_sqlite_import(RS_sqlite_import1483,50700
RS_sqlite_getline(FILE *in, const char *eol)RS_sqlite_getline1620,55359
SEXP RS_SQLite_copy_database(Con_Handle fromConHandle, Con_Handle toConHandle)RS_SQLite_copy_database1671,56680

src/RS-SQLite.h,1673
#define _RS_SQLite_H _RS_SQLite_H2,21
#define RSQLITE_RWC RSQLITE_RWC37,1152
#define RSQLITE_RW RSQLITE_RW38,1174
#define RSQLITE_RO RSQLITE_RO39,1196
typedef struct st_sdbi_conParams {st_sdbi_conParams45,1414
  char *dbname;dbname46,1449
  int  loadable_extensions;loadable_extensions47,1465
  int  flags;flags48,1493
  char *vfs;vfs49,1507
} RS_SQLite_conParams;RS_SQLite_conParams50,1520
typedef struct st_sqlite_err {st_sqlite_err52,1544
   int  errorNum;errorNum53,1575
   char *errorMsg;errorMsg54,1593
} RS_SQLite_exception;RS_SQLite_exception55,1612
#define RSQLITE_MSG(RSQLITE_MSG58,1637
enum SQL92_field_types {SQL92_field_types139,5091
     SQL92_TYPE_NULL,SQL92_TYPE_NULL140,5116
     SQL92_TYPE_BIT,SQL92_TYPE_BIT141,5138
     SQL92_TYPE_BIT_VAR,SQL92_TYPE_BIT_VAR142,5159
     SQL92_TYPE_CHAR,SQL92_TYPE_CHAR143,5184
     SQL92_TYPE_CHAR_VAR,SQL92_TYPE_CHAR_VAR144,5206
     SQL92_TYPE_NCHAR,SQL92_TYPE_NCHAR145,5232
     SQL92_TYPE_NCHAR_VAR,SQL92_TYPE_NCHAR_VAR146,5255
     SQL92_TYPE_SMALLINT,SQL92_TYPE_SMALLINT147,5282
     SQL92_TYPE_INTEGER,SQL92_TYPE_INTEGER148,5308
     SQL92_TYPE_DECIMAL,SQL92_TYPE_DECIMAL149,5333
     SQL92_TYPE_FLOAT,SQL92_TYPE_FLOAT150,5358
     SQL92_TYPE_REAL,SQL92_TYPE_REAL151,5381
     SQL92_TYPE_DOUBLE,SQL92_TYPE_DOUBLE152,5403
     SQL92_TYPE_TIMESTAMP,SQL92_TYPE_TIMESTAMP153,5427
     SQL92_TYPE_DATE,SQL92_TYPE_DATE154,5454
     SQL92_TYPE_TIME,SQL92_TYPE_TIME155,5476
     SQL92_TYPE_DATETIME,SQL92_TYPE_DATETIME156,5498
     SQLns_TYPE_BLOBSQLns_TYPE_BLOB157,5524
const struct data_types RS_SQLite_fieldTypes[] = {RS_SQLite_fieldTypes160,5549

src/sqlite/sqlite3.c,443451
#define SQLITE_CORE SQLITE_CORE20,1243
#define SQLITE_AMALGAMATION SQLITE_AMALGAMATION21,1265
# define SQLITE_PRIVATE SQLITE_PRIVATE23,1318
# define SQLITE_APISQLITE_API26,1375
#define _SQLITEINT_H__SQLITEINT_H_44,1931
# define _LARGE_FILE _LARGE_FILE66,2922
#   define _FILE_OFFSET_BITS _FILE_OFFSET_BITS68,2978
# define _LARGEFILE_SOURCE _LARGEFILE_SOURCE70,3018
# define SQLITE_MAX_LENGTH SQLITE_MAX_LENGTH106,4069
# define SQLITE_MAX_COLUMN SQLITE_MAX_COLUMN127,4835
# define SQLITE_MAX_SQL_LENGTH SQLITE_MAX_SQL_LENGTH138,5131
# define SQLITE_MAX_EXPR_DEPTH SQLITE_MAX_EXPR_DEPTH152,5571
# define SQLITE_MAX_COMPOUND_SELECT SQLITE_MAX_COMPOUND_SELECT164,6034
# define SQLITE_MAX_VDBE_OP SQLITE_MAX_VDBE_OP172,6194
# define SQLITE_MAX_FUNCTION_ARG SQLITE_MAX_FUNCTION_ARG179,6329
# define SQLITE_DEFAULT_CACHE_SIZE SQLITE_DEFAULT_CACHE_SIZE187,6550
# define SQLITE_DEFAULT_TEMP_CACHE_SIZE SQLITE_DEFAULT_TEMP_CACHE_SIZE190,6637
# define SQLITE_MAX_ATTACHED SQLITE_MAX_ATTACHED199,6913
# define SQLITE_MAX_VARIABLE_NUMBER SQLITE_MAX_VARIABLE_NUMBER207,7064
# define SQLITE_MAX_PAGE_SIZE SQLITE_MAX_PAGE_SIZE222,7756
# define SQLITE_DEFAULT_PAGE_SIZE SQLITE_DEFAULT_PAGE_SIZE230,7880
# undef SQLITE_DEFAULT_PAGE_SIZESQLITE_DEFAULT_PAGE_SIZE233,7976
# define SQLITE_DEFAULT_PAGE_SIZE SQLITE_DEFAULT_PAGE_SIZE234,8009
# define SQLITE_MAX_DEFAULT_PAGE_SIZE SQLITE_MAX_DEFAULT_PAGE_SIZE245,8435
# undef SQLITE_MAX_DEFAULT_PAGE_SIZESQLITE_MAX_DEFAULT_PAGE_SIZE248,8539
# define SQLITE_MAX_DEFAULT_PAGE_SIZE SQLITE_MAX_DEFAULT_PAGE_SIZE249,8576
# define SQLITE_MAX_PAGE_COUNT SQLITE_MAX_PAGE_COUNT261,8897
# define SQLITE_MAX_LIKE_PATTERN_LENGTH SQLITE_MAX_LIKE_PATTERN_LENGTH269,9067
# define SQLITE_MAX_TRIGGER_DEPTH SQLITE_MAX_TRIGGER_DEPTH280,9373
# define _GNU_SOURCE_GNU_SOURCE297,9988
#define SQLITE_INDEX_SAMPLES SQLITE_INDEX_SAMPLES315,10343
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR334,11200
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT335,11262
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR337,11395
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT338,11450
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR340,11585
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT341,11639
# define SQLITE_INT_TO_PTR(SQLITE_INT_TO_PTR343,11770
# define SQLITE_PTR_TO_INT(SQLITE_PTR_TO_INT344,11814
# define SQLITE_THREADSAFE SQLITE_THREADSAFE354,12084
# define SQLITE_THREADSAFE SQLITE_THREADSAFE356,12128
# define SQLITE_DEFAULT_MEMSTATUS SQLITE_DEFAULT_MEMSTATUS367,12481
# define SQLITE_SYSTEM_MALLOC SQLITE_SYSTEM_MALLOC388,13254
# define SQLITE_MALLOC_SOFT_LIMIT SQLITE_MALLOC_SOFT_LIMIT396,13468
#  define _XOPEN_SOURCE _XOPEN_SOURCE413,14139
# define NDEBUG NDEBUG431,14723
# define testcase(testcase450,15520
# define testcase(testcase452,15586
# define TESTONLY(TESTONLY461,15846
# define TESTONLY(TESTONLY463,15876
# define VVA_ONLY(VVA_ONLY475,16356
# define VVA_ONLY(VVA_ONLY477,16386
# define ALWAYS(ALWAYS496,17133
# define NEVER(NEVER497,17161
# define ALWAYS(ALWAYS499,17212
# define NEVER(NEVER500,17258
# define ALWAYS(ALWAYS502,17310
# define NEVER(NEVER503,17338
# define likely(likely513,17646
# define unlikely(unlikely514,17692
# define likely(likely516,17744
# define unlikely(unlikely517,17772
#define _SQLITE3_H__SQLITE3_H_555,19479
# define SQLITE_EXTERN SQLITE_EXTERN570,19715
# define SQLITE_APISQLITE_API574,19772
#define SQLITE_DEPRECATEDSQLITE_DEPRECATED591,20438
#define SQLITE_EXPERIMENTALSQLITE_EXPERIMENTAL592,20464
# undef SQLITE_VERSIONSQLITE_VERSION598,20592
# undef SQLITE_VERSION_NUMBERSQLITE_VERSION_NUMBER601,20651
#define SQLITE_VERSION SQLITE_VERSION631,22050
#define SQLITE_VERSION_NUMBER SQLITE_VERSION_NUMBER632,22091
#define SQLITE_SOURCE_ID SQLITE_SOURCE_ID633,22129
SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;sqlite3_version665,23708
typedef struct sqlite3 sqlite3;sqlite3748,27562
  typedef SQLITE_INT64_TYPE sqlite_int64;sqlite_int64767,28285
  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;sqlite_uint64768,28327
  typedef __int64 sqlite_int64;sqlite_int64770,28428
  typedef unsigned __int64 sqlite_uint64;sqlite_uint64771,28460
  typedef long long int sqlite_int64;sqlite_int64773,28508
  typedef unsigned long long int sqlite_uint64;sqlite_uint64774,28546
typedef sqlite_int64 sqlite3_int64;sqlite3_int64776,28601
typedef sqlite_uint64 sqlite3_uint64;sqlite3_uint64777,28637
# define double double784,28825
typedef int (*sqlite3_callback)(void*,int,char**, char**);sqlite3_callback818,30123
#define SQLITE_OK SQLITE_OK901,34117
#define SQLITE_ERROR SQLITE_ERROR903,34204
#define SQLITE_INTERNAL SQLITE_INTERNAL904,34272
#define SQLITE_PERM SQLITE_PERM905,34341
#define SQLITE_ABORT SQLITE_ABORT906,34404
#define SQLITE_BUSY SQLITE_BUSY907,34478
#define SQLITE_LOCKED SQLITE_LOCKED908,34544
#define SQLITE_NOMEM SQLITE_NOMEM909,34616
#define SQLITE_READONLY SQLITE_READONLY910,34672
#define SQLITE_INTERRUPT SQLITE_INTERRUPT911,34747
#define SQLITE_IOERR SQLITE_IOERR912,34828
#define SQLITE_CORRUPT SQLITE_CORRUPT913,34903
#define SQLITE_NOTFOUND SQLITE_NOTFOUND914,34978
#define SQLITE_FULL SQLITE_FULL915,35052
#define SQLITE_CANTOPEN SQLITE_CANTOPEN916,35132
#define SQLITE_PROTOCOL SQLITE_PROTOCOL917,35203
#define SQLITE_EMPTY SQLITE_EMPTY918,35280
#define SQLITE_SCHEMA SQLITE_SCHEMA919,35336
#define SQLITE_TOOBIG SQLITE_TOOBIG920,35402
#define SQLITE_CONSTRAINT SQLITE_CONSTRAINT921,35474
#define SQLITE_MISMATCH SQLITE_MISMATCH922,35546
#define SQLITE_MISUSE SQLITE_MISUSE923,35603
#define SQLITE_NOLFS SQLITE_NOLFS924,35666
#define SQLITE_AUTH SQLITE_AUTH925,35743
#define SQLITE_FORMAT SQLITE_FORMAT926,35802
#define SQLITE_RANGE SQLITE_RANGE927,35872
#define SQLITE_NOTADB SQLITE_NOTADB928,35953
#define SQLITE_ROW SQLITE_ROW929,36031
#define SQLITE_DONE SQLITE_DONE930,36106
#define SQLITE_IOERR_READ SQLITE_IOERR_READ956,37338
#define SQLITE_IOERR_SHORT_READ SQLITE_IOERR_SHORT_READ957,37401
#define SQLITE_IOERR_WRITE SQLITE_IOERR_WRITE958,37464
#define SQLITE_IOERR_FSYNC SQLITE_IOERR_FSYNC959,37527
#define SQLITE_IOERR_DIR_FSYNC SQLITE_IOERR_DIR_FSYNC960,37590
#define SQLITE_IOERR_TRUNCATE SQLITE_IOERR_TRUNCATE961,37653
#define SQLITE_IOERR_FSTAT SQLITE_IOERR_FSTAT962,37716
#define SQLITE_IOERR_UNLOCK SQLITE_IOERR_UNLOCK963,37779
#define SQLITE_IOERR_RDLOCK SQLITE_IOERR_RDLOCK964,37842
#define SQLITE_IOERR_DELETE SQLITE_IOERR_DELETE965,37905
#define SQLITE_IOERR_BLOCKED SQLITE_IOERR_BLOCKED966,37969
#define SQLITE_IOERR_NOMEM SQLITE_IOERR_NOMEM967,38033
#define SQLITE_IOERR_ACCESS SQLITE_IOERR_ACCESS968,38097
#define SQLITE_IOERR_CHECKRESERVEDLOCK SQLITE_IOERR_CHECKRESERVEDLOCK969,38161
#define SQLITE_IOERR_LOCK SQLITE_IOERR_LOCK970,38225
#define SQLITE_IOERR_CLOSE SQLITE_IOERR_CLOSE971,38289
#define SQLITE_IOERR_DIR_CLOSE SQLITE_IOERR_DIR_CLOSE972,38353
#define SQLITE_LOCKED_SHAREDCACHE SQLITE_LOCKED_SHAREDCACHE973,38417
#define SQLITE_OPEN_READONLY SQLITE_OPEN_READONLY983,38718
#define SQLITE_OPEN_READWRITE SQLITE_OPEN_READWRITE984,38798
#define SQLITE_OPEN_CREATE SQLITE_OPEN_CREATE985,38878
#define SQLITE_OPEN_DELETEONCLOSE SQLITE_OPEN_DELETEONCLOSE986,38958
#define SQLITE_OPEN_EXCLUSIVE SQLITE_OPEN_EXCLUSIVE987,39022
#define SQLITE_OPEN_AUTOPROXY SQLITE_OPEN_AUTOPROXY988,39086
#define SQLITE_OPEN_MAIN_DB SQLITE_OPEN_MAIN_DB989,39150
#define SQLITE_OPEN_TEMP_DB SQLITE_OPEN_TEMP_DB990,39214
#define SQLITE_OPEN_TRANSIENT_DB SQLITE_OPEN_TRANSIENT_DB991,39278
#define SQLITE_OPEN_MAIN_JOURNAL SQLITE_OPEN_MAIN_JOURNAL992,39342
#define SQLITE_OPEN_TEMP_JOURNAL SQLITE_OPEN_TEMP_JOURNAL993,39406
#define SQLITE_OPEN_SUBJOURNAL SQLITE_OPEN_SUBJOURNAL994,39470
#define SQLITE_OPEN_MASTER_JOURNAL SQLITE_OPEN_MASTER_JOURNAL995,39534
#define SQLITE_OPEN_NOMUTEX SQLITE_OPEN_NOMUTEX996,39598
#define SQLITE_OPEN_FULLMUTEX SQLITE_OPEN_FULLMUTEX997,39678
#define SQLITE_OPEN_SHAREDCACHE SQLITE_OPEN_SHAREDCACHE998,39758
#define SQLITE_OPEN_PRIVATECACHE SQLITE_OPEN_PRIVATECACHE999,39838
#define SQLITE_IOCAP_ATOMIC SQLITE_IOCAP_ATOMIC1021,40798
#define SQLITE_IOCAP_ATOMIC512 SQLITE_IOCAP_ATOMIC5121022,40846
#define SQLITE_IOCAP_ATOMIC1K SQLITE_IOCAP_ATOMIC1K1023,40894
#define SQLITE_IOCAP_ATOMIC2K SQLITE_IOCAP_ATOMIC2K1024,40942
#define SQLITE_IOCAP_ATOMIC4K SQLITE_IOCAP_ATOMIC4K1025,40990
#define SQLITE_IOCAP_ATOMIC8K SQLITE_IOCAP_ATOMIC8K1026,41038
#define SQLITE_IOCAP_ATOMIC16K SQLITE_IOCAP_ATOMIC16K1027,41086
#define SQLITE_IOCAP_ATOMIC32K SQLITE_IOCAP_ATOMIC32K1028,41134
#define SQLITE_IOCAP_ATOMIC64K SQLITE_IOCAP_ATOMIC64K1029,41182
#define SQLITE_IOCAP_SAFE_APPEND SQLITE_IOCAP_SAFE_APPEND1030,41230
#define SQLITE_IOCAP_SEQUENTIAL SQLITE_IOCAP_SEQUENTIAL1031,41278
#define SQLITE_LOCK_NONE SQLITE_LOCK_NONE1040,41531
#define SQLITE_LOCK_SHARED SQLITE_LOCK_SHARED1041,41567
#define SQLITE_LOCK_RESERVED SQLITE_LOCK_RESERVED1042,41603
#define SQLITE_LOCK_PENDING SQLITE_LOCK_PENDING1043,41639
#define SQLITE_LOCK_EXCLUSIVE SQLITE_LOCK_EXCLUSIVE1044,41675
#define SQLITE_SYNC_NORMAL SQLITE_SYNC_NORMAL1060,42307
#define SQLITE_SYNC_FULL SQLITE_SYNC_FULL1061,42349
#define SQLITE_SYNC_DATAONLY SQLITE_SYNC_DATAONLY1062,42391
typedef struct sqlite3_file sqlite3_file;sqlite3_file1075,42861
struct sqlite3_file {sqlite3_file1076,42903
  const struct sqlite3_io_methods *pMethods;  /* Methods for an open file */pMethods1077,42925
typedef struct sqlite3_io_methods sqlite3_io_methods;sqlite3_io_methods1167,47045
struct sqlite3_io_methods {sqlite3_io_methods1168,47099
  int iVersion;iVersion1169,47127
  int (*xClose)(sqlite3_file*);xClose1170,47143
  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);xRead1171,47175
  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);xWrite1172,47244
  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);xTruncate1173,47320
  int (*xSync)(sqlite3_file*, int flags);xSync1174,47375
  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);xFileSize1175,47417
  int (*xLock)(sqlite3_file*, int);xLock1176,47474
  int (*xUnlock)(sqlite3_file*, int);xUnlock1177,47510
  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);xCheckReservedLock1178,47548
  int (*xFileControl)(sqlite3_file*, int op, void *pArg);xFileControl1179,47606
  int (*xSectorSize)(sqlite3_file*);xSectorSize1180,47664
  int (*xDeviceCharacteristics)(sqlite3_file*);xDeviceCharacteristics1181,47701
#define SQLITE_FCNTL_LOCKSTATE SQLITE_FCNTL_LOCKSTATE1200,48460
#define SQLITE_GET_LOCKPROXYFILE SQLITE_GET_LOCKPROXYFILE1201,48500
#define SQLITE_SET_LOCKPROXYFILE SQLITE_SET_LOCKPROXYFILE1202,48540
#define SQLITE_LAST_ERRNO SQLITE_LAST_ERRNO1203,48580
typedef struct sqlite3_mutex sqlite3_mutex;sqlite3_mutex1215,48966
typedef struct sqlite3_vfs sqlite3_vfs;sqlite3_vfs1346,55195
struct sqlite3_vfs {sqlite3_vfs1347,55235
  int iVersion;            /* Structure version number */iVersion1348,55256
  int szOsFile;            /* Size of subclassed sqlite3_file */szOsFile1349,55314
  int mxPathname;          /* Maximum file pathname length */mxPathname1350,55379
  sqlite3_vfs *pNext;      /* Next registered VFS */pNext1351,55441
  const char *zName;       /* Name of this virtual file system */zName1352,55494
  void *pAppData;          /* Pointer to application-specific data */pAppData1353,55560
  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,xOpen1354,55630
  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);xDelete1356,55736
  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);xAccess1357,55800
  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);xFullPathname1358,55876
  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);xDlOpen1359,55955
  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);xDlError1360,56012
  void (*xDlClose)(sqlite3_vfs*, void*);xDlClose1362,56140
  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);xRandomness1363,56181
  int (*xSleep)(sqlite3_vfs*, int microseconds);xSleep1364,56240
  int (*xCurrentTime)(sqlite3_vfs*, double*);xCurrentTime1365,56289
  int (*xGetLastError)(sqlite3_vfs*, int, char *);xGetLastError1366,56335
#define SQLITE_ACCESS_EXISTS SQLITE_ACCESS_EXISTS1384,57045
#define SQLITE_ACCESS_READWRITE SQLITE_ACCESS_READWRITE1385,57079
#define SQLITE_ACCESS_READ SQLITE_ACCESS_READ1386,57113
typedef struct sqlite3_mem_methods sqlite3_mem_methods;sqlite3_mem_methods1593,67728
struct sqlite3_mem_methods {sqlite3_mem_methods1594,67784
  void *(*xMalloc)(int);         /* Memory allocation function */xMalloc1595,67813
  void (*xFree)(void*);          /* Free a prior allocation */xFree1596,67879
  void *(*xRealloc)(void*,int);  /* Resize an allocation */xRealloc1597,67942
  int (*xSize)(void*);           /* Return the size of an allocation */xSize1598,68002
  int (*xRoundup)(int);          /* Round up request size to allocation size */xRoundup1599,68074
  int (*xInit)(void*);           /* Initialize the memory allocator */xInit1600,68154
  void (*xShutdown)(void*);      /* Deinitialize the memory allocator */xShutdown1601,68225
  void *pAppData;                /* Argument to xInit() and xShutdown() */pAppData1602,68298
#define SQLITE_CONFIG_SINGLETHREAD SQLITE_CONFIG_SINGLETHREAD1795,78919
#define SQLITE_CONFIG_MULTITHREAD SQLITE_CONFIG_MULTITHREAD1796,78968
#define SQLITE_CONFIG_SERIALIZED SQLITE_CONFIG_SERIALIZED1797,79017
#define SQLITE_CONFIG_MALLOC SQLITE_CONFIG_MALLOC1798,79066
#define SQLITE_CONFIG_GETMALLOC SQLITE_CONFIG_GETMALLOC1799,79132
#define SQLITE_CONFIG_SCRATCH SQLITE_CONFIG_SCRATCH1800,79198
#define SQLITE_CONFIG_PAGECACHE SQLITE_CONFIG_PAGECACHE1801,79264
#define SQLITE_CONFIG_HEAP SQLITE_CONFIG_HEAP1802,79330
#define SQLITE_CONFIG_MEMSTATUS SQLITE_CONFIG_MEMSTATUS1803,79401
#define SQLITE_CONFIG_MUTEX SQLITE_CONFIG_MUTEX1804,79454
#define SQLITE_CONFIG_GETMUTEX SQLITE_CONFIG_GETMUTEX1805,79522
#define SQLITE_CONFIG_LOOKASIDE SQLITE_CONFIG_LOOKASIDE1807,79657
#define SQLITE_CONFIG_PCACHE SQLITE_CONFIG_PCACHE1808,79710
#define SQLITE_CONFIG_GETPCACHE SQLITE_CONFIG_GETPCACHE1809,79779
#define SQLITE_CONFIG_LOG SQLITE_CONFIG_LOG1810,79848
#define SQLITE_DBCONFIG_LOOKASIDE SQLITE_DBCONFIG_LOOKASIDE1845,81517
#define SQLITE_DENY SQLITE_DENY2531,114092
#define SQLITE_IGNORE SQLITE_IGNORE2532,114162
#define SQLITE_CREATE_INDEX SQLITE_CREATE_INDEX2554,115287
#define SQLITE_CREATE_TABLE SQLITE_CREATE_TABLE2555,115366
#define SQLITE_CREATE_TEMP_INDEX SQLITE_CREATE_TEMP_INDEX2556,115445
#define SQLITE_CREATE_TEMP_TABLE SQLITE_CREATE_TEMP_TABLE2557,115524
#define SQLITE_CREATE_TEMP_TRIGGER SQLITE_CREATE_TEMP_TRIGGER2558,115603
#define SQLITE_CREATE_TEMP_VIEW SQLITE_CREATE_TEMP_VIEW2559,115682
#define SQLITE_CREATE_TRIGGER SQLITE_CREATE_TRIGGER2560,115761
#define SQLITE_CREATE_VIEW SQLITE_CREATE_VIEW2561,115840
#define SQLITE_DELETE SQLITE_DELETE2562,115919
#define SQLITE_DROP_INDEX SQLITE_DROP_INDEX2563,115998
#define SQLITE_DROP_TABLE SQLITE_DROP_TABLE2564,116077
#define SQLITE_DROP_TEMP_INDEX SQLITE_DROP_TEMP_INDEX2565,116156
#define SQLITE_DROP_TEMP_TABLE SQLITE_DROP_TEMP_TABLE2566,116235
#define SQLITE_DROP_TEMP_TRIGGER SQLITE_DROP_TEMP_TRIGGER2567,116314
#define SQLITE_DROP_TEMP_VIEW SQLITE_DROP_TEMP_VIEW2568,116393
#define SQLITE_DROP_TRIGGER SQLITE_DROP_TRIGGER2569,116472
#define SQLITE_DROP_VIEW SQLITE_DROP_VIEW2570,116551
#define SQLITE_INSERT SQLITE_INSERT2571,116630
#define SQLITE_PRAGMA SQLITE_PRAGMA2572,116709
#define SQLITE_READ SQLITE_READ2573,116788
#define SQLITE_SELECT SQLITE_SELECT2574,116867
#define SQLITE_TRANSACTION SQLITE_TRANSACTION2575,116946
#define SQLITE_UPDATE SQLITE_UPDATE2576,117025
#define SQLITE_ATTACH SQLITE_ATTACH2577,117104
#define SQLITE_DETACH SQLITE_DETACH2578,117183
#define SQLITE_ALTER_TABLE SQLITE_ALTER_TABLE2579,117262
#define SQLITE_REINDEX SQLITE_REINDEX2580,117341
#define SQLITE_ANALYZE SQLITE_ANALYZE2581,117420
#define SQLITE_CREATE_VTABLE SQLITE_CREATE_VTABLE2582,117499
#define SQLITE_DROP_VTABLE SQLITE_DROP_VTABLE2583,117578
#define SQLITE_FUNCTION SQLITE_FUNCTION2584,117657
#define SQLITE_SAVEPOINT SQLITE_SAVEPOINT2585,117736
#define SQLITE_COPY SQLITE_COPY2586,117815
typedef struct sqlite3_stmt sqlite3_stmt;sqlite3_stmt2799,128044
#define SQLITE_LIMIT_LENGTH SQLITE_LIMIT_LENGTH2886,131660
#define SQLITE_LIMIT_SQL_LENGTH SQLITE_LIMIT_SQL_LENGTH2887,131709
#define SQLITE_LIMIT_COLUMN SQLITE_LIMIT_COLUMN2888,131758
#define SQLITE_LIMIT_EXPR_DEPTH SQLITE_LIMIT_EXPR_DEPTH2889,131807
#define SQLITE_LIMIT_COMPOUND_SELECT SQLITE_LIMIT_COMPOUND_SELECT2890,131856
#define SQLITE_LIMIT_VDBE_OP SQLITE_LIMIT_VDBE_OP2891,131905
#define SQLITE_LIMIT_FUNCTION_ARG SQLITE_LIMIT_FUNCTION_ARG2892,131954
#define SQLITE_LIMIT_ATTACHED SQLITE_LIMIT_ATTACHED2893,132003
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH SQLITE_LIMIT_LIKE_PATTERN_LENGTH2894,132052
#define SQLITE_LIMIT_VARIABLE_NUMBER SQLITE_LIMIT_VARIABLE_NUMBER2895,132101
#define SQLITE_LIMIT_TRIGGER_DEPTH SQLITE_LIMIT_TRIGGER_DEPTH2896,132150
typedef struct Mem sqlite3_value;sqlite3_value3053,139841
typedef struct sqlite3_context sqlite3_context;sqlite3_context3067,140423
#define SQLITE_INTEGER SQLITE_INTEGER3444,157536
#define SQLITE_FLOAT SQLITE_FLOAT3445,157562
#define SQLITE_BLOB SQLITE_BLOB3446,157588
#define SQLITE_NULL SQLITE_NULL3447,157614
# undef SQLITE_TEXTSQLITE_TEXT3449,157659
# define SQLITE_TEXT SQLITE_TEXT3451,157685
#define SQLITE3_TEXT SQLITE3_TEXT3453,157719
#define SQLITE_UTF8 SQLITE_UTF83771,173570
#define SQLITE_UTF16LE SQLITE_UTF16LE3772,173602
#define SQLITE_UTF16BE SQLITE_UTF16BE3773,173634
#define SQLITE_UTF16 SQLITE_UTF163774,173666
#define SQLITE_ANY SQLITE_ANY3775,173729
#define SQLITE_UTF16_ALIGNED SQLITE_UTF16_ALIGNED3776,173799
typedef void (*sqlite3_destructor_type)(void*);sqlite3_destructor_type3981,183538
#define SQLITE_STATIC SQLITE_STATIC3982,183586
#define SQLITE_TRANSIENT SQLITE_TRANSIENT3983,183642
SQLITE_API char *sqlite3_temp_directory;sqlite3_temp_directory4303,198362
typedef struct sqlite3_vtab sqlite3_vtab;sqlite3_vtab4696,215671
typedef struct sqlite3_index_info sqlite3_index_info;sqlite3_index_info4697,215713
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;sqlite3_vtab_cursor4698,215767
typedef struct sqlite3_module sqlite3_module;sqlite3_module4699,215823
struct sqlite3_module {sqlite3_module4718,216593
  int iVersion;iVersion4719,216617
  int (*xCreate)(sqlite3*, void *pAux,xCreate4720,216633
  int (*xConnect)(sqlite3*, void *pAux,xConnect4723,216768
  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);xBestIndex4726,216904
  int (*xDisconnect)(sqlite3_vtab *pVTab);xDisconnect4727,216967
  int (*xDestroy)(sqlite3_vtab *pVTab);xDestroy4728,217010
  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);xOpen4729,217050
  int (*xClose)(sqlite3_vtab_cursor*);xClose4730,217119
  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,xFilter4731,217158
  int (*xNext)(sqlite3_vtab_cursor*);xNext4733,217278
  int (*xEof)(sqlite3_vtab_cursor*);xEof4734,217316
  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);xColumn4735,217353
  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);xRowid4736,217416
  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);xUpdate4737,217478
  int (*xBegin)(sqlite3_vtab *pVTab);xBegin4738,217552
  int (*xSync)(sqlite3_vtab *pVTab);xSync4739,217590
  int (*xCommit)(sqlite3_vtab *pVTab);xCommit4740,217627
  int (*xRollback)(sqlite3_vtab *pVTab);xRollback4741,217666
  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,xFindFunction4742,217707
  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);xRename4745,217896
struct sqlite3_index_info {sqlite3_index_info4799,220341
  int nConstraint;           /* Number of entries in aConstraint */nConstraint4801,220384
  struct sqlite3_index_constraint {sqlite3_index_constraint4802,220452
     int iColumn;              /* Column on left-hand side of constraint */iColumn4803,220488
     unsigned char op;         /* Constraint operator */op4804,220564
     unsigned char usable;     /* True if this constraint is usable */usable4805,220621
     int iTermOffset;          /* Used internally - xBestIndex should ignore */iTermOffset4806,220692
  } *aConstraint;            /* Table of WHERE clause constraints */aConstraint4807,220772
  int nOrderBy;              /* Number of terms in the ORDER BY clause */nOrderBy4808,220841
  struct sqlite3_index_orderby {sqlite3_index_orderby4809,220915
     int iColumn;              /* Column number */iColumn4810,220948
     unsigned char desc;       /* True for DESC.  False for ASC. */desc4811,220999
  } *aOrderBy;               /* The ORDER BY clause */aOrderBy4812,221067
  struct sqlite3_index_constraint_usage {sqlite3_index_constraint_usage4814,221138
    int argvIndex;           /* if >0, constraint is part of argv to xFilter */argvIndex4815,221180
    unsigned char omit;      /* Do not code a test for this constraint */omit4816,221260
  } *aConstraintUsage;aConstraintUsage4817,221334
  int idxNum;                /* Number used to identify the index */idxNum4818,221357
  char *idxStr;              /* String, possibly obtained from sqlite3_malloc */idxStr4819,221426
  int needToFreeIdxStr;      /* Free idxStr using sqlite3_free() if true */needToFreeIdxStr4820,221507
  int orderByConsumed;       /* True if output is already ordered */orderByConsumed4821,221583
  double estimatedCost;      /* Estimated cost of using this index */estimatedCost4822,221652
#define SQLITE_INDEX_CONSTRAINT_EQ SQLITE_INDEX_CONSTRAINT_EQ4824,221725
#define SQLITE_INDEX_CONSTRAINT_GT SQLITE_INDEX_CONSTRAINT_GT4825,221765
#define SQLITE_INDEX_CONSTRAINT_LE SQLITE_INDEX_CONSTRAINT_LE4826,221805
#define SQLITE_INDEX_CONSTRAINT_LT SQLITE_INDEX_CONSTRAINT_LT4827,221845
#define SQLITE_INDEX_CONSTRAINT_GE SQLITE_INDEX_CONSTRAINT_GE4828,221886
#define SQLITE_INDEX_CONSTRAINT_MATCH SQLITE_INDEX_CONSTRAINT_MATCH4829,221927
struct sqlite3_vtab {sqlite3_vtab4888,224704
  const sqlite3_module *pModule;  /* The module for this virtual table */pModule4889,224726
  int nRef;                       /* NO LONGER USED */nRef4890,224800
  char *zErrMsg;                  /* Error message from sqlite3_mprintf() */zErrMsg4891,224855
struct sqlite3_vtab_cursor {sqlite3_vtab_cursor4913,225809
  sqlite3_vtab *pVtab;      /* Virtual table of this cursor */pVtab4914,225838
typedef struct sqlite3_blob sqlite3_blob;sqlite3_blob4972,228245
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;sqlite3_mutex_methods5364,246169
struct sqlite3_mutex_methods {sqlite3_mutex_methods5365,246229
  int (*xMutexInit)(void);xMutexInit5366,246260
  int (*xMutexEnd)(void);xMutexEnd5367,246287
  sqlite3_mutex *(*xMutexAlloc)(int);xMutexAlloc5368,246313
  void (*xMutexFree)(sqlite3_mutex *);xMutexFree5369,246351
  void (*xMutexEnter)(sqlite3_mutex *);xMutexEnter5370,246390
  int (*xMutexTry)(sqlite3_mutex *);xMutexTry5371,246430
  void (*xMutexLeave)(sqlite3_mutex *);xMutexLeave5372,246467
  int (*xMutexHeld)(sqlite3_mutex *);xMutexHeld5373,246507
  int (*xMutexNotheld)(sqlite3_mutex *);xMutexNotheld5374,246545
#define SQLITE_MUTEX_FAST SQLITE_MUTEX_FAST5421,248580
#define SQLITE_MUTEX_RECURSIVE SQLITE_MUTEX_RECURSIVE5422,248620
#define SQLITE_MUTEX_STATIC_MASTER SQLITE_MUTEX_STATIC_MASTER5423,248660
#define SQLITE_MUTEX_STATIC_MEM SQLITE_MUTEX_STATIC_MEM5424,248700
#define SQLITE_MUTEX_STATIC_MEM2 SQLITE_MUTEX_STATIC_MEM25425,248764
#define SQLITE_MUTEX_STATIC_OPEN SQLITE_MUTEX_STATIC_OPEN5426,248820
#define SQLITE_MUTEX_STATIC_PRNG SQLITE_MUTEX_STATIC_PRNG5427,248886
#define SQLITE_MUTEX_STATIC_LRU SQLITE_MUTEX_STATIC_LRU5428,248950
#define SQLITE_MUTEX_STATIC_LRU2 SQLITE_MUTEX_STATIC_LRU25429,249011
#define SQLITE_TESTCTRL_FIRST SQLITE_TESTCTRL_FIRST5500,252108
#define SQLITE_TESTCTRL_PRNG_SAVE SQLITE_TESTCTRL_PRNG_SAVE5501,252159
#define SQLITE_TESTCTRL_PRNG_RESTORE SQLITE_TESTCTRL_PRNG_RESTORE5502,252210
#define SQLITE_TESTCTRL_PRNG_RESET SQLITE_TESTCTRL_PRNG_RESET5503,252261
#define SQLITE_TESTCTRL_BITVEC_TEST SQLITE_TESTCTRL_BITVEC_TEST5504,252312
#define SQLITE_TESTCTRL_FAULT_INSTALL SQLITE_TESTCTRL_FAULT_INSTALL5505,252363
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS5506,252414
#define SQLITE_TESTCTRL_PENDING_BYTE SQLITE_TESTCTRL_PENDING_BYTE5507,252465
#define SQLITE_TESTCTRL_ASSERT SQLITE_TESTCTRL_ASSERT5508,252516
#define SQLITE_TESTCTRL_ALWAYS SQLITE_TESTCTRL_ALWAYS5509,252567
#define SQLITE_TESTCTRL_RESERVE SQLITE_TESTCTRL_RESERVE5510,252618
#define SQLITE_TESTCTRL_OPTIMIZATIONS SQLITE_TESTCTRL_OPTIMIZATIONS5511,252669
#define SQLITE_TESTCTRL_ISKEYWORD SQLITE_TESTCTRL_ISKEYWORD5512,252720
#define SQLITE_TESTCTRL_LAST SQLITE_TESTCTRL_LAST5513,252771
#define SQLITE_STATUS_MEMORY_USED SQLITE_STATUS_MEMORY_USED5625,258173
#define SQLITE_STATUS_PAGECACHE_USED SQLITE_STATUS_PAGECACHE_USED5626,258218
#define SQLITE_STATUS_PAGECACHE_OVERFLOW SQLITE_STATUS_PAGECACHE_OVERFLOW5627,258263
#define SQLITE_STATUS_SCRATCH_USED SQLITE_STATUS_SCRATCH_USED5628,258308
#define SQLITE_STATUS_SCRATCH_OVERFLOW SQLITE_STATUS_SCRATCH_OVERFLOW5629,258353
#define SQLITE_STATUS_MALLOC_SIZE SQLITE_STATUS_MALLOC_SIZE5630,258398
#define SQLITE_STATUS_PARSER_STACK SQLITE_STATUS_PARSER_STACK5631,258443
#define SQLITE_STATUS_PAGECACHE_SIZE SQLITE_STATUS_PAGECACHE_SIZE5632,258488
#define SQLITE_STATUS_SCRATCH_SIZE SQLITE_STATUS_SCRATCH_SIZE5633,258533
#define SQLITE_DBSTATUS_LOOKASIDE_USED SQLITE_DBSTATUS_LOOKASIDE_USED5674,260201
#define SQLITE_STMTSTATUS_FULLSCAN_STEP SQLITE_STMTSTATUS_FULLSCAN_STEP5725,262223
#define SQLITE_STMTSTATUS_SORT SQLITE_STMTSTATUS_SORT5726,262269
typedef struct sqlite3_pcache sqlite3_pcache;sqlite3_pcache5740,262705
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;sqlite3_pcache_methods5870,269745
struct sqlite3_pcache_methods {sqlite3_pcache_methods5871,269807
  void *pArg;pArg5872,269839
  int (*xInit)(void*);xInit5873,269853
  void (*xShutdown)(void*);xShutdown5874,269876
  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);xCreate5875,269904
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize5876,269962
  int (*xPagecount)(sqlite3_pcache*);xPagecount5877,270017
  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch5878,270055
  void (*xUnpin)(sqlite3_pcache*, void*, int discard);xUnpin5879,270121
  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);xRekey5880,270176
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate5881,270252
  void (*xDestroy)(sqlite3_pcache*);xDestroy5882,270307
typedef struct sqlite3_backup sqlite3_backup;sqlite3_backup5896,270699
# undef doubledouble6248,289077
#define _SQLITE_HASH_H__SQLITE_HASH_H_6276,289970
typedef struct Hash Hash;Hash6279,290037
typedef struct HashElem HashElem;HashElem6280,290063
struct Hash {Hash6303,291178
  unsigned int htsize;      /* Number of buckets in the hash table */htsize6304,291192
  unsigned int count;       /* Number of entries in this table */count6305,291262
  HashElem *first;          /* The first element of the array */first6306,291328
  struct _ht {              /* the hash table */_ht6307,291393
    int count;                 /* Number of entries with this hash */count6308,291442
    HashElem *chain;           /* Pointer to first entry with this hash */chain6309,291512
  } *ht;ht6310,291587
struct HashElem {HashElem6319,291858
  HashElem *next, *prev;       /* Next and previous elements in the table */next6320,291876
  HashElem *next, *prev;       /* Next and previous elements in the table */prev6320,291876
  void *data;                  /* Data associated with this element */data6321,291953
  const char *pKey; int nKey;  /* Key associated with this element */pKey6322,292024
  const char *pKey; int nKey;  /* Key associated with this element */nKey6322,292024
#define sqliteHashFirst(sqliteHashFirst6345,292697
#define sqliteHashNext(sqliteHashNext6346,292738
#define sqliteHashData(sqliteHashData6347,292778
#define TK_SEMI TK_SEMI6362,293390
#define TK_EXPLAIN TK_EXPLAIN6363,293435
#define TK_QUERY TK_QUERY6364,293480
#define TK_PLAN TK_PLAN6365,293525
#define TK_BEGIN TK_BEGIN6366,293570
#define TK_TRANSACTION TK_TRANSACTION6367,293615
#define TK_DEFERRED TK_DEFERRED6368,293660
#define TK_IMMEDIATE TK_IMMEDIATE6369,293705
#define TK_EXCLUSIVE TK_EXCLUSIVE6370,293750
#define TK_COMMIT TK_COMMIT6371,293795
#define TK_END TK_END6372,293840
#define TK_ROLLBACK TK_ROLLBACK6373,293885
#define TK_SAVEPOINT TK_SAVEPOINT6374,293930
#define TK_RELEASE TK_RELEASE6375,293975
#define TK_TO TK_TO6376,294020
#define TK_TABLE TK_TABLE6377,294065
#define TK_CREATE TK_CREATE6378,294110
#define TK_IF TK_IF6379,294155
#define TK_NOT TK_NOT6380,294200
#define TK_EXISTS TK_EXISTS6381,294245
#define TK_TEMP TK_TEMP6382,294290
#define TK_LP TK_LP6383,294335
#define TK_RP TK_RP6384,294380
#define TK_AS TK_AS6385,294425
#define TK_COMMA TK_COMMA6386,294470
#define TK_ID TK_ID6387,294515
#define TK_INDEXED TK_INDEXED6388,294560
#define TK_ABORT TK_ABORT6389,294605
#define TK_ACTION TK_ACTION6390,294650
#define TK_AFTER TK_AFTER6391,294695
#define TK_ANALYZE TK_ANALYZE6392,294740
#define TK_ASC TK_ASC6393,294785
#define TK_ATTACH TK_ATTACH6394,294830
#define TK_BEFORE TK_BEFORE6395,294875
#define TK_BY TK_BY6396,294920
#define TK_CASCADE TK_CASCADE6397,294965
#define TK_CAST TK_CAST6398,295010
#define TK_COLUMNKW TK_COLUMNKW6399,295055
#define TK_CONFLICT TK_CONFLICT6400,295100
#define TK_DATABASE TK_DATABASE6401,295145
#define TK_DESC TK_DESC6402,295190
#define TK_DETACH TK_DETACH6403,295235
#define TK_EACH TK_EACH6404,295280
#define TK_FAIL TK_FAIL6405,295325
#define TK_FOR TK_FOR6406,295370
#define TK_IGNORE TK_IGNORE6407,295415
#define TK_INITIALLY TK_INITIALLY6408,295460
#define TK_INSTEAD TK_INSTEAD6409,295505
#define TK_LIKE_KW TK_LIKE_KW6410,295550
#define TK_MATCH TK_MATCH6411,295595
#define TK_NO TK_NO6412,295640
#define TK_KEY TK_KEY6413,295685
#define TK_OF TK_OF6414,295730
#define TK_OFFSET TK_OFFSET6415,295775
#define TK_PRAGMA TK_PRAGMA6416,295820
#define TK_RAISE TK_RAISE6417,295865
#define TK_REPLACE TK_REPLACE6418,295910
#define TK_RESTRICT TK_RESTRICT6419,295955
#define TK_ROW TK_ROW6420,296000
#define TK_TRIGGER TK_TRIGGER6421,296045
#define TK_VACUUM TK_VACUUM6422,296090
#define TK_VIEW TK_VIEW6423,296135
#define TK_VIRTUAL TK_VIRTUAL6424,296180
#define TK_REINDEX TK_REINDEX6425,296225
#define TK_RENAME TK_RENAME6426,296270
#define TK_CTIME_KW TK_CTIME_KW6427,296315
#define TK_ANY TK_ANY6428,296360
#define TK_OR TK_OR6429,296405
#define TK_AND TK_AND6430,296450
#define TK_IS TK_IS6431,296495
#define TK_BETWEEN TK_BETWEEN6432,296540
#define TK_IN TK_IN6433,296585
#define TK_ISNULL TK_ISNULL6434,296630
#define TK_NOTNULL TK_NOTNULL6435,296675
#define TK_NE TK_NE6436,296720
#define TK_EQ TK_EQ6437,296765
#define TK_GT TK_GT6438,296810
#define TK_LE TK_LE6439,296855
#define TK_LT TK_LT6440,296900
#define TK_GE TK_GE6441,296945
#define TK_ESCAPE TK_ESCAPE6442,296990
#define TK_BITAND TK_BITAND6443,297035
#define TK_BITOR TK_BITOR6444,297080
#define TK_LSHIFT TK_LSHIFT6445,297125
#define TK_RSHIFT TK_RSHIFT6446,297170
#define TK_PLUS TK_PLUS6447,297215
#define TK_MINUS TK_MINUS6448,297260
#define TK_STAR TK_STAR6449,297305
#define TK_SLASH TK_SLASH6450,297350
#define TK_REM TK_REM6451,297395
#define TK_CONCAT TK_CONCAT6452,297440
#define TK_COLLATE TK_COLLATE6453,297485
#define TK_BITNOT TK_BITNOT6454,297530
#define TK_STRING TK_STRING6455,297575
#define TK_JOIN_KW TK_JOIN_KW6456,297620
#define TK_CONSTRAINT TK_CONSTRAINT6457,297665
#define TK_DEFAULT TK_DEFAULT6458,297710
#define TK_NULL TK_NULL6459,297755
#define TK_PRIMARY TK_PRIMARY6460,297800
#define TK_UNIQUE TK_UNIQUE6461,297845
#define TK_CHECK TK_CHECK6462,297891
#define TK_REFERENCES TK_REFERENCES6463,297937
#define TK_AUTOINCR TK_AUTOINCR6464,297983
#define TK_ON TK_ON6465,298029
#define TK_INSERT TK_INSERT6466,298075
#define TK_DELETE TK_DELETE6467,298121
#define TK_UPDATE TK_UPDATE6468,298167
#define TK_SET TK_SET6469,298213
#define TK_DEFERRABLE TK_DEFERRABLE6470,298259
#define TK_FOREIGN TK_FOREIGN6471,298305
#define TK_DROP TK_DROP6472,298351
#define TK_UNION TK_UNION6473,298397
#define TK_ALL TK_ALL6474,298443
#define TK_EXCEPT TK_EXCEPT6475,298489
#define TK_INTERSECT TK_INTERSECT6476,298535
#define TK_SELECT TK_SELECT6477,298581
#define TK_DISTINCT TK_DISTINCT6478,298627
#define TK_DOT TK_DOT6479,298673
#define TK_FROM TK_FROM6480,298719
#define TK_JOIN TK_JOIN6481,298765
#define TK_USING TK_USING6482,298811
#define TK_ORDER TK_ORDER6483,298857
#define TK_GROUP TK_GROUP6484,298903
#define TK_HAVING TK_HAVING6485,298949
#define TK_LIMIT TK_LIMIT6486,298995
#define TK_WHERE TK_WHERE6487,299041
#define TK_INTO TK_INTO6488,299087
#define TK_VALUES TK_VALUES6489,299133
#define TK_INTEGER TK_INTEGER6490,299179
#define TK_FLOAT TK_FLOAT6491,299225
#define TK_BLOB TK_BLOB6492,299271
#define TK_REGISTER TK_REGISTER6493,299317
#define TK_VARIABLE TK_VARIABLE6494,299363
#define TK_CASE TK_CASE6495,299409
#define TK_WHEN TK_WHEN6496,299455
#define TK_THEN TK_THEN6497,299501
#define TK_ELSE TK_ELSE6498,299547
#define TK_INDEX TK_INDEX6499,299593
#define TK_ALTER TK_ALTER6500,299639
#define TK_ADD TK_ADD6501,299685
#define TK_TO_TEXT TK_TO_TEXT6502,299731
#define TK_TO_BLOB TK_TO_BLOB6503,299777
#define TK_TO_NUMERIC TK_TO_NUMERIC6504,299823
#define TK_TO_INT TK_TO_INT6505,299869
#define TK_TO_REAL TK_TO_REAL6506,299915
#define TK_ISNOT TK_ISNOT6507,299961
#define TK_END_OF_FILE TK_END_OF_FILE6508,300007
#define TK_ILLEGAL TK_ILLEGAL6509,300053
#define TK_SPACE TK_SPACE6510,300099
#define TK_UNCLOSED_STRING TK_UNCLOSED_STRING6511,300145
#define TK_FUNCTION TK_FUNCTION6512,300191
#define TK_COLUMN TK_COLUMN6513,300237
#define TK_AGG_FUNCTION TK_AGG_FUNCTION6514,300283
#define TK_AGG_COLUMN TK_AGG_COLUMN6515,300329
#define TK_CONST_FUNC TK_CONST_FUNC6516,300375
#define TK_UMINUS TK_UMINUS6517,300421
#define TK_UPLUS TK_UPLUS6518,300467
# define double double6533,300922
# define LONGDOUBLE_TYPE LONGDOUBLE_TYPE6534,300951
#   define SQLITE_BIG_DBL SQLITE_BIG_DBL6536,301013
# define SQLITE_OMIT_DATETIME_FUNCS SQLITE_OMIT_DATETIME_FUNCS6538,301072
# define SQLITE_OMIT_TRACE SQLITE_OMIT_TRACE6539,301110
# undef SQLITE_MIXED_ENDIAN_64BIT_FLOATSQLITE_MIXED_ENDIAN_64BIT_FLOAT6540,301139
# undef SQLITE_HAVE_ISNANSQLITE_HAVE_ISNAN6541,301179
# define SQLITE_BIG_DBL SQLITE_BIG_DBL6544,301235
#define OMIT_TEMPDB OMIT_TEMPDB6553,301509
#define OMIT_TEMPDB OMIT_TEMPDB6555,301537
#define SQLITE_MAX_FILE_FORMAT SQLITE_MAX_FILE_FORMAT6564,301819
# define SQLITE_DEFAULT_FILE_FORMAT SQLITE_DEFAULT_FILE_FORMAT6566,301887
# define SQLITE_DEFAULT_RECURSIVE_TRIGGERS SQLITE_DEFAULT_RECURSIVE_TRIGGERS6574,302089
# define SQLITE_TEMP_STORE SQLITE_TEMP_STORE6582,302274
#define offsetof(offsetof6590,302415
# define SQLITE_EBCDIC SQLITE_EBCDIC6598,302648
# define SQLITE_ASCII SQLITE_ASCII6600,302679
#  define UINT32_TYPE UINT32_TYPE6612,303026
#  define UINT32_TYPE UINT32_TYPE6614,303064
#  define UINT16_TYPE UINT16_TYPE6619,303156
#  define UINT16_TYPE UINT16_TYPE6621,303194
#  define INT16_TYPE INT16_TYPE6626,303290
#  define INT16_TYPE INT16_TYPE6628,303326
#  define UINT8_TYPE UINT8_TYPE6633,303412
#  define UINT8_TYPE UINT8_TYPE6635,303448
#  define INT8_TYPE INT8_TYPE6640,303536
#  define INT8_TYPE INT8_TYPE6642,303570
# define LONGDOUBLE_TYPE LONGDOUBLE_TYPE6646,303641
typedef sqlite_int64 i64;          /* 8-byte signed integer */i646648,303685
typedef sqlite_uint64 u64;         /* 8-byte unsigned integer */u646649,303748
typedef UINT32_TYPE u32;           /* 4-byte unsigned integer */u326650,303813
typedef UINT16_TYPE u16;           /* 2-byte unsigned integer */u166651,303878
typedef INT16_TYPE i16;            /* 2-byte signed integer */i166652,303943
typedef UINT8_TYPE u8;             /* 1-byte unsigned integer */u86653,304006
typedef INT8_TYPE i8;              /* 1-byte signed integer */i86654,304071
#define SQLITE_MAX_U32 SQLITE_MAX_U326662,304407
SQLITE_PRIVATE const int sqlite3one = 1;sqlite3one6669,304577
SQLITE_PRIVATE const int sqlite3one;sqlite3one6671,304624
# define SQLITE_BIGENDIAN SQLITE_BIGENDIAN6675,304801
# define SQLITE_LITTLEENDIAN SQLITE_LITTLEENDIAN6676,304832
# define SQLITE_UTF16NATIVE SQLITE_UTF16NATIVE6677,304863
# define SQLITE_BIGENDIAN SQLITE_BIGENDIAN6679,304913
# define SQLITE_LITTLEENDIAN SQLITE_LITTLEENDIAN6680,304970
# define SQLITE_UTF16NATIVE SQLITE_UTF16NATIVE6681,305027
#define LARGEST_INT64 LARGEST_INT646689,305280
#define SMALLEST_INT64 SMALLEST_INT646690,305340
#define ROUND8(ROUND86696,305522
#define ROUNDDOWN8(ROUNDDOWN86701,305607
# define EIGHT_BYTE_ALIGNMENT(EIGHT_BYTE_ALIGNMENT6713,306048
# define EIGHT_BYTE_ALIGNMENT(EIGHT_BYTE_ALIGNMENT6715,306122
typedef struct BusyHandler BusyHandler;BusyHandler6728,306595
struct BusyHandler {BusyHandler6729,306635
  int (*xFunc)(void *,int);  /* The busy callback */xFunc6730,306656
  void *pArg;                /* First arg to busy callback */pArg6731,306709
  int nBusy;                 /* Incremented with each busy call */nBusy6732,306771
#define MASTER_NAME MASTER_NAME6740,307006
#define TEMP_MASTER_NAME TEMP_MASTER_NAME6741,307048
#define MASTER_ROOT MASTER_ROOT6746,307149
#define SCHEMA_TABLE(SCHEMA_TABLE6751,307217
#define ArraySize(ArraySize6757,307378
#define SQLITE_DYNAMIC SQLITE_DYNAMIC6763,307582
  #define SQLITE_WSD SQLITE_WSD6780,308454
  #define GLOBAL(GLOBAL6781,308481
  #define sqlite3GlobalConfig sqlite3GlobalConfig6782,308551
  #define SQLITE_WSD SQLITE_WSD6786,308733
  #define GLOBAL(GLOBAL6787,308755
  #define sqlite3GlobalConfig sqlite3GlobalConfig6788,308779
#define UNUSED_PARAMETER(UNUSED_PARAMETER6807,309759
#define UNUSED_PARAMETER2(UNUSED_PARAMETER26808,309797
typedef struct AggInfo AggInfo;AggInfo6813,309911
typedef struct AuthContext AuthContext;AuthContext6814,309943
typedef struct AutoincInfo AutoincInfo;AutoincInfo6815,309983
typedef struct Bitvec Bitvec;Bitvec6816,310023
typedef struct CollSeq CollSeq;CollSeq6817,310053
typedef struct Column Column;Column6818,310085
typedef struct Db Db;Db6819,310115
typedef struct Schema Schema;Schema6820,310137
typedef struct Expr Expr;Expr6821,310167
typedef struct ExprList ExprList;ExprList6822,310193
typedef struct ExprSpan ExprSpan;ExprSpan6823,310227
typedef struct FKey FKey;FKey6824,310261
typedef struct FuncDef FuncDef;FuncDef6825,310287
typedef struct FuncDefHash FuncDefHash;FuncDefHash6826,310319
typedef struct IdList IdList;IdList6827,310359
typedef struct Index Index;Index6828,310389
typedef struct IndexSample IndexSample;IndexSample6829,310417
typedef struct KeyClass KeyClass;KeyClass6830,310457
typedef struct KeyInfo KeyInfo;KeyInfo6831,310491
typedef struct Lookaside Lookaside;Lookaside6832,310523
typedef struct LookasideSlot LookasideSlot;LookasideSlot6833,310559
typedef struct Module Module;Module6834,310603
typedef struct NameContext NameContext;NameContext6835,310633
typedef struct Parse Parse;Parse6836,310673
typedef struct RowSet RowSet;RowSet6837,310701
typedef struct Savepoint Savepoint;Savepoint6838,310731
typedef struct Select Select;Select6839,310767
typedef struct SrcList SrcList;SrcList6840,310797
typedef struct StrAccum StrAccum;StrAccum6841,310829
typedef struct Table Table;Table6842,310863
typedef struct TableLock TableLock;TableLock6843,310891
typedef struct Token Token;Token6844,310927
typedef struct Trigger Trigger;Trigger6845,310955
typedef struct TriggerPrg TriggerPrg;TriggerPrg6846,310987
typedef struct TriggerStep TriggerStep;TriggerStep6847,311025
typedef struct UnpackedRecord UnpackedRecord;UnpackedRecord6848,311065
typedef struct VTable VTable;VTable6849,311111
typedef struct Walker Walker;Walker6850,311141
typedef struct WherePlan WherePlan;WherePlan6851,311171
typedef struct WhereInfo WhereInfo;WhereInfo6852,311207
typedef struct WhereLevel WhereLevel;WhereLevel6853,311243
#define _BTREE_H__BTREE_H_6878,312206
#define SQLITE_N_BTREE_META SQLITE_N_BTREE_META6883,312325
  #define SQLITE_DEFAULT_AUTOVACUUM SQLITE_DEFAULT_AUTOVACUUM6890,312543
#define BTREE_AUTOVACUUM_NONE BTREE_AUTOVACUUM_NONE6893,312589
#define BTREE_AUTOVACUUM_FULL BTREE_AUTOVACUUM_FULL6894,312656
#define BTREE_AUTOVACUUM_INCR BTREE_AUTOVACUUM_INCR6895,312721
typedef struct Btree Btree;Btree6900,312829
typedef struct BtCursor BtCursor;BtCursor6901,312857
typedef struct BtShared BtShared;BtShared6902,312891
typedef struct BtreeMutexArray BtreeMutexArray;BtreeMutexArray6903,312925
struct BtreeMutexArray {BtreeMutexArray6911,313219
  int nMutex;nMutex6912,313244
  Btree *aBtree[SQLITE_MAX_ATTACHED+1];aBtree6913,313258
#define BTREE_OMIT_JOURNAL BTREE_OMIT_JOURNAL6931,313813
#define BTREE_NO_READLOCK BTREE_NO_READLOCK6932,313883
#define BTREE_MEMORY BTREE_MEMORY6933,313953
#define BTREE_READONLY BTREE_READONLY6934,314017
#define BTREE_READWRITE BTREE_READWRITE6935,314090
#define BTREE_CREATE BTREE_CREATE6936,314161
#define BTREE_INTKEY BTREE_INTKEY6973,316061
#define BTREE_ZERODATA BTREE_ZERODATA6974,316139
#define BTREE_LEAFDATA BTREE_LEAFDATA6975,316205
#define BTREE_FREE_PAGE_COUNT BTREE_FREE_PAGE_COUNT6996,317121
#define BTREE_SCHEMA_VERSION BTREE_SCHEMA_VERSION6997,317157
#define BTREE_FILE_FORMAT BTREE_FILE_FORMAT6998,317193
#define BTREE_DEFAULT_CACHE_SIZE BTREE_DEFAULT_CACHE_SIZE6999,317229
#define BTREE_LARGEST_ROOT_PAGE BTREE_LARGEST_ROOT_PAGE7000,317265
#define BTREE_TEXT_ENCODING BTREE_TEXT_ENCODING7001,317301
#define BTREE_USER_VERSION BTREE_USER_VERSION7002,317337
#define BTREE_INCR_VACUUM BTREE_INCR_VACUUM7003,317373
# define sqlite3BtreeEnter(sqlite3BtreeEnter7071,320267
# define sqlite3BtreeEnterAll(sqlite3BtreeEnterAll7072,320298
# define sqlite3BtreeLeave(sqlite3BtreeLeave7090,321041
# define sqlite3BtreeEnterCursor(sqlite3BtreeEnterCursor7091,321071
# define sqlite3BtreeLeaveCursor(sqlite3BtreeLeaveCursor7092,321107
# define sqlite3BtreeLeaveAll(sqlite3BtreeLeaveAll7093,321143
# define sqlite3BtreeMutexArrayEnter(sqlite3BtreeMutexArrayEnter7094,321176
# define sqlite3BtreeMutexArrayLeave(sqlite3BtreeMutexArrayLeave7095,321216
# define sqlite3BtreeMutexArrayInsert(sqlite3BtreeMutexArrayInsert7096,321256
# define sqlite3BtreeHoldsMutex(sqlite3BtreeHoldsMutex7098,321300
# define sqlite3BtreeHoldsAllMutexes(sqlite3BtreeHoldsAllMutexes7099,321337
#define _SQLITE_VDBE_H__SQLITE_VDBE_H_7127,322388
typedef struct Vdbe Vdbe;Vdbe7134,322576
typedef struct VdbeFunc VdbeFunc;VdbeFunc7140,322710
typedef struct Mem Mem;Mem7141,322744
typedef struct SubProgram SubProgram;SubProgram7142,322768
struct VdbeOp {VdbeOp7149,322983
  u8 opcode;          /* What operation to perform */opcode7150,322999
  signed char p4type; /* One of the P4_xxx constants for p4 */p4type7151,323053
  u8 opflags;         /* Mask of the OPFLG_* flags in opcodes.h */opflags7152,323116
  u8 p5;              /* Fifth parameter is an unsigned character */p57153,323183
  int p1;             /* First operand */p17154,323252
  int p2;             /* Second parameter (often the jump destination) */p27155,323294
  int p3;             /* The third parameter */p37156,323368
    int i;                 /* Integer value if p4type==P4_INT32 */i7158,323461
    void *p;               /* Generic pointer */p7159,323528
    char *z;               /* Pointer to data for string (char array) types */z7160,323577
    i64 *pI64;             /* Used when p4type is P4_INT64 */pI647161,323656
    double *pReal;         /* Used when p4type is P4_REAL */pReal7162,323718
    FuncDef *pFunc;        /* Used when p4type is P4_FUNCDEF */pFunc7163,323779
    VdbeFunc *pVdbeFunc;   /* Used when p4type is P4_VDBEFUNC */pVdbeFunc7164,323843
    CollSeq *pColl;        /* Used when p4type is P4_COLLSEQ */pColl7165,323908
    Mem *pMem;             /* Used when p4type is P4_MEM */pMem7166,323972
    VTable *pVtab;         /* Used when p4type is P4_VTAB */pVtab7167,324032
    KeyInfo *pKeyInfo;     /* Used when p4type is P4_KEYINFO */pKeyInfo7168,324093
    int *ai;               /* Used when p4type is P4_INTARRAY */ai7169,324157
    SubProgram *pProgram;  /* Used when p4type is P4_SUBPROGRAM */pProgram7170,324222
  } p4;p47171,324289
  char *zComment;          /* Comment to improve readability */zComment7173,324317
  int cnt;                 /* Number of times this instruction was executed */cnt7176,324408
  u64 cycles;              /* Total time spent executing this instruction */cycles7177,324487
typedef struct VdbeOp VdbeOp;VdbeOp7180,324574
struct SubProgram {SubProgram7186,324666
  VdbeOp *aOp;                  /* Array of opcodes for sub-program */aOp7187,324686
  int nOp;                      /* Elements in aOp[] */nOp7188,324757
  int nMem;                     /* Number of memory cells required */nMem7189,324813
  int nCsr;                     /* Number of cursors required */nCsr7190,324883
  int nRef;                     /* Number of pointers to this structure */nRef7191,324948
  void *token;                  /* id that may be used to recursive triggers */token7192,325023
struct VdbeOpList {VdbeOpList7199,325217
  u8 opcode;          /* What operation to perform */opcode7200,325237
  signed char p1;     /* First operand */p17201,325291
  signed char p2;     /* Second parameter (often the jump destination) */p27202,325333
  signed char p3;     /* Third parameter */p37203,325407
typedef struct VdbeOpList VdbeOpList;VdbeOpList7205,325454
#define P4_NOTUSED P4_NOTUSED7210,325534
#define P4_DYNAMIC P4_DYNAMIC7211,325595
#define P4_STATIC P4_STATIC7212,325676
#define P4_COLLSEQ P4_COLLSEQ7213,325735
#define P4_FUNCDEF P4_FUNCDEF7214,325806
#define P4_KEYINFO P4_KEYINFO7215,325877
#define P4_VDBEFUNC P4_VDBEFUNC7216,325948
#define P4_MEM P4_MEM7217,326020
#define P4_TRANSIENT P4_TRANSIENT7218,326091
#define P4_VTAB P4_VTAB7219,326161
#define P4_MPRINTF P4_MPRINTF7220,326238
#define P4_REAL P4_REAL7221,326317
#define P4_INT64 P4_INT647222,326385
#define P4_INT32 P4_INT327223,326447
#define P4_INTARRAY P4_INTARRAY7224,326509
#define P4_SUBPROGRAM P4_SUBPROGRAM7225,326575
#define P4_KEYINFO_HANDOFF P4_KEYINFO_HANDOFF7234,327075
#define P4_KEYINFO_STATIC P4_KEYINFO_STATIC7235,327108
#define COLNAME_NAME COLNAME_NAME7241,327275
#define COLNAME_DECLTYPE COLNAME_DECLTYPE7242,327302
#define COLNAME_DATABASE COLNAME_DATABASE7243,327329
#define COLNAME_TABLE COLNAME_TABLE7244,327356
#define COLNAME_COLUMN COLNAME_COLUMN7245,327383
# define COLNAME_N COLNAME_N7247,327447
#   define COLNAME_N COLNAME_N7250,327551
#   define COLNAME_N COLNAME_N7252,327617
#define ADDR(ADDR7262,327942
#define OP_Goto OP_Goto7272,328370
#define OP_Gosub OP_Gosub7273,328420
#define OP_Return OP_Return7274,328470
#define OP_Yield OP_Yield7275,328520
#define OP_HaltIfNull OP_HaltIfNull7276,328570
#define OP_Halt OP_Halt7277,328620
#define OP_Integer OP_Integer7278,328670
#define OP_Int64 OP_Int647279,328720
#define OP_Real OP_Real7280,328770
#define OP_String8 OP_String87281,328848
#define OP_String OP_String7282,328926
#define OP_Null OP_Null7283,328976
#define OP_Blob OP_Blob7284,329026
#define OP_Variable OP_Variable7285,329076
#define OP_Move OP_Move7286,329126
#define OP_Copy OP_Copy7287,329176
#define OP_SCopy OP_SCopy7288,329226
#define OP_ResultRow OP_ResultRow7289,329276
#define OP_Concat OP_Concat7290,329326
#define OP_Add OP_Add7291,329404
#define OP_Subtract OP_Subtract7292,329482
#define OP_Multiply OP_Multiply7293,329560
#define OP_Divide OP_Divide7294,329638
#define OP_Remainder OP_Remainder7295,329716
#define OP_CollSeq OP_CollSeq7296,329794
#define OP_Function OP_Function7297,329844
#define OP_BitAnd OP_BitAnd7298,329894
#define OP_BitOr OP_BitOr7299,329972
#define OP_ShiftLeft OP_ShiftLeft7300,330050
#define OP_ShiftRight OP_ShiftRight7301,330128
#define OP_AddImm OP_AddImm7302,330206
#define OP_MustBeInt OP_MustBeInt7303,330256
#define OP_RealAffinity OP_RealAffinity7304,330306
#define OP_ToText OP_ToText7305,330356
#define OP_ToBlob OP_ToBlob7306,330434
#define OP_ToNumeric OP_ToNumeric7307,330512
#define OP_ToInt OP_ToInt7308,330591
#define OP_ToReal OP_ToReal7309,330669
#define OP_Eq OP_Eq7310,330747
#define OP_Ne OP_Ne7311,330825
#define OP_Lt OP_Lt7312,330903
#define OP_Le OP_Le7313,330981
#define OP_Gt OP_Gt7314,331059
#define OP_Ge OP_Ge7315,331137
#define OP_Permutation OP_Permutation7316,331215
#define OP_Compare OP_Compare7317,331265
#define OP_Jump OP_Jump7318,331315
#define OP_And OP_And7319,331365
#define OP_Or OP_Or7320,331443
#define OP_Not OP_Not7321,331521
#define OP_BitNot OP_BitNot7322,331599
#define OP_If OP_If7323,331677
#define OP_IfNot OP_IfNot7324,331727
#define OP_IsNull OP_IsNull7325,331777
#define OP_NotNull OP_NotNull7326,331855
#define OP_Column OP_Column7327,331933
#define OP_Affinity OP_Affinity7328,331983
#define OP_MakeRecord OP_MakeRecord7329,332033
#define OP_Count OP_Count7330,332083
#define OP_Savepoint OP_Savepoint7331,332133
#define OP_AutoCommit OP_AutoCommit7332,332183
#define OP_Transaction OP_Transaction7333,332233
#define OP_ReadCookie OP_ReadCookie7334,332283
#define OP_SetCookie OP_SetCookie7335,332333
#define OP_VerifyCookie OP_VerifyCookie7336,332383
#define OP_OpenRead OP_OpenRead7337,332433
#define OP_OpenWrite OP_OpenWrite7338,332483
#define OP_OpenEphemeral OP_OpenEphemeral7339,332533
#define OP_OpenPseudo OP_OpenPseudo7340,332583
#define OP_Close OP_Close7341,332633
#define OP_SeekLt OP_SeekLt7342,332683
#define OP_SeekLe OP_SeekLe7343,332733
#define OP_SeekGe OP_SeekGe7344,332783
#define OP_SeekGt OP_SeekGt7345,332833
#define OP_Seek OP_Seek7346,332883
#define OP_NotFound OP_NotFound7347,332933
#define OP_Found OP_Found7348,332983
#define OP_IsUnique OP_IsUnique7349,333033
#define OP_NotExists OP_NotExists7350,333083
#define OP_Sequence OP_Sequence7351,333133
#define OP_NewRowid OP_NewRowid7352,333183
#define OP_Insert OP_Insert7353,333233
#define OP_InsertInt OP_InsertInt7354,333283
#define OP_Delete OP_Delete7355,333333
#define OP_ResetCount OP_ResetCount7356,333383
#define OP_RowKey OP_RowKey7357,333433
#define OP_RowData OP_RowData7358,333483
#define OP_Rowid OP_Rowid7359,333533
#define OP_NullRow OP_NullRow7360,333583
#define OP_Last OP_Last7361,333633
#define OP_Sort OP_Sort7362,333683
#define OP_Rewind OP_Rewind7363,333733
#define OP_Prev OP_Prev7364,333783
#define OP_Next OP_Next7365,333833
#define OP_IdxInsert OP_IdxInsert7366,333883
#define OP_IdxDelete OP_IdxDelete7367,333933
#define OP_IdxRowid OP_IdxRowid7368,333983
#define OP_IdxLT OP_IdxLT7369,334033
#define OP_IdxGE OP_IdxGE7370,334083
#define OP_Destroy OP_Destroy7371,334133
#define OP_Clear OP_Clear7372,334183
#define OP_CreateIndex OP_CreateIndex7373,334233
#define OP_CreateTable OP_CreateTable7374,334283
#define OP_ParseSchema OP_ParseSchema7375,334333
#define OP_LoadAnalysis OP_LoadAnalysis7376,334383
#define OP_DropTable OP_DropTable7377,334433
#define OP_DropIndex OP_DropIndex7378,334483
#define OP_DropTrigger OP_DropTrigger7379,334533
#define OP_IntegrityCk OP_IntegrityCk7380,334583
#define OP_RowSetAdd OP_RowSetAdd7381,334633
#define OP_RowSetRead OP_RowSetRead7382,334683
#define OP_RowSetTest OP_RowSetTest7383,334733
#define OP_Program OP_Program7384,334783
#define OP_Param OP_Param7385,334833
#define OP_FkCounter OP_FkCounter7386,334883
#define OP_FkIfZero OP_FkIfZero7387,334933
#define OP_MemMax OP_MemMax7388,334983
#define OP_IfPos OP_IfPos7389,335033
#define OP_IfNeg OP_IfNeg7390,335083
#define OP_IfZero OP_IfZero7391,335133
#define OP_AggStep OP_AggStep7392,335183
#define OP_AggFinal OP_AggFinal7393,335233
#define OP_Vacuum OP_Vacuum7394,335283
#define OP_IncrVacuum OP_IncrVacuum7395,335333
#define OP_Expire OP_Expire7396,335383
#define OP_TableLock OP_TableLock7397,335433
#define OP_VBegin OP_VBegin7398,335483
#define OP_VCreate OP_VCreate7399,335533
#define OP_VDestroy OP_VDestroy7400,335583
#define OP_VOpen OP_VOpen7401,335633
#define OP_VFilter OP_VFilter7402,335683
#define OP_VColumn OP_VColumn7403,335733
#define OP_VNext OP_VNext7404,335783
#define OP_VRename OP_VRename7405,335833
#define OP_VUpdate OP_VUpdate7406,335883
#define OP_Pagecount OP_Pagecount7407,335933
#define OP_Trace OP_Trace7408,335983
#define OP_Noop OP_Noop7409,336033
#define OP_Explain OP_Explain7410,336083
#define OP_NotUsed_135 OP_NotUsed_1357413,336183
#define OP_NotUsed_136 OP_NotUsed_1367414,336233
#define OP_NotUsed_137 OP_NotUsed_1377415,336283
#define OP_NotUsed_138 OP_NotUsed_1387416,336333
#define OP_NotUsed_139 OP_NotUsed_1397417,336383
#define OP_NotUsed_140 OP_NotUsed_1407418,336433
#define OPFLG_JUMP OPFLG_JUMP7425,336655
#define OPFLG_OUT2_PRERELEASE OPFLG_OUT2_PRERELEASE7426,336726
#define OPFLG_IN1 OPFLG_IN17427,336787
#define OPFLG_IN2 OPFLG_IN27428,336853
#define OPFLG_IN3 OPFLG_IN37429,336919
#define OPFLG_OUT2 OPFLG_OUT27430,336985
#define OPFLG_OUT3 OPFLG_OUT37431,337052
#define OPFLG_INITIALIZER OPFLG_INITIALIZER7432,337119
# define VdbeComment(VdbeComment7511,341264
# define VdbeNoopComment(VdbeNoopComment7513,341381
# define VdbeComment(VdbeComment7515,341441
# define VdbeNoopComment(VdbeNoopComment7516,341465
#define _PAGER_H__PAGER_H_7542,342416
  #define SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT7550,342691
typedef u32 Pgno;Pgno7557,342882
typedef struct Pager Pager;Pager7562,342985
typedef struct PgHdr DbPage;DbPage7567,343046
#define PAGER_MJ_PGNO(PAGER_MJ_PGNO7577,343464
#define PAGER_OMIT_JOURNAL PAGER_OMIT_JOURNAL7584,343684
#define PAGER_NO_READLOCK PAGER_NO_READLOCK7585,343758
#define PAGER_LOCKINGMODE_QUERY PAGER_LOCKINGMODE_QUERY7590,343912
#define PAGER_LOCKINGMODE_NORMAL PAGER_LOCKINGMODE_NORMAL7591,343952
#define PAGER_LOCKINGMODE_EXCLUSIVE PAGER_LOCKINGMODE_EXCLUSIVE7592,343992
#define PAGER_JOURNALMODE_QUERY PAGER_JOURNALMODE_QUERY7597,344109
#define PAGER_JOURNALMODE_DELETE PAGER_JOURNALMODE_DELETE7598,344149
#define PAGER_JOURNALMODE_PERSIST PAGER_JOURNALMODE_PERSIST7599,344229
#define PAGER_JOURNALMODE_OFF PAGER_JOURNALMODE_OFF7600,344310
#define PAGER_JOURNALMODE_TRUNCATE PAGER_JOURNALMODE_TRUNCATE7601,344376
#define PAGER_JOURNALMODE_MEMORY PAGER_JOURNALMODE_MEMORY7602,344453
#define sqlite3PagerGet(sqlite3PagerGet7636,345796
# define disable_simulated_io_errors(disable_simulated_io_errors7685,348085
# define enable_simulated_io_errors(enable_simulated_io_errors7686,348124
typedef struct PgHdr PgHdr;PgHdr7712,348994
typedef struct PCache PCache;PCache7713,349022
struct PgHdr {PgHdr7719,349146
  void *pData;                   /* Content of this page */pData7720,349161
  void *pExtra;                  /* Extra content */pExtra7721,349221
  PgHdr *pDirty;                 /* Transient list of dirty pages */pDirty7722,349274
  Pgno pgno;                     /* Page number for this page */pgno7723,349343
  Pager *pPager;                 /* The pager this page is part of */pPager7724,349408
  u32 pageHash;                  /* Hash of page content */pageHash7726,349504
  u16 flags;                     /* PGHDR flags defined below */flags7728,349571
  i16 nRef;                      /* Number of users of this page */nRef7734,349839
  PCache *pCache;                /* Cache that owns this page */pCache7735,349907
  PgHdr *pDirtyNext;             /* Next element in list of dirty pages */pDirtyNext7737,349973
  PgHdr *pDirtyPrev;             /* Previous element in list of dirty pages */pDirtyPrev7738,350048
#define PGHDR_DIRTY PGHDR_DIRTY7742,350164
#define PGHDR_NEED_SYNC PGHDR_NEED_SYNC7743,350226
#define PGHDR_NEED_READ PGHDR_NEED_READ7745,350381
#define PGHDR_REUSE_UNLIKELY PGHDR_REUSE_UNLIKELY7746,350444
#define PGHDR_DONT_WRITE PGHDR_DONT_WRITE7747,350519
#define _SQLITE_OS_H__SQLITE_OS_H_7876,355488
#   undef SQLITE_OS_UNIXSQLITE_OS_UNIX7887,355877
#   define SQLITE_OS_UNIX SQLITE_OS_UNIX7888,355902
#   undef SQLITE_OS_WINSQLITE_OS_WIN7889,355930
#   define SQLITE_OS_WIN SQLITE_OS_WIN7890,355954
#   undef SQLITE_OS_OS2SQLITE_OS_OS27891,355981
#   define SQLITE_OS_OS2 SQLITE_OS_OS27892,356005
#   undef SQLITE_OS_OTHERSQLITE_OS_OTHER7894,356039
# define SQLITE_OS_OTHER SQLITE_OS_OTHER7898,356138
#     define SQLITE_OS_WIN SQLITE_OS_WIN7901,356301
#     define SQLITE_OS_UNIX SQLITE_OS_UNIX7902,356330
#     define SQLITE_OS_OS2 SQLITE_OS_OS27903,356360
#     define SQLITE_OS_WIN SQLITE_OS_WIN7905,356486
#     define SQLITE_OS_UNIX SQLITE_OS_UNIX7906,356515
#     define SQLITE_OS_OS2 SQLITE_OS_OS27907,356545
#     define SQLITE_OS_WIN SQLITE_OS_WIN7909,356583
#     define SQLITE_OS_UNIX SQLITE_OS_UNIX7910,356612
#     define SQLITE_OS_OS2 SQLITE_OS_OS27911,356642
#  define SQLITE_OS_UNIX SQLITE_OS_UNIX7914,356687
#  define SQLITE_OS_OS2 SQLITE_OS_OS27915,356714
#  define SQLITE_OS_WIN SQLITE_OS_WIN7919,356777
# define SQLITE_OS_WINCE SQLITE_OS_WINCE7928,356930
# define SQLITE_OS_WINCE SQLITE_OS_WINCE7930,356963
# define SQLITE_TEMPNAME_SIZE SQLITE_TEMPNAME_SIZE7939,357096
# define INCL_DOSDATETIMEINCL_DOSDATETIME7944,357337
# define INCL_DOSFILEMGRINCL_DOSFILEMGR7945,357363
# define INCL_DOSERRORSINCL_DOSERRORS7946,357388
# define INCL_DOSMISCINCL_DOSMISC7947,357412
# define INCL_DOSPROCESSINCL_DOSPROCESS7948,357434
# define INCL_DOSMODULEMGRINCL_DOSMODULEMGR7949,357459
# define INCL_DOSSEMAPHORESINCL_DOSSEMAPHORES7950,357486
# define SQLITE_TEMPNAME_SIZE SQLITE_TEMPNAME_SIZE7953,357552
# define SQLITE_TEMPNAME_SIZE SQLITE_TEMPNAME_SIZE7955,357605
# define SET_FULLSYNC(SET_FULLSYNC7962,357746
# define SQLITE_DEFAULT_SECTOR_SIZE SQLITE_DEFAULT_SECTOR_SIZE7969,357859
# define SQLITE_TEMP_FILE_PREFIX SQLITE_TEMP_FILE_PREFIX7994,359163
#define NO_LOCK NO_LOCK8014,360091
#define SHARED_LOCK SHARED_LOCK8015,360117
#define RESERVED_LOCK RESERVED_LOCK8016,360143
#define PENDING_LOCK PENDING_LOCK8017,360169
#define EXCLUSIVE_LOCK EXCLUSIVE_LOCK8018,360195
#define PENDING_BYTE PENDING_BYTE8075,363264
#define RESERVED_BYTE RESERVED_BYTE8076,363309
#define SHARED_FIRST SHARED_FIRST8077,363352
#define SHARED_SIZE SHARED_SIZE8078,363395
#define SQLITE_FCNTL_DB_UNCHANGED SQLITE_FCNTL_DB_UNCHANGED8098,364235
# define SQLITE_MUTEX_OMITSQLITE_MUTEX_OMIT8174,367520
#    define SQLITE_MUTEX_PTHREADSSQLITE_MUTEX_PTHREADS8178,367628
#    define SQLITE_MUTEX_W32SQLITE_MUTEX_W328180,367684
#    define SQLITE_MUTEX_OS2SQLITE_MUTEX_OS28182,367735
#    define SQLITE_MUTEX_NOOPSQLITE_MUTEX_NOOP8184,367772
#define sqlite3_mutex_alloc(sqlite3_mutex_alloc8192,367920
#define sqlite3_mutex_free(sqlite3_mutex_free8193,367974
#define sqlite3_mutex_enter(sqlite3_mutex_enter8194,368004
#define sqlite3_mutex_try(sqlite3_mutex_try8195,368035
#define sqlite3_mutex_leave(sqlite3_mutex_leave8196,368079
#define sqlite3_mutex_held(sqlite3_mutex_held8197,368110
#define sqlite3_mutex_notheld(sqlite3_mutex_notheld8198,368146
#define sqlite3MutexAlloc(sqlite3MutexAlloc8199,368182
#define sqlite3MutexInit(sqlite3MutexInit8200,368236
#define sqlite3MutexEnd(sqlite3MutexEnd8201,368280
struct Db {Db8215,368828
  char *zName;         /* Name of this database */zName8216,368840
  Btree *pBt;          /* The B*Tree structure for this database file */pBt8217,368891
  u8 inTrans;          /* 0: not writable.  1: Transaction.  2: Checkpoint */inTrans8218,368964
  u8 safety_level;     /* How aggressive at syncing data to disk */safety_level8219,369042
  Schema *pSchema;     /* Pointer to database schema (possibly shared) */pSchema8220,369110
struct Schema {Schema8234,369679
  int schema_cookie;   /* Database schema version number for this file */schema_cookie8235,369695
  Hash tblHash;        /* All tables indexed by name */tblHash8236,369769
  Hash idxHash;        /* All (named) indices indexed by name */idxHash8237,369825
  Hash trigHash;       /* All triggers indexed by name */trigHash8238,369890
  Hash fkeyHash;       /* All foreign keys by referenced table name */fkeyHash8239,369948
  Table *pSeqTab;      /* The sqlite_sequence table used by AUTOINCREMENT */pSeqTab8240,370019
  u8 file_format;      /* Schema format version for this file */file_format8241,370096
  u8 enc;              /* Text encoding used by this database */enc8242,370161
  u16 flags;           /* Flags associated with this schema */flags8243,370226
  int cache_size;      /* Number of pages to use in the cache */cache_size8244,370289
  sqlite3 *db;         /* "Owner" connection. See comment above */db8246,370387
#define DbHasProperty(DbHasProperty8254,370563
#define DbHasAnyProperty(DbHasAnyProperty8255,370636
#define DbSetProperty(DbSetProperty8256,370707
#define DbClearProperty(DbClearProperty8257,370772
#define DB_SchemaLoaded DB_SchemaLoaded8269,371202
#define DB_UnresetViews DB_UnresetViews8270,371270
#define DB_Empty DB_Empty8271,371348
#define SQLITE_N_LIMIT SQLITE_N_LIMIT8277,371534
struct Lookaside {Lookaside8299,372623
  u16 sz;                 /* Size of each buffer in bytes */sz8300,372642
  u8 bEnabled;            /* False to disable new lookaside allocations */bEnabled8301,372703
  u8 bMalloced;           /* True if pStart obtained from sqlite3_malloc() */bMalloced8302,372778
  int nOut;               /* Number of buffers currently checked out */nOut8303,372856
  int mxOut;              /* Highwater mark for nOut */mxOut8304,372928
  LookasideSlot *pFree;   /* List of available buffers */pFree8305,372984
  void *pStart;           /* First byte of available memory space */pStart8306,373042
  void *pEnd;             /* First byte past end of available space */pEnd8307,373111
struct LookasideSlot {LookasideSlot8309,373185
  LookasideSlot *pNext;    /* Next buffer in the list of free buffers */pNext8310,373208
struct FuncDefHash {FuncDefHash8319,373452
  FuncDef *a[23];       /* Hash table for functions */a8320,373473
struct sqlite3 {sqlite38349,374921
  sqlite3_vfs *pVfs;            /* OS Interface */pVfs8350,374938
  int nDb;                      /* Number of backends currently in use */nDb8351,374989
  Db *aDb;                      /* All backends */aDb8352,375063
  int flags;                    /* Miscellaneous flags. See below */flags8353,375114
  int openFlags;                /* Flags passed to sqlite3_vfs.xOpen() */openFlags8354,375183
  int errCode;                  /* Most recent error code (SQLITE_*) */errCode8355,375257
  int errMask;                  /* & result codes with this before returning */errMask8356,375329
  u8 autoCommit;                /* The auto-commit flag. */autoCommit8357,375409
  u8 temp_store;                /* 1: file 2: memory 0: default */temp_store8358,375469
  u8 mallocFailed;              /* True if we have seen a malloc failure */mallocFailed8359,375536
  u8 dfltLockMode;              /* Default locking-mode for attached dbs */dfltLockMode8360,375612
  u8 dfltJournalMode;           /* Default journal mode for attached dbs */dfltJournalMode8361,375688
  signed char nextAutovac;      /* Autovac setting after VACUUM if >=0 */nextAutovac8362,375764
  u8 suppressErr;               /* Do not issue error messages if true */suppressErr8363,375838
  int nextPagesize;             /* Pagesize after VACUUM if >0 */nextPagesize8364,375912
  int nTable;                   /* Number of tables in the database */nTable8365,375978
  CollSeq *pDfltColl;           /* The default collating sequence (BINARY) */pDfltColl8366,376049
  i64 lastRowid;                /* ROWID of most recent insert (see above) */lastRowid8367,376127
  u32 magic;                    /* Magic number for detect library misuse */magic8368,376205
  int nChange;                  /* Value returned by sqlite3_changes() */nChange8369,376282
  int nTotalChange;             /* Value returned by sqlite3_total_changes() */nTotalChange8370,376356
  sqlite3_mutex *mutex;         /* Connection mutex */mutex8371,376436
  int aLimit[SQLITE_N_LIMIT];   /* Limits */aLimit8372,376491
  struct sqlite3InitInfo {      /* Information used during initialization */sqlite3InitInfo8373,376536
    int iDb;                    /* When back is being initialized */iDb8374,376613
    int newTnum;                /* Rootpage of table being initialized */newTnum8375,376682
    u8 busy;                    /* TRUE if currently initializing */busy8376,376756
    u8 orphanTrigger;           /* Last statement is orphaned TEMP trigger */orphanTrigger8377,376825
  } init;init8378,376903
  int nExtension;               /* Number of loaded extensions */nExtension8379,376913
  void **aExtension;            /* Array of shared library handles */aExtension8380,376979
  struct Vdbe *pVdbe;           /* List of active virtual machines */pVdbe8381,377049
  int activeVdbeCnt;            /* Number of VDBEs currently executing */activeVdbeCnt8382,377119
  int writeVdbeCnt;             /* Number of active VDBEs that are writing */writeVdbeCnt8383,377193
  void (*xTrace)(void*,const char*);        /* Trace function */xTrace8384,377271
  void *pTraceArg;                          /* Argument to the trace function */pTraceArg8385,377336
  void (*xProfile)(void*,const char*,u64);  /* Profiling function */xProfile8386,377417
  void *pProfileArg;                        /* Argument to profile function */pProfileArg8387,377486
  void *pCommitArg;                 /* Argument to xCommitCallback() */   pCommitArg8388,377565
  int (*xCommitCallback)(void*);    /* Invoked at every commit. */xCommitCallback8389,377640
  void *pRollbackArg;               /* Argument to xRollbackCallback() */   pRollbackArg8390,377707
  void (*xRollbackCallback)(void*); /* Invoked at every commit. */xRollbackCallback8391,377784
  void *pUpdateArg;pUpdateArg8392,377851
  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);xUpdateCallback8393,377871
  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);xCollNeeded8394,377947
  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);xCollNeeded168395,378010
  void *pCollNeededArg;pCollNeededArg8396,378075
  sqlite3_value *pErr;          /* Most recent error message */pErr8397,378099
  char *zErrMsg;                /* Most recent error message (UTF-8 encoded) */zErrMsg8398,378163
  char *zErrMsg16;              /* Most recent error message (UTF-16 encoded) */zErrMsg168399,378243
    volatile int isInterrupted; /* True if sqlite3_interrupt has been called */isInterrupted8401,378334
    double notUsed1;            /* Spacer */notUsed18402,378414
  } u1;u18403,378459
  Lookaside lookaside;          /* Lookaside malloc configuration */lookaside8404,378467
  int (*xAuth)(void*,int,const char*,const char*,const char*,const char*);xAuth8406,378570
  void *pAuthArg;               /* 1st argument to the access auth function */pAuthArg8408,378713
  int (*xProgress)(void *);     /* The progress callback */xProgress8411,378837
  void *pProgressArg;           /* Argument to the progress callback */pProgressArg8412,378897
  int nProgressOps;             /* Number of opcodes for progress callback */nProgressOps8413,378969
  Hash aModule;                 /* populated by sqlite3_create_module() */aModule8416,379087
  Table *pVTab;                 /* vtab with active Connect/Create method */pVTab8417,379162
  VTable **aVTrans;             /* Virtual tables with open transactions */aVTrans8418,379239
  int nVTrans;                  /* Allocated size of aVTrans */nVTrans8419,379315
  VTable *pDisconnect;    /* Disconnect these in next sqlite3_prepare() */pDisconnect8420,379379
  FuncDefHash aFunc;            /* Hash table of connection functions */aFunc8422,379461
  Hash aCollSeq;                /* All collating sequences */aCollSeq8423,379534
  BusyHandler busyHandler;      /* Busy callback */busyHandler8424,379596
  int busyTimeout;              /* Busy handler timeout, in msec */busyTimeout8425,379648
  Db aDbStatic[2];              /* Static space for the 2 default backends */aDbStatic8426,379716
  Savepoint *pSavepoint;        /* List of active savepoints */pSavepoint8427,379794
  int nSavepoint;               /* Number of non-transaction savepoints */nSavepoint8428,379858
  int nStatement;               /* Number of nested statement-transactions  */nStatement8429,379933
  u8 isTransactionSavepoint;    /* True if the outermost savepoint is a TS */isTransactionSavepoint8430,380012
  i64 nDeferredCons;            /* Net deferred constraints this transaction. */nDeferredCons8431,380090
  sqlite3 *pBlockingConnection; /* Connection that caused SQLITE_LOCKED */pBlockingConnection8444,380634
  sqlite3 *pUnlockConnection;           /* Connection to watch for unlock */pUnlockConnection8445,380709
  void *pUnlockArg;                     /* Argument to xUnlockNotify */pUnlockArg8446,380786
  void (*xUnlockNotify)(void **, int);  /* Unlock notify callback */xUnlockNotify8447,380858
  sqlite3 *pNextBlocked;        /* Next in list of all blocked connections */pNextBlocked8448,380927
#define ENC(ENC8455,381073
#define SQLITE_VdbeTrace SQLITE_VdbeTrace8460,381166
#define SQLITE_InternChanges SQLITE_InternChanges8461,381243
#define SQLITE_FullColNames SQLITE_FullColNames8462,381322
#define SQLITE_ShortColNames SQLITE_ShortColNames8463,381403
#define SQLITE_CountRows SQLITE_CountRows8464,381476
#define SQLITE_NullCallback SQLITE_NullCallback8467,381711
#define SQLITE_SqlTrace SQLITE_SqlTrace8469,381861
#define SQLITE_VdbeListing SQLITE_VdbeListing8470,381940
#define SQLITE_WriteSchema SQLITE_WriteSchema8471,382020
#define SQLITE_NoReadlock SQLITE_NoReadlock8472,382095
#define SQLITE_IgnoreChecks SQLITE_IgnoreChecks8474,382246
#define SQLITE_ReadUncommitted SQLITE_ReadUncommitted8475,382327
#define SQLITE_LegacyFileFmt SQLITE_LegacyFileFmt8476,382397
#define SQLITE_FullFSync SQLITE_FullFSync8477,382478
#define SQLITE_LoadExtension SQLITE_LoadExtension8478,382556
#define SQLITE_RecoveryMode SQLITE_RecoveryMode8479,382626
#define SQLITE_ReverseOrder SQLITE_ReverseOrder8480,382695
#define SQLITE_RecTriggers SQLITE_RecTriggers8481,382769
#define SQLITE_ForeignKeys SQLITE_ForeignKeys8482,382843
#define SQLITE_QueryFlattener SQLITE_QueryFlattener8489,383113
#define SQLITE_ColumnCache SQLITE_ColumnCache8490,383186
#define SQLITE_IndexSort SQLITE_IndexSort8491,383259
#define SQLITE_IndexSearch SQLITE_IndexSearch8492,383335
#define SQLITE_IndexCover SQLITE_IndexCover8493,383413
#define SQLITE_OptMask SQLITE_OptMask8494,383490
#define SQLITE_MAGIC_OPEN SQLITE_MAGIC_OPEN8501,383734
#define SQLITE_MAGIC_CLOSED SQLITE_MAGIC_CLOSED8502,383799
#define SQLITE_MAGIC_SICK SQLITE_MAGIC_SICK8503,383866
#define SQLITE_MAGIC_BUSY SQLITE_MAGIC_BUSY8504,383939
#define SQLITE_MAGIC_ERROR SQLITE_MAGIC_ERROR8505,384013
struct FuncDef {FuncDef8513,384360
  i16 nArg;            /* Number of arguments.  -1 means unlimited */nArg8514,384377
  u8 iPrefEnc;         /* Preferred text encoding (SQLITE_UTF8, 16LE, 16BE) */iPrefEnc8515,384447
  u8 flags;            /* Some combination of SQLITE_FUNC_* */flags8516,384526
  void *pUserData;     /* User data parameter */pUserData8517,384589
  FuncDef *pNext;      /* Next function with same name */pNext8518,384638
  void (*xFunc)(sqlite3_context*,int,sqlite3_value**); /* Regular function */xFunc8519,384696
  void (*xStep)(sqlite3_context*,int,sqlite3_value**); /* Aggregate step */xStep8520,384774
  void (*xFinalize)(sqlite3_context*);                /* Aggregate finalizer */xFinalize8521,384850
  char *zName;         /* SQL name of the function. */zName8522,384930
  FuncDef *pHash;      /* Next with a different name but the same hash */pHash8523,384985
#define SQLITE_FUNC_LIKE SQLITE_FUNC_LIKE8529,385106
#define SQLITE_FUNC_CASE SQLITE_FUNC_CASE8530,385182
#define SQLITE_FUNC_EPHEM SQLITE_FUNC_EPHEM8531,385256
#define SQLITE_FUNC_NEEDCOLL SQLITE_FUNC_NEEDCOLL8532,385325
#define SQLITE_FUNC_PRIVATE SQLITE_FUNC_PRIVATE8533,385405
#define SQLITE_FUNC_COUNT SQLITE_FUNC_COUNT8534,385475
#define SQLITE_FUNC_COALESCE SQLITE_FUNC_COALESCE8535,385543
#define FUNCTION(FUNCTION8562,386863
#define STR_FUNCTION(STR_FUNCTION8565,387018
#define LIKEFUNC(LIKEFUNC8568,387158
#define AGGREGATE(AGGREGATE8570,387274
struct Savepoint {Savepoint8580,387678
  char *zName;                        /* Savepoint name (nul-terminated) */zName8581,387697
  i64 nDeferredCons;                  /* Number of deferred fk violations */nDeferredCons8582,387773
  Savepoint *pNext;                   /* Parent savepoint (if any) */pNext8583,387850
#define SAVEPOINT_BEGIN SAVEPOINT_BEGIN8590,388062
#define SAVEPOINT_RELEASE SAVEPOINT_RELEASE8591,388093
#define SAVEPOINT_ROLLBACK SAVEPOINT_ROLLBACK8592,388124
struct Module {Module8600,388314
  const sqlite3_module *pModule;       /* Callback pointers */pModule8601,388330
  const char *zName;                   /* Name passed to create_module() */zName8602,388393
  void *pAux;                          /* pAux passed to create_module() */pAux8603,388469
  void (*xDestroy)(void *);            /* Module destructor function */xDestroy8604,388545
struct Column {Column8611,388721
  char *zName;     /* Name of this column */zName8612,388737
  Expr *pDflt;     /* Default value of this column */pDflt8613,388782
  char *zDflt;     /* Original text of the default value */zDflt8614,388836
  char *zType;     /* Data type for this column */zType8615,388896
  char *zColl;     /* Collating sequence.  If NULL, use the default */zColl8616,388947
  u8 notNull;      /* True if there is a NOT NULL constraint */notNull8617,389018
  u8 isPrimKey;    /* True if this column is part of the PRIMARY KEY */isPrimKey8618,389082
  char affinity;   /* One of the SQLITE_AFF_... values */affinity8619,389154
  u8 isHidden;     /* True if this column is 'hidden' */isHidden8621,389245
struct CollSeq {CollSeq8646,390325
  char *zName;          /* Name of the collating sequence, UTF-8 encoded */zName8647,390342
  u8 enc;               /* Text encoding handled by xCmp() */enc8648,390418
  u8 type;              /* One of the SQLITE_COLL_... values below */type8649,390480
  void *pUser;          /* First argument to xCmp() */pUser8650,390550
  int (*xCmp)(void*,int, const void*, int, const void*);xCmp8651,390605
  void (*xDel)(void*);  /* Destructor for pUser */xDel8652,390662
#define SQLITE_COLL_BINARY SQLITE_COLL_BINARY8658,390758
#define SQLITE_COLL_NOCASE SQLITE_COLL_NOCASE8659,390835
#define SQLITE_COLL_REVERSE SQLITE_COLL_REVERSE8660,390911
#define SQLITE_COLL_USER SQLITE_COLL_USER8661,390988
#define SQLITE_SO_ASC SQLITE_SO_ASC8666,391117
#define SQLITE_SO_DESC SQLITE_SO_DESC8667,391178
#define SQLITE_AFF_TEXT SQLITE_AFF_TEXT8683,391797
#define SQLITE_AFF_NONE SQLITE_AFF_NONE8684,391829
#define SQLITE_AFF_NUMERIC SQLITE_AFF_NUMERIC8685,391861
#define SQLITE_AFF_INTEGER SQLITE_AFF_INTEGER8686,391893
#define SQLITE_AFF_REAL SQLITE_AFF_REAL8687,391925
#define sqlite3IsNumericAffinity(sqlite3IsNumericAffinity8689,391958
#define SQLITE_AFF_MASK SQLITE_AFF_MASK8695,392115
#define SQLITE_JUMPIFNULL SQLITE_JUMPIFNULL8701,392248
#define SQLITE_STOREP2 SQLITE_STOREP28702,392320
#define SQLITE_NULLEQ SQLITE_NULLEQ8703,392401
struct VTable {VTable8747,394901
  sqlite3 *db;              /* Database connection associated with this table */db8748,394917
  Module *pMod;             /* Pointer to module implementation */pMod8749,394998
  sqlite3_vtab *pVtab;      /* Pointer to vtab instance */pVtab8750,395065
  int nRef;                 /* Number of pointers to this structure */nRef8751,395124
  VTable *pNext;            /* Next in linked list (see above) */pNext8752,395195
struct Table {Table8785,396833
  sqlite3 *dbMem;      /* DB connection used for lookaside allocations. */dbMem8786,396848
  char *zName;         /* Name of the table or view */zName8787,396923
  int iPKey;           /* If not negative, use aCol[iPKey] as the primary key */iPKey8788,396978
  int nCol;            /* Number of columns in this table */nCol8789,397059
  Column *aCol;        /* Information about each column */aCol8790,397120
  Index *pIndex;       /* List of SQL indexes on this table. */pIndex8791,397179
  int tnum;            /* Root BTree node for this table (see note above) */tnum8792,397243
  Select *pSelect;     /* NULL for tables.  Points to definition if a view. */pSelect8793,397320
  u16 nRef;            /* Number of pointers to this Table */nRef8794,397399
  u8 tabFlags;         /* Mask of TF_* values */tabFlags8795,397461
  u8 keyConf;          /* What to do in case of uniqueness conflict on iPKey */keyConf8796,397510
  FKey *pFKey;         /* Linked list of all foreign keys in this table */pFKey8797,397590
  char *zColAff;       /* String defining the affinity of each column */zColAff8798,397665
  Expr *pCheck;        /* The AND of all CHECK constraints */pCheck8800,397764
  int addColOffset;    /* Offset in CREATE TABLE stmt to add a new column */addColOffset8803,397864
  VTable *pVTable;     /* List of VTable objects. */pVTable8806,397981
  int nModuleArg;      /* Number of arguments to the module */nModuleArg8807,398034
  char **azModuleArg;  /* Text of all module args. [0] is module name */azModuleArg8808,398097
  Trigger *pTrigger;   /* List of triggers stored in pSchema */pTrigger8810,398177
  Schema *pSchema;     /* Schema that contains this table */pSchema8811,398241
  Table *pNextZombie;  /* Next on the Parse.pZombieTab list */pNextZombie8812,398302
#define TF_Readonly TF_Readonly8818,398412
#define TF_Ephemeral TF_Ephemeral8819,398476
#define TF_HasPrimaryKey TF_HasPrimaryKey8820,398536
#define TF_Autoincrement TF_Autoincrement8821,398601
#define TF_Virtual TF_Virtual8822,398679
#define TF_NeedMetadata TF_NeedMetadata8823,398739
#  define IsVirtual(IsVirtual8833,399036
#  define IsHiddenColumn(IsHiddenColumn8834,399098
#  define IsVirtual(IsVirtual8836,399148
#  define IsHiddenColumn(IsHiddenColumn8837,399178
struct FKey {FKey8859,399976
  Table *pFrom;     /* Table containing the REFERENCES clause (aka: Child) */pFrom8860,399990
  FKey *pNextFrom;  /* Next foreign key in pFrom */pNextFrom8861,400068
  char *zTo;        /* Name of table that the key points to (aka: Parent) */zTo8862,400120
  FKey *pNextTo;    /* Next foreign key on table named zTo */pNextTo8863,400197
  FKey *pPrevTo;    /* Previous foreign key on table named zTo */pPrevTo8864,400259
  int nCol;         /* Number of columns in this key */nCol8865,400325
  u8 isDeferred;    /* True if constraint checking is deferred till COMMIT */isDeferred8867,400407
  u8 aAction[2];          /* ON DELETE and ON UPDATE actions, respectively */aAction8868,400485
  Trigger *apTrigger[2];  /* Triggers for aAction[] actions */apTrigger8869,400563
  struct sColMap {  /* Mapping of columns in pFrom to columns in zTo */sColMap8870,400626
    int iFrom;         /* Index of column in pFrom */iFrom8871,400698
    char *zCol;        /* Name of column in zTo.  If 0 use PRIMARY KEY */zCol8872,400752
  } aCol[1];        /* One entry for each of nCol column s */aCol8873,400826
#define OE_None OE_None8901,402275
#define OE_Rollback OE_Rollback8902,402337
#define OE_Abort OE_Abort8903,402415
#define OE_Fail OE_Fail8904,402493
#define OE_Ignore OE_Ignore8905,402570
#define OE_Replace OE_Replace8906,402649
#define OE_Restrict OE_Restrict8908,402729
#define OE_SetNull OE_SetNull8909,402808
#define OE_SetDflt OE_SetDflt8910,402872
#define OE_Cascade OE_Cascade8911,402943
#define OE_Default OE_Default8913,402994
struct KeyInfo {KeyInfo8921,403233
  sqlite3 *db;        /* The database connection */db8922,403250
  u8 enc;             /* Text encoding - one of the TEXT_Utf* values */enc8923,403302
  u16 nField;         /* Number of entries in aColl[] */nField8924,403374
  u8 *aSortOrder;     /* If defined an aSortOrder[i] is true, sort DESC */aSortOrder8925,403431
  CollSeq *aColl[1];  /* Collating sequence for each term of the key */aColl8926,403506
struct UnpackedRecord {UnpackedRecord8943,404136
  KeyInfo *pKeyInfo;  /* Collation and sort-order information */pKeyInfo8944,404160
  u16 nField;         /* Number of entries in apMem[] */nField8945,404225
  u16 flags;          /* Boolean settings.  UNPACKED_... below */flags8946,404282
  i64 rowid;          /* Used by UNPACKED_PREFIX_SEARCH */rowid8947,404348
  Mem *aMem;          /* Values */aMem8948,404407
#define UNPACKED_NEED_FREE UNPACKED_NEED_FREE8954,404494
#define UNPACKED_NEED_DESTROY UNPACKED_NEED_DESTROY8955,404570
#define UNPACKED_IGNORE_ROWID UNPACKED_IGNORE_ROWID8956,404648
#define UNPACKED_INCRKEY UNPACKED_INCRKEY8957,404723
#define UNPACKED_PREFIX_MATCH UNPACKED_PREFIX_MATCH8958,404800
#define UNPACKED_PREFIX_SEARCH UNPACKED_PREFIX_SEARCH8959,404877
struct Index {Index8987,406143
  char *zName;     /* Name of this index */zName8988,406158
  int nColumn;     /* Number of columns in the table used by this index */nColumn8989,406202
  int *aiColumn;   /* Which columns are used by this index.  1st is 0 */aiColumn8990,406277
  unsigned *aiRowEst; /* Result of ANALYZE: Est. rows selected by each column */aiRowEst8991,406350
  Table *pTable;   /* The SQL table being indexed */pTable8992,406431
  int tnum;        /* Page containing root of this index in database file */tnum8993,406484
  u8 onError;      /* OE_Abort, OE_Ignore, OE_Replace, or OE_None */onError8994,406561
  u8 autoIndex;    /* True if is automatically created (ex: by UNIQUE) */autoIndex8995,406630
  char *zColAff;   /* String defining the affinity of each column */zColAff8996,406704
  Index *pNext;    /* The next index associated with the same table */pNext8997,406773
  Schema *pSchema; /* Schema containing this index */pSchema8998,406844
  u8 *aSortOrder;  /* Array of size Index.nColumn. True==DESC, False==ASC */aSortOrder8999,406898
  char **azColl;   /* Array of collation sequence names for index */azColl9000,406975
  IndexSample *aSample;    /* Array of SQLITE_INDEX_SAMPLES samples */aSample9001,407044
struct IndexSample {IndexSample9008,407234
    char *z;        /* Value if eType is SQLITE_TEXT or SQLITE_BLOB */z9010,407265
    double r;       /* Value if eType is SQLITE_FLOAT or SQLITE_INTEGER */r9011,407336
  } u;u9012,407411
  u8 eType;         /* SQLITE_NULL, SQLITE_INTEGER ... etc. */eType9013,407418
  u8 nByte;         /* Size in byte of text or blob. */nByte9014,407481
struct Token {Token9025,407847
  const char *z;     /* Text of the token.  Not NULL-terminated! */z9026,407862
  unsigned int n;    /* Number of characters in this token */n9027,407930
struct AggInfo {AggInfo9043,408592
  u8 directMode;          /* Direct rendering mode means take data directlydirectMode9044,408609
  u8 useSortingIdx;       /* In direct mode, reference the sorting index ratheruseSortingIdx9046,408766
  int sortingIdx;         /* Cursor number of the sorting index */sortingIdx9048,408900
  ExprList *pGroupBy;     /* The group by clause */pGroupBy9049,408967
  int nSortingColumn;     /* Number of columns in the sorting index */nSortingColumn9050,409019
  struct AggInfo_col {    /* For each column used in source tables */AggInfo_col9051,409090
    Table *pTab;             /* Source table */pTab9052,409160
    int iTable;              /* Cursor number of the source table */iTable9053,409208
    int iColumn;             /* Column number within the source table */iColumn9054,409277
    int iSorterColumn;       /* Column number in the sorting index */iSorterColumn9055,409350
    int iMem;                /* Memory location that acts as accumulator */iMem9056,409420
    Expr *pExpr;             /* The original expression */pExpr9057,409496
  } *aCol;aCol9058,409555
  int nColumn;            /* Number of used entries in aCol[] */nColumn9059,409566
  int nColumnAlloc;       /* Number of slots allocated for aCol[] */nColumnAlloc9060,409631
  int nAccumulator;       /* Number of columns that show through to the output.nAccumulator9061,409700
  struct AggInfo_func {   /* For each aggregate function */AggInfo_func9064,409911
    Expr *pExpr;             /* Expression encoding the function */pExpr9065,409971
    FuncDef *pFunc;          /* The aggregate function implementation */pFunc9066,410039
    int iMem;                /* Memory location that acts as accumulator */iMem9067,410112
    int iDistinct;           /* Ephemeral table used to enforce DISTINCT */iDistinct9068,410188
  } *aFunc;aFunc9069,410264
  int nFunc;              /* Number of entries in aFunc[] */nFunc9070,410276
  int nFuncAlloc;         /* Number of slots allocated for aFunc[] */nFuncAlloc9071,410337
typedef i16 ynVar;ynVar9085,410995
typedef int ynVar;ynVar9087,411020
struct Expr {Expr9153,414284
  u8 op;                 /* Operation performed by this node */op9154,414298
  char affinity;         /* The affinity of the column or 0 if not a column */affinity9155,414362
  u16 flags;             /* Various flags.  EP_* See below */flags9156,414441
    char *zToken;          /* Token value. Zero terminated and dequoted */zToken9158,414513
    int iValue;            /* Integer value if EP_IntValue */iValue9159,414588
  } u;u9160,414650
  Expr *pLeft;           /* Left subnode */pLeft9167,414932
  Expr *pRight;          /* Right subnode */pRight9168,414976
    ExprList *pList;     /* Function arguments or in "<expr> IN (<expr-list)" */pList9170,415031
    Select *pSelect;     /* Used for sub-selects and "<expr> IN (<select>)" */pSelect9171,415112
  } x;x9172,415191
  CollSeq *pColl;        /* The collation type of the column or 0 */pColl9173,415198
  int iTable;            /* TK_COLUMN: cursor number of table holding columniTable9180,415539
  ynVar iColumn;         /* TK_COLUMN: column index.  -1 for rowid.iColumn9183,415735
  i16 iAgg;              /* Which entry in pAggInfo->aCol[] or ->aFunc[] */iAgg9185,415878
  i16 iRightJoinTable;   /* If EP_FromJoin, the right table of the join */iRightJoinTable9186,415954
  u8 flags2;             /* Second set of flags.  EP2_... */flags29187,416029
  u8 op2;                /* If a TK_REGISTER, the original value of Expr.op */op29188,416090
  AggInfo *pAggInfo;     /* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION */pAggInfo9189,416169
  Table *pTab;           /* Table for TK_COLUMN expressions. */pTab9190,416242
  int nHeight;           /* Height of the tree headed by this node */nHeight9192,416334
#define EP_FromJoin EP_FromJoin9199,416488
#define EP_Agg EP_Agg9200,416567
#define EP_Resolved EP_Resolved9201,416644
#define EP_Error EP_Error9202,416714
#define EP_Distinct EP_Distinct9203,416789
#define EP_VarSelect EP_VarSelect9204,416866
#define EP_DblQuoted EP_DblQuoted9205,416938
#define EP_InfixFunc EP_InfixFunc9206,417006
#define EP_ExpCollate EP_ExpCollate9207,417086
#define EP_FixedDest EP_FixedDest9208,417162
#define EP_IntValue EP_IntValue9209,417235
#define EP_xIsSelect EP_xIsSelect9210,417307
#define EP_Reduced EP_Reduced9212,417386
#define EP_TokenOnly EP_TokenOnly9213,417465
#define EP_Static EP_Static9214,417546
#define EP2_MallocedToken EP2_MallocedToken9219,417699
#define EP2_Irreducible EP2_Irreducible9220,417776
# define ExprSetIrreducible(ExprSetIrreducible9229,418141
# define ExprSetIrreducible(ExprSetIrreducible9231,418210
#define ExprHasProperty(ExprHasProperty9238,418340
#define ExprHasAnyProperty(ExprHasAnyProperty9239,418397
#define ExprSetProperty(ExprSetProperty9240,418452
#define ExprClearProperty(ExprClearProperty9241,418501
#define EXPR_FULLSIZE EXPR_FULLSIZE9248,418752
#define EXPR_REDUCEDSIZE EXPR_REDUCEDSIZE9249,418823
#define EXPR_TOKENONLYSIZE EXPR_TOKENONLYSIZE9250,418900
#define EXPRDUP_REDUCE EXPRDUP_REDUCE9256,419096
struct ExprList {ExprList9266,419545
  int nExpr;             /* Number of expressions on the list */nExpr9267,419563
  int nAlloc;            /* Number of entries allocated below */nAlloc9268,419628
  int iECursor;          /* VDBE Cursor associated with this ExprList */iECursor9269,419693
  struct ExprList_item {ExprList_item9270,419766
    Expr *pExpr;           /* The list of expressions */pExpr9271,419791
    char *zName;           /* Token associated with this expression */zName9272,419848
    char *zSpan;           /* Original text of the expression */zSpan9273,419919
    u8 sortOrder;          /* 1 for DESC or 0 for ASC */sortOrder9274,419984
    u8 done;               /* A flag to indicate when processing is finished */done9275,420041
    u16 iCol;              /* For ORDER BY, column number in result set */iCol9276,420121
    u16 iAlias;            /* Index into Parse.aAlias[] for zName */iAlias9277,420196
  } *a;                  /* One entry for each expression */a9278,420265
struct ExprSpan {ExprSpan9286,420491
  Expr *pExpr;          /* The expression parse tree */pExpr9287,420509
  const char *zStart;   /* First character of input text */zStart9288,420565
  const char *zEnd;     /* One character past the end of input text */zEnd9289,420625
struct IdList {IdList9307,421235
  struct IdList_item {IdList_item9308,421251
    char *zName;      /* Name of the identifier */zName9309,421274
    int idx;          /* Index in some Table.aCol[] of a column named zName */idx9310,421325
  } *a;a9311,421404
  int nId;         /* Number of identifiers on the list */nId9312,421412
  int nAlloc;      /* Number of entries allocated for a[] below */nAlloc9313,421471
typedef u64 Bitmask;Bitmask9323,421804
#define BMS BMS9328,421897
struct SrcList {SrcList9346,422794
  i16 nSrc;        /* Number of tables or subqueries in the FROM clause */nSrc9347,422811
  i16 nAlloc;      /* Number of entries allocated in a[] below */nAlloc9348,422886
  struct SrcList_item {SrcList_item9349,422952
    char *zDatabase;  /* Name of database holding this table */zDatabase9350,422976
    char *zName;      /* Name of the table */zName9351,423040
    char *zAlias;     /* The "B" part of a "A AS B" phrase.  zName is the "A" */zAlias9352,423086
    Table *pTab;      /* An SQL table corresponding to zName */pTab9353,423167
    Select *pSelect;  /* A SELECT statement used in place of a table name */pSelect9354,423231
    u8 isPopulated;   /* Temporary table associated with SELECT is populated */isPopulated9355,423308
    u8 jointype;      /* Type of join between this able and the previous */jointype9356,423388
    u8 notIndexed;    /* True if there is a NOT INDEXED clause */notIndexed9357,423464
    int iCursor;      /* The VDBE cursor number used to access this table */iCursor9358,423530
    Expr *pOn;        /* The ON clause of a join */pOn9359,423607
    IdList *pUsing;   /* The USING clause of a join */pUsing9360,423659
    Bitmask colUsed;  /* Bit N (1<<N) set if column N of pTab is used */colUsed9361,423714
    char *zIndex;     /* Identifier from "INDEXED BY <zIndex>" clause */zIndex9362,423787
    Index *pIndex;    /* Index structure corresponding to zIndex, if any */pIndex9363,423860
  } a[1];             /* One entry for each identifier on the list */a9364,423936
#define JT_INNER JT_INNER9370,424068
#define JT_CROSS JT_CROSS9371,424137
#define JT_NATURAL JT_NATURAL9372,424208
#define JT_LEFT JT_LEFT9373,424271
#define JT_RIGHT JT_RIGHT9374,424324
#define JT_OUTER JT_OUTER9375,424378
#define JT_ERROR JT_ERROR9376,424446
struct WherePlan {WherePlan9393,425118
  u32 wsFlags;                   /* WHERE_* flags that describe the strategy */wsFlags9394,425137
  u32 nEq;                       /* Number of == constraints */nEq9395,425217
    Index *pIdx;                   /* Index when WHERE_INDEXED is true */pIdx9397,425291
    struct WhereTerm *pTerm;       /* WHERE clause term for OR-search */pTerm9398,425365
    sqlite3_index_info *pVtabIdx;  /* Virtual table index to use */pVtabIdx9399,425438
  } u;u9400,425506
struct WhereLevel {WhereLevel9416,426151
  WherePlan plan;       /* query plan for this element of the FROM clause */plan9417,426171
  int iLeftJoin;        /* Memory cell used to implement LEFT OUTER JOIN */iLeftJoin9418,426248
  int iTabCur;          /* The VDBE cursor used to access the table */iTabCur9419,426324
  int iIdxCur;          /* The VDBE cursor used to access pIdx */iIdxCur9420,426395
  int addrBrk;          /* Jump here to break out of the loop */addrBrk9421,426461
  int addrNxt;          /* Jump here to start the next IN combination */addrNxt9422,426526
  int addrCont;         /* Jump here to continue with the next loop cycle */addrCont9423,426599
  int addrFirst;        /* First instruction of interior of the loop */addrFirst9424,426676
  u8 iFrom;             /* Which entry in the FROM clause */iFrom9425,426748
  u8 op, p5;            /* Opcode and P5 of the opcode that ends the loop */op9426,426809
  u8 op, p5;            /* Opcode and P5 of the opcode that ends the loop */p59426,426809
  int p1, p2;           /* Operands of the opcode used to ends the loop */p19427,426886
  int p1, p2;           /* Operands of the opcode used to ends the loop */p29427,426886
      int nIn;              /* Number of entries in aInLoop[] */nIn9430,427045
      struct InLoop {InLoop9431,427110
        int iCur;              /* The VDBE cursor used by this IN operator */iCur9432,427132
        int addrInTop;         /* Top of the IN loop */addrInTop9433,427210
      } *aInLoop;           /* Information about each nested IN operator */aInLoop9434,427266
    } in;                 /* Used when plan.wsFlags&WHERE_IN_ABLE */in9435,427342
  } u;u9436,427411
  sqlite3_index_info *pIdxInfo;  /* Index info for n-th source table */pIdxInfo9444,427725
#define WHERE_ORDERBY_NORMAL WHERE_ORDERBY_NORMAL9451,427920
#define WHERE_ORDERBY_MIN WHERE_ORDERBY_MIN9452,427970
#define WHERE_ORDERBY_MAX WHERE_ORDERBY_MAX9453,428049
#define WHERE_ONEPASS_DESIRED WHERE_ONEPASS_DESIRED9454,428128
#define WHERE_DUPLICATES_OK WHERE_DUPLICATES_OK9455,428206
#define WHERE_OMIT_OPEN WHERE_OMIT_OPEN9456,428284
#define WHERE_OMIT_CLOSE WHERE_OMIT_CLOSE9457,428358
#define WHERE_FORCE_TABLE WHERE_FORCE_TABLE9458,428438
#define WHERE_ONETABLE_ONLY WHERE_ONETABLE_ONLY9459,428514
struct WhereInfo {WhereInfo9468,428888
  Parse *pParse;       /* Parsing and code generating context */pParse9469,428907
  u16 wctrlFlags;      /* Flags originally passed to sqlite3WhereBegin() */wctrlFlags9470,428972
  u8 okOnePass;        /* Ok to use one-pass algorithm for UPDATE or DELETE */okOnePass9471,429048
  u8 untestedTerms;    /* Not all WHERE terms resolved by outer loop */untestedTerms9472,429127
  SrcList *pTabList;             /* List of tables in the join */pTabList9473,429199
  int iTop;                      /* The very beginning of the WHERE loop */iTop9474,429265
  int iContinue;                 /* Jump here to continue with next record */iContinue9475,429341
  int iBreak;                    /* Jump here to break out of the loop */iBreak9476,429419
  int nLevel;                    /* Number of nested loop */nLevel9477,429493
  struct WhereClause *pWC;       /* Decomposition of the WHERE clause */pWC9478,429554
  WhereLevel a[1];               /* Information about each nest loop in WHERE */a9479,429627
struct NameContext {NameContext9503,430821
  Parse *pParse;       /* The parser */pParse9504,430842
  SrcList *pSrcList;   /* One or more tables used to resolve names */pSrcList9505,430882
  ExprList *pEList;    /* Optional list of named expressions */pEList9506,430952
  int nRef;            /* Number of names resolved by this context */nRef9507,431016
  int nErr;            /* Number of errors encountered while resolving names */nErr9508,431086
  u8 allowAgg;         /* Aggregate functions allowed here */allowAgg9509,431166
  u8 hasAgg;           /* True if aggregates are seen */hasAgg9510,431228
  u8 isCheck;          /* True if resolving names in a CHECK constraint */isCheck9511,431285
  int nDepth;          /* Depth of subquery recursion. 1 for no recursion */nDepth9512,431360
  AggInfo *pAggInfo;   /* Information about aggregates at this level */pAggInfo9513,431437
  NameContext *pNext;  /* Next outer name context.  NULL for outermost */pNext9514,431509
struct Select {Select9537,432661
  ExprList *pEList;      /* The fields of the result */pEList9538,432677
  u8 op;                 /* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT */op9539,432733
  char affinity;         /* MakeRecord with this affinity for SRT_Set */affinity9540,432811
  u16 selFlags;          /* Various SF_* values */selFlags9541,432884
  SrcList *pSrc;         /* The FROM clause */pSrc9542,432935
  Expr *pWhere;          /* The WHERE clause */pWhere9543,432982
  ExprList *pGroupBy;    /* The GROUP BY clause */pGroupBy9544,433030
  Expr *pHaving;         /* The HAVING clause */pHaving9545,433081
  ExprList *pOrderBy;    /* The ORDER BY clause */pOrderBy9546,433130
  Select *pPrior;        /* Prior select in a compound select statement */pPrior9547,433181
  Select *pNext;         /* Next select to the left in a compound */pNext9548,433256
  Select *pRightmost;    /* Right-most select in a compound select statement */pRightmost9549,433325
  Expr *pLimit;          /* LIMIT expression. NULL means not used. */pLimit9550,433405
  Expr *pOffset;         /* OFFSET expression. NULL means not used. */pOffset9551,433475
  int iLimit, iOffset;   /* Memory registers holding LIMIT & OFFSET counters */iLimit9552,433546
  int iLimit, iOffset;   /* Memory registers holding LIMIT & OFFSET counters */iOffset9552,433546
  int addrOpenEphm[3];   /* OP_OpenEphem opcodes related to this select */addrOpenEphm9553,433626
#define SF_Distinct SF_Distinct9560,433796
#define SF_Resolved SF_Resolved9561,433863
#define SF_Aggregate SF_Aggregate9562,433935
#define SF_UsesEphemeral SF_UsesEphemeral9563,434005
#define SF_Expanded SF_Expanded9564,434076
#define SF_HasTypeInfo SF_HasTypeInfo9565,434154
#define SRT_Union SRT_Union9572,434351
#define SRT_Except SRT_Except9573,434418
#define SRT_Exists SRT_Exists9574,434485
#define SRT_Discard SRT_Discard9575,434554
#define IgnorableOrderby(IgnorableOrderby9578,434680
#define SRT_Output SRT_Output9580,434735
#define SRT_Mem SRT_Mem9581,434795
#define SRT_Set SRT_Set9582,434859
#define SRT_Table SRT_Table9583,434927
#define SRT_EphemTab SRT_EphemTab9584,435006
#define SRT_Coroutine SRT_Coroutine9585,435086
typedef struct SelectDest SelectDest;SelectDest9591,435276
struct SelectDest {SelectDest9592,435314
  u8 eDest;         /* How to dispose of the results */eDest9593,435334
  u8 affinity;      /* Affinity used when eDest==SRT_Set */affinity9594,435390
  int iParm;        /* A parameter used by the eDest disposal method */iParm9595,435450
  int iMem;         /* Base register where results are written */iMem9596,435522
  int nMem;         /* Number of registers allocated */nMem9597,435588
struct AutoincInfo {AutoincInfo9609,436150
  AutoincInfo *pNext;   /* Next info block in a list of them all */pNext9610,436171
  Table *pTab;          /* Table this info block refers to */pTab9611,436239
  int iDb;              /* Index in sqlite3.aDb[] of database holding pTab */iDb9612,436301
  int regCtr;           /* Memory register holding the rowid counter */regCtr9613,436379
# define SQLITE_N_COLCACHE SQLITE_N_COLCACHE9620,436515
struct TriggerPrg {TriggerPrg9641,437443
  Trigger *pTrigger;      /* Trigger this program was coded from */pTrigger9642,437463
  int orconf;             /* Default ON CONFLICT policy */orconf9643,437531
  SubProgram *pProgram;   /* Program implementing pTrigger/orconf */pProgram9644,437590
  u32 aColmask[2];        /* Masks of old.*, new.* columns accessed */aColmask9645,437659
  TriggerPrg *pNext;      /* Next entry in Parse.pTriggerPrg list */pNext9646,437730
struct Parse {Parse9665,438556
  sqlite3 *db;         /* The main database structure */db9666,438571
  int rc;              /* Return code from execution */rc9667,438628
  char *zErrMsg;       /* An error message */zErrMsg9668,438684
  Vdbe *pVdbe;         /* An engine for executing database bytecode */pVdbe9669,438730
  u8 colNamesSet;      /* TRUE after OP_ColumnName has been issued to pVdbe */colNamesSet9670,438801
  u8 nameClash;        /* A permanent table name clashes with temp table name */nameClash9671,438880
  u8 checkSchema;      /* Causes schema cookie check after an error */checkSchema9672,438961
  u8 nested;           /* Number of nested calls to the parser/code generator */nested9673,439032
  u8 parseError;       /* True after a parsing error.  Ticket #1794 */parseError9674,439113
  u8 nTempReg;         /* Number of temporary registers in aTempReg[] */nTempReg9675,439184
  u8 nTempInUse;       /* Number of aTempReg[] currently checked out */nTempInUse9676,439257
  int aTempReg[8];     /* Holding area for temporary registers */aTempReg9677,439329
  int nRangeReg;       /* Size of the temporary register block */nRangeReg9678,439395
  int iRangeReg;       /* First register in temporary register block */iRangeReg9679,439461
  int nErr;            /* Number of errors seen */nErr9680,439533
  int nTab;            /* Number of previously allocated VDBE cursors */nTab9681,439584
  int nMem;            /* Number of memory cells used so far */nMem9682,439657
  int nSet;            /* Number of sets used so far */nSet9683,439721
  int ckBase;          /* Base register of data during check constraints */ckBase9684,439777
  int iCacheLevel;     /* ColCache valid when aColCache[].iLevel<=iCacheLevel */iCacheLevel9685,439853
  int iCacheCnt;       /* Counter used to generate aColCache[].lru values */iCacheCnt9686,439934
  u8 nColCache;        /* Number of entries in the column cache */nColCache9687,440011
  u8 iColCache;        /* Next entry of the cache to replace */iColCache9688,440078
  struct yColCache {yColCache9689,440142
    int iTable;           /* Table cursor number */iTable9690,440163
    int iColumn;          /* Table column number */iColumn9691,440215
    u8 tempReg;           /* iReg is a temp register that needs to be freed */tempReg9692,440267
    int iLevel;           /* Nesting level */iLevel9693,440346
    int iReg;             /* Reg with value of this column. 0 means none. */iReg9694,440392
    int lru;              /* Least recently used entry has the smallest value */lru9695,440469
  } aColCache[SQLITE_N_COLCACHE];  /* One for each column cache entry */aColCache9696,440550
  u32 writeMask;       /* Start a write transaction on these databases */writeMask9697,440623
  u32 cookieMask;      /* Bitmask of schema verified databases */cookieMask9698,440697
  u8 isMultiWrite;     /* True if statement may affect/insert multiple rows */isMultiWrite9699,440763
  u8 mayAbort;         /* True if statement may throw an ABORT exception */mayAbort9700,440842
  int cookieGoto;      /* Address of OP_Goto to cookie verifier subroutine */cookieGoto9701,440918
  int cookieValue[SQLITE_MAX_ATTACHED+2];  /* Values of cookies to verify */cookieValue9702,440996
  int nTableLock;        /* Number of locks in aTableLock */nTableLock9704,441106
  TableLock *aTableLock; /* Required table locks for shared-cache mode */aTableLock9705,441167
  int regRowid;        /* Register holding rowid of CREATE TABLE entry */regRowid9707,441248
  int regRoot;         /* Register holding root page number for new objects */regRoot9708,441322
  AutoincInfo *pAinc;  /* Information about AUTOINCREMENT counters */pAinc9709,441401
  int nMaxArg;         /* Max args passed to user function by sub-program */nMaxArg9710,441471
  Parse *pToplevel;    /* Parse structure for main program (or NULL) */pToplevel9713,441605
  Table *pTriggerTab;  /* Table triggers are being coded for */pTriggerTab9714,441677
  u32 oldmask;         /* Mask of old.* columns referenced */oldmask9715,441741
  u32 newmask;         /* Mask of new.* columns referenced */newmask9716,441803
  u8 eTriggerOp;       /* TK_UPDATE, TK_INSERT or TK_DELETE */eTriggerOp9717,441865
  u8 eOrconf;          /* Default ON CONFLICT policy for trigger steps */eOrconf9718,441928
  u8 disableTriggers;  /* True to disable triggers */disableTriggers9719,442002
  int nVar;            /* Number of '?' variables seen in the SQL so far */nVar9724,442157
  int nVarExpr;        /* Number of used slots in apVarExpr[] */nVarExpr9725,442233
  int nVarExprAlloc;   /* Number of allocated slots in apVarExpr[] */nVarExprAlloc9726,442298
  Expr **apVarExpr;    /* Pointers to :aaa and $aaaa wildcard expressions */apVarExpr9727,442368
  Vdbe *pReprepare;    /* VM being reprepared (sqlite3Reprepare()) */pReprepare9728,442445
  int nAlias;          /* Number of aliased result set columns */nAlias9729,442515
  int nAliasAlloc;     /* Number of allocated slots for aAlias[] */nAliasAlloc9730,442581
  int *aAlias;         /* Register used to hold aliased result */aAlias9731,442649
  u8 explain;          /* True if the EXPLAIN flag is found on the query */explain9732,442715
  Token sNameToken;    /* Token with unqualified schema object name */sNameToken9733,442791
  Token sLastToken;    /* The last token parsed */sLastToken9734,442862
  const char *zTail;   /* All SQL text past the last semicolon parsed */zTail9735,442913
  Table *pNewTable;    /* A table being constructed by CREATE TABLE */pNewTable9736,442986
  Trigger *pNewTrigger;     /* Trigger under construct by a CREATE TRIGGER */pNewTrigger9737,443057
  const char *zAuthContext; /* The 6th parameter to db->xAuth callbacks */zAuthContext9738,443135
  Token sArg;                /* Complete text of a module argument */sArg9740,443243
  u8 declareVtab;            /* True if inside sqlite3_declare_vtab() */declareVtab9741,443313
  int nVtabLock;             /* Number of virtual tables to lock */nVtabLock9742,443386
  Table **apVtabLock;        /* Pointer to virtual tables needing locking */apVtabLock9743,443454
  int nHeight;            /* Expression tree height of current sub-select */nHeight9745,443538
  Table *pZombieTab;      /* List of Table objects to delete after code gen */pZombieTab9746,443615
  TriggerPrg *pTriggerPrg;    /* Linked list of coded triggers */pTriggerPrg9747,443694
  #define IN_DECLARE_VTAB IN_DECLARE_VTAB9751,443796
  #define IN_DECLARE_VTAB IN_DECLARE_VTAB9753,443830
struct AuthContext {AuthContext9760,444044
  const char *zAuthContext;   /* Put saved Parse.zAuthContext here */zAuthContext9761,444065
  Parse *pParse;              /* The Parse structure */pParse9762,444135
#define OPFLAG_NCHANGE OPFLAG_NCHANGE9768,444259
#define OPFLAG_LASTROWID OPFLAG_LASTROWID9769,444328
#define OPFLAG_ISUPDATE OPFLAG_ISUPDATE9770,444399
#define OPFLAG_APPEND OPFLAG_APPEND9771,444474
#define OPFLAG_USESEEKRESULT OPFLAG_USESEEKRESULT9772,444548
#define OPFLAG_CLEARCACHE OPFLAG_CLEARCACHE9773,444628
struct Trigger {Trigger9790,445421
  char *zName;            /* The name of the trigger                        */zName9791,445438
  char *table;            /* The table or view to which the trigger applies */table9792,445517
  u8 op;                  /* One of TK_DELETE, TK_UPDATE, TK_INSERT         */op9793,445596
  u8 tr_tm;               /* One of TRIGGER_BEFORE, TRIGGER_AFTER */tr_tm9794,445675
  Expr *pWhen;            /* The WHEN clause of the expression (may be NULL) */pWhen9795,445744
  IdList *pColumns;       /* If this is an UPDATE OF <column-list> trigger,pColumns9796,445824
  Schema *pSchema;        /* Schema containing the trigger */pSchema9798,445965
  Schema *pTabSchema;     /* Schema containing the table */pTabSchema9799,446027
  TriggerStep *step_list; /* Link list of trigger program steps             */step_list9800,446087
  Trigger *pNext;         /* Next trigger associated with the table */pNext9801,446166
#define TRIGGER_BEFORE TRIGGER_BEFORE9811,446485
#define TRIGGER_AFTER TRIGGER_AFTER9812,446511
struct TriggerStep {TriggerStep9852,448352
  u8 op;               /* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT */op9853,448373
  u8 orconf;           /* OE_Rollback etc. */orconf9854,448452
  Trigger *pTrig;      /* The trigger that this step is a part of */pTrig9855,448498
  Select *pSelect;     /* SELECT statment or RHS of INSERT INTO .. SELECT ... */pSelect9856,448567
  Token target;        /* Target table for DELETE, UPDATE, INSERT */target9857,448648
  Expr *pWhere;        /* The WHERE clause for DELETE or UPDATE steps */pWhere9858,448717
  ExprList *pExprList; /* SET clause for UPDATE.  VALUES clause for INSERT */pExprList9859,448790
  IdList *pIdList;     /* Column names for INSERT */pIdList9860,448868
  TriggerStep *pNext;  /* Next in the link-list */pNext9861,448921
  TriggerStep *pLast;  /* Last element in link-list. Valid for 1st elem only */pLast9862,448972
typedef struct DbFixer DbFixer;DbFixer9870,449218
struct DbFixer {DbFixer9871,449250
  Parse *pParse;      /* The parsing context.  Error messages written here */pParse9872,449267
  const char *zDb;    /* Make sure all objects are contained in this database */zDb9873,449345
  const char *zType;  /* Type of the container - used for error messages */zType9874,449426
  const Token *pName; /* Name of the container - used for error messages */pName9875,449502
struct StrAccum {StrAccum9882,449718
  sqlite3 *db;         /* Optional database for lookaside.  Can be NULL */db9883,449736
  char *zBase;         /* A base allocation.  Not from malloc. */zBase9884,449811
  char *zText;         /* The string collected so far */zText9885,449877
  int  nChar;          /* Length of the string so far */nChar9886,449934
  int  nAlloc;         /* Amount of space allocated in zText */nAlloc9887,449991
  int  mxAlloc;        /* Maximum allowed string length */mxAlloc9888,450055
  u8   mallocFailed;   /* Becomes true if any memory allocation fails */mallocFailed9889,450114
  u8   useMalloc;      /* True if zText is enlargeable using realloc */useMalloc9890,450187
  u8   tooBig;         /* Becomes true if string size exceeds limits */tooBig9891,450259
  sqlite3 *db;        /* The database being initialized */db9899,450493
  int iDb;            /* 0 for main database.  1 for TEMP, 2.. for ATTACHed */iDb9900,450552
  char **pzErrMsg;    /* Error message stored here */pzErrMsg9901,450631
  int rc;             /* Result code stored here */rc9902,450685
} InitData;InitData9903,450737
struct Sqlite3Config {Sqlite3Config9910,450889
  int bMemstat;                     /* True to enable memory status */bMemstat9911,450912
  int bCoreMutex;                   /* True to enable core mutexing */bCoreMutex9912,450983
  int bFullMutex;                   /* True to enable full mutexing */bFullMutex9913,451054
  int mxStrlen;                     /* Maximum string length */mxStrlen9914,451125
  int szLookaside;                  /* Default lookaside buffer size */szLookaside9915,451189
  int nLookaside;                   /* Default lookaside buffer count */nLookaside9916,451261
  sqlite3_mem_methods m;            /* Low-level memory allocation interface */m9917,451334
  sqlite3_mutex_methods mutex;      /* Low-level mutex interface */mutex9918,451414
  sqlite3_pcache_methods pcache;    /* Low-level page-cache interface */pcache9919,451482
  void *pHeap;                      /* Heap storage space */pHeap9920,451555
  int nHeap;                        /* Size of pHeap[] */nHeap9921,451616
  int mnReq, mxReq;                 /* Min and max heap requests sizes */mnReq9922,451674
  int mnReq, mxReq;                 /* Min and max heap requests sizes */mxReq9922,451674
  void *pScratch;                   /* Scratch memory */pScratch9923,451748
  int szScratch;                    /* Size of each scratch buffer */szScratch9924,451805
  int nScratch;                     /* Number of scratch buffers */nScratch9925,451875
  void *pPage;                      /* Page cache memory */pPage9926,451943
  int szPage;                       /* Size of each page in pPage[] */szPage9927,452003
  int nPage;                        /* Number of pages in pPage[] */nPage9928,452074
  int mxParserStack;                /* maximum depth of the parser stack */mxParserStack9929,452143
  int sharedCacheEnabled;           /* true if shared-cache mode enabled */sharedCacheEnabled9930,452219
  int isInit;                       /* True after initialization has finished */isInit9933,452410
  int inProgress;                   /* True while initialization in progress */inProgress9934,452491
  int isMutexInit;                  /* True after mutexes are initialized */isMutexInit9935,452571
  int isMallocInit;                 /* True after malloc is initialized */isMallocInit9936,452648
  int isPCacheInit;                 /* True after malloc is initialized */isPCacheInit9937,452723
  sqlite3_mutex *pInitMutex;        /* Mutex used by sqlite3_initialize() */pInitMutex9938,452798
  int nRefInitMutex;                /* Number of users of pInitMutex */nRefInitMutex9939,452875
  void (*xLog)(void*,int,const char*); /* Function for logging */xLog9940,452947
  void *pLogArg;                       /* First argument to xLog() */pLogArg9941,453013
struct Walker {Walker9947,453147
  int (*xExprCallback)(Walker*, Expr*);     /* Callback for expressions */xExprCallback9948,453163
  int (*xSelectCallback)(Walker*,Select*);  /* Callback for SELECTs */xSelectCallback9949,453238
  Parse *pParse;                            /* Parser context.  */pParse9950,453309
    NameContext *pNC;                          /* Naming context */pNC9952,453450
    int i;                                     /* Integer value */i9953,453518
  } u;u9954,453585
#define WRC_Continue WRC_Continue9968,453996
#define WRC_Prune WRC_Prune9969,454058
#define WRC_Abort WRC_Abort9970,454136
#define SQLITE_SKIP_UTF8(SQLITE_SKIP_UTF89976,454333
#define SQLITE_CORRUPT_BKPT SQLITE_CORRUPT_BKPT9992,455015
#define SQLITE_MISUSE_BKPT SQLITE_MISUSE_BKPT9993,455073
#define SQLITE_CANTOPEN_BKPT SQLITE_CANTOPEN_BKPT9994,455129
# define SQLITE_ENABLE_FTS3SQLITE_ENABLE_FTS310003,455470
# define sqlite3Toupper(sqlite3Toupper10021,456006
# define sqlite3Isspace(sqlite3Isspace10022,456084
# define sqlite3Isalnum(sqlite3Isalnum10023,456156
# define sqlite3Isalpha(sqlite3Isalpha10024,456228
# define sqlite3Isdigit(sqlite3Isdigit10025,456300
# define sqlite3Isxdigit(sqlite3Isxdigit10026,456372
# define sqlite3Tolower(sqlite3Tolower10027,456444
# define sqlite3Toupper(sqlite3Toupper10029,456521
# define sqlite3Isspace(sqlite3Isspace10030,456578
# define sqlite3Isalnum(sqlite3Isalnum10031,456635
# define sqlite3Isalpha(sqlite3Isalpha10032,456692
# define sqlite3Isdigit(sqlite3Isdigit10033,456749
# define sqlite3Isxdigit(sqlite3Isxdigit10034,456806
# define sqlite3Tolower(sqlite3Tolower10035,456864
#define sqlite3StrNICmp sqlite3StrNICmp10044,457138
# define sqlite3StackAllocRaw(sqlite3StackAllocRaw10077,458686
# define sqlite3StackAllocZero(sqlite3StackAllocZero10078,458733
# define sqlite3StackFree(sqlite3StackFree10079,458794
# define sqlite3StackAllocRaw(sqlite3StackAllocRaw10081,458838
# define sqlite3StackAllocZero(sqlite3StackAllocZero10082,458899
# define sqlite3StackFree(sqlite3StackFree10083,458961
# define sqlite3IsNaN(sqlite3IsNaN10108,459710
# define sqlite3ViewGetColumnNames(sqlite3ViewGetColumnNames10183,463646
# define sqlite3AutoincrementBegin(sqlite3AutoincrementBegin10192,463976
# define sqlite3AutoincrementEnd(sqlite3AutoincrementEnd10193,464014
# define sqlite3ParseToplevel(sqlite3ParseToplevel10324,472358
# define sqlite3TriggersExist(sqlite3TriggersExist10326,472437
# define sqlite3DeleteTrigger(sqlite3DeleteTrigger10327,472480
# define sqlite3DropTriggerPtr(sqlite3DropTriggerPtr10328,472515
# define sqlite3UnlinkAndDeleteTrigger(sqlite3UnlinkAndDeleteTrigger10329,472551
# define sqlite3CodeRowTrigger(sqlite3CodeRowTrigger10330,472597
# define sqlite3CodeRowTriggerDirect(sqlite3CodeRowTriggerDirect10331,472647
# define sqlite3TriggerList(sqlite3TriggerList10332,472697
# define sqlite3ParseToplevel(sqlite3ParseToplevel10333,472733
# define sqlite3TriggerColmask(sqlite3TriggerColmask10334,472768
# define sqlite3AuthRead(sqlite3AuthRead10347,473459
# define sqlite3AuthCheck(sqlite3AuthCheck10348,473493
# define sqlite3AuthContextPush(sqlite3AuthContextPush10349,473543
# define sqlite3AuthContextPop(sqlite3AuthContextPop10350,473582
#define getVarint32(getVarint3210399,475915
#define putVarint32(putVarint3210400,476024
#define getVarint getVarint10401,476140
#define putVarint putVarint10402,476178
SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];sqlite3OpcodeProperty10437,478118
SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];sqlite3UpperToLower10438,478178
SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];sqlite3CtypeMap10439,478236
SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;sqlite3Config10440,478290
SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;sqlite3GlobalFunctions10441,478352
SQLITE_PRIVATE int sqlite3PendingByte;sqlite3PendingByte10442,478414
# define sqlite3CloseExtensions(sqlite3CloseExtensions10505,481759
  #define sqlite3TableLock(sqlite3TableLock10511,481918
#  define sqlite3VtabClear(sqlite3VtabClear10519,482076
#  define sqlite3VtabSync(sqlite3VtabSync10520,482106
#  define sqlite3VtabRollback(sqlite3VtabRollback10521,482147
#  define sqlite3VtabCommit(sqlite3VtabCommit10522,482180
#  define sqlite3VtabInSync(sqlite3VtabInSync10523,482211
#  define sqlite3VtabLock(sqlite3VtabLock10524,482245
#  define sqlite3VtabUnlock(sqlite3VtabUnlock10525,482275
#  define sqlite3VtabUnlockList(sqlite3VtabUnlockList10526,482306
#  define sqlite3VtabInSync(sqlite3VtabInSync10535,482725
  #define sqlite3FkActions(sqlite3FkActions10571,484895
  #define sqlite3FkCheck(sqlite3FkCheck10572,484931
  #define sqlite3FkDropTable(sqlite3FkDropTable10573,484965
  #define sqlite3FkOldmask(sqlite3FkOldmask10574,485001
  #define sqlite3FkRequired(sqlite3FkRequired10575,485040
  #define sqlite3FkDelete(sqlite3FkDelete10580,485171
#define SQLITE_FAULTINJECTOR_MALLOC SQLITE_FAULTINJECTOR_MALLOC10587,485283
#define SQLITE_FAULTINJECTOR_COUNT SQLITE_FAULTINJECTOR_COUNT10588,485325
  #define sqlite3BeginBenignMalloc(sqlite3BeginBenignMalloc10599,485677
  #define sqlite3EndBenignMalloc(sqlite3EndBenignMalloc10600,485714
#define IN_INDEX_ROWID IN_INDEX_ROWID10603,485757
#define IN_INDEX_EPH IN_INDEX_EPH10604,485792
#define IN_INDEX_INDEX IN_INDEX_INDEX10605,485827
  #define sqlite3JournalSize(sqlite3JournalSize10613,486176
  #define sqlite3ExprSetHeight(sqlite3ExprSetHeight10625,486618
  #define sqlite3SelectExprHeight(sqlite3SelectExprHeight10626,486654
  #define sqlite3ExprCheckHeight(sqlite3ExprCheckHeight10627,486693
  #define sqlite3ConnectionBlocked(sqlite3ConnectionBlocked10638,487067
  #define sqlite3ConnectionUnlocked(sqlite3ConnectionUnlocked10639,487107
  #define sqlite3ConnectionClosed(sqlite3ConnectionClosed10640,487146
# define IOTRACE(IOTRACE10653,487471
SQLITE_PRIVATE void (*sqlite3IoTrace)(const char*,...);sqlite3IoTrace10655,487586
# define IOTRACE(IOTRACE10657,487648
# define sqlite3VdbeIOTraceSql(sqlite3VdbeIOTraceSql10658,487668
SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {sqlite3UpperToLower10687,488624
SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {sqlite3CtypeMap10756,492404
SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {sqlite3Config10801,495006
SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;sqlite3GlobalFunctions10840,496601
SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;sqlite3PendingByte10860,497541
SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;sqlite3OpcodeProperty10868,497811
#define CTIMEOPT_VAL_(CTIMEOPT_VAL_10903,499040
#define CTIMEOPT_VAL(CTIMEOPT_VAL10904,499072
static const char * const azCompileOpt[] = {azCompileOpt10899,498868
SQLITE_API int sqlite3_compileoption_used(const char *zOptName){sqlite3_compileoption_used11230,505586
SQLITE_API const char *sqlite3_compileoption_get(int N){sqlite3_compileoption_get11248,506200
typedef struct sqlite3StatType sqlite3StatType;sqlite3StatType11278,507075
static SQLITE_WSD struct sqlite3StatType {sqlite3StatType11279,507123
  int nowValue[9];         /* Current value */nowValue11280,507166
  int mxValue[9];          /* Maximum value */mxValue11281,507213
} sqlite3Stat = { {0,}, {0,} };sqlite3Stat11282,507260
# define wsdStatInit wsdStatInit11292,507654
# define wsdStat wsdStat11293,507734
# define wsdStatInitwsdStatInit11295,507762
# define wsdStat wsdStat11296,507783
SQLITE_PRIVATE int sqlite3StatusValue(int op){sqlite3StatusValue11302,507877
SQLITE_PRIVATE void sqlite3StatusAdd(int op, int N){sqlite3StatusAdd11312,508133
SQLITE_PRIVATE void sqlite3StatusSet(int op, int X){sqlite3StatusSet11324,508429
SQLITE_API int sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){sqlite3_status11340,508902
SQLITE_API int sqlite3_db_status(sqlite3_db_status11356,509321
#define HAVE_LOCALTIME_S HAVE_LOCALTIME_S11444,512501
typedef struct DateTime DateTime;DateTime11450,512593
struct DateTime {DateTime11451,512627
  sqlite3_int64 iJD; /* The julian day number times 86400000 */iJD11452,512645
  int Y, M, D;       /* Year, month, and day */Y11453,512709
  int Y, M, D;       /* Year, month, and day */M11453,512709
  int Y, M, D;       /* Year, month, and day */D11453,512709
  int h, m;          /* Hour and minutes */h11454,512757
  int h, m;          /* Hour and minutes */m11454,512757
  int tz;            /* Timezone offset in minutes */tz11455,512801
  double s;          /* Seconds */s11456,512855
  char validYMD;     /* True (1) if Y,M,D are valid */validYMD11457,512890
  char validHMS;     /* True (1) if h,m,s are valid */validHMS11458,512945
  char validJD;      /* True (1) if iJD is valid */validJD11459,513000
  char validTZ;      /* True (1) if tz is valid */validTZ11460,513052
static int getDigits(const char *zDate, ...){getDigits11477,513607
#define getValue getValue11517,514388
static int parseTimezone(const char *zDate, DateTime *p){parseTimezone11535,514782
static int parseHhMmSs(const char *zDate, DateTime *p){parseHhMmSs11570,515578
static void computeJD(DateTime *p){computeJD11612,516489
static int parseYyyyMmDd(const char *zDate, DateTime *p){parseYyyyMmDd11658,517448
static void setDateTimeToCurrent(sqlite3_context *context, DateTime *p){setDateTimeToCurrent11693,518108
static int parseDateOrTime(parseDateOrTime11717,518903
static void computeYMD(DateTime *p){computeYMD11743,519541
static void computeHMS(DateTime *p){computeHMS11769,520151
static void computeYMD_HMS(DateTime *p){computeYMD_HMS11787,520464
static void clearYMD_HMS_TZ(DateTime *p){clearYMD_HMS_TZ11795,520584
static sqlite3_int64 localtimeOffset(DateTime *p){localtimeOffset11807,520850
static int parseModifier(const char *zMod, DateTime *p){parseModifier11893,522672
static int isDate(isDate12094,528090
static void juliandayFunc(juliandayFunc12135,529022
static void datetimeFunc(datetimeFunc12152,529335
static void timeFunc(timeFunc12172,529798
static void dateFunc(dateFunc12191,530202
static void strftimeFunc(strftimeFunc12224,530999
static void ctimeFunc(ctimeFunc12360,534631
static void cdateFunc(cdateFunc12374,534880
static void ctimestampFunc(ctimestampFunc12388,535138
static void currentTimeFunc(currentTimeFunc12410,535897
SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){sqlite3RegisterDateTimeFunctions12459,537048
#define _SQLITE_OS_C_ _SQLITE_OS_C_12502,538781
#undef _SQLITE_OS_C__SQLITE_OS_C_12503,538805
  #define DO_OS_MALLOC_TEST(DO_OS_MALLOC_TEST12523,539430
  #define DO_OS_MALLOC_TEST(DO_OS_MALLOC_TEST12529,539727
SQLITE_PRIVATE int sqlite3OsClose(sqlite3_file *pId){sqlite3OsClose12538,540010
SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){sqlite3OsRead12546,540188
SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){sqlite3OsWrite12550,540353
SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){sqlite3OsTruncate12554,540526
SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){sqlite3OsSync12557,540638
SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){sqlite3OsFileSize12561,540769
SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){sqlite3OsLock12565,540909
SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){sqlite3OsUnlock12569,541046
SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){sqlite3OsCheckReservedLock12572,541162
SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){sqlite3OsFileControl12576,541324
SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){sqlite3OsSectorSize12579,541456
SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){sqlite3OsDeviceCharacteristics12583,541652
SQLITE_PRIVATE int sqlite3OsOpen(sqlite3OsOpen12591,541863
SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){sqlite3OsDelete12608,542405
SQLITE_PRIVATE int sqlite3OsAccess(sqlite3OsAccess12611,542540
SQLITE_PRIVATE int sqlite3OsFullPathname(sqlite3OsFullPathname12620,542731
SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){sqlite3OsDlOpen12630,542973
SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){sqlite3OsDlError12633,543088
SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){sqlite3OsDlSym12636,543213
SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){sqlite3OsDlClose12639,543352
SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){sqlite3OsRandomness12643,543499
SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){sqlite3OsSleep12646,543636
SQLITE_PRIVATE int sqlite3OsCurrentTime(sqlite3_vfs *pVfs, double *pTimeOut){sqlite3OsCurrentTime12649,543741
SQLITE_PRIVATE int sqlite3OsOpenMalloc(sqlite3OsOpenMalloc12653,543867
SQLITE_PRIVATE int sqlite3OsCloseFree(sqlite3_file *pFile){sqlite3OsCloseFree12673,544303
SQLITE_PRIVATE int sqlite3OsInit(void){sqlite3OsInit12687,544750
static sqlite3_vfs * SQLITE_WSD vfsList = 0;vfsList12697,544963
#define vfsList vfsList12698,545008
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(const char *zVfs){sqlite3_vfs_find12704,545153
static void vfsUnlink(sqlite3_vfs *pVfs){vfsUnlink12728,545710
SQLITE_API int sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){sqlite3_vfs_register12750,546267
SQLITE_API int sqlite3_vfs_unregister(sqlite3_vfs *pVfs){sqlite3_vfs_unregister12774,546849
typedef struct BenignMallocHooks BenignMallocHooks;BenignMallocHooks12818,548410
static SQLITE_WSD struct BenignMallocHooks {BenignMallocHooks12819,548462
  void (*xBenignBegin)(void);xBenignBegin12820,548507
  void (*xBenignEnd)(void);xBenignEnd12821,548537
} sqlite3Hooks = { 0, 0 };sqlite3Hooks12822,548565
# define wsdHooksInit wsdHooksInit12831,548964
# define wsdHooks wsdHooks12833,549053
# define wsdHooksInitwsdHooksInit12835,549082
# define wsdHooks wsdHooks12836,549104
SQLITE_PRIVATE void sqlite3BenignMallocHooks(sqlite3BenignMallocHooks12844,549266
SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){sqlite3BeginBenignMalloc12858,549688
SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){sqlite3EndBenignMalloc12864,549822
static void *sqlite3MemMalloc(int nByte){ return 0; }sqlite3MemMalloc12904,551104
static void sqlite3MemFree(void *pPrior){ return; }sqlite3MemFree12905,551158
static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }sqlite3MemRealloc12906,551210
static int sqlite3MemSize(void *pPrior){ return 0; }sqlite3MemSize12907,551279
static int sqlite3MemRoundup(int n){ return n; }sqlite3MemRoundup12908,551332
static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }sqlite3MemInit12909,551381
static void sqlite3MemShutdown(void *NotUsed){ return; }sqlite3MemShutdown12910,551443
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault12918,551716
static void *sqlite3MemMalloc(int nByte){sqlite3MemMalloc12971,553385
static void sqlite3MemFree(void *pPrior){sqlite3MemFree12994,553989
static int sqlite3MemSize(void *pPrior){sqlite3MemSize13005,554206
static void *sqlite3MemRealloc(void *pPrior, int nByte){sqlite3MemRealloc13023,554764
static int sqlite3MemRoundup(int n){sqlite3MemRoundup13044,555259
static int sqlite3MemInit(void *NotUsed){sqlite3MemInit13051,555352
static void sqlite3MemShutdown(void *NotUsed){sqlite3MemShutdown13059,555481
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault13070,555785
# define backtrace(backtrace13123,557454
# define backtrace_symbols_fd(backtrace_symbols_fd13124,557480
struct MemBlockHdr {MemBlockHdr13140,558109
  i64 iSize;                          /* Size of this allocation */iSize13141,558130
  struct MemBlockHdr *pNext, *pPrev;  /* Linked list of all unfreed memory */pNext13142,558198
  struct MemBlockHdr *pNext, *pPrev;  /* Linked list of all unfreed memory */pPrev13142,558198
  char nBacktrace;                    /* Number of backtraces on this alloc */nBacktrace13143,558276
  char nBacktraceSlots;               /* Available backtrace slots */nBacktraceSlots13144,558355
  short nTitle;                       /* Bytes of title; includes '\0' */nTitle13145,558425
  int iForeGuard;                     /* Guard word for sanity */iForeGuard13146,558499
#define FOREGUARD FOREGUARD13152,558590
#define REARGUARD REARGUARD13153,558619
#define NCSIZE NCSIZE13158,558701
  sqlite3_mutex *mutex;mutex13171,559077
  struct MemBlockHdr *pFirst;pFirst13176,559179
  struct MemBlockHdr *pLast;pLast13177,559209
  int nBacktrace;nBacktrace13182,559318
  void (*xBacktrace)(int, int, void **);xBacktrace13183,559336
  int nTitle;        /* Bytes of zTitle to save.  Includes '\0' and padding */nTitle13188,559437
  char zTitle[100];  /* The title text */zTitle13189,559516
  int disallow; /* Do not allow memory allocation */disallow13195,559674
  int nAlloc[NCSIZE];      /* Total number of allocations */nAlloc13203,559957
  int nCurrent[NCSIZE];    /* Current number of allocations */nCurrent13204,560018
  int mxCurrent[NCSIZE];   /* Highwater mark for nCurrent */mxCurrent13205,560081
} mem;mem13207,560143
static void adjustStats(int iSize, int increment){adjustStats13213,560192
static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){sqlite3MemsysGetHeader13236,560726
static int sqlite3MemSize(void *p){sqlite3MemSize13260,561392
static int sqlite3MemInit(void *NotUsed){sqlite3MemInit13272,561600
static void sqlite3MemShutdown(void *NotUsed){sqlite3MemShutdown13286,562048
static int sqlite3MemRoundup(int n){sqlite3MemRoundup13294,562212
static void randomFill(char *pBuf, int nByte){randomFill13303,562486
static void *sqlite3MemMalloc(int nByte){sqlite3MemMalloc13326,562952
static void sqlite3MemFree(void *pPrior){sqlite3MemFree13384,564442
static void *sqlite3MemRealloc(void *pPrior, int nByte){sqlite3MemRealloc13426,565707
SQLITE_PRIVATE void sqlite3MemSetDefault(void){sqlite3MemSetDefault13446,566305
SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){sqlite3MemdebugBacktrace13465,566806
SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){sqlite3MemdebugBacktraceCallback13472,566980
SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){sqlite3MemdebugSettitle13479,567165
SQLITE_PRIVATE void sqlite3MemdebugSync(){sqlite3MemdebugSync13489,567485
SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){sqlite3MemdebugDump13502,567840
SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){sqlite3MemdebugMallocCount13544,569092
#define MX_SMALL MX_SMALL13596,570824
#define N_HASH N_HASH13602,570885
typedef struct Mem3Block Mem3Block;Mem3Block13636,572505
struct Mem3Block {Mem3Block13637,572541
      u32 prevSize;   /* Size of previous chunk in Mem3Block elements */prevSize13640,572583
      u32 size4x;     /* 4x the size of current chunk in Mem3Block elements */size4x13641,572656
    } hdr;hdr13642,572735
      u32 next;       /* Index in mem3.aPool[] of next free chunk */next13644,572759
      u32 prev;       /* Index in mem3.aPool[] of previous free chunk */prev13645,572828
    } list;list13646,572901
  } u;u13647,572913
static SQLITE_WSD struct Mem3Global {Mem3Global13656,573185
  u32 nPool;nPool13661,573351
  Mem3Block *aPool;aPool13662,573364
  int alarmBusy;alarmBusy13667,573453
  sqlite3_mutex *mutex;mutex13672,573548
  u32 mnMaster;mnMaster13677,573642
  u32 iMaster;iMaster13685,573944
  u32 szMaster;szMaster13686,573959
  u32 aiSmall[MX_SMALL-1];   /* For sizes 2 through MX_SMALL, inclusive */aiSmall13693,574127
  u32 aiHash[N_HASH];        /* For sizes MX_SMALL+1 and larger */aiHash13694,574202
} mem3 = { 97535575 };mem313695,574269
#define mem3 mem313697,574293
static void memsys3UnlinkFromList(u32 i, u32 *pRoot){memsys3UnlinkFromList13703,574458
static void memsys3Unlink(u32 i){memsys3Unlink13723,574940
static void memsys3LinkIntoList(u32 i, u32 *pRoot){memsys3LinkIntoList13743,575478
static void memsys3Link(u32 i){memsys3Link13757,575842
static void memsys3Enter(void){memsys3Enter13778,576467
static void memsys3Leave(void){memsys3Leave13784,576659
static void memsys3OutOfMemory(int nByte){memsys3OutOfMemory13791,576800
static void *memsys3Checkout(u32 i, u32 nBlock){memsys3Checkout13808,577241
static void *memsys3FromMaster(u32 nBlock){memsys3FromMaster13826,577857
static void memsys3Merge(u32 *pRoot){memsys3Merge13871,579636
static void *memsys3MallocUnsafe(int nByte){memsys3MallocUnsafe13910,580714
void memsys3FreeUnsafe(void *pOld){memsys3FreeUnsafe13992,582906
static int memsys3Size(void *p){memsys3Size14033,584495
static int memsys3Roundup(int n){memsys3Roundup14044,584758
static void *memsys3Malloc(int nBytes){memsys3Malloc14055,584902
void memsys3Free(void *pPrior){memsys3Free14067,585152
void *memsys3Realloc(void *pPrior, int nBytes){memsys3Realloc14077,585330
static int memsys3Init(void *NotUsed){memsys3Init14108,585886
static void memsys3Shutdown(void *NotUsed){memsys3Shutdown14133,586579
SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){sqlite3Memsys3Dump14145,586787
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){sqlite3MemGetMemsys314229,589329
typedef struct Mem5Link Mem5Link;Mem5Link14312,592401
struct Mem5Link {Mem5Link14313,592435
  int next;       /* Index of next free chunk */next14314,592453
  int prev;       /* Index of previous free chunk */prev14315,592502
#define LOGMAX LOGMAX14323,592753
#define CTRL_LOGSIZE CTRL_LOGSIZE14328,592819
#define CTRL_FREE CTRL_FREE14329,592879
static SQLITE_WSD struct Mem5Global {Mem5Global14337,593201
  int szAtom;      /* Smallest possible allocation in bytes */szAtom14341,593286
  int nBlock;      /* Number of szAtom sized blocks in zPool */nBlock14342,593349
  u8 *zPool;       /* Memory available to be allocated */zPool14343,593413
  sqlite3_mutex *mutex;mutex14348,593549
  u64 nAlloc;         /* Total number of calls to malloc */nAlloc14353,593612
  u64 totalAlloc;     /* Total of all malloc calls - includes internal frag */totalAlloc14354,593672
  u64 totalExcess;    /* Total internal fragmentation */totalExcess14355,593751
  u32 currentOut;     /* Current checkout, including internal fragmentation */currentOut14356,593808
  u32 currentCount;   /* Current number of distinct checkouts */currentCount14357,593887
  u32 maxOut;         /* Maximum instantaneous currentOut */maxOut14358,593952
  u32 maxCount;       /* Maximum instantaneous currentCount */maxCount14359,594013
  u32 maxRequest;     /* Largest allocation (exclusive of internal frag) */maxRequest14360,594076
  int aiFreelist[LOGMAX+1];aiFreelist14367,594323
  u8 *aCtrl;aCtrl14373,594469
} mem5 = { 0 };mem514375,594483
#define mem5 mem514380,594572
#define MEM5LINK(MEM5LINK14386,594743
static void memsys5Unlink(int i, int iLogsize){memsys5Unlink14392,594939
static void memsys5Link(int i, int iLogsize){memsys5Link14414,595435
static void memsys5Enter(void){memsys5Enter14435,596036
static void memsys5Leave(void){memsys5Leave14438,596105
static int memsys5Size(void *p){memsys5Size14447,596359
static int memsys5UnlinkFirst(int iLogsize){memsys5UnlinkFirst14461,596690
static void *memsys5MallocUnsafe(int nByte){memsys5MallocUnsafe14486,597336
static void memsys5FreeUnsafe(void *pOld){memsys5FreeUnsafe14548,599293
static void *memsys5Malloc(int nBytes){memsys5Malloc14604,600936
static void memsys5Free(void *pPrior){memsys5Free14620,601242
static void *memsys5Realloc(void *pPrior, int nBytes){memsys5Realloc14639,601838
static int memsys5Roundup(int n){memsys5Roundup14671,602594
static int memsys5Log(int iValue){memsys5Log14688,603020
static int memsys5Init(void *NotUsed){memsys5Init14700,603305
static void memsys5Shutdown(void *NotUsed){memsys5Shutdown14757,604933
SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){sqlite3Memsys5Dump14768,605158
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){sqlite3MemGetMemsys514811,606535
static SQLITE_WSD int mutexIsInit = 0;mutexIsInit14851,607814
SQLITE_PRIVATE int sqlite3MutexInit(void){ sqlite3MutexInit14859,607945
SQLITE_PRIVATE int sqlite3MutexEnd(void){sqlite3MutexEnd14890,609006
SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(int id){sqlite3_mutex_alloc14906,609321
SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){sqlite3MutexAlloc14913,609506
SQLITE_API void sqlite3_mutex_free(sqlite3_mutex *p){sqlite3_mutex_free14924,609746
SQLITE_API void sqlite3_mutex_enter(sqlite3_mutex *p){sqlite3_mutex_enter14934,609971
SQLITE_API int sqlite3_mutex_try(sqlite3_mutex *p){sqlite3_mutex_try14944,610247
SQLITE_API void sqlite3_mutex_leave(sqlite3_mutex *p){sqlite3_mutex_leave14958,610653
SQLITE_API int sqlite3_mutex_held(sqlite3_mutex *p){sqlite3_mutex_held14969,610909
SQLITE_API int sqlite3_mutex_notheld(sqlite3_mutex *p){sqlite3_mutex_notheld14972,611022
static int noopMutexHeld(sqlite3_mutex *p){ return 1; }noopMutexHeld15016,612474
static int noopMutexNotheld(sqlite3_mutex *p){ return 1; }noopMutexNotheld15017,612530
static int noopMutexInit(void){ return SQLITE_OK; }noopMutexInit15018,612589
static int noopMutexEnd(void){ return SQLITE_OK; }noopMutexEnd15019,612641
static sqlite3_mutex *noopMutexAlloc(int id){ return (sqlite3_mutex*)8; }noopMutexAlloc15020,612692
static void noopMutexFree(sqlite3_mutex *p){ return; }noopMutexFree15021,612766
static void noopMutexEnter(sqlite3_mutex *p){ return; }noopMutexEnter15022,612821
static int noopMutexTry(sqlite3_mutex *p){ return SQLITE_OK; }noopMutexTry15023,612877
static void noopMutexLeave(sqlite3_mutex *p){ return; }noopMutexLeave15024,612940
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(void){sqlite3DefaultMutex15026,612997
struct sqlite3_mutex {sqlite3_mutex15054,613613
  int id;     /* The mutex type */id15055,613636
  int cnt;    /* Number of entries without a matching leave */cnt15056,613671
static int debugMutexHeld(sqlite3_mutex *p){debugMutexHeld15063,613860
static int debugMutexNotheld(sqlite3_mutex *p){debugMutexNotheld15066,613934
static int debugMutexInit(void){ return SQLITE_OK; }debugMutexInit15073,614071
static int debugMutexEnd(void){ return SQLITE_OK; }debugMutexEnd15074,614124
static sqlite3_mutex *debugMutexAlloc(int id){debugMutexAlloc15081,614346
static void debugMutexFree(sqlite3_mutex *p){debugMutexFree15108,614931
static void debugMutexEnter(sqlite3_mutex *p){debugMutexEnter15125,615714
static int debugMutexTry(sqlite3_mutex *p){debugMutexTry15129,615842
static void debugMutexLeave(sqlite3_mutex *p){debugMutexLeave15141,616228
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(void){sqlite3DefaultMutex15147,616388
struct sqlite3_mutex {sqlite3_mutex15196,617751
  HMTX mutex;       /* Mutex controlling the lock */mutex15197,617774
  int  id;          /* Mutex type */id15198,617827
  int  nRef;        /* Number of references */nRef15199,617864
  TID  owner;       /* Thread holding this mutex */owner15200,617911
#define OS2_MUTEX_INITIALIZER OS2_MUTEX_INITIALIZER15203,617967
static int os2MutexInit(void){ return SQLITE_OK; }os2MutexInit15208,618066
static int os2MutexEnd(void){ return SQLITE_OK; }os2MutexEnd15209,618117
static sqlite3_mutex *os2MutexAlloc(int iType){os2MutexAlloc15250,620047
static void os2MutexFree(sqlite3_mutex *p){os2MutexFree15318,621968
static int os2MutexHeld(sqlite3_mutex *p){os2MutexHeld15331,622326
static int os2MutexNotheld(sqlite3_mutex *p){os2MutexNotheld15344,622629
static void os2MutexEnter(sqlite3_mutex *p){os2MutexEnter15370,623563
static int os2MutexTry(sqlite3_mutex *p){os2MutexTry15381,623879
static void os2MutexLeave(sqlite3_mutex *p){os2MutexLeave15406,624549
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(void){sqlite3DefaultMutex15419,624869
struct sqlite3_mutex {sqlite3_mutex15469,626168
  pthread_mutex_t mutex;     /* Mutex controlling the lock */mutex15470,626191
  int id;                    /* Mutex type */id15471,626253
  int nRef;                  /* Number of entrances */nRef15472,626299
  pthread_t owner;           /* Thread that is within this mutex */owner15473,626354
  int trace;                 /* True to trace changes */trace15475,626442
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER15479,626529
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER15481,626622
static int pthreadMutexHeld(sqlite3_mutex *p){pthreadMutexHeld15501,627580
static int pthreadMutexNotheld(sqlite3_mutex *p){pthreadMutexNotheld15504,627695
static int pthreadMutexInit(void){ return SQLITE_OK; }pthreadMutexInit15512,627880
static int pthreadMutexEnd(void){ return SQLITE_OK; }pthreadMutexEnd15513,627935
static sqlite3_mutex *pthreadMutexAlloc(int iType){pthreadMutexAlloc15557,629916
static void pthreadMutexFree(sqlite3_mutex *p){pthreadMutexFree15612,631420
static void pthreadMutexEnter(sqlite3_mutex *p){pthreadMutexEnter15630,632242
static int pthreadMutexTry(sqlite3_mutex *p){pthreadMutexTry15669,633523
static void pthreadMutexLeave(sqlite3_mutex *p){pthreadMutexLeave15724,635237
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(void){sqlite3DefaultMutex15744,635664
struct sqlite3_mutex {sqlite3_mutex15792,636885
  CRITICAL_SECTION mutex;    /* Mutex controlling the lock */mutex15793,636908
  int id;                    /* Mutex type */id15794,636970
  int nRef;                  /* Number of enterances */nRef15795,637016
  DWORD owner;               /* Thread holding this mutex */owner15796,637072
  int trace;                 /* True to trace changes */trace15798,637153
#define SQLITE_W32_MUTEX_INITIALIZER SQLITE_W32_MUTEX_INITIALIZER15801,637220
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER15803,637283
#define SQLITE3_MUTEX_INITIALIZER SQLITE3_MUTEX_INITIALIZER15805,637376
static int winMutexHeld(sqlite3_mutex *p){winMutexHeld15847,638801
static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){winMutexNotheld215850,638901
static int winMutexNotheld(sqlite3_mutex *p){winMutexNotheld15853,638999
static sqlite3_mutex winMutex_staticMutexes[6] = {winMutex_staticMutexes15863,639186
static int winMutex_isInit = 0;winMutex_isInit15871,639413
static long winMutex_lock = 0;winMutex_lock15877,639636
static int winMutexInit(void){ winMutexInit15879,639668
static int winMutexEnd(void){ winMutexEnd15896,640150
static sqlite3_mutex *winMutexAlloc(int iType){winMutexAlloc15953,642506
static void winMutexFree(sqlite3_mutex *p){winMutexFree15984,643193
static void winMutexEnter(sqlite3_mutex *p){winMutexEnter16003,644026
static int winMutexTry(sqlite3_mutex *p){winMutexTry16015,644369
static void winMutexLeave(sqlite3_mutex *p){winMutexLeave16055,645594
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(void){sqlite3DefaultMutex16071,645976
static void softHeapLimitEnforcer(softHeapLimitEnforcer16115,647085
SQLITE_API void sqlite3_soft_heap_limit(int n){sqlite3_soft_heap_limit16128,647375
SQLITE_API int sqlite3_release_memory(int n){sqlite3_release_memory16155,648020
static SQLITE_WSD struct Mem0Global {Mem0Global16169,648310
  u32 nScratchFree;nScratchFree16171,648411
  u32 nPageFree;nPageFree16172,648431
  sqlite3_mutex *mutex;         /* Mutex to serialize access */mutex16174,648449
  sqlite3_int64 alarmThreshold;alarmThreshold16182,648740
  void (*alarmCallback)(void*, sqlite3_int64,int);alarmCallback16183,648772
  void *alarmArg;alarmArg16184,648823
  u32 *aScratchFree;aScratchFree16191,649010
  u32 *aPageFree;aPageFree16192,649031
} mem0 = { 0, 0, 0, 0, 0, 0, 0, 0 };mem016193,649049
#define mem0 mem016195,649087
SQLITE_PRIVATE int sqlite3MallocInit(void){sqlite3MallocInit16200,649186
SQLITE_PRIVATE void sqlite3MallocEnd(void){sqlite3MallocEnd16242,650800
SQLITE_API sqlite3_int64 sqlite3_memory_used(void){sqlite3_memory_used16252,651055
SQLITE_API sqlite3_int64 sqlite3_memory_highwater(int resetFlag){sqlite3_memory_highwater16265,651448
SQLITE_PRIVATE int sqlite3MemoryAlarm(sqlite3MemoryAlarm16276,651742
SQLITE_API int sqlite3_memory_alarm(sqlite3_memory_alarm16294,652203
static void sqlite3MallocAlarm(int nByte){sqlite3MallocAlarm16306,652438
static int mallocWithAlarm(int n, void **pp){mallocWithAlarm16326,653010
SQLITE_PRIVATE void *sqlite3Malloc(int n){sqlite3Malloc16355,653840
SQLITE_API void *sqlite3_malloc(int n){sqlite3_malloc16379,654689
static int scratchAllocOut = 0;scratchAllocOut16393,655141
SQLITE_PRIVATE void *sqlite3ScratchMalloc(int n){sqlite3ScratchMalloc16405,655532
SQLITE_PRIVATE void sqlite3ScratchFree(void *p){sqlite3ScratchFree16456,657051
static int isLookaside(sqlite3 *db, void *p){isLookaside16499,658531
#define isLookaside(isLookaside16503,658654
SQLITE_PRIVATE int sqlite3MallocSize(void *p){sqlite3MallocSize16510,658802
SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3 *db, void *p){sqlite3DbMallocSize16513,658892
SQLITE_API void sqlite3_free(void *p){sqlite3_free16525,659185
SQLITE_PRIVATE void sqlite3DbFree(sqlite3 *db, void *p){sqlite3DbFree16541,659605
SQLITE_PRIVATE void *sqlite3Realloc(void *pOld, int nBytes){sqlite3Realloc16556,659979
SQLITE_API void *sqlite3_realloc(void *pOld, int n){sqlite3_realloc16601,661290
SQLITE_PRIVATE void *sqlite3MallocZero(int n){sqlite3MallocZero16612,661492
SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3 *db, int n){sqlite3DbMallocZero16624,661738
SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3 *db, int n){sqlite3DbMallocRaw16650,662642
SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *db, void *p, int n){sqlite3DbRealloc16685,663489
SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, int n){sqlite3DbReallocOrFree16716,664223
SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3 *db, const char *z){sqlite3DbStrDup16732,664742
SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3 *db, const char *z, int n){sqlite3DbStrNDup16746,665027
SQLITE_PRIVATE void sqlite3SetString(char **pz, sqlite3 *db, const char *zFormat, ...){sqlite3SetString16765,665471
SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){sqlite3ApiExit16790,666253
#define etRADIX etRADIX16863,669311
#define etFLOAT etFLOAT16864,669382
#define etEXP etEXP16865,669432
#define etGENERIC etGENERIC16866,669496
#define etSIZE etSIZE16867,669577
#define etSTRING etSTRING16868,669656
#define etDYNSTRING etDYNSTRING16869,669698
#define etPERCENT etPERCENT16870,669762
#define etCHARX etCHARX16871,669811
#define etSQLESCAPE etSQLESCAPE16873,669918
#define etSQLESCAPE2 etSQLESCAPE216874,669979
#define etTOKEN etTOKEN16876,670121
#define etSRCLIST etSRCLIST16877,670182
#define etPOINTER etPOINTER16878,670235
#define etSQLESCAPE3 etSQLESCAPE316879,670283
#define etORDINAL etORDINAL16880,670345
#define etINVALID etINVALID16882,670421
typedef unsigned char etByte;etByte16888,670535
typedef struct et_info {   /* Information about each format field */et_info16894,670689
  char fmttype;            /* The format field code letter */fmttype16895,670758
  etByte base;             /* The base for radix conversion */base16896,670820
  etByte flags;            /* One or more of FLAG_ constants below */flags16897,670883
  etByte type;             /* Conversion paradigm */type16898,670953
  etByte charset;          /* Offset into aDigits[] of the digits string */charset16899,671006
  etByte prefix;           /* Offset into aPrefix[] of the prefix string */prefix16900,671082
} et_info;et_info16901,671158
#define FLAG_SIGNED FLAG_SIGNED16906,671212
#define FLAG_INTERN FLAG_INTERN16907,671284
#define FLAG_STRING FLAG_STRING16908,671347
static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";aDigits16915,671531
static const char aPrefix[] = "-x0\000X0";aPrefix16916,671597
static const et_info fmtinfo[] = {fmtinfo16917,671640
static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){et_getdigit16966,673296
static void appendSpace(StrAccum *pAccum, int N){appendSpace16981,673626
#   define SQLITE_PRINT_BUF_SIZE SQLITE_PRINT_BUF_SIZE16998,674117
#   define SQLITE_PRINT_BUF_SIZE SQLITE_PRINT_BUF_SIZE17000,674160
#define etBUFSIZE etBUFSIZE17003,674212
SQLITE_PRIVATE void sqlite3VXPrintf(sqlite3VXPrintf17032,675334
SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){sqlite3StrAccumAppend17548,692651
SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum *p){sqlite3StrAccumFinish17600,693857
SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum *p){sqlite3StrAccumReset17618,694280
SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum *p, char *zBase, int n, int mx){sqlite3StrAccumInit17628,694463
SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){sqlite3VMPrintf17643,694807
SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){sqlite3MPrintf17663,695345
SQLITE_PRIVATE char *sqlite3MAppendf(sqlite3 *db, char *zStr, const char *zFormat, ...){sqlite3MAppendf17680,695808
SQLITE_API char *sqlite3_vmprintf(const char *zFormat, va_list ap){sqlite3_vmprintf17694,696149
SQLITE_API char *sqlite3_mprintf(const char *zFormat, ...){sqlite3_mprintf17711,696625
SQLITE_API char *sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){sqlite3_snprintf17729,697121
static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){renderLogMsg17755,697850
SQLITE_API void sqlite3_log(int iErrCode, const char *zFormat, ...){sqlite3_log17769,698368
SQLITE_PRIVATE void sqlite3DebugPrintf(const char *zFormat, ...){sqlite3DebugPrintf17784,698849
SQLITE_PRIVATE void sqlite3XPrintf(StrAccum *p, const char *zFormat, ...){sqlite3XPrintf17803,699291
static SQLITE_WSD struct sqlite3PrngType {sqlite3PrngType17835,700355
  unsigned char isInit;          /* True if initialized */isInit17836,700398
  unsigned char i, j;            /* State variables */i17837,700457
  unsigned char i, j;            /* State variables */j17837,700457
  unsigned char s[256];          /* State variables */s17838,700512
} sqlite3Prng;sqlite3Prng17839,700567
static u8 randomByte(void){randomByte17857,701379
# define wsdPrng wsdPrng17869,701888
SQLITE_API void sqlite3_randomness(int N, void *pBuf){sqlite3_randomness17916,703089
static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;sqlite3SavedPrng17938,703735
SQLITE_PRIVATE void sqlite3PrngSaveState(void){sqlite3PrngSaveState17939,703794
SQLITE_PRIVATE void sqlite3PrngRestoreState(void){sqlite3PrngRestoreState17946,703988
SQLITE_PRIVATE void sqlite3PrngResetState(void){sqlite3PrngResetState17953,704185
#define _VDBEINT_H__VDBEINT_H_18015,706575
typedef struct VdbeOp Op;Op18022,706759
typedef unsigned char Bool;Bool18027,706810
struct VdbeCursor {VdbeCursor18044,707522
  BtCursor *pCursor;    /* The cursor structure of the backend */pCursor18045,707542
  int iDb;              /* Index of cursor database in db->aDb[] (or -1) */iDb18046,707608
  i64 lastRowid;        /* Last rowid from a Next or NextIdx operation */lastRowid18047,707684
  Bool zeroed;          /* True if zeroed out and ready for reuse */zeroed18048,707758
  Bool rowidIsValid;    /* True if lastRowid is valid */rowidIsValid18049,707827
  Bool atFirst;         /* True if pointing to first entry */atFirst18050,707884
  Bool useRandomRowid;  /* Generate new record numbers semi-randomly */useRandomRowid18051,707946
  Bool nullRow;         /* True if pointing to a row with no data */nullRow18052,708018
  Bool deferredMoveto;  /* A call to sqlite3BtreeMoveto() is needed */deferredMoveto18053,708087
  Bool isTable;         /* True if a table requiring integer keys */isTable18054,708158
  Bool isIndex;         /* True if an index containing keys only - no data */isIndex18055,708227
  i64 movetoTarget;     /* Argument to the deferred sqlite3BtreeMoveto() */movetoTarget18056,708305
  Btree *pBt;           /* Separate file holding temporary table */pBt18057,708381
  int pseudoTableReg;   /* Register holding pseudotable content. */pseudoTableReg18058,708449
  KeyInfo *pKeyInfo;    /* Info about index keys needed by index cursors */pKeyInfo18059,708517
  int nField;           /* Number of fields in the header */nField18060,708593
  i64 seqCount;         /* Sequence counter */seqCount18061,708654
  sqlite3_vtab_cursor *pVtabCursor;  /* The cursor for a virtual table */pVtabCursor18062,708701
  const sqlite3_module *pModule;     /* Module for cursor pVtabCursor */pModule18063,708775
  int seekResult;seekResult18067,708961
  u32 cacheStatus;      /* Cache is valid if this matches Vdbe.cacheCtr */cacheStatus18078,709392
  int payloadSize;      /* Total number of bytes in the record */payloadSize18079,709467
  u32 *aType;           /* Type values for all entries in the record */aType18080,709533
  u32 *aOffset;         /* Cached offsets to the start of each columns data */aOffset18081,709605
  u8 *aRow;             /* Data for the current row, if all on one page */aRow18082,709684
typedef struct VdbeCursor VdbeCursor;VdbeCursor18084,709762
typedef struct VdbeFrame VdbeFrame;VdbeFrame18099,710434
struct VdbeFrame {VdbeFrame18100,710470
  Vdbe *v;                /* VM this frame belongs to */v18101,710489
  int pc;                 /* Program Counter */pc18102,710546
  Op *aOp;                /* Program instructions */aOp18103,710594
  int nOp;                /* Size of aOp array */nOp18104,710647
  Mem *aMem;              /* Array of memory cells */aMem18105,710697
  int nMem;               /* Number of entries in aMem */nMem18106,710751
  VdbeCursor **apCsr;     /* Element of Vdbe cursors */apCsr18107,710809
  u16 nCursor;            /* Number of entries in apCsr */nCursor18108,710865
  void *token;            /* Copy of SubProgram.token */token18109,710924
  int nChildMem;          /* Number of memory cells for child frame */nChildMem18110,710981
  int nChildCsr;          /* Number of cursors for child frame */nChildCsr18111,711052
  i64 lastRowid;          /* Last insert rowid (sqlite3.lastRowid) */lastRowid18112,711118
  int nChange;            /* Statement changes (Vdbe.nChanges)     */nChange18113,711188
  VdbeFrame *pParent;     /* Parent of this frame */pParent18114,711258
#define VdbeFrameMem(VdbeFrameMem18117,711315
#define CACHE_STALE CACHE_STALE18122,711470
struct Mem {Mem18135,711977
    i64 i;              /* Integer value. */i18137,712000
    int nZero;          /* Used when bit MEM_Zero is set in flags */nZero18138,712045
    FuncDef *pDef;      /* Used only when flags==MEM_Agg */pDef18139,712114
    RowSet *pRowSet;    /* Used only when flags==MEM_RowSet */pRowSet18140,712174
    VdbeFrame *pFrame;  /* Used when flags==MEM_Frame */pFrame18141,712237
  } u;u18142,712294
  double r;           /* Real value */r18143,712301
  sqlite3 *db;        /* The associated database connection */db18144,712340
  char *z;            /* String or BLOB value */z18145,712403
  int n;              /* Number of characters in string value, excluding '\0' */n18146,712452
  u16 flags;          /* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. */flags18147,712533
  u8  type;           /* One of SQLITE_NULL, SQLITE_TEXT, SQLITE_INTEGER, etc */type18148,712614
  u8  enc;            /* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE */enc18149,712695
  void (*xDel)(void *);  /* If not null, call this function to delete Mem.z */xDel18150,712767
  char *zMalloc;      /* Dynamic buffer allocated by sqlite3_malloc() */zMalloc18151,712846
#define MEM_Null MEM_Null18169,713605
#define MEM_Str MEM_Str18170,713656
#define MEM_Int MEM_Int18171,713711
#define MEM_Real MEM_Real18172,713768
#define MEM_Blob MEM_Blob18173,713828
#define MEM_RowSet MEM_RowSet18174,713881
#define MEM_Frame MEM_Frame18175,713943
#define MEM_TypeMask MEM_TypeMask18176,714008
#define MEM_Term MEM_Term18183,714315
#define MEM_Dyn MEM_Dyn18184,714381
#define MEM_Static MEM_Static18185,714453
#define MEM_Ephem MEM_Ephem18186,714522
#define MEM_Agg MEM_Agg18187,714595
#define MEM_Zero MEM_Zero18188,714672
  #undef MEM_ZeroMEM_Zero18191,714782
  #define MEM_Zero MEM_Zero18192,714800
#define MemSetTypeFlag(MemSetTypeFlag18199,714909
struct VdbeFunc {VdbeFunc18212,715522
  FuncDef *pFunc;               /* The definition of the function */pFunc18213,715540
  int nAux;                     /* Number of entries allocated for apAux[] */nAux18214,715609
  struct AuxData {AuxData18215,715687
    void *pAux;                   /* Aux data for the i-th argument */pAux18216,715706
    void (*xDelete)(void *);      /* Destructor for the aux data */xDelete18217,715777
  } apAux[1];                   /* One slot for each function argument */apAux18218,715845
struct sqlite3_context {sqlite3_context18234,716472
  FuncDef *pFunc;       /* Pointer to function information.  MUST BE FIRST */pFunc18235,716497
  VdbeFunc *pVdbeFunc;  /* Auxilary data, if created. */pVdbeFunc18236,716575
  Mem s;                /* The return value is stored here */s18237,716632
  Mem *pMem;            /* Memory cell used to store aggregate context */pMem18238,716694
  int isError;          /* Error code returned by the function. */isError18239,716768
  CollSeq *pColl;       /* Collating sequence */pColl18240,716835
typedef struct Set Set;Set18249,717071
struct Set {Set18250,717095
  Hash hash;             /* A set is just a hash table */hash18251,717108
  HashElem *prev;        /* Previously accessed hash elemen */prev18252,717166
struct Vdbe {Vdbe18270,717944
  sqlite3 *db;            /* The database connection that owns this statement */db18271,717958
  Vdbe *pPrev,*pNext;     /* Linked list of VDBEs with the same Vdbe.db */pPrev18272,718039
  Vdbe *pPrev,*pNext;     /* Linked list of VDBEs with the same Vdbe.db */pNext18272,718039
  int nOp;                /* Number of instructions in the program */nOp18273,718114
  int nOpAlloc;           /* Number of slots allocated for aOp[] */nOpAlloc18274,718184
  Op *aOp;                /* Space to hold the virtual machine's program */aOp18275,718252
  int nLabel;             /* Number of labels used */nLabel18276,718328
  int nLabelAlloc;        /* Number of slots allocated in aLabel[] */nLabelAlloc18277,718382
  int *aLabel;            /* Space to hold the labels */aLabel18278,718452
  Mem **apArg;            /* Arguments to currently executing user function */apArg18279,718509
  Mem *aColName;          /* Column names to return */aColName18280,718588
  Mem *pResultSet;        /* Pointer to an array of results */pResultSet18281,718643
  u16 nResColumn;         /* Number of columns in one row of the result set */nResColumn18282,718706
  u16 nCursor;            /* Number of slots in apCsr[] */nCursor18283,718785
  VdbeCursor **apCsr;     /* One element of this array for each open cursor */apCsr18284,718844
  u8 errorAction;         /* Recovery action to do in case of an error */errorAction18285,718923
  u8 okVar;               /* True if azVar[] has been initialized */okVar18286,718997
  ynVar nVar;             /* Number of entries in aVar[] */nVar18287,719066
  Mem *aVar;              /* Values for the OP_Variable opcode. */aVar18288,719126
  char **azVar;           /* Name of variables */azVar18289,719193
  u32 magic;              /* Magic number for sanity checking */magic18290,719243
  int nMem;               /* Number of memory locations currently allocated */nMem18291,719308
  Mem *aMem;              /* The memory locations */aMem18292,719387
  u32 cacheCtr;           /* VdbeCursor row cache generation counter */cacheCtr18293,719440
  int pc;                 /* The program counter */pc18294,719512
  int rc;                 /* Value to return */rc18295,719564
  char *zErrMsg;          /* Error message written here */zErrMsg18296,719612
  u8 explain;             /* True if EXPLAIN present on SQL command */explain18297,719671
  u8 changeCntOn;         /* True to update the change-counter */changeCntOn18298,719742
  u8 expired;             /* True if the VM needs to be recompiled */expired18299,719808
  u8 runOnlyOnce;         /* Automatically expire on reset */runOnlyOnce18300,719878
  u8 minWriteFileFormat;  /* Minimum file format for writable database files */minWriteFileFormat18301,719940
  u8 inVtabMethod;        /* See comments above */inVtabMethod18302,720020
  u8 usesStmtJournal;     /* True if uses a statement journal */usesStmtJournal18303,720071
  u8 readOnly;            /* True for read-only statements */readOnly18304,720136
  u8 isPrepareV2;         /* True if prepared with prepare_v2() */isPrepareV218305,720198
  int nChange;            /* Number of db changes made since last reset */nChange18306,720265
  int btreeMask;          /* Bitmask of db->aDb[] entries referenced */btreeMask18307,720340
  i64 startTime;          /* Time when query started - used for profiling */startTime18308,720412
  BtreeMutexArray aMutex; /* An array of Btree used here and needing locks */aMutex18309,720489
  int aCounter[2];        /* Counters used by sqlite3_stmt_status() */aCounter18310,720567
  char *zSql;             /* Text of the SQL statement that generated this */zSql18311,720638
  void *pFree;            /* Free this when deleting the vdbe */pFree18312,720716
  i64 nFkConstraint;      /* Number of imm. FK constraints this VM */nFkConstraint18313,720781
  i64 nStmtDefCons;       /* Number of def. constraints when stmt started */nStmtDefCons18314,720851
  int iStatement;         /* Statement number (or 0 if has not opened stmt) */iStatement18315,720928
  FILE *trace;            /* Write an execution trace here, if not NULL */trace18317,721027
  VdbeFrame *pFrame;      /* Parent frame */pFrame18319,721109
  int nFrame;             /* Number of frames in pFrame list */nFrame18320,721154
  u32 expmask;            /* Binding to these vars invalidates VM */expmask18321,721218
#define VDBE_MAGIC_INIT VDBE_MAGIC_INIT18327,721348
#define VDBE_MAGIC_RUN VDBE_MAGIC_RUN18328,721420
#define VDBE_MAGIC_HALT VDBE_MAGIC_HALT18329,721493
#define VDBE_MAGIC_DEAD VDBE_MAGIC_DEAD18330,721570
# define sqlite3VdbeMemSetDouble sqlite3VdbeMemSetDouble18363,723200
# define sqlite3VdbeCheckFk(sqlite3VdbeCheckFk18392,724576
# define sqlite3VdbeMutexArrayEnter(sqlite3VdbeMutexArrayEnter18398,724715
  #define sqlite3VdbeMemExpandBlob(sqlite3VdbeMemExpandBlob18411,725110
SQLITE_PRIVATE const int sqlite3one = 1;sqlite3one18424,725496
static const unsigned char sqlite3Utf8Trans1[] = {sqlite3Utf8Trans118431,725671
#define WRITE_UTF8(WRITE_UTF818443,726127
#define WRITE_UTF16LE(WRITE_UTF16LE18463,727156
#define WRITE_UTF16BE(WRITE_UTF16BE18475,727859
#define READ_UTF16LE(READ_UTF16LE18487,728562
#define READ_UTF16BE(READ_UTF16BE18497,729141
#define READ_UTF8(READ_UTF818534,730841
SQLITE_PRIVATE int sqlite3Utf8Read(sqlite3Utf8Read18545,731455
SQLITE_PRIVATE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){sqlite3VdbeMemTranslate18583,732497
SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem){sqlite3VdbeMemHandleBom18727,736759
SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){sqlite3Utf8CharLen18765,737748
SQLITE_PRIVATE int sqlite3Utf8To8(unsigned char *zIn){sqlite3Utf8To818795,738529
SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){sqlite3Utf16to818819,739105
SQLITE_PRIVATE char *sqlite3Utf8to16(sqlite3 *db, u8 enc, char *z, int n, int *pnOut){sqlite3Utf8to1618847,740074
SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){sqlite3Utf16ByteLen18867,740620
SQLITE_PRIVATE void sqlite3UtfSelfTest(void){sqlite3UtfSelfTest18892,741219
SQLITE_PRIVATE void sqlite3Coverage(int x){sqlite3Coverage18968,743120
SQLITE_PRIVATE int sqlite3IsNaN(double x){sqlite3IsNaN18981,743472
SQLITE_PRIVATE int sqlite3Strlen30(const char *z){sqlite3Strlen3019029,745299
SQLITE_PRIVATE void sqlite3Error(sqlite3 *db, int err_code, const char *zFormat, ...){sqlite3Error19057,746207
SQLITE_PRIVATE void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){sqlite3ErrorMsg19090,747413
SQLITE_PRIVATE int sqlite3Dequote(char *z){sqlite3Dequote19124,748456
#define UpperToLower UpperToLower19153,749061
SQLITE_PRIVATE int sqlite3StrICmp(const char *zLeft, const char *zRight){sqlite3StrICmp19159,749229
SQLITE_API int sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){sqlite3_strnicmp19166,749512
SQLITE_PRIVATE int sqlite3IsNumber(const char *z, int *realnum, u8 enc){sqlite3IsNumber19187,750367
SQLITE_PRIVATE int sqlite3AtoF(const char *z, double *pResult){sqlite3AtoF19227,751557
static int compare2pow63(const char *zNum){compare2pow6319368,755304
SQLITE_PRIVATE int sqlite3Atoi64(const char *zNum, i64 *pNum){sqlite3Atoi6419391,755926
SQLITE_PRIVATE int sqlite3FitsIn64Bits(const char *zNum, int negFlag){sqlite3FitsIn64Bits19447,757668
SQLITE_PRIVATE int sqlite3GetInt32(const char *zNum, int *pValue){sqlite3GetInt3219481,758648
SQLITE_PRIVATE int sqlite3PutVarint(unsigned char *p, u64 v){sqlite3PutVarint19545,760132
SQLITE_PRIVATE int sqlite3PutVarint32(unsigned char *p, u32 v){sqlite3PutVarint3219578,760968
#define SLOT_2_0 SLOT_2_019602,761563
#define SLOT_4_2_0 SLOT_4_2_019603,761595
SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *p, u64 *v){sqlite3GetVarint19610,761770
SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){sqlite3GetVarint3219780,764979
SQLITE_PRIVATE int sqlite3VarintLen(u64 v){sqlite3VarintLen19903,767526
SQLITE_PRIVATE u32 sqlite3Get4byte(const u8 *p){sqlite3Get4byte19916,767721
SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){sqlite3Put4byte19919,767825
static u8 hexToInt(int h){hexToInt19934,768188
SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){sqlite3HexToBlob19953,768776
static void logBadConnection(const char *zType){logBadConnection19974,769363
SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3 *db){sqlite3SafetyCheckOk19995,770233
SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3 *db){sqlite3SafetyCheckSickOrOk20012,770592
SQLITE_PRIVATE void sqlite3HashInit(Hash *pNew){sqlite3HashInit20048,771693
SQLITE_PRIVATE void sqlite3HashClear(Hash *pH){sqlite3HashClear20060,771997
static unsigned int strHash(const char *z, int nKey){strHash20080,772389
static void insertElement(insertElement20094,772710
static int rehash(Hash *pH, unsigned int new_size){rehash20128,773687
static HashElem *findElementGivenHash(findElementGivenHash20164,774975
static void removeElementGivenHash(removeElementGivenHash20193,775849
SQLITE_PRIVATE void *sqlite3HashFind(const Hash *pH, const char *pKey, int nKey){sqlite3HashFind20228,776730
SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, int nKey, void *data){sqlite3HashInsert20258,777730
SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){sqlite3OpcodeName20309,779301
# define SQLITE_OS2_THREADS SQLITE_OS2_THREADS20511,785245
#define _OS_COMMON_H__OS_COMMON_H_20539,786166
SQLITE_PRIVATE int sqlite3OSTrace = 0;sqlite3OSTrace20551,786535
#define OSTRACE1(OSTRACE120552,786574
#define OSTRACE2(OSTRACE220553,786645
#define OSTRACE3(OSTRACE320554,786718
#define OSTRACE4(OSTRACE420555,786793
#define OSTRACE5(OSTRACE520556,786870
#define OSTRACE6(OSTRACE620557,786949
#define OSTRACE7(OSTRACE720559,787036
#define OSTRACE1(OSTRACE120562,787133
#define OSTRACE2(OSTRACE220563,787153
#define OSTRACE3(OSTRACE320564,787175
#define OSTRACE4(OSTRACE420565,787199
#define OSTRACE5(OSTRACE520566,787225
#define OSTRACE6(OSTRACE620567,787253
#define OSTRACE7(OSTRACE720568,787283
#define _HWTIME_H__HWTIME_H_20599,788220
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime20612,788612
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec20620,788820
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime20631,789035
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime20639,789230
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime20663,789972
static sqlite_uint64 g_start;g_start20672,790258
static sqlite_uint64 g_elapsed;g_elapsed20673,790288
#define TIMER_START TIMER_START20674,790320
#define TIMER_END TIMER_END20675,790370
#define TIMER_ELAPSED TIMER_ELAPSED20676,790430
#define TIMER_STARTTIMER_START20678,790472
#define TIMER_ENDTIMER_END20679,790492
#define TIMER_ELAPSED TIMER_ELAPSED20680,790510
SQLITE_API int sqlite3_io_error_hit = 0;            /* Total number of I/O Errors */sqlite3_io_error_hit20689,790781
SQLITE_API int sqlite3_io_error_hardhit = 0;        /* Number of non-benign errors */sqlite3_io_error_hardhit20690,790866
SQLITE_API int sqlite3_io_error_pending = 0;        /* Count down to first I/O error */sqlite3_io_error_pending20691,790952
SQLITE_API int sqlite3_io_error_persist = 0;        /* True if I/O errors persist */sqlite3_io_error_persist20692,791040
SQLITE_API int sqlite3_io_error_benign = 0;         /* True if errors are benign */sqlite3_io_error_benign20693,791125
SQLITE_API int sqlite3_diskfull_pending = 0;sqlite3_diskfull_pending20694,791209
SQLITE_API int sqlite3_diskfull = 0;sqlite3_diskfull20695,791254
#define SimulateIOErrorBenign(SimulateIOErrorBenign20696,791291
#define SimulateIOError(SimulateIOError20697,791352
static void local_ioerr(){local_ioerr20701,791530
#define SimulateDiskfullError(SimulateDiskfullError20706,791670
#define SimulateIOErrorBenign(SimulateIOErrorBenign20718,791965
#define SimulateIOError(SimulateIOError20719,791998
#define SimulateDiskfullError(SimulateDiskfullError20720,792025
SQLITE_API int sqlite3_open_file_count = 0;sqlite3_open_file_count20727,792150
#define OpenCounter(OpenCounter20728,792194
#define OpenCounter(OpenCounter20730,792253
typedef struct os2File os2File;os2File20742,792586
struct os2File {os2File20743,792618
  const sqlite3_io_methods *pMethod;  /* Always the first entry */pMethod20744,792635
  HFILE h;                  /* Handle for accessing the file */h20745,792702
  char* pathToDel;          /* Name of file to delete on close, NULL if not */pathToDel20746,792766
  unsigned char locktype;   /* Type of lock currently held on this file */locktype20747,792845
#define LOCK_TIMEOUT LOCK_TIMEOUT20750,792924
static int os2Close( sqlite3_file *id ){os2Close20760,793270
static int os2Read(os2Read20784,793897
static int os2Write(os2Write20815,794911
static int os2Truncate( sqlite3_file *id, i64 nByte ){os2Truncate20847,795918
SQLITE_API int sqlite3_sync_count = 0;sqlite3_sync_count20861,796399
SQLITE_API int sqlite3_fullsync_count = 0;sqlite3_fullsync_count20862,796438
static int os2Sync( sqlite3_file *id, int flags ){os2Sync20868,796563
static int os2FileSize( sqlite3_file *id, sqlite3_int64 *pSize ){os2FileSize20891,797126
static int getReadLock( os2File *pFile ){getReadLock20909,797621
static int unlockReadLock( os2File *id ){unlockReadLock20927,798109
static int os2Lock( sqlite3_file *id, int locktype ){os2Lock20968,799536
static int os2CheckReservedLock( sqlite3_file *id, int *pOut ){os2CheckReservedLock21104,804121
static int os2Unlock( sqlite3_file *id, int locktype ){os2Unlock21150,805758
static int os2FileControl(sqlite3_file *id, int op, void *pArg){os2FileControl21205,807722
static int os2SectorSize(sqlite3_file *id){os2SectorSize21226,808439
static int os2DeviceCharacteristics(sqlite3_file *id){os2DeviceCharacteristics21233,808575
static UconvObject ucUtf8 = NULL; /* convert between UTF-8 and UCS-2 */ucUtf821241,808717
static UconvObject uclCp = NULL;  /* convert between local codepage and UCS-2 */uclCp21242,808789
static void initUconvObjects( void ){initUconvObjects21247,808952
static void freeUconvObjects( void ){freeUconvObjects21257,809247
static char *convertUtf8PathToCp( const char *in ){convertUtf8PathToCp21272,809665
char *convertCpPathToUtf8( const char *in ){convertCpPathToUtf821301,810623
static const sqlite3_io_methods os2IoMethod = {os2IoMethod21325,811278
static int getTempname(int nBuf, char *zBuf ){getTempname21351,811957
static int os2FullPathname(os2FullPathname21406,813830
static int os2Open(os2Open21428,814541
static int os2Delete(os2Delete21543,818019
static int os2Access(os2Access21560,818587
static void *os2DlOpen(sqlite3_vfs *pVfs, const char *zFilename){os2DlOpen21603,820081
static void os2DlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){os2DlError21616,820530
static void *os2DlSym(sqlite3_vfs *pVfs, void *pHandle, const char *zSymbol){os2DlSym21619,820612
static void os2DlClose(sqlite3_vfs *pVfs, void *pHandle){os2DlClose21633,821156
  #define os2DlOpen os2DlOpen21637,821305
  #define os2DlError os2DlError21638,821327
  #define os2DlSym os2DlSym21639,821350
  #define os2DlClose os2DlClose21640,821371
static int os2Randomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf ){os2Randomness21647,821460
static int os2Sleep( sqlite3_vfs *pVfs, int microsec ){os2Sleep21714,823413
SQLITE_API int sqlite3_current_time = 0;sqlite3_current_time21724,823689
int os2CurrentTime( sqlite3_vfs *pVfs, double *prNow ){os2CurrentTime21732,823938
static int os2GetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){os2GetLastError21767,824964
SQLITE_API int sqlite3_os_init(void){sqlite3_os_init21774,825117
SQLITE_API int sqlite3_os_end(void){sqlite3_os_end21800,825960
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE21875,828965
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE21877,829015
#    define OS_VXWORKS OS_VXWORKS21887,829240
#    define OS_VXWORKS OS_VXWORKS21889,829273
# define _LARGE_FILE _LARGE_FILE21912,830304
#   define _FILE_OFFSET_BITS _FILE_OFFSET_BITS21914,830360
# define _LARGEFILE_SOURCE _LARGEFILE_SOURCE21916,830400
#define SQLITE_FSFLAGS_IS_MSDOS SQLITE_FSFLAGS_IS_MSDOS21947,830968
# define SQLITE_UNIX_THREADS SQLITE_UNIX_THREADS21954,831142
# define SQLITE_DEFAULT_FILE_PERMISSIONS SQLITE_DEFAULT_FILE_PERMISSIONS21961,831275
# define SQLITE_DEFAULT_PROXYDIR_PERMISSIONS SQLITE_DEFAULT_PROXYDIR_PERMISSIONS21968,831433
#define MAX_PATHNAME MAX_PATHNAME21974,831531
#define IS_LOCK_ERROR(IS_LOCK_ERROR21980,831693
typedef struct UnixUnusedFd UnixUnusedFd;UnixUnusedFd21989,832035
struct UnixUnusedFd {UnixUnusedFd21990,832077
  int fd;                   /* File descriptor to close */fd21991,832099
  int flags;                /* Flags this file descriptor was opened with */flags21992,832158
  UnixUnusedFd *pNext;      /* Next unused file descriptor on same file */pNext21993,832235
typedef struct unixFile unixFile;unixFile22000,832419
struct unixFile {unixFile22001,832453
  sqlite3_io_methods const *pMethod;  /* Always the first entry */pMethod22002,832471
  struct unixOpenCnt *pOpen;       /* Info about all open fd's on this inode */pOpen22003,832538
  struct unixLockInfo *pLock;      /* Info about locks on this inode */pLock22004,832618
  int h;                           /* The file descriptor */h22005,832690
  int dirfd;                       /* File descriptor for the directory */dirfd22006,832751
  unsigned char locktype;          /* The type of lock held on this fd */locktype22007,832826
  int lastErrno;                   /* The unix errno from the last I/O error */lastErrno22008,832900
  void *lockingContext;            /* Locking style specific state */lockingContext22009,832980
  UnixUnusedFd *pUnused;           /* Pre-allocated UnixUnusedFd */pUnused22010,833050
  int fileFlags;                   /* Miscellanous flags */fileFlags22011,833118
  int openFlags;                   /* The flags specified at open() */openFlags22013,833210
  unsigned fsFlags;                 /* cached details from statfs() */fsFlags22016,833342
  pthread_t tid;                   /* The thread that "owns" this unixFile */tid22019,833464
  int isDelete;                    /* Delete on close if true */isDelete22022,833564
  struct vxworksFileId *pId;       /* Unique file ID */pId22023,833629
  unsigned char transCntrChng;   /* True if the transaction counter changed */transCntrChng22033,834102
  unsigned char dbUpdate;        /* True if any part of database file changed */dbUpdate22034,834181
  unsigned char inNormalWrite;   /* True if in a normal write operation */inNormalWrite22035,834262
  char aPadding[32];aPadding22041,834502
#define SQLITE_WHOLE_FILE_LOCKING SQLITE_WHOLE_FILE_LOCKING22048,834598
#define _OS_COMMON_H__OS_COMMON_H_22075,835555
SQLITE_PRIVATE int sqlite3OSTrace = 0;sqlite3OSTrace22087,835924
#define OSTRACE1(OSTRACE122088,835963
#define OSTRACE2(OSTRACE222089,836034
#define OSTRACE3(OSTRACE322090,836107
#define OSTRACE4(OSTRACE422091,836182
#define OSTRACE5(OSTRACE522092,836259
#define OSTRACE6(OSTRACE622093,836338
#define OSTRACE7(OSTRACE722095,836425
#define OSTRACE1(OSTRACE122098,836522
#define OSTRACE2(OSTRACE222099,836542
#define OSTRACE3(OSTRACE322100,836564
#define OSTRACE4(OSTRACE422101,836588
#define OSTRACE5(OSTRACE522102,836614
#define OSTRACE6(OSTRACE622103,836642
#define OSTRACE7(OSTRACE722104,836672
#define _HWTIME_H__HWTIME_H_22135,837609
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime22148,838001
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec22156,838209
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime22167,838424
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime22175,838619
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime22199,839361
static sqlite_uint64 g_start;g_start22208,839647
static sqlite_uint64 g_elapsed;g_elapsed22209,839677
#define TIMER_START TIMER_START22210,839709
#define TIMER_END TIMER_END22211,839759
#define TIMER_ELAPSED TIMER_ELAPSED22212,839819
#define TIMER_STARTTIMER_START22214,839861
#define TIMER_ENDTIMER_END22215,839881
#define TIMER_ELAPSED TIMER_ELAPSED22216,839899
SQLITE_API int sqlite3_io_error_hit = 0;            /* Total number of I/O Errors */sqlite3_io_error_hit22225,840170
SQLITE_API int sqlite3_io_error_hardhit = 0;        /* Number of non-benign errors */sqlite3_io_error_hardhit22226,840255
SQLITE_API int sqlite3_io_error_pending = 0;        /* Count down to first I/O error */sqlite3_io_error_pending22227,840341
SQLITE_API int sqlite3_io_error_persist = 0;        /* True if I/O errors persist */sqlite3_io_error_persist22228,840429
SQLITE_API int sqlite3_io_error_benign = 0;         /* True if errors are benign */sqlite3_io_error_benign22229,840514
SQLITE_API int sqlite3_diskfull_pending = 0;sqlite3_diskfull_pending22230,840598
SQLITE_API int sqlite3_diskfull = 0;sqlite3_diskfull22231,840643
#define SimulateIOErrorBenign(SimulateIOErrorBenign22232,840680
#define SimulateIOError(SimulateIOError22233,840741
static void local_ioerr(){local_ioerr22237,840919
#define SimulateDiskfullError(SimulateDiskfullError22242,841059
#define SimulateIOErrorBenign(SimulateIOErrorBenign22254,841354
#define SimulateIOError(SimulateIOError22255,841387
#define SimulateDiskfullError(SimulateDiskfullError22256,841414
SQLITE_API int sqlite3_open_file_count = 0;sqlite3_open_file_count22263,841539
#define OpenCounter(OpenCounter22264,841583
#define OpenCounter(OpenCounter22266,841642
# define O_LARGEFILE O_LARGEFILE22278,841959
# undef O_LARGEFILEO_LARGEFILE22281,842015
# define O_LARGEFILE O_LARGEFILE22282,842035
# define O_NOFOLLOW O_NOFOLLOW22285,842084
# define O_BINARY O_BINARY22288,842130
# define fcntl(fcntl22298,842436
#define threadid threadid22306,842594
#define threadid threadid22308,842632
static void unixEnterMutex(void){unixEnterMutex22326,843147
static void unixLeaveMutex(void){unixLeaveMutex22329,843253
static int unixMutexHeld(void) {unixMutexHeld22333,843379
static const char *locktypeName(int locktype){locktypeName22345,843683
static int lockTrace(int fd, int op, struct flock *p){lockTrace22366,844283
#define fcntl fcntl22413,845529
static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {sqliteErrorFromPosixError22428,846034
struct vxworksFileId {vxworksFileId22502,848315
  struct vxworksFileId *pNext;  /* Next in a list of them all */pNext22503,848338
  int nRef;                     /* Number of references to this one */nRef22504,848403
  int nName;                    /* Length of the zCanonicalName[] string */nName22505,848474
  char *zCanonicalName;         /* Canonical filename */zCanonicalName22506,848550
static struct vxworksFileId *vxworksFileList = 0;vxworksFileList22514,848711
static int vxworksSimplifyName(char *z, int n){vxworksSimplifyName22529,849155
static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){vxworksFindFileId22563,850048
static void vxworksReleaseFileId(struct vxworksFileId *pId){vxworksReleaseFileId22605,851446
# define SET_THREADID(SET_THREADID22732,857995
# define CHECK_THREADID(CHECK_THREADID22733,858048
# define SET_THREADID(SET_THREADID22736,858191
# define CHECK_THREADID(CHECK_THREADID22737,858216
struct unixFileId {unixFileId22745,858467
  dev_t dev;                  /* Device number */dev22746,858487
  struct vxworksFileId *pId;  /* Unique file ID for vxworks. */pId22748,858552
  ino_t ino;                  /* Inode number */ino22750,858622
struct unixLockKey {unixLockKey22764,859131
  struct unixFileId fid;  /* Unique identifier for the file */fid22765,859152
  pthread_t tid;  /* Thread ID of lock owner. Zero if not using LinuxThreads */tid22767,859259
struct unixLockInfo {unixLockInfo22780,859742
  struct unixLockKey lockKey;     /* The lookup key */lockKey22781,859764
  int cnt;                        /* Number of SHARED locks held */cnt22782,859819
  int locktype;                   /* One of SHARED_LOCK, RESERVED_LOCK etc. */locktype22783,859887
  int nRef;                       /* Number of pointers to this structure */nRef22784,859966
  unsigned long long sharedByte;  /* for AFP simulated shared lock */sharedByte22786,860084
  struct unixLockInfo *pNext;     /* List of all unixLockInfo objects */pNext22788,860161
  struct unixLockInfo *pPrev;     /*    .... doubly linked */pPrev22789,860234
struct unixOpenCnt {unixOpenCnt22804,860871
  struct unixFileId fileId;   /* The lookup key */fileId22805,860892
  int nRef;                   /* Number of pointers to this structure */nRef22806,860943
  int nLock;                  /* Number of outstanding locks */nLock22807,861016
  UnixUnusedFd *pUnused;      /* Unused file descriptors to close */pUnused22808,861080
  sem_t *pSem;                     /* Named POSIX semaphore */pSem22810,861164
  char aSemName[MAX_PATHNAME+2];   /* Name of that semaphore */aSemName22811,861227
  struct unixOpenCnt *pNext, *pPrev;   /* List of all unixOpenCnt objects */pNext22813,861298
  struct unixOpenCnt *pNext, *pPrev;   /* List of all unixOpenCnt objects */pPrev22813,861298
static struct unixLockInfo *lockList = 0;lockList22822,861644
static struct unixOpenCnt *openList = 0;openList22823,861686
#    define SQLITE_THREAD_OVERRIDE_LOCK SQLITE_THREAD_OVERRIDE_LOCK22845,862585
int threadsOverrideEachOthersLocks = SQLITE_THREAD_OVERRIDE_LOCK;threadsOverrideEachOthersLocks22848,862658
static int threadsOverrideEachOthersLocks = SQLITE_THREAD_OVERRIDE_LOCK;threadsOverrideEachOthersLocks22850,862732
struct threadTestData {threadTestData22858,862947
  int fd;                /* File to be locked */fd22859,862971
  struct flock lock;     /* The locking operation */lock22860,863020
  int result;            /* Result of the locking operation */result22861,863073
static void *threadLockingTest(void *pArg){threadLockingTest22874,863607
static void testThreadLockingBehavior(int fd_orig){testThreadLockingBehavior22888,864065
static void releaseLockInfo(struct unixLockInfo *pLock){releaseLockInfo22923,864918
static void releaseOpenCnt(struct unixOpenCnt *pOpen){releaseOpenCnt22950,865620
static int findLockInfo(findLockInfo22992,866976
static int transferOwnership(unixFile *pFile){transferOwnership23126,871244
# define transferOwnership(transferOwnership23159,872313
static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){unixCheckReservedLock23169,872688
static int unixLock(sqlite3_file *id, int locktype){unixLock23234,874538
static int closePendingFds(unixFile *pFile){closePendingFds23478,882800
static void setPendingFd(unixFile *pFile){setPendingFd23503,883354
static int _posixUnlock(sqlite3_file *id, int locktype, int handleNFSUnlock){_posixUnlock23525,884198
static int unixUnlock(sqlite3_file *id, int locktype){unixUnlock23704,889847
static int closeUnixFile(sqlite3_file *id){closeUnixFile23718,890345
static int unixClose(sqlite3_file *id){unixClose23757,891181
static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){nolockCheckReservedLock23799,892893
static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){nolockLock23804,893033
static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){nolockUnlock23808,893155
static int nolockClose(sqlite3_file *id) {nolockClose23816,893305
#define DOTLOCK_SUFFIX DOTLOCK_SUFFIX23849,894693
static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {dotlockCheckReservedLock23861,895233
static int dotlockLock(sqlite3_file *id, int locktype) {dotlockLock23912,896938
static int dotlockUnlock(sqlite3_file *id, int locktype) {dotlockUnlock23965,898383
static int dotlockClose(sqlite3_file *id) {dotlockClose24007,899482
static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){flockCheckReservedLock24043,900930
static int flockLock(sqlite3_file *id, int locktype) {flockLock24125,903398
static int flockUnlock(sqlite3_file *id, int locktype) {flockUnlock24169,904634
static int flockClose(sqlite3_file *id) {flockClose24212,905653
static int semCheckReservedLock(sqlite3_file *id, int *pResOut) {semCheckReservedLock24242,906795
static int semLock(sqlite3_file *id, int locktype) {semLock24310,908867
static int semUnlock(sqlite3_file *id, int locktype) {semUnlock24344,909742
static int semClose(sqlite3_file *id) {semClose24381,910610
typedef struct afpLockingContext afpLockingContext;afpLockingContext24417,911681
struct afpLockingContext {afpLockingContext24418,911733
  int reserved;reserved24419,911760
  const char *dbPath;             /* Name of the open file */dbPath24420,911776
struct ByteRangeLockPB2ByteRangeLockPB224423,911842
  unsigned long long offset;        /* offset to first byte to lock */offset24425,911868
  unsigned long long length;        /* nbr of bytes to lock */length24426,911939
  unsigned long long retRangeStart; /* nbr of 1st byte locked if successful */retRangeStart24427,912002
  unsigned char unLockFlag;         /* 1 = unlock, 0 = lock */unLockFlag24428,912081
  unsigned char startEndFlag;       /* 1=rel to end of fork, 0=rel to start */startEndFlag24429,912144
  int fd;                           /* file desc to assoc this lock with */fd24430,912223
#define afpfsByteRangeLock2FSCTL afpfsByteRangeLock2FSCTL24433,912303
static int afpSetLock(afpSetLock24441,912537
static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){afpCheckReservedLock24487,914108
static int afpLock(sqlite3_file *id, int locktype){afpLock24556,916171
static int afpUnlock(sqlite3_file *id, int locktype) {afpUnlock24746,922454
static int afpClose(sqlite3_file *id) {afpClose24853,925860
static int nfsUnlock(sqlite3_file *id, int locktype){nfsUnlock24897,927497
static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){seekAndRead24933,929019
static int unixRead(unixRead24971,930011
static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){seekAndWrite25009,931050
static int unixWrite(unixWrite25045,931917
SQLITE_API int sqlite3_sync_count = 0;sqlite3_sync_count25109,933758
SQLITE_API int sqlite3_fullsync_count = 0;sqlite3_fullsync_count25110,933797
# define fdatasync fdatasync25120,934161
# define HAVE_FULLFSYNC HAVE_FULLFSYNC25129,934400
# define HAVE_FULLFSYNC HAVE_FULLFSYNC25131,934432
static int full_fsync(int fd, int fullSync, int dataOnly){full_fsync25159,935756
static int unixSync(sqlite3_file *id, int flags){unixSync25242,938428
static int unixTruncate(sqlite3_file *id, i64 nByte){unixTruncate25301,940306
static int unixFileSize(sqlite3_file *id, i64 *pSize){unixFileSize25330,941174
static int unixFileControl(sqlite3_file *id, int op, void *pArg){unixFileControl25366,942114
static int unixSectorSize(sqlite3_file *NotUsed){unixSectorSize25407,943431
static int unixDeviceCharacteristics(sqlite3_file *NotUsed){unixDeviceCharacteristics25415,943634
#define IOMETHODS(IOMETHODS25460,945374
static const sqlite3_io_methods *autolockIoFinderImpl(autolockIoFinderImpl25590,951219
  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;autolockIoFinder25644,952832
static const sqlite3_io_methods *autolockIoFinderImpl(autolockIoFinderImpl25656,953251
  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;autolockIoFinder25682,953997
typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);finder_type25689,954202
static int fillInUnixFile(fillInUnixFile25702,954604
static int openDirectory(const char *zFilename, int *pFd){openDirectory25879,960228
static int getTempname(int nBuf, char *zBuf){getTempname25905,960953
static UnixUnusedFd *findReusableFd(const char *zPath, int flags){findReusableFd25986,963516
static int unixOpen(unixOpen26050,965792
static int unixDelete(unixDelete26283,974016
static int unixAccess(unixAccess26324,975078
static int unixFullPathname(unixFullPathname26361,976133
static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){unixDlOpen26399,977289
static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){unixDlError26411,977754
static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){unixDlSym26421,977998
static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){unixDlClose26444,979078
  #define unixDlOpen unixDlOpen26449,979245
  #define unixDlError unixDlError26450,979269
  #define unixDlSym unixDlSym26451,979293
  #define unixDlClose unixDlClose26452,979317
static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){unixRandomness26458,979419
static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){unixSleep26505,981012
SQLITE_API int sqlite3_current_time = 0;  /* Fake system time in seconds since 1970. */sqlite3_current_time26532,981737
static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){unixCurrentTime26540,982033
static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){unixGetLastError26575,983067
typedef struct proxyLockingContext proxyLockingContext;proxyLockingContext26744,990413
struct proxyLockingContext {proxyLockingContext26745,990469
  unixFile *conchFile;         /* Open conch file */conchFile26746,990498
  char *conchFilePath;         /* Name of the conch file */conchFilePath26747,990551
  unixFile *lockProxy;         /* Open proxy lock file */lockProxy26748,990611
  char *lockProxyPath;         /* Name of the proxy lock file */lockProxyPath26749,990669
  char *dbPath;                /* Name of the open file */dbPath26750,990734
  int conchHeld;               /* 1 if the conch is held, -1 if lockless */conchHeld26751,990793
  void *oldLockingContext;     /* Original lockingcontext to restore on close */oldLockingContext26752,990869
  sqlite3_io_methods const *pOldMethod;     /* Original I/O methods for close */pOldMethod26753,990950
static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){proxyGetLockPath26761,991215
static int proxyCreateLockPath(const char *lockPath){proxyCreateLockPath26802,992249
static int proxyCreateUnixFile(proxyCreateUnixFile26842,993592
SQLITE_API int sqlite3_hostid_num = 0;sqlite3_hostid_num26925,995924
#define PROXY_HOSTIDLEN PROXY_HOSTIDLEN26928,995971
static int proxyGetHostID(unsigned char *pHostID, int *pError){proxyGetHostID26933,996144
#define PROXY_CONCHVERSION PROXY_CONCHVERSION26957,996786
#define PROXY_HEADERLEN PROXY_HEADERLEN26958,996860
#define PROXY_PATHINDEX PROXY_PATHINDEX26959,996922
#define PROXY_MAXCONCHLEN PROXY_MAXCONCHLEN26960,996983
static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){proxyBreakConchLock26968,997330
static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){proxyConchLock27027,999108
static int proxyTakeConch(unixFile *pFile){proxyTakeConch27104,1001780
static int proxyReleaseConch(unixFile *pFile){proxyReleaseConch27326,1010037
static int proxyCreateConchPathname(char *dbPath, char **pConchPath){proxyCreateConchPathname27356,1011195
static int switchLockProxyPath(unixFile *pFile, const char *path) {switchLockProxyPath27393,1012232
static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){proxyGetDbPathForUnixFile27429,1013306
static int proxyTransformUnixFile(unixFile *pFile, const char *path) {proxyTransformUnixFile27459,1014541
static int proxyFileControl(sqlite3_file *id, int op, void *pArg){proxyFileControl27546,1017208
static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {proxyCheckReservedLock27616,1019526
static int proxyLock(sqlite3_file *id, int locktype) {proxyLock27655,1020803
static int proxyUnlock(sqlite3_file *id, int locktype) {proxyUnlock27679,1021534
static int proxyClose(sqlite3_file *id) {proxyClose27698,1022060
SQLITE_API int sqlite3_os_init(void){ sqlite3_os_init27760,1024165
  #define UNIXVFS(UNIXVFS27781,1025303
SQLITE_API int sqlite3_os_end(void){ sqlite3_os_end27848,1027920
# define SQLITE_W32_THREADS SQLITE_W32_THREADS27909,1030180
#define _OS_COMMON_H__OS_COMMON_H_27937,1031101
SQLITE_PRIVATE int sqlite3OSTrace = 0;sqlite3OSTrace27949,1031470
#define OSTRACE1(OSTRACE127950,1031509
#define OSTRACE2(OSTRACE227951,1031580
#define OSTRACE3(OSTRACE327952,1031653
#define OSTRACE4(OSTRACE427953,1031728
#define OSTRACE5(OSTRACE527954,1031805
#define OSTRACE6(OSTRACE627955,1031884
#define OSTRACE7(OSTRACE727957,1031971
#define OSTRACE1(OSTRACE127960,1032068
#define OSTRACE2(OSTRACE227961,1032088
#define OSTRACE3(OSTRACE327962,1032110
#define OSTRACE4(OSTRACE427963,1032134
#define OSTRACE5(OSTRACE527964,1032160
#define OSTRACE6(OSTRACE627965,1032188
#define OSTRACE7(OSTRACE727966,1032218
#define _HWTIME_H__HWTIME_H_27997,1033155
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime28010,1033547
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec28018,1033755
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime28029,1033970
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime28037,1034165
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime28061,1034907
static sqlite_uint64 g_start;g_start28070,1035193
static sqlite_uint64 g_elapsed;g_elapsed28071,1035223
#define TIMER_START TIMER_START28072,1035255
#define TIMER_END TIMER_END28073,1035305
#define TIMER_ELAPSED TIMER_ELAPSED28074,1035365
#define TIMER_STARTTIMER_START28076,1035407
#define TIMER_ENDTIMER_END28077,1035427
#define TIMER_ELAPSED TIMER_ELAPSED28078,1035445
SQLITE_API int sqlite3_io_error_hit = 0;            /* Total number of I/O Errors */sqlite3_io_error_hit28087,1035716
SQLITE_API int sqlite3_io_error_hardhit = 0;        /* Number of non-benign errors */sqlite3_io_error_hardhit28088,1035801
SQLITE_API int sqlite3_io_error_pending = 0;        /* Count down to first I/O error */sqlite3_io_error_pending28089,1035887
SQLITE_API int sqlite3_io_error_persist = 0;        /* True if I/O errors persist */sqlite3_io_error_persist28090,1035975
SQLITE_API int sqlite3_io_error_benign = 0;         /* True if errors are benign */sqlite3_io_error_benign28091,1036060
SQLITE_API int sqlite3_diskfull_pending = 0;sqlite3_diskfull_pending28092,1036144
SQLITE_API int sqlite3_diskfull = 0;sqlite3_diskfull28093,1036189
#define SimulateIOErrorBenign(SimulateIOErrorBenign28094,1036226
#define SimulateIOError(SimulateIOError28095,1036287
static void local_ioerr(){local_ioerr28099,1036465
#define SimulateDiskfullError(SimulateDiskfullError28104,1036605
#define SimulateIOErrorBenign(SimulateIOErrorBenign28116,1036900
#define SimulateIOError(SimulateIOError28117,1036933
#define SimulateDiskfullError(SimulateDiskfullError28118,1036960
SQLITE_API int sqlite3_open_file_count = 0;sqlite3_open_file_count28125,1037085
#define OpenCounter(OpenCounter28126,1037129
#define OpenCounter(OpenCounter28128,1037188
# define INVALID_FILE_ATTRIBUTES INVALID_FILE_ATTRIBUTES28140,1037506
# define AreFileApisANSI(AreFileApisANSI28148,1037667
# define FormatMessageW(FormatMessageW28149,1037696
typedef struct winceLock {winceLock28157,1037870
  int nReaders;       /* Number of reader locks obtained */nReaders28158,1037897
  BOOL bPending;      /* Indicates a pending lock has been obtained */bPending28159,1037957
  BOOL bReserved;     /* Indicates a reserved lock has been obtained */bReserved28160,1038028
  BOOL bExclusive;    /* Indicates an exclusive lock has been obtained */bExclusive28161,1038100
} winceLock;winceLock28162,1038174
typedef struct winFile winFile;winFile28169,1038301
struct winFile {winFile28170,1038333
  const sqlite3_io_methods *pMethod;/* Must be first */pMethod28171,1038350
  HANDLE h;               /* Handle for accessing the file */h28172,1038406
  unsigned char locktype; /* Type of lock currently held on this file */locktype28173,1038468
  short sharedLockByte;   /* Randomly chosen byte used as a shared lock */sharedLockByte28174,1038541
  DWORD lastErrno;        /* The Windows errno from the last I/O error */lastErrno28175,1038616
  DWORD sectorSize;       /* Sector size of the device file is on */sectorSize28176,1038690
  WCHAR *zDeleteOnClose;  /* Name of file to delete when closing */zDeleteOnClose28178,1038779
  HANDLE hMutex;          /* Mutex used to control access to shared lock */  hMutex28179,1038847
  HANDLE hShared;         /* Shared memory segment used for locking */hShared28180,1038925
  winceLock local;        /* Locks obtained by this instance of winFile */local28181,1038996
  winceLock *shared;      /* Global shared lock memory for the file  */shared28182,1039071
SQLITE_API int sqlite3_os_type = 0;sqlite3_os_type28207,1039701
static int sqlite3_os_type = 0;sqlite3_os_type28209,1039743
# define isNT(isNT28224,1040320
  static int isNT(void){isNT28226,1040347
static WCHAR *utf8ToUnicode(const char *zFilename){utf8ToUnicode28242,1040782
static char *unicodeToUtf8(const WCHAR *zWideFilename){unicodeToUtf828263,1041330
static WCHAR *mbcsToUnicode(const char *zFilename){mbcsToUnicode28288,1041947
static char *unicodeToMbcs(const WCHAR *zWideFilename){unicodeToMbcs28313,1042630
SQLITE_API char *sqlite3_win32_mbcs_to_utf8(const char *zFilename){sqlite3_win32_mbcs_to_utf828336,1043244
static char *utf8ToMbcs(const char *zFilename){utf8ToMbcs28353,1043641
struct tm *__cdecl localtime(const time_t *t)localtime28374,1044127
#define GetTempPathA(GetTempPathA28397,1044749
#define LockFile(LockFile28399,1044776
#define UnlockFile(UnlockFile28400,1044840
#define LockFileEx(LockFileEx28401,1044906
#define HANDLE_TO_WINFILE(HANDLE_TO_WINFILE28403,1044976
static void winceMutexAcquire(HANDLE h){winceMutexAcquire28408,1045095
#define winceMutexRelease(winceMutexRelease28417,1045329
static BOOL winceCreateLock(const char *zFilename, winFile *pFile){winceCreateLock28423,1045468
static void winceDestroyLock(winFile *pFile){winceDestroyLock28498,1047694
static BOOL winceLockFile(winceLockFile28532,1048619
static BOOL winceUnlockFile(winceUnlockFile28596,1050368
static BOOL winceLockFileEx(winceLockFileEx28658,1052101
#define MX_CLOSE_ATTEMPT MX_CLOSE_ATTEMPT28698,1053484
static int winClose(sqlite3_file *id){winClose28699,1053511
#define WINCE_DELETION_ATTEMPTS WINCE_DELETION_ATTEMPTS28709,1053782
# define INVALID_SET_FILE_POINTER INVALID_SET_FILE_POINTER28731,1054328
static int winRead(winRead28739,1054529
static int winWrite(winWrite28777,1055733
static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){winTruncate28818,1056903
SQLITE_API int sqlite3_sync_count = 0;sqlite3_sync_count28846,1057800
SQLITE_API int sqlite3_fullsync_count = 0;sqlite3_fullsync_count28847,1057839
static int winSync(sqlite3_file *id, int flags){winSync28853,1057964
static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){winFileSize28888,1058672
# define LOCKFILE_FAIL_IMMEDIATELY LOCKFILE_FAIL_IMMEDIATELY28911,1059283
static int getReadLock(winFile *pFile){getReadLock28919,1059452
static int unlockReadLock(winFile *pFile){unlockReadLock28947,1060146
static int winLock(sqlite3_file *id, int locktype){winLock28990,1061508
static int winCheckReservedLock(sqlite3_file *id, int *pResOut){winCheckReservedLock29113,1065095
static int winUnlock(sqlite3_file *id, int locktype){winUnlock29144,1066013
static int winFileControl(sqlite3_file *id, int op, void *pArg){winFileControl29177,1066963
static int winSectorSize(sqlite3_file *id){winSectorSize29201,1067697
static int winDeviceCharacteristics(sqlite3_file *id){winDeviceCharacteristics29209,1067859
static const sqlite3_io_methods winIoMethod = {winIoMethod29218,1068048
static void *convertUtf8Filename(const char *zFilename){convertUtf8Filename29246,1068819
static int getTempname(int nBuf, char *zBuf){getTempname29265,1069296
static int getLastErrorMsg(int nBuf, char *zBuf){getLastErrorMsg29322,1071022
static int winOpen(winOpen29382,1072976
#define MX_DELETION_ATTEMPTS MX_DELETION_ATTEMPTS29539,1077753
static int winDelete(winDelete29540,1077784
static int winAccess(winAccess29585,1079277
static int winFullPathname(winFullPathname29631,1080556
static int getSectorSize(getSectorSize29702,1082510
static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){winDlOpen29775,1084532
static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){winDlError29796,1085117
void (*winDlSym(sqlite3_vfs *pVfs, void *pHandle, const char *zSymbol))(void){winDlSym29800,1085247
void winDlClose(sqlite3_vfs *pVfs, void *pHandle){winDlClose29811,1085709
  #define winDlOpen winDlOpen29816,1085874
  #define winDlError winDlError29817,1085897
  #define winDlSym winDlSym29818,1085920
  #define winDlClose winDlClose29819,1085943
static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){winRandomness29826,1086032
static int winSleep(sqlite3_vfs *pVfs, int microsec){winSleep29863,1086857
SQLITE_API int sqlite3_current_time = 0;sqlite3_current_time29874,1087174
int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){winCurrentTime29882,1087423
static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){winGetLastError29959,1090503
SQLITE_API int sqlite3_os_init(void){sqlite3_os_init29967,1090708
SQLITE_API int sqlite3_os_end(void){ sqlite3_os_end29993,1091532
#define BITVEC_SZ BITVEC_SZ30039,1093509
#define BITVEC_USIZE BITVEC_USIZE30043,1093722
#define BITVEC_TELEM BITVEC_TELEM30049,1094035
#define BITVEC_SZELEM BITVEC_SZELEM30051,1094107
#define BITVEC_NELEM BITVEC_NELEM30053,1094178
#define BITVEC_NBIT BITVEC_NBIT30055,1094281
#define BITVEC_NINT BITVEC_NINT30058,1094378
#define BITVEC_MXHASH BITVEC_MXHASH30061,1094516
#define BITVEC_HASH(BITVEC_HASH30066,1094759
#define BITVEC_NPTR BITVEC_NPTR30068,1094807
struct Bitvec {Bitvec30092,1095783
  u32 iSize;      /* Maximum bit index.  Max iSize is 4,294,967,296. */iSize30093,1095799
  u32 nSet;       /* Number of bits that are set - only valid for aHashnSet30094,1095871
  u32 iDivisor;   /* Number of bits handled by each apSub[] entry. */iDivisor30097,1096060
    BITVEC_TELEM aBitmap[BITVEC_NELEM];    /* Bitmap representation */aBitmap30102,1096337
    u32 aHash[BITVEC_NINT];      /* Hash table representation */aHash30103,1096408
    Bitvec *apSub[BITVEC_NPTR];  /* Recursive representation */apSub30104,1096473
  } u;u30105,1096537
SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32 iSize){sqlite3BitvecCreate30113,1096710
SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec *p, u32 i){sqlite3BitvecTest30128,1097073
SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec *p, u32 i){sqlite3BitvecSet30164,1098078
SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){sqlite3BitvecClear30235,1100167
SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec *p){sqlite3BitvecDestroy30272,1101050
SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec *p){sqlite3BitvecSize30287,1101364
#define SETBIT(SETBIT30298,1101696
#define CLEARBIT(CLEARBIT30299,1101743
#define TESTBIT(TESTBIT30300,1101791
SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int sz, int *aOp){sqlite3BitvecBuiltinTest30332,1103176
struct PCache {PCache30428,1105715
  PgHdr *pDirty, *pDirtyTail;         /* List of dirty pages in LRU order */pDirty30429,1105731
  PgHdr *pDirty, *pDirtyTail;         /* List of dirty pages in LRU order */pDirtyTail30429,1105731
  PgHdr *pSynced;                     /* Last synced page in dirty page list */pSynced30430,1105808
  int nRef;                           /* Number of referenced pages */nRef30431,1105888
  int nMax;                           /* Configured cache size */nMax30432,1105959
  int szPage;                         /* Size of every page in this cache */szPage30433,1106025
  int szExtra;                        /* Size of extra space for each page */szExtra30434,1106102
  int bPurgeable;                     /* True if pages are on backing store */bPurgeable30435,1106180
  int (*xStress)(void*,PgHdr*);       /* Call to try make a page clean */xStress30436,1106259
  void *pStress;                      /* Argument to xStress */pStress30437,1106333
  sqlite3_pcache *pCache;             /* Pluggable cache module */pCache30438,1106397
  PgHdr *pPage1;                      /* Reference to page 1 */pPage130439,1106464
# define expensive_assert(expensive_assert30449,1106825
# define expensive_assert(expensive_assert30451,1106871
static int pcacheCheckSynced(PCache *pCache){pcacheCheckSynced30464,1107313
static void pcacheRemoveFromDirtyList(PgHdr *pPage){pcacheRemoveFromDirtyList30476,1107670
static void pcacheAddToDirtyList(PgHdr *pPage){pcacheAddToDirtyList30513,1108638
static void pcacheUnpin(PgHdr *p){pcacheUnpin30537,1109302
SQLITE_PRIVATE int sqlite3PcacheInitialize(void){sqlite3PcacheInitialize30552,1109702
SQLITE_PRIVATE void sqlite3PcacheShutdown(void){sqlite3PcacheShutdown30558,1109910
SQLITE_PRIVATE int sqlite3PcacheSize(void){ return sizeof(PCache); }sqlite3PcacheSize30567,1110141
SQLITE_PRIVATE void sqlite3PcacheOpen(sqlite3PcacheOpen30575,1110444
SQLITE_PRIVATE void sqlite3PcacheSetPageSize(PCache *pCache, int szPage){sqlite3PcacheSetPageSize30596,1111213
SQLITE_PRIVATE int sqlite3PcacheFetch(sqlite3PcacheFetch30609,1111546
SQLITE_PRIVATE void sqlite3PcacheRelease(PgHdr *p){sqlite3PcacheRelease30698,1114174
SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr *p){sqlite3PcacheRef30717,1114604
SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr *p){sqlite3PcacheDrop30727,1114876
SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr *p){sqlite3PcacheMakeDirty30745,1115275
SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr *p){sqlite3PcacheMakeClean30758,1115578
SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache *pCache){sqlite3PcacheCleanAll30771,1115850
SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *pCache){sqlite3PcacheClearSyncFlags30781,1116057
SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){sqlite3PcacheMove30792,1116315
SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){sqlite3PcacheTruncate30813,1117082
SQLITE_PRIVATE void sqlite3PcacheClose(PCache *pCache){sqlite3PcacheClose30835,1117603
SQLITE_PRIVATE void sqlite3PcacheClear(PCache *pCache){sqlite3PcacheClear30844,1117792
static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){pcacheMergeDirtyList30852,1118007
#define N_SORT_BUCKET N_SORT_BUCKET30886,1118879
static PgHdr *pcacheSortDirtyList(PgHdr *pIn){pcacheSortDirtyList30887,1118905
SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache *pCache){sqlite3PcacheDirtyList30921,1119678
SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){sqlite3PcacheRefCount30932,1119954
SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr *p){sqlite3PcachePageRefcount30939,1120116
SQLITE_PRIVATE int sqlite3PcachePagecount(PCache *pCache){sqlite3PcachePagecount30946,1120250
SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *pCache){sqlite3PcacheGetCachesize30958,1120504
SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){sqlite3PcacheSetCachesize30966,1120644
SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){sqlite3PcacheIterateDirty30979,1121051
typedef struct PCache1 PCache1;PCache131009,1122120
typedef struct PgHdr1 PgHdr1;PgHdr131010,1122152
typedef struct PgFreeslot PgFreeslot;PgFreeslot31011,1122182
struct PCache1 {PCache131016,1122323
  int szPage;                         /* Size of allocated pages in bytes */szPage31022,1122616
  int bPurgeable;                     /* True if cache is purgeable */bPurgeable31023,1122693
  unsigned int nMin;                  /* Minimum number of pages reserved */nMin31024,1122764
  unsigned int nMax;                  /* Configured "cache_size" value */nMax31025,1122841
  unsigned int nRecyclable;           /* Number of pages in the LRU list */nRecyclable31031,1123104
  unsigned int nPage;                 /* Total number of pages in apHash */nPage31032,1123180
  unsigned int nHash;                 /* Number of slots in apHash[] */nHash31033,1123256
  PgHdr1 **apHash;                    /* Hash table for fast lookup by key */apHash31034,1123328
  unsigned int iMaxKey;               /* Largest key seen since xTruncate() */iMaxKey31036,1123407
struct PgHdr1 {PgHdr131045,1123720
  unsigned int iKey;             /* Key value (page number) */iKey31046,1123736
  PgHdr1 *pNext;                 /* Next in hash table chain */pNext31047,1123799
  PCache1 *pCache;               /* Cache that currently owns this page */pCache31048,1123863
  PgHdr1 *pLruNext;              /* Next in LRU list of unpinned pages */pLruNext31049,1123938
  PgHdr1 *pLruPrev;              /* Previous in LRU list of unpinned pages */pLruPrev31050,1124012
struct PgFreeslot {PgFreeslot31057,1124217
  PgFreeslot *pNext;  /* Next free slot */pNext31058,1124237
static SQLITE_WSD struct PCacheGlobal {PCacheGlobal31064,1124325
  sqlite3_mutex *mutex;               /* static mutex MUTEX_STATIC_LRU */mutex31065,1124365
  int nMaxPage;                       /* Sum of nMaxPage for purgeable caches */nMaxPage31067,1124440
  int nMinPage;                       /* Sum of nMinPage for purgeable caches */nMinPage31068,1124521
  int nCurrentPage;                   /* Number of purgeable pages allocated */nCurrentPage31069,1124602
  PgHdr1 *pLruHead, *pLruTail;        /* LRU list of unpinned pages */pLruHead31070,1124682
  PgHdr1 *pLruHead, *pLruTail;        /* LRU list of unpinned pages */pLruTail31070,1124682
  int szSlot;                         /* Size of each free slot */szSlot31073,1124817
  void *pStart, *pEnd;                /* Bounds of pagecache malloc range */pStart31074,1124884
  void *pStart, *pEnd;                /* Bounds of pagecache malloc range */pEnd31074,1124884
  PgFreeslot *pFree;                  /* Free page blocks */pFree31075,1124961
  int isInit;                         /* True if initialized */isInit31076,1125022
} pcache1_g;pcache1_g31077,1125086
#define pcache1 pcache131084,1125304
#define PGHDR1_TO_PAGE(PGHDR1_TO_PAGE31098,1125978
#define PAGE_TO_PGHDR1(PAGE_TO_PGHDR131099,1126047
#define pcache1EnterMutex(pcache1EnterMutex31104,1126168
#define pcache1LeaveMutex(pcache1LeaveMutex31105,1126231
SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){sqlite3PCacheBufferSetup31116,1126740
static void *pcache1Alloc(int nByte){pcache1Alloc31139,1127398
static void pcache1Free(void *p){pcache1Free31170,1128402
static PgHdr1 *pcache1AllocPage(PCache1 *pCache){pcache1AllocPage31189,1128932
static void pcache1FreePage(PgHdr1 *p){pcache1FreePage31211,1129504
SQLITE_PRIVATE void *sqlite3PageMalloc(int sz){sqlite3PageMalloc31225,1129889
SQLITE_PRIVATE void sqlite3PageFree(void *p){sqlite3PageFree31236,1130102
static int pcache1ResizeHash(PCache1 *p){pcache1ResizeHash31251,1130551
static void pcache1PinPage(PgHdr1 *pPage){pcache1PinPage31295,1131680
static void pcache1RemoveFromHash(PgHdr1 *pPage){pcache1RemoveFromHash31323,1132457
static void pcache1EnforceMaxPage(void){pcache1EnforceMaxPage31339,1132868
static void pcache1TruncateUnsafe(pcache1TruncateUnsafe31356,1133408
static int pcache1Init(void *NotUsed){pcache1Init31387,1134263
static void pcache1Shutdown(void *NotUsed){pcache1Shutdown31403,1134701
static sqlite3_pcache *pcache1Create(int szPage, int bPurgeable){pcache1Create31414,1134938
static void pcache1Cachesize(sqlite3_pcache *p, int nMax){pcache1Cachesize31437,1135516
static int pcache1Pagecount(sqlite3_pcache *p){pcache1Pagecount31451,1135861
static void *pcache1Fetch(sqlite3_pcache *p, unsigned int iKey, int createFlag){pcache1Fetch31508,1138106
static void pcache1Unpin(sqlite3_pcache *p, void *pPg, int reuseUnlikely){pcache1Unpin31590,1140299
static void pcache1Rekey(pcache1Rekey31629,1141512
static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){pcache1Truncate31669,1142425
static void pcache1Destroy(sqlite3_pcache *p){pcache1Destroy31684,1142808
SQLITE_PRIVATE void sqlite3PCacheSetDefault(void){sqlite3PCacheSetDefault31701,1143319
SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int nReq){sqlite3PcacheReleaseMemory31728,1144389
SQLITE_PRIVATE void sqlite3PcacheStats(sqlite3PcacheStats31750,1144949
#define ROWSET_ALLOCATION_SIZE ROWSET_ALLOCATION_SIZE31837,1148271
#define ROWSET_ENTRY_PER_CHUNK ROWSET_ENTRY_PER_CHUNK31842,1148368
struct RowSetEntry {            RowSetEntry31848,1148554
  i64 v;                        /* ROWID value for this entry */v31849,1148587
  struct RowSetEntry *pRight;   /* Right subtree (larger entries) or list */pRight31850,1148652
  struct RowSetEntry *pLeft;    /* Left subtree (smaller entries) */pLeft31851,1148729
struct RowSetChunk {RowSetChunk31860,1149047
  struct RowSetChunk *pNextChunk;        /* Next chunk on list of them all */pNextChunk31861,1149068
  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; /* Allocated entries */aEntry31862,1149146
struct RowSet {RowSet31870,1149347
  struct RowSetChunk *pChunk;    /* List of all chunk allocations */pChunk31871,1149363
  sqlite3 *db;                   /* The database connection */db31872,1149432
  struct RowSetEntry *pEntry;    /* List of entries using pRight */pEntry31873,1149495
  struct RowSetEntry *pLast;     /* Last entry on the pEntry list */pLast31874,1149563
  struct RowSetEntry *pFresh;    /* Source of new entry objects */pFresh31875,1149632
  struct RowSetEntry *pTree;     /* Binary tree of entries */pTree31876,1149699
  u16 nFresh;                    /* Number of objects on pFresh */nFresh31877,1149761
  u8 isSorted;                   /* True if pEntry is sorted */isSorted31878,1149828
  u8 iBatch;                     /* Current insert batch */iBatch31879,1149892
SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){sqlite3RowSetInit31894,1150417
SQLITE_PRIVATE void sqlite3RowSetClear(RowSet *p){sqlite3RowSetClear31915,1151011
SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet *p, i64 rowid){sqlite3RowSetInsert31935,1151477
static struct RowSetEntry *rowSetMerge(rowSetMerge31973,1152464
static void rowSetSort(RowSet *p){rowSetSort32009,1153389
static void rowSetTreeToList(rowSetTreeToList32041,1154216
static struct RowSetEntry *rowSetNDeepTree(rowSetNDeepTree32076,1155353
static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){rowSetListToTree32106,1156049
static void rowSetToList(RowSet *p){rowSetToList32130,1156746
SQLITE_PRIVATE int sqlite3RowSetNext(RowSet *p, i64 *pRowid){sqlite3RowSetNext32150,1157268
SQLITE_PRIVATE int sqlite3RowSetTest(RowSet *pRowSet, u8 iBatch, sqlite3_int64 iRowid){sqlite3RowSetTest32168,1157671
#define PAGERTRACE(PAGERTRACE32224,1159448
#define PAGERID(PAGERID32235,1159771
#define FILEHANDLEID(FILEHANDLEID32236,1159805
#define PAGER_UNLOCK PAGER_UNLOCK32286,1162409
#define PAGER_SHARED PAGER_SHARED32287,1162437
#define PAGER_RESERVED PAGER_RESERVED32288,1162493
#define PAGER_EXCLUSIVE PAGER_EXCLUSIVE32289,1162551
#define PAGER_SYNCED PAGER_SYNCED32290,1162610
# define CODEC1(CODEC132296,1162724
# define CODEC2(CODEC232298,1162812
# define CODEC1(CODEC132302,1162952
# define CODEC2(CODEC232303,1162993
#define MAX_SECTOR_SIZE MAX_SECTOR_SIZE32312,1163325
typedef struct PagerSavepoint PagerSavepoint;PagerSavepoint32327,1164018
struct PagerSavepoint {PagerSavepoint32328,1164064
  i64 iOffset;                 /* Starting offset in main journal */iOffset32329,1164088
  i64 iHdrOffset;              /* See above */iHdrOffset32330,1164157
  Bitvec *pInSavepoint;        /* Set of pages in this savepoint */pInSavepoint32331,1164204
  Pgno nOrig;                  /* Original number of pages in file */nOrig32332,1164272
  Pgno iSubRec;                /* Index of first record in sub-journal */iSubRec32333,1164342
struct Pager {Pager32432,1168785
  sqlite3_vfs *pVfs;          /* OS functions to use for IO */pVfs32433,1168800
  u8 exclusiveMode;           /* Boolean. True if locking_mode==EXCLUSIVE */exclusiveMode32434,1168863
  u8 journalMode;             /* On of the PAGER_JOURNALMODE_* values */journalMode32435,1168940
  u8 useJournal;              /* Use a rollback journal on this file */useJournal32436,1169013
  u8 noReadlock;              /* Do not bother to obtain readlocks */noReadlock32437,1169085
  u8 noSync;                  /* Do not sync the journal if true */noSync32438,1169155
  u8 fullSync;                /* Do extra syncs of the journal for robustness */fullSync32439,1169223
  u8 sync_flags;              /* One of SYNC_NORMAL or SYNC_FULL */sync_flags32440,1169304
  u8 tempFile;                /* zFilename is a temporary file */tempFile32441,1169372
  u8 readOnly;                /* True for a read-only database */readOnly32442,1169438
  u8 memDb;                   /* True to inhibit all file I/O */memDb32443,1169504
  u8 state;                   /* PAGER_UNLOCK, _SHARED, _RESERVED, etc. */state32456,1170147
  u8 dbModified;              /* True if there are any changes to the Db */dbModified32457,1170222
  u8 needSync;                /* True if an fsync() is needed on the journal */needSync32458,1170298
  u8 journalStarted;          /* True if header of journal is synced */journalStarted32459,1170378
  u8 changeCountDone;         /* Set after incrementing the change-counter */changeCountDone32460,1170450
  u8 setMaster;               /* True if a m-j name has been written to jrnl */setMaster32461,1170528
  u8 doNotSync;               /* Boolean. While true, do not spill the cache */doNotSync32462,1170608
  u8 dbSizeValid;             /* Set when dbSize is correct */dbSizeValid32463,1170688
  u8 subjInMemory;            /* True to use in-memory sub-journals */subjInMemory32464,1170751
  Pgno dbSize;                /* Number of pages in the database */dbSize32465,1170822
  Pgno dbOrigSize;            /* dbSize before the current transaction */dbOrigSize32466,1170890
  Pgno dbFileSize;            /* Number of pages in the database file */dbFileSize32467,1170964
  int errCode;                /* One of several kinds of errors */errCode32468,1171037
  int nRec;                   /* Pages journalled since last j-header written */nRec32469,1171104
  u32 cksumInit;              /* Quasi-random value added to every checksum */cksumInit32470,1171185
  u32 nSubRec;                /* Number of records written to sub-journal */nSubRec32471,1171264
  Bitvec *pInJournal;         /* One bit for each page in the database file */pInJournal32472,1171341
  sqlite3_file *fd;           /* File descriptor for database */fd32473,1171420
  sqlite3_file *jfd;          /* File descriptor for main journal */jfd32474,1171485
  sqlite3_file *sjfd;         /* File descriptor for sub-journal */sjfd32475,1171554
  i64 journalOff;             /* Current write offset in the journal file */journalOff32476,1171622
  i64 journalHdr;             /* Byte offset to previous journal header */journalHdr32477,1171699
  PagerSavepoint *aSavepoint; /* Array of active savepoints */aSavepoint32478,1171774
  int nSavepoint;             /* Number of elements in aSavepoint[] */nSavepoint32479,1171837
  char dbFileVers[16];        /* Changes whenever database file changes */dbFileVers32480,1171908
  u32 sectorSize;             /* Assumed sector size during rollback */sectorSize32481,1171983
  u16 nExtra;                 /* Add this many bytes to each in-memory page */nExtra32483,1172056
  i16 nReserve;               /* Number of unused bytes at end of each page */nReserve32484,1172135
  u32 vfsFlags;               /* Flags for sqlite3_vfs.xOpen() */vfsFlags32485,1172214
  int pageSize;               /* Number of bytes in a page */pageSize32486,1172280
  Pgno mxPgno;                /* Maximum allowed size of the database */mxPgno32487,1172342
  char *zFilename;            /* Name of the database file */zFilename32488,1172415
  char *zJournal;             /* Name of the journal file */zJournal32489,1172477
  int (*xBusyHandler)(void*); /* Function to call when busy */xBusyHandler32490,1172538
  void *pBusyHandlerArg;      /* Context argument for xBusyHandler */pBusyHandlerArg32491,1172601
  int nHit, nMiss;            /* Cache hits and missing */nHit32493,1172690
  int nHit, nMiss;            /* Cache hits and missing */nMiss32493,1172690
  int nRead, nWrite;          /* Database pages read/written */nRead32494,1172749
  int nRead, nWrite;          /* Database pages read/written */nWrite32494,1172749
  void (*xReiniter)(DbPage*); /* Call this routine when reloading pages */xReiniter32496,1172820
  void *(*xCodec)(void*,void*,Pgno,int); /* Routine for en/decoding data */xCodec32498,1172919
  void (*xCodecSizeChng)(void*,int,int); /* Notify of page size changes */xCodecSizeChng32499,1172995
  void (*xCodecFree)(void*);             /* Destructor for the codec */xCodecFree32500,1173070
  void *pCodec;               /* First argument to xCodec... methods */pCodec32501,1173142
  char *pTmpSpace;            /* Pager.pageSize bytes of space for tmp use */pTmpSpace32503,1173221
  i64 journalSizeLimit;       /* Size limit for persistent journal files */journalSizeLimit32504,1173299
  PCache *pPCache;            /* Pointer to page cache object */pPCache32505,1173375
  sqlite3_backup *pBackup;    /* Pointer to list of ongoing backup processes */pBackup32506,1173440
SQLITE_API int sqlite3_pager_readdb_count = 0;    /* Number of full pages read from DB */sqlite3_pager_readdb_count32515,1173727
SQLITE_API int sqlite3_pager_writedb_count = 0;   /* Number of full pages written to DB */sqlite3_pager_writedb_count32516,1173817
SQLITE_API int sqlite3_pager_writej_count = 0;    /* Number of pages written to journal */sqlite3_pager_writej_count32517,1173908
# define PAGER_INCR(PAGER_INCR32518,1173999
# define PAGER_INCR(PAGER_INCR32520,1174033
static const unsigned char aJournalMagic[] = {aJournalMagic32548,1175367
#define JOURNAL_PG_SZ(JOURNAL_PG_SZ32556,1175564
#define JOURNAL_HDR_SZ(JOURNAL_HDR_SZ32562,1175755
# define MEMDB MEMDB32571,1176100
# define MEMDB MEMDB32573,1176123
#define PAGER_MAX_PGNO PAGER_MAX_PGNO32579,1176214
static int assert_pager_state(Pager *pPager){assert_pager_state32587,1176327
static int subjRequiresPage(PgHdr *pPg){subjRequiresPage32608,1177024
static int pageInJournal(PgHdr *pPg){pageInJournal32624,1177396
static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){read32bits32635,1177745
#define put32bits(put32bits32647,1178041
static int write32bits(sqlite3_file *fd, i64 offset, u32 val){write32bits32653,1178230
#define isOpen(isOpen32671,1178670
static int osUnlock(sqlite3_file *pFd, int eLock){osUnlock32676,1178769
static int jrnlBufferSize(Pager *pPager){jrnlBufferSize32701,1179656
static u32 pager_datahash(int nByte, unsigned char *pData){pager_datahash32733,1180581
static u32 pager_pagehash(PgHdr *pPage){pager_pagehash32741,1180748
static void pager_set_pagehash(PgHdr *pPage){pager_set_pagehash32744,1180872
#define CHECK_PAGE(CHECK_PAGE32753,1181194
static void checkPage(PgHdr *pPg){checkPage32754,1181229
#define pager_datahash(pager_datahash32761,1181423
#define pager_pagehash(pager_pagehash32762,1181454
#define CHECK_PAGE(CHECK_PAGE32763,1181483
static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){readMasterJournal32791,1182749
static i64 journalHdrOffset(Pager *pPager){journalHdrOffset32844,1184541
static int zeroJournalHdr(Pager *pPager, int doTruncate){zeroJournalHdr32877,1185855
static int writeJournalHdr(Pager *pPager){writeJournalHdr32926,1187685
static int readJournalHdr(readJournalHdr33043,1192959
static int writeMasterJournal(Pager *pPager, const char *zMaster){writeMasterJournal33163,1197814
static PgHdr *pager_lookup(Pager *pPager, Pgno pgno){pager_lookup33230,1200350
static void pager_reset(Pager *pPager){pager_reset33246,1200882
static void releaseAllSavepoints(Pager *pPager){releaseAllSavepoints33259,1201281
static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){addToSavepointBitvecs33278,1201918
static void pager_unlock(Pager *pPager){pager_unlock33303,1202776
static int pager_error(Pager *pPager, int rc){pager_error33365,1205040
static void pagerUnlockAndRollback(Pager *pPager){pagerUnlockAndRollback33396,1206158
static int pager_end_transaction(Pager *pPager, int hasMaster){pager_end_transaction33461,1208988
static u32 pager_cksum(Pager *pPager, const u8 *aData){pager_cksum33557,1212421
static int pager_playback_one_page(pager_playback_one_page33605,1214568
static int pager_delmaster(Pager *pPager, const char *zMaster){pager_delmaster33832,1224952
static int pager_truncate(Pager *pPager, Pgno nPage){pager_truncate33944,1228960
static void setSectorSize(Pager *pPager){setSectorSize33979,1230225
static int pager_playback(Pager *pPager, int isHot){pager_playback34055,1233635
static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){pagerPlaybackSavepoint34273,1242414
SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){sqlite3PagerSetCachesize34372,1246118
SQLITE_PRIVATE void sqlite3PagerSetSafetyLevel(Pager *pPager, int level, int bFullFsync){sqlite3PagerSetSafetyLevel34403,1247569
SQLITE_API int sqlite3_opentemp_count = 0;sqlite3_opentemp_count34417,1248097
static int pagerOpentemp(pagerOpentemp34435,1248612
SQLITE_PRIVATE void sqlite3PagerSetBusyhandler(sqlite3PagerSetBusyhandler34474,1250113
static void pagerReportSize(Pager *pPager){pagerReportSize34488,1250580
# define pagerReportSize(pagerReportSize34495,1250780
SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager *pPager, u16 *pPageSize, int nReserve){sqlite3PagerSetPagesize34528,1252173
SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager *pPager){sqlite3PagerTempSpace34566,1253502
SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){sqlite3PagerMaxPageCount34577,1253873
static int saved_cnt;saved_cnt34596,1254460
void disable_simulated_io_errors(void){disable_simulated_io_errors34597,1254482
void enable_simulated_io_errors(void){enable_simulated_io_errors34601,1254597
# define disable_simulated_io_errors(disable_simulated_io_errors34605,1254684
# define enable_simulated_io_errors(enable_simulated_io_errors34606,1254723
SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){sqlite3PagerReadFileheader34623,1255387
SQLITE_PRIVATE int sqlite3PagerPagecount(Pager *pPager, int *pnPage){sqlite3PagerPagecount34652,1256503
static int pager_wait_on_lock(Pager *pPager, int locktype){pager_wait_on_lock34714,1258467
static void assertTruncateConstraintCb(PgHdr *pPg){assertTruncateConstraintCb34775,1260956
static void assertTruncateConstraint(Pager *pPager){assertTruncateConstraint34779,1261116
# define assertTruncateConstraint(assertTruncateConstraint34783,1261251
SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){sqlite3PagerTruncateImage34792,1261578
SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager){sqlite3PagerClose34814,1262433
SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(DbPage *pPg){sqlite3PagerPagenumber34855,1263701
SQLITE_PRIVATE void sqlite3PagerRef(DbPage *pPg){sqlite3PagerRef34863,1263841
static int syncJournal(Pager *pPager){syncJournal34905,1265513
static int pager_write_pagelist(PgHdr *pList){pager_write_pagelist35029,1271119
static int subjournalPage(PgHdr *pPg){subjournalPage35129,1275127
static int pagerStress(void *p, PgHdr *pPg){pagerStress35174,1276827
SQLITE_PRIVATE int sqlite3PagerOpen(sqlite3PagerOpen35291,1281297
static int hasHotJournal(Pager *pPager, int *pExists){hasHotJournal35575,1292771
static int readDbPage(PgHdr *pPg){readDbPage35667,1296613
SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager){sqlite3PagerSharedLock35749,1300175
static void pagerUnlockIfUnused(Pager *pPager){pagerUnlockIfUnused35935,1307004
SQLITE_PRIVATE int sqlite3PagerAcquire(sqlite3PagerAcquire35993,1309757
SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){sqlite3PagerLookup36116,1313716
SQLITE_PRIVATE void sqlite3PagerUnref(DbPage *pPg){sqlite3PagerUnref36134,1314243
static int openSubJournal(Pager *pPager){openSubJournal36151,1314735
static int pager_open_journal(Pager *pPager){pager_open_journal36185,1316107
SQLITE_PRIVATE int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){sqlite3PagerBegin36283,1319678
static int pager_write(PgHdr *pPg){pager_write36344,1322127
SQLITE_PRIVATE int sqlite3PagerWrite(DbPage *pDbPage){sqlite3PagerWrite36499,1327829
SQLITE_PRIVATE int sqlite3PagerIswriteable(DbPage *pPg){sqlite3PagerIswriteable36593,1330946
SQLITE_PRIVATE void sqlite3PagerDontWrite(PgHdr *pPg){sqlite3PagerDontWrite36612,1331636
static int pager_incr_changecounter(Pager *pPager, int isDirectMode){pager_incr_changecounter36640,1332755
# define DIRECT_MODE DIRECT_MODE36654,1333378
SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager){sqlite3PagerSync36713,1335324
SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne(sqlite3PagerCommitPhaseOne36750,1336736
SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager *pPager){sqlite3PagerCommitPhaseTwo36921,1343967
SQLITE_PRIVATE int sqlite3PagerRollback(Pager *pPager){sqlite3PagerRollback37002,1347581
SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager *pPager){sqlite3PagerIsreadonly37041,1348705
SQLITE_PRIVATE int sqlite3PagerRefcount(Pager *pPager){sqlite3PagerRefcount37048,1348847
SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage *pPage){sqlite3PagerPageRefcount37055,1349019
SQLITE_PRIVATE int *sqlite3PagerStats(Pager *pPager){sqlite3PagerStats37063,1349205
SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager *pPager){sqlite3PagerIsMemdb37083,1349754
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){sqlite3PagerOpenSavepoint37097,1350287
SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){sqlite3PagerSavepoint37178,1353721
SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager *pPager){sqlite3PagerFilename37228,1355552
SQLITE_PRIVATE const sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){sqlite3PagerVfs37235,1355696
SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager *pPager){sqlite3PagerFile37244,1355936
SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager *pPager){sqlite3PagerJournalname37251,1356077
SQLITE_PRIVATE int sqlite3PagerNosync(Pager *pPager){sqlite3PagerNosync37259,1356293
static void sqlite3PagerSetCodec(sqlite3PagerSetCodec37267,1356449
static void *sqlite3PagerGetCodec(Pager *pPager){sqlite3PagerGetCodec37281,1356873
SQLITE_PRIVATE int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){sqlite3PagerMovepage37312,1358193
SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *pPg){sqlite3PagerGetData37448,1363098
SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *pPg){sqlite3PagerGetExtra37457,1363338
SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *pPager, int eMode){sqlite3PagerLockingMode37471,1363831
SQLITE_PRIVATE int sqlite3PagerJournalMode(Pager *pPager, int eMode){sqlite3PagerJournalMode37504,1364970
SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){sqlite3PagerJournalSizeLimit37532,1365894
SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){sqlite3PagerBackupPtr37545,1366311
#define MX_CELL_SIZE(MX_CELL_SIZE37791,1377606
#define MX_CELL(MX_CELL37798,1377919
typedef struct MemPage MemPage;MemPage37801,1377990
typedef struct BtLock BtLock;BtLock37802,1378022
#  define SQLITE_FILE_HEADER SQLITE_FILE_HEADER37817,1378710
#define PTF_INTKEY PTF_INTKEY37824,1378893
#define PTF_ZERODATA PTF_ZERODATA37825,1378920
#define PTF_LEAFDATA PTF_LEAFDATA37826,1378947
#define PTF_LEAF PTF_LEAF37827,1378974
struct MemPage {MemPage37842,1379609
  u8 isInit;           /* True if previously initialized. MUST BE FIRST! */isInit37843,1379626
  u8 nOverflow;        /* Number of overflow cell bodies in aCell[] */nOverflow37844,1379702
  u8 intKey;           /* True if intkey flag is set */intKey37845,1379773
  u8 leaf;             /* True if leaf flag is set */leaf37846,1379829
  u8 hasData;          /* True if this page stores data */hasData37847,1379883
  u8 hdrOffset;        /* 100 for page 1.  0 otherwise */hdrOffset37848,1379942
  u8 childPtrSize;     /* 0 if leaf==1.  4 if leaf==0 */childPtrSize37849,1380000
  u16 maxLocal;        /* Copy of BtShared.maxLocal or BtShared.maxLeaf */maxLocal37850,1380057
  u16 minLocal;        /* Copy of BtShared.minLocal or BtShared.minLeaf */minLocal37851,1380132
  u16 cellOffset;      /* Index in aData of first cell pointer */cellOffset37852,1380207
  u16 nFree;           /* Number of free bytes on the page */nFree37853,1380273
  u16 nCell;           /* Number of cells on this page, local and ovfl */nCell37854,1380335
  u16 maskPage;        /* Mask for page offset */maskPage37855,1380409
  struct _OvflCell {   /* Cells that will not fit on aData[] */_OvflCell37856,1380459
    u8 *pCell;          /* Pointers to the body of the overflow cell */pCell37857,1380523
    u16 idx;            /* Insert this cell before idx-th non-overflow cell */idx37858,1380595
  } aOvfl[5];aOvfl37859,1380674
  BtShared *pBt;       /* Pointer to BtShared that this page is part of */pBt37860,1380688
  u8 *aData;           /* Pointer to disk image of the page data */aData37861,1380763
  DbPage *pDbPage;     /* Pager page handle */pDbPage37862,1380831
  Pgno pgno;           /* Page number for this page */pgno37863,1380878
#define EXTRA_SIZE EXTRA_SIZE37871,1381121
struct BtLock {BtLock37880,1381493
  Btree *pBtree;        /* Btree handle holding this lock */pBtree37881,1381509
  Pgno iTable;          /* Root page of table */iTable37882,1381570
  u8 eLock;             /* READ_LOCK or WRITE_LOCK */eLock37883,1381619
  BtLock *pNext;        /* Next in BtShared.pLock list */pNext37884,1381673
#define READ_LOCK READ_LOCK37888,1381775
#define WRITE_LOCK WRITE_LOCK37889,1381799
struct Btree {Btree37912,1382862
  sqlite3 *db;       /* The database connection holding this btree */db37913,1382877
  BtShared *pBt;     /* Sharable content of this btree */pBt37914,1382947
  u8 inTrans;        /* TRANS_NONE, TRANS_READ or TRANS_WRITE */inTrans37915,1383005
  u8 sharable;       /* True if we can share pBt with another db */sharable37916,1383070
  u8 locked;         /* True if db currently has pBt locked */locked37917,1383138
  int wantToLock;    /* Number of nested calls to sqlite3BtreeEnter() */wantToLock37918,1383201
  int nBackup;       /* Number of backup operations reading this btree */nBackup37919,1383274
  Btree *pNext;      /* List of other sharable Btrees from the same db */pNext37920,1383348
  Btree *pPrev;      /* Back pointer of the same list */pPrev37921,1383422
  BtLock lock;       /* Object used to lock page 1 */lock37923,1383512
#define TRANS_NONE TRANS_NONE37934,1383844
#define TRANS_READ TRANS_READ37935,1383866
#define TRANS_WRITE TRANS_WRITE37936,1383888
struct BtShared {BtShared37973,1385390
  Pager *pPager;        /* The page cache */pPager37974,1385408
  sqlite3 *db;          /* Database connection currently using this Btree */db37975,1385453
  BtCursor *pCursor;    /* A list of all open cursors */pCursor37976,1385530
  MemPage *pPage1;      /* First page of the database */pPage137977,1385587
  u8 readOnly;          /* True if the underlying file is readonly */readOnly37978,1385644
  u8 pageSizeFixed;     /* True if the page size can no longer be changed */pageSizeFixed37979,1385714
  u8 secureDelete;      /* True if secure_delete is enabled */secureDelete37980,1385791
  u8 autoVacuum;        /* True if auto-vacuum is enabled */autoVacuum37982,1385885
  u8 incrVacuum;        /* True if incr-vacuum is enabled */incrVacuum37983,1385946
  u16 pageSize;         /* Total number of bytes on a page */pageSize37985,1386014
  u16 usableSize;       /* Number of usable bytes on each page */usableSize37986,1386076
  u16 maxLocal;         /* Maximum local payload in non-LEAFDATA tables */maxLocal37987,1386142
  u16 minLocal;         /* Minimum local payload in non-LEAFDATA tables */minLocal37988,1386217
  u16 maxLeaf;          /* Maximum local payload in a LEAFDATA table */maxLeaf37989,1386292
  u16 minLeaf;          /* Minimum local payload in a LEAFDATA table */minLeaf37990,1386364
  u8 inTransaction;     /* Transaction state */inTransaction37991,1386436
  int nTransaction;     /* Number of open transactions (read + write) */nTransaction37992,1386484
  void *pSchema;        /* Pointer to space allocated by sqlite3BtreeSchema() */pSchema37993,1386557
  void (*xFreeSchema)(void*);  /* Destructor for BtShared.pSchema */xFreeSchema37994,1386638
  sqlite3_mutex *mutex; /* Non-recursive mutex required to access this struct */mutex37995,1386707
  Bitvec *pHasContent;  /* Set of pages moved to free-list this transaction */pHasContent37996,1386788
  int nRef;             /* Number of references to this structure */nRef37998,1386900
  BtShared *pNext;      /* Next on a list of sharable BtShared structs */pNext37999,1386969
  BtLock *pLock;        /* List of locks held on this shared-btree struct */pLock38000,1387043
  Btree *pWriter;       /* Btree with currently open write transaction */pWriter38001,1387120
  u8 isExclusive;       /* True if pWriter has an EXCLUSIVE lock on the db */isExclusive38002,1387194
  u8 isPending;         /* If waiting for read-locks to clear */isPending38003,1387272
  u8 *pTmpSpace;        /* BtShared.pageSize bytes of space for tmp use */pTmpSpace38005,1387344
typedef struct CellInfo CellInfo;CellInfo38013,1387625
struct CellInfo {CellInfo38014,1387659
  u8 *pCell;     /* Pointer to the start of cell content */pCell38015,1387677
  i64 nKey;      /* The key for INTKEY tables, or number of bytes in key */nKey38016,1387737
  u32 nData;     /* Number of bytes of data */nData38017,1387813
  u32 nPayload;  /* Total amount of payload */nPayload38018,1387860
  u16 nHeader;   /* Size of the cell content header in bytes */nHeader38019,1387907
  u16 nLocal;    /* Amount of payload held locally */nLocal38020,1387971
  u16 iOverflow; /* Offset to overflow page number.  Zero if no overflow */iOverflow38021,1388025
  u16 nSize;     /* Size of the cell content on the main b-tree page */nSize38022,1388101
#define BTCURSOR_MAX_DEPTH BTCURSOR_MAX_DEPTH38034,1388555
struct BtCursor {BtCursor38050,1389094
  Btree *pBtree;            /* The Btree to which this cursor belongs */pBtree38051,1389112
  BtShared *pBt;            /* The BtShared this cursor points to */pBt38052,1389185
  BtCursor *pNext, *pPrev;  /* Forms a linked list of all cursors */pNext38053,1389254
  BtCursor *pNext, *pPrev;  /* Forms a linked list of all cursors */pPrev38053,1389254
  struct KeyInfo *pKeyInfo; /* Argument passed to comparison function */pKeyInfo38054,1389323
  Pgno pgnoRoot;            /* The root page of this tree */pgnoRoot38055,1389396
  sqlite3_int64 cachedRowid; /* Next rowid cache.  0 means not valid */cachedRowid38056,1389457
  CellInfo info;            /* A parse of the cell we are pointing at */info38057,1389529
  u8 wrFlag;                /* True if writable */wrFlag38058,1389602
  u8 atLast;                /* Cursor pointing to the last entry */atLast38059,1389653
  u8 validNKey;             /* True if info.nKey is valid */validNKey38060,1389721
  u8 eState;                /* One of the CURSOR_XXX constants (see below) */eState38061,1389782
  void *pKey;      /* Saved key that was cursor's last known position */pKey38062,1389860
  i64 nKey;        /* Size of pKey, or last integer key */nKey38063,1389933
  int skipNext;    /* Prev() is noop if negative. Next() is noop if positive */skipNext38064,1389992
  u8 isIncrblobHandle;      /* True if this cursor is an incr. io handle */isIncrblobHandle38066,1390101
  Pgno *aOverflow;          /* Cache of overflow page locations */aOverflow38067,1390177
  i16 iPage;                            /* Index of current page in apPage */iPage38069,1390251
  MemPage *apPage[BTCURSOR_MAX_DEPTH];  /* Pages from root to current page */apPage38070,1390329
  u16 aiIdx[BTCURSOR_MAX_DEPTH];        /* Current index in apPage[i] */aiIdx38071,1390407
#define CURSOR_INVALID CURSOR_INVALID38099,1391531
#define CURSOR_VALID CURSOR_VALID38100,1391566
#define CURSOR_REQUIRESEEK CURSOR_REQUIRESEEK38101,1391601
#define CURSOR_FAULT CURSOR_FAULT38102,1391636
# define PENDING_BYTE_PAGE(PENDING_BYTE_PAGE38107,1391752
#define PTRMAP_PAGENO(PTRMAP_PAGENO38124,1392474
#define PTRMAP_PTROFFSET(PTRMAP_PTROFFSET38125,1392531
#define PTRMAP_ISPAGE(PTRMAP_ISPAGE38126,1392594
#define PTRMAP_ROOTPAGE PTRMAP_ROOTPAGE38159,1394290
#define PTRMAP_FREEPAGE PTRMAP_FREEPAGE38160,1394316
#define PTRMAP_OVERFLOW1 PTRMAP_OVERFLOW138161,1394342
#define PTRMAP_OVERFLOW2 PTRMAP_OVERFLOW238162,1394369
#define PTRMAP_BTREE PTRMAP_BTREE38163,1394396
#define btreeIntegrity(btreeIntegrity38168,1394554
#define ISAUTOVACUUM ISAUTOVACUUM38181,1395057
#define ISAUTOVACUUM ISAUTOVACUUM38183,1395102
typedef struct IntegrityCk IntegrityCk;IntegrityCk38191,1395276
struct IntegrityCk {IntegrityCk38192,1395316
  BtShared *pBt;    /* The tree being checked out */pBt38193,1395337
  Pager *pPager;    /* The associated pager.  Also accessible by pBt->pPager */pPager38194,1395390
  Pgno nPage;       /* Number of pages in the database */nPage38195,1395470
  int *anRef;       /* Number of times each page is referenced */anRef38196,1395528
  int mxErr;        /* Stop accumulating errors when this reaches zero */mxErr38197,1395594
  int nErr;         /* Number of messages written to zErrMsg so far */nErr38198,1395668
  int mallocFailed; /* A memory allocation error has occurred */mallocFailed38199,1395739
  StrAccum errMsg;  /* Accumulate the error message text here */errMsg38200,1395804
#define get2byte(get2byte38206,1395944
#define put2byte(put2byte38207,1395987
#define get4byte get4byte38208,1396051
#define put4byte put4byte38209,1396084
static void lockBtreeMutex(Btree *p){lockBtreeMutex38221,1396506
static void unlockBtreeMutex(Btree *p){unlockBtreeMutex38235,1396851
SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){sqlite3BtreeEnter38261,1397832
SQLITE_PRIVATE void sqlite3BtreeLeave(Btree *p){sqlite3BtreeLeave38323,1399867
SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(Btree *p){sqlite3BtreeHoldsMutex38340,1400249
SQLITE_PRIVATE void sqlite3BtreeEnterCursor(BtCursor *pCur){sqlite3BtreeEnterCursor38357,1400853
SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(BtCursor *pCur){sqlite3BtreeLeaveCursor38360,1400951
SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){sqlite3BtreeEnterAll38380,1401645
SQLITE_PRIVATE void sqlite3BtreeLeaveAll(sqlite3 *db){sqlite3BtreeLeaveAll38408,1402521
SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){sqlite3BtreeHoldsAllMutexes38431,1403048
SQLITE_PRIVATE void sqlite3BtreeMutexArrayInsert(BtreeMutexArray *pArray, Btree *pBtree){sqlite3BtreeMutexArrayInsert38461,1403882
SQLITE_PRIVATE void sqlite3BtreeMutexArrayEnter(BtreeMutexArray *pArray){sqlite3BtreeMutexArrayEnter38494,1404794
SQLITE_PRIVATE void sqlite3BtreeMutexArrayLeave(BtreeMutexArray *pArray){sqlite3BtreeMutexArrayLeave38519,1405478
SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){sqlite3BtreeEnter38539,1405990
SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){sqlite3BtreeEnterAll38542,1406063
static const char zMagicHeader[] = SQLITE_FILE_HEADER;zMagicHeader38576,1407150
# define TRACE(TRACE38586,1407423
SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;sqlite3SharedCacheList38601,1407806
static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;sqlite3SharedCacheList38603,1407876
SQLITE_API int sqlite3_enable_shared_cache(int enable){sqlite3_enable_shared_cache38615,1408259
  #define querySharedCacheTableLock(querySharedCacheTableLock38633,1408894
  #define setSharedCacheTableLock(setSharedCacheTableLock38634,1408947
  #define clearAllSharedCacheTableLocks(clearAllSharedCacheTableLocks38635,1408998
  #define downgradeAllSharedCacheTableLocks(downgradeAllSharedCacheTableLocks38636,1409041
  #define hasSharedCacheTableLock(hasSharedCacheTableLock38637,1409088
  #define hasReadConflicts(hasReadConflicts38638,1409133
static int hasSharedCacheTableLock(hasSharedCacheTableLock38666,1410191
static int hasReadConflicts(Btree *pBtree, Pgno iRoot){hasReadConflicts38747,1413027
static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){querySharedCacheTableLock38767,1413593
static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){setSharedCacheTableLock38839,1416210
static void clearAllSharedCacheTableLocks(Btree *p){clearAllSharedCacheTableLocks38903,1418359
static void downgradeAllSharedCacheTableLocks(Btree *p){downgradeAllSharedCacheTableLocks38948,1419725
static int cursorHoldsMutex(BtCursor *p){cursorHoldsMutex38972,1420333
static void invalidateOverflowCache(BtCursor *pCur){invalidateOverflowCache38982,1420533
static void invalidateAllOverflowCache(BtShared *pBt){invalidateAllOverflowCache38992,1420791
static void invalidateIncrblobCursors(invalidateIncrblobCursors39013,1421564
  #define invalidateOverflowCache(invalidateOverflowCache39030,1422097
  #define invalidateAllOverflowCache(invalidateAllOverflowCache39031,1422134
  #define invalidateIncrblobCursors(invalidateIncrblobCursors39032,1422174
static int btreeSetHasContent(BtShared *pBt, Pgno pgno){btreeSetHasContent39070,1424032
static int btreeGetHasContent(BtShared *pBt, Pgno pgno){btreeGetHasContent39095,1424876
static void btreeClearHasContent(BtShared *pBt){btreeClearHasContent39104,1425172
static int saveCursorPosition(BtCursor *pCur){saveCursorPosition39116,1425552
static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){saveAllCursors39166,1426967
SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *pCur){sqlite3BtreeClearCursor39185,1427445
static int btreeMoveto(btreeMoveto39197,1427822
static int btreeRestoreCursorPosition(BtCursor *pCur){btreeRestoreCursorPosition39230,1429072
#define restoreCursorPosition(restoreCursorPosition39247,1429556
SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor *pCur, int *pHasMoved){sqlite3BtreeCursorHasMoved39260,1430021
static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){ptrmapPageno39282,1430524
static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){ptrmapPut39305,1431199
static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){ptrmapGet39356,1432755
  #define ptrmapPut(ptrmapPut39383,1433571
  #define ptrmapGet(ptrmapGet39384,1433603
  #define ptrmapPutOvflPtr(ptrmapPutOvflPtr39385,1433642
#define findCell(findCell39395,1433928
static u8 *findOverflowCell(MemPage *pPage, int iCell){findOverflowCell39402,1434140
static void btreeParseCellPtr(btreeParseCellPtr39429,1434937
#define parseCell(parseCell39500,1437458
static void btreeParseCell(btreeParseCell39502,1437565
static u16 cellSizePtr(MemPage *pPage, u8 *pCell){cellSizePtr39516,1438058
static u16 cellSize(MemPage *pPage, int iCell){cellSize39572,1439657
static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){ptrmapPutOvflPtr39583,1439952
static int defragmentPage(MemPage *pPage){defragmentPage39603,1440574
static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){allocateSpace39693,1443945
static int freeSpace(MemPage *pPage, int start, int size){freeSpace39792,1447474
static int decodeFlags(MemPage *pPage, int flagByte){decodeFlags39885,1450633
static int btreeInitPage(MemPage *pPage){btreeInitPage39919,1451747
static void zeroPage(MemPage *pPage, int flags){zeroPage40029,1455747
static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){btreePageFromDbPage40064,1456825
static int btreeGetPage(btreeGetPage40085,1457634
static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){btreePageLookup40106,1458320
static Pgno pagerPagecount(BtShared *pBt){pagerPagecount40120,1458698
static int getAndInitPage(getAndInitPage40137,1459215
static void releasePage(MemPage *pPage){releasePage40169,1460140
static void pageReinit(DbPage *pData){pageReinit40188,1460814
static int btreeInvokeBusyHandler(void *pArg){btreeInvokeBusyHandler40210,1461611
SQLITE_PRIVATE int sqlite3BtreeOpen(sqlite3BtreeOpen40232,1462491
static int removeFromSharingList(BtShared *pBt){removeFromSharingList40473,1470654
static void allocateTempSpace(BtShared *pBt){allocateTempSpace40511,1471586
static void freeTempSpace(BtShared *pBt){freeTempSpace40520,1471765
SQLITE_PRIVATE int sqlite3BtreeClose(Btree *p){sqlite3BtreeClose40528,1471928
SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){sqlite3BtreeSetCacheSize40598,1474128
SQLITE_PRIVATE int sqlite3BtreeSetSafetyLevel(Btree *p, int level, int fullSync){sqlite3BtreeSetSafetyLevel40616,1474867
SQLITE_PRIVATE int sqlite3BtreeSyncDisabled(Btree *p){sqlite3BtreeSyncDisabled40630,1475296
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){sqlite3BtreeSetPageSize40662,1476469
SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree *p){sqlite3BtreeGetPageSize40692,1477359
SQLITE_PRIVATE int sqlite3BtreeGetReserve(Btree *p){sqlite3BtreeGetReserve40701,1477621
SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){sqlite3BtreeMaxPageCount40714,1477985
SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree *p, int newFlag){sqlite3BtreeSecureDelete40727,1478355
SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){sqlite3BtreeSetAutoVacuum40746,1478974
SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *p){sqlite3BtreeGetAutoVacuum40770,1479531
static int lockBtree(BtShared *pBt){lockBtree40796,1480218
static void unlockBtreeIfUnused(BtShared *pBt){unlockBtreeIfUnused40906,1483898
static int newDatabase(BtShared *pBt){newDatabase40923,1484437
SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree *p, int wrflag){sqlite3BtreeBeginTrans40996,1487214
static int setChildPtrmaps(MemPage *pPage){setChildPtrmaps41121,1490930
static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){modifyPagePointer41171,1492449
static int relocatePage(relocatePage41230,1494098
static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg){incrVacuumStep41324,1497530
SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *p){sqlite3BtreeIncrVacuum41432,1500719
static int autoVacuumCommit(BtShared *pBt){autoVacuumCommit41457,1501463
# define setChildPtrmaps(setChildPtrmaps41514,1503472
SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){sqlite3BtreeCommitPhaseOne41543,1504880
static void btreeEndTransaction(Btree *p){btreeEndTransaction41567,1505488
SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree *p){sqlite3BtreeCommitPhaseTwo41615,1507362
SQLITE_PRIVATE int sqlite3BtreeCommit(Btree *p){sqlite3BtreeCommit41644,1508034
static int countWriteCursors(BtShared *pBt){countWriteCursors41666,1508699
SQLITE_PRIVATE void sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode){sqlite3BtreeTripAllCursors41693,1509534
SQLITE_PRIVATE int sqlite3BtreeRollback(Btree *p){sqlite3BtreeRollback41718,1510269
SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree *p, int iStatement){sqlite3BtreeBeginStmt41781,1512610
SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){sqlite3BtreeSavepoint41816,1513972
static int btreeCursor(btreeCursor41864,1515866
SQLITE_PRIVATE int sqlite3BtreeCursor(sqlite3BtreeCursor41912,1517579
SQLITE_PRIVATE int sqlite3BtreeCursorSize(void){sqlite3BtreeCursorSize41934,1518405
SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor *p){sqlite3BtreeCursorZero41946,1518837
SQLITE_PRIVATE void sqlite3BtreeSetCachedRowid(BtCursor *pCur, sqlite3_int64 iRowid){sqlite3BtreeSetCachedRowid41962,1519527
SQLITE_PRIVATE sqlite3_int64 sqlite3BtreeGetCachedRowid(BtCursor *pCur){sqlite3BtreeGetCachedRowid41976,1520015
SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor *pCur){sqlite3BtreeCloseCursor41984,1520227
  static void assertCellInfo(BtCursor *pCur){assertCellInfo42026,1521591
  #define assertCellInfo(assertCellInfo42034,1521858
  static void getCellInfo(BtCursor *pCur){getCellInfo42038,1521983
#define getCellInfo(getCellInfo42049,1522341
SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor *pCur){sqlite3BtreeCursorIsValid42065,1523218
SQLITE_PRIVATE int sqlite3BtreeKeySize(BtCursor *pCur, i64 *pSize){sqlite3BtreeKeySize42082,1523788
SQLITE_PRIVATE int sqlite3BtreeDataSize(BtCursor *pCur, u32 *pSize){sqlite3BtreeDataSize42106,1524605
static int getOverflowPage(getOverflowPage42133,1525770
static int copyPayload(copyPayload42201,1527768
static int accessPayload(accessPayload42250,1529683
SQLITE_PRIVATE int sqlite3BtreeKey(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){sqlite3BtreeKey42394,1534571
SQLITE_PRIVATE int sqlite3BtreeData(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){sqlite3BtreeData42411,1535241
static const unsigned char *fetchPayload(fetchPayload42450,1536728
SQLITE_PRIVATE const void *sqlite3BtreeKeyFetch(BtCursor *pCur, int *pAmt){sqlite3BtreeKeyFetch42502,1538345
SQLITE_PRIVATE const void *sqlite3BtreeDataFetch(BtCursor *pCur, int *pAmt){sqlite3BtreeDataFetch42511,1538647
static int moveToChild(BtCursor *pCur, u32 newPgno){moveToChild42531,1539314
static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){assertParentIndex42565,1540280
#  define assertParentIndex(assertParentIndex42574,1540565
static void moveToParent(BtCursor *pCur){moveToParent42585,1540877
static int moveToRoot(BtCursor *pCur){moveToRoot42622,1542360
static int moveToLeftmost(BtCursor *pCur){moveToLeftmost42698,1544784
static int moveToRightmost(BtCursor *pCur){moveToRightmost42723,1545628
SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){sqlite3BtreeFirst42747,1546349
SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor *pCur, int *pRes){sqlite3BtreeLast42771,1547027
SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked(sqlite3BtreeMovetoUnpacked42835,1549205
SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor *pCur){sqlite3BtreeEof43019,1555412
SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor *pCur, int *pRes){sqlite3BtreeNext43033,1555932
SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){sqlite3BtreePrevious43102,1557501
static int allocateBtreePage(allocateBtreePage43177,1559705
static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){freePage243456,1568650
static void freePage(MemPage *pPage, int *pRC){freePage43578,1573268
static int clearCell(MemPage *pPage, unsigned char *pCell){clearCell43587,1573469
static int fillInCell(fillInCell43658,1576022
static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){dropCell43816,1580960
static void insertCell(insertCell43871,1582914
static void assemblePage(assemblePage43958,1586225
#define NN NN44006,1588196
#define NB NB44007,1588271
static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){balance_quick44034,1589455
static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){copyNodeContent44173,1594637
static int balance_nonroot(balance_nonroot44254,1598118
static int balance_deeper(MemPage *pRoot, MemPage **ppChild){balance_deeper44881,1621684
static int balance(BtCursor *pCur){balance44935,1623587
SQLITE_PRIVATE int sqlite3BtreeInsert(sqlite3BtreeInsert45070,1629207
SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor *pCur){sqlite3BtreeDelete45212,1634882
static int btreeCreateTable(Btree *p, int *piTable, int flags){btreeCreateTable45335,1639764
SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){sqlite3BtreeCreateTable45457,1643416
static int clearDatabasePage(clearDatabasePage45469,1643711
SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){sqlite3BtreeClearTable45527,1645500
static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){btreeDropTable45566,1647041
SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){sqlite3BtreeDropTable45669,1650052
SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){sqlite3BtreeGetMeta45691,1650831
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){sqlite3BtreeUpdateMeta45715,1651540
SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){sqlite3BtreeCount45748,1652541
SQLITE_PRIVATE Pager *sqlite3BtreePager(Btree *p){sqlite3BtreePager45813,1654851
static void checkAppendMsg(checkAppendMsg45821,1655021
static int checkRef(IntegrityCk *pCheck, Pgno iPage, char *zContext){checkRef45855,1655915
static void checkPtrmap(checkPtrmap45874,1656485
static void checkList(checkList45904,1657490
static int checkTreePage(checkTreePage45990,1660487
SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck(sqlite3BtreeIntegrityCheck46214,1667632
SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *p){sqlite3BtreeGetFilename46325,1670983
SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *p){sqlite3BtreeGetJournalname46338,1671439
SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree *p){sqlite3BtreeIsInTrans46346,1671641
SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree *p){sqlite3BtreeIsInReadTrans46354,1671862
SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree *p){sqlite3BtreeIsInBackup46360,1672015
SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){sqlite3BtreeSchema46386,1673150
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){sqlite3BtreeSchemaLocked46402,1673635
SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){sqlite3BtreeLockTable46419,1674112
SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){sqlite3BtreePutData46449,1675118
SQLITE_PRIVATE void sqlite3BtreeCacheOverflow(BtCursor *pCur){sqlite3BtreeCacheOverflow46492,1676646
# define MIN(MIN46521,1677622
struct sqlite3_backup {sqlite3_backup46527,1677722
  sqlite3* pDestDb;        /* Destination database handle */pDestDb46528,1677746
  Btree *pDest;            /* Destination b-tree file */pDest46529,1677807
  u32 iDestSchema;         /* Original schema cookie in destination */iDestSchema46530,1677864
  int bDestLocked;         /* True once a write-transaction is open on pDest */bDestLocked46531,1677935
  Pgno iNext;              /* Page number of the next source page to copy */iNext46533,1678016
  sqlite3* pSrcDb;         /* Source database handle */pSrcDb46534,1678093
  Btree *pSrc;             /* Source b-tree file */pSrc46535,1678149
  int rc;                  /* Backup process error code */rc46537,1678202
  Pgno nRemaining;         /* Number of pages left to copy */nRemaining46542,1678406
  Pgno nPagecount;         /* Total number of pages to copy */nPagecount46543,1678468
  int isAttached;          /* True once backup has been registered with pager */isAttached46545,1678532
  sqlite3_backup *pNext;   /* Next backup associated with source pager */pNext46546,1678613
static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){findBtree46588,1680516
SQLITE_API sqlite3_backup *sqlite3_backup_init(sqlite3_backup_init46628,1681615
static int isFatalError(int rc){isFatalError46693,1683829
static int backupOnePage(sqlite3_backup *p, Pgno iSrcPg, const u8 *zSrcData){backupOnePage46702,1684102
static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){backupTruncateFile46763,1686334
static void attachBackupObject(sqlite3_backup *p){attachBackupObject46776,1686700
SQLITE_API int sqlite3_backup_step(sqlite3_backup *p, int nPage){sqlite3_backup_step46788,1686999
SQLITE_API int sqlite3_backup_finish(sqlite3_backup *p){sqlite3_backup_finish46974,1693865
SQLITE_API int sqlite3_backup_remaining(sqlite3_backup *p){sqlite3_backup_remaining47023,1695242
SQLITE_API int sqlite3_backup_pagecount(sqlite3_backup *p){sqlite3_backup_pagecount47031,1695451
SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){sqlite3BackupUpdate47047,1696054
SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *pBackup){sqlite3BackupRestart47076,1697218
SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){sqlite3BtreeCopyFile47093,1697789
#define expandBlob(expandBlob47154,1699825
SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){sqlite3VdbeChangeEncoding47169,1700454
SQLITE_PRIVATE int sqlite3VdbeMemGrow(Mem *pMem, int n, int preserve){sqlite3VdbeMemGrow47206,1701726
SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem *pMem){sqlite3VdbeMemMakeWriteable47251,1703096
SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(Mem *pMem){sqlite3VdbeMemExpandBlob47274,1703714
SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem *pMem){sqlite3VdbeMemNulTerminate47302,1704413
SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem *pMem, int enc){sqlite3VdbeMemStringify47329,1705424
SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){sqlite3VdbeMemFinalize47373,1706765
SQLITE_PRIVATE void sqlite3VdbeMemReleaseExternal(Mem *p){sqlite3VdbeMemReleaseExternal47398,1707582
SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p){sqlite3VdbeMemRelease47426,1708492
static i64 doubleToInt64(double r){doubleToInt6447446,1709182
SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){sqlite3VdbeIntValue47486,1710670
SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem *pMem){sqlite3VdbeRealValue47516,1711526
SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem *pMem){sqlite3VdbeIntegerAffinity47545,1712426
SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem *pMem){sqlite3VdbeMemIntegerify47574,1713490
SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem *pMem){sqlite3VdbeMemRealify47588,1713886
SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem *pMem){sqlite3VdbeMemNumerify47605,1714449
SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem *pMem){sqlite3VdbeMemSetNull47627,1715135
SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){sqlite3VdbeMemSetZeroBlob47642,1715517
SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){sqlite3VdbeMemSetInt6447664,1715999
SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(Mem *pMem, double val){sqlite3VdbeMemSetDouble47676,1716307
SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem *pMem){sqlite3VdbeMemSetRowSet47692,1716663
SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem *p){sqlite3VdbeMemTooBig47713,1717311
#define MEMCELLSIZE MEMCELLSIZE47728,1717634
SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){sqlite3VdbeMemShallowCopy47736,1717947
SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){sqlite3VdbeMemCopy47752,1718455
SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){sqlite3VdbeMemMove47776,1719068
SQLITE_PRIVATE int sqlite3VdbeMemSetStr(sqlite3VdbeMemSetStr47803,1720140
SQLITE_PRIVATE int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){sqlite3MemCompare47893,1722796
SQLITE_PRIVATE int sqlite3VdbeMemFromBtree(sqlite3VdbeMemFromBtree48015,1726575
SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){sqlite3ValueText48072,1728604
SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *db){sqlite3ValueNew48111,1729770
SQLITE_PRIVATE int sqlite3ValueFromExpr(sqlite3ValueFromExpr48131,1730480
SQLITE_PRIVATE void sqlite3ValueSetStr(sqlite3ValueSetStr48209,1732788
SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value *v){sqlite3ValueFree48222,1733181
SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){sqlite3ValueBytes48232,1733437
SQLITE_PRIVATE int sqlite3VdbeAddopTrace = 0;sqlite3VdbeAddopTrace48271,1734763
SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(sqlite3 *db){sqlite3VdbeCreate48278,1734865
SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){sqlite3VdbeSetSql48296,1735222
SQLITE_API const char *sqlite3_sql(sqlite3_stmt *pStmt){sqlite3_sql48310,1735604
SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){sqlite3VdbeSwap48318,1735792
SQLITE_PRIVATE void sqlite3VdbeTrace(Vdbe *p, FILE *trace){sqlite3VdbeTrace48340,1736204
static int growOpArray(Vdbe *p){growOpArray48354,1736647
SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){sqlite3VdbeAddOp348381,1737403
SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe *p, int op){sqlite3VdbeAddOp048413,1738039
SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){sqlite3VdbeAddOp148416,1738140
SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){sqlite3VdbeAddOp248419,1738250
SQLITE_PRIVATE int sqlite3VdbeAddOp4(sqlite3VdbeAddOp448427,1738435
SQLITE_PRIVATE int sqlite3VdbeAddOp4Int(sqlite3VdbeAddOp4Int48444,1738968
SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe *p){sqlite3VdbeMakeLabel48471,1740063
SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe *p, int x){sqlite3VdbeResolveLabel48492,1740690
SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe *p){sqlite3VdbeRunOnlyOnce48504,1740953
typedef struct VdbeOpIter VdbeOpIter;VdbeOpIter48526,1741582
struct VdbeOpIter {VdbeOpIter48527,1741620
  Vdbe *v;                   /* Vdbe to iterate through the opcodes of */v48528,1741640
  SubProgram **apSub;        /* Array of subprograms */apSub48529,1741714
  int nSub;                  /* Number of entries in apSub */nSub48530,1741770
  int iAddr;                 /* Address of next instruction to return */iAddr48531,1741832
  int iSub;                  /* 0 = main program, 1 = first sub-program etc. */iSub48532,1741905
static Op *opIterNext(VdbeOpIter *p){opIterNext48534,1741988
SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){sqlite3VdbeAssertMayAbort48598,1743715
static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){resolveP2Values48642,1745295
SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe *p){sqlite3VdbeCurrentAddr48682,1746366
SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){sqlite3VdbeTakeOpArray48698,1746983
SQLITE_PRIVATE int sqlite3VdbeAddOpList(Vdbe *p, int nOp, VdbeOpList const *aOp){sqlite3VdbeAddOpList48715,1747431
SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, int addr, int val){sqlite3VdbeChangeP148757,1748568
SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, int addr, int val){sqlite3VdbeChangeP248769,1748861
SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, int addr, int val){sqlite3VdbeChangeP348780,1749096
SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u8 val){sqlite3VdbeChangeP548792,1749345
SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe *p, int addr){sqlite3VdbeJumpHere48804,1749623
static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){freeEphemeralFunction48813,1749848
static void freeP4(sqlite3 *db, int p4type, void *p4){freeP448822,1750050
static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){vdbeFreeOpArray48867,1751161
SQLITE_PRIVATE void sqlite3VdbeProgramDelete(sqlite3 *db, SubProgram *p, int freeop){sqlite3VdbeProgramDelete48893,1752053
SQLITE_PRIVATE void sqlite3VdbeChangeToNoop(Vdbe *p, int addr, int N){sqlite3VdbeChangeToNoop48913,1752446
SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){sqlite3VdbeChangeP448951,1753972
SQLITE_PRIVATE void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){sqlite3VdbeComment49025,1756134
SQLITE_PRIVATE void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){sqlite3VdbeNoopComment49038,1756542
SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){sqlite3VdbeGetOp49072,1758022
static char *displayP4(Op *pOp, char *zTemp, int nTemp){displayP449095,1758643
SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe *p, int i){sqlite3VdbeUsesBtree49197,1761323
SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){sqlite3VdbePrintOp49213,1761769
static void releaseMemArray(Mem *p, int N){releaseMemArray49234,1762283
SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){sqlite3VdbeFrameDelete49271,1763648
SQLITE_PRIVATE int sqlite3VdbeList(sqlite3VdbeList49298,1764584
SQLITE_PRIVATE void sqlite3VdbePrintSql(Vdbe *p){sqlite3VdbePrintSql49486,1770673
SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(Vdbe *p){sqlite3VdbeIOTraceSql49503,1771080
static void *allocSpace(allocSpace49550,1772646
SQLITE_PRIVATE void sqlite3VdbeMakeReady(sqlite3VdbeMakeReady49586,1774085
SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){sqlite3VdbeFreeCursor49710,1778364
SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){sqlite3VdbeFrameRestore49737,1779133
static void closeAllCursors(Vdbe *p){closeAllCursors49758,1779740
static void Cleanup(Vdbe *p){Cleanup49789,1780448
SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){sqlite3VdbeSetNumCols49811,1781159
SQLITE_PRIVATE int sqlite3VdbeSetColName(sqlite3VdbeSetColName49839,1782069
static int vdbeCommit(sqlite3 *db, Vdbe *p){vdbeCommit49867,1783151
static void checkActiveVdbeCnt(sqlite3 *db){checkActiveVdbeCnt50093,1790712
#define checkActiveVdbeCnt(checkActiveVdbeCnt50109,1791040
static void invalidateCursorsOnModifiedBtrees(sqlite3 *db){invalidateCursorsOnModifiedBtrees50128,1791786
SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){sqlite3VdbeCloseStatement50148,1792444
SQLITE_PRIVATE void sqlite3VdbeMutexArrayEnter(Vdbe *p){sqlite3VdbeMutexArrayEnter50211,1794804
SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *p, int deferred){sqlite3VdbeCheckFk50231,1795486
SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe *p){sqlite3VdbeHalt50256,1796438
SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe *p){sqlite3VdbeResetStepResult50443,1802735
SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe *p){sqlite3VdbeReset50458,1803202
SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe *p){sqlite3VdbeFinalize50534,1805456
SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(VdbeFunc *pVdbeFunc, int mask){sqlite3VdbeDeleteAuxData50550,1805943
SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe *p){sqlite3VdbeDelete50566,1806308
SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor *p){sqlite3VdbeCursorMoveto50605,1807517
SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem *pMem, int file_format){sqlite3VdbeSerialType50682,1810213
#   define MAX_6BYTE MAX_6BYTE50691,1810444
SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32 serial_type){sqlite3VdbeSerialTypeLen50720,1811112
static u64 floatSwap(u64 in){floatSwap50764,1813061
# define swapMixedEndianFloat(swapMixedEndianFloat50777,1813218
# define swapMixedEndianFloat(swapMixedEndianFloat50779,1813275
SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, int nBuf, Mem *pMem, int file_format){sqlite3VdbeSerialPut50800,1814185
SQLITE_PRIVATE u32 sqlite3VdbeSerialGet(sqlite3VdbeSerialGet50850,1815456
SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeRecordUnpack(sqlite3VdbeRecordUnpack50957,1818811
SQLITE_PRIVATE void sqlite3VdbeDeleteUnpackedRecord(UnpackedRecord *p){sqlite3VdbeDeleteUnpackedRecord51018,1820851
SQLITE_PRIVATE int sqlite3VdbeRecordCompare(sqlite3VdbeRecordCompare51063,1822819
SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){sqlite3VdbeIdxRowid51172,1826798
SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare(sqlite3VdbeIdxKeyCompare51252,1829649
SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){sqlite3VdbeSetChanges51286,1830811
SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe *v){sqlite3VdbeCountChanges51296,1831077
SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3 *db){sqlite3ExpirePreparedStatements51310,1831575
SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe *v){sqlite3VdbeDb51320,1831771
SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetValue(Vdbe *v, int iVar, u8 aff){sqlite3VdbeGetValue51332,1832197
SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){sqlite3VdbeSetVarmask51354,1832829
SQLITE_API int sqlite3_expired(sqlite3_stmt *pStmt){sqlite3_expired51390,1834041
static int vdbeSafety(Vdbe *p){vdbeSafety51401,1834339
static int vdbeSafetyNotNull(Vdbe *p){vdbeSafetyNotNull51409,1834512
SQLITE_API int sqlite3_finalize(sqlite3_stmt *pStmt){sqlite3_finalize51427,1835054
SQLITE_API int sqlite3_reset(sqlite3_stmt *pStmt){sqlite3_reset51457,1835840
SQLITE_API int sqlite3_clear_bindings(sqlite3_stmt *pStmt){sqlite3_clear_bindings51476,1836302
SQLITE_API const void *sqlite3_value_blob(sqlite3_value *pVal){sqlite3_value_blob51500,1836913
SQLITE_API int sqlite3_value_bytes(sqlite3_value *pVal){sqlite3_value_bytes51511,1837193
SQLITE_API int sqlite3_value_bytes16(sqlite3_value *pVal){sqlite3_value_bytes1651514,1837299
SQLITE_API double sqlite3_value_double(sqlite3_value *pVal){sqlite3_value_double51517,1837414
SQLITE_API int sqlite3_value_int(sqlite3_value *pVal){sqlite3_value_int51520,1837520
SQLITE_API sqlite_int64 sqlite3_value_int64(sqlite3_value *pVal){sqlite3_value_int6451523,1837624
SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value *pVal){sqlite3_value_text51526,1837734
SQLITE_API const void *sqlite3_value_text16(sqlite3_value* pVal){sqlite3_value_text1651530,1837904
SQLITE_API const void *sqlite3_value_text16be(sqlite3_value *pVal){sqlite3_value_text16be51533,1838025
SQLITE_API const void *sqlite3_value_text16le(sqlite3_value *pVal){sqlite3_value_text16le51536,1838144
SQLITE_API int sqlite3_value_type(sqlite3_value* pVal){sqlite3_value_type51540,1838294
static void setResultStrOrError(setResultStrOrError51552,1838746
SQLITE_API void sqlite3_result_blob(sqlite3_result_blob51563,1839168
SQLITE_API void sqlite3_result_double(sqlite3_context *pCtx, double rVal){sqlite3_result_double51573,1839400
SQLITE_API void sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){sqlite3_result_error51577,1839571
SQLITE_API void sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){sqlite3_result_error1651583,1839836
SQLITE_API void sqlite3_result_int(sqlite3_context *pCtx, int iVal){sqlite3_result_int51589,1840091
SQLITE_API void sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){sqlite3_result_int6451593,1840260
SQLITE_API void sqlite3_result_null(sqlite3_context *pCtx){sqlite3_result_null51597,1840426
SQLITE_API void sqlite3_result_text(sqlite3_result_text51601,1840574
SQLITE_API void sqlite3_result_text16(sqlite3_result_text1651611,1840823
SQLITE_API void sqlite3_result_text16be(sqlite3_result_text16be51620,1841056
SQLITE_API void sqlite3_result_text16le(sqlite3_result_text16le51629,1841287
SQLITE_API void sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){sqlite3_result_value51639,1841549
SQLITE_API void sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){sqlite3_result_zeroblob51643,1841726
SQLITE_API void sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){sqlite3_result_error_code51647,1841892
SQLITE_API void sqlite3_result_error_toobig(sqlite3_context *pCtx){sqlite3_result_error_toobig51656,1842193
SQLITE_API void sqlite3_result_error_nomem(sqlite3_context *pCtx){sqlite3_result_error_nomem51664,1842493
static int sqlite3Step(Vdbe *p){sqlite3Step51680,1843095
SQLITE_API int sqlite3_step(sqlite3_stmt *pStmt){sqlite3_step51780,1846049
SQLITE_API void *sqlite3_user_data(sqlite3_context *p){sqlite3_user_data51826,1847701
SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context *p){sqlite3_context_db_handle51835,1847912
SQLITE_PRIVATE void sqlite3InvalidFunction(sqlite3InvalidFunction51848,1848418
SQLITE_API void *sqlite3_aggregate_context(sqlite3_context *p, int nByte){sqlite3_aggregate_context51867,1849119
SQLITE_API void *sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){sqlite3_get_auxdata51894,1849822
SQLITE_API void sqlite3_set_auxdata(sqlite3_set_auxdata51910,1850330
SQLITE_API int sqlite3_aggregate_count(sqlite3_context *p){sqlite3_aggregate_count51959,1851657
SQLITE_API int sqlite3_column_count(sqlite3_stmt *pStmt){sqlite3_column_count51968,1851886
SQLITE_API int sqlite3_data_count(sqlite3_stmt *pStmt){sqlite3_data_count51977,1852127
static Mem *columnMem(sqlite3_stmt *pStmt, int i){columnMem51990,1852512
static void columnMallocFailure(sqlite3_stmt *pStmt)columnMallocFailure52046,1854649
SQLITE_API const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int i){sqlite3_column_blob52064,1855268
SQLITE_API int sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){sqlite3_column_bytes52074,1855612
SQLITE_API int sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){sqlite3_column_bytes1652079,1855778
SQLITE_API double sqlite3_column_double(sqlite3_stmt *pStmt, int i){sqlite3_column_double52084,1855948
SQLITE_API int sqlite3_column_int(sqlite3_stmt *pStmt, int i){sqlite3_column_int52089,1856122
SQLITE_API sqlite_int64 sqlite3_column_int64(sqlite3_stmt *pStmt, int i){sqlite3_column_int6452094,1856284
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int i){sqlite3_column_text52099,1856468
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_stmt *pStmt, int i){sqlite3_column_value52104,1856666
SQLITE_API const void *sqlite3_column_text16(sqlite3_stmt *pStmt, int i){sqlite3_column_text1652114,1856965
SQLITE_API int sqlite3_column_type(sqlite3_stmt *pStmt, int i){sqlite3_column_type52120,1857180
static const void *columnName(columnName52149,1858279
SQLITE_API const char *sqlite3_column_name(sqlite3_stmt *pStmt, int N){sqlite3_column_name52183,1859046
SQLITE_API const void *sqlite3_column_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_name1652188,1859240
SQLITE_API const char *sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){sqlite3_column_decltype52208,1859855
SQLITE_API const void *sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){sqlite3_column_decltype1652213,1860057
SQLITE_API const char *sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){sqlite3_column_database_name52226,1860566
SQLITE_API const void *sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_database_name1652231,1860773
SQLITE_API const char *sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){sqlite3_column_table_name52242,1861213
SQLITE_API const void *sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_table_name1652247,1861414
SQLITE_API const char *sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){sqlite3_column_origin_name52258,1861855
SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){sqlite3_column_origin_name1652263,1862058
static int vdbeUnbind(Vdbe *p, int i){vdbeUnbind52286,1862922
static int bindText(bindText52324,1863934
SQLITE_API int sqlite3_bind_blob(sqlite3_bind_blob52356,1864838
SQLITE_API int sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){sqlite3_bind_double52365,1865021
SQLITE_API int sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){sqlite3_bind_int52375,1865295
SQLITE_API int sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){sqlite3_bind_int6452378,1865414
SQLITE_API int sqlite3_bind_null(sqlite3_stmt *pStmt, int i){sqlite3_bind_null52388,1865692
SQLITE_API int sqlite3_bind_text( sqlite3_bind_text52397,1865896
SQLITE_API int sqlite3_bind_text16(sqlite3_bind_text1652407,1866116
SQLITE_API int sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){sqlite3_bind_value52417,1866349
SQLITE_API int sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){sqlite3_bind_zeroblob52448,1867170
SQLITE_API int sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){sqlite3_bind_parameter_count52463,1867561
static void createVarMap(Vdbe *p){createVarMap52473,1867823
SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){sqlite3_bind_parameter_name52500,1868619
SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){sqlite3VdbeParameterIndex52514,1868976
SQLITE_API int sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){sqlite3_bind_parameter_index52530,1869312
SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){sqlite3TransferBindings52537,1869557
SQLITE_API int sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){sqlite3_transfer_bindings52564,1870480
SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_stmt *pStmt){sqlite3_db_handle52586,1871163
SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){sqlite3_next_stmt52596,1871505
SQLITE_API int sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){sqlite3_stmt_status52611,1871887
static int findNextHostParameter(const char *zSql, int *pnToken){findNextHostParameter52644,1873056
SQLITE_PRIVATE char *sqlite3VdbeExpandSql(sqlite3VdbeExpandSql52679,1874193
SQLITE_API int sqlite3_search_count = 0;sqlite3_search_count52817,1879631
SQLITE_API int sqlite3_interrupt_count = 0;sqlite3_interrupt_count52829,1880032
SQLITE_API int sqlite3_sort_count = 0;sqlite3_sort_count52840,1880422
SQLITE_API int sqlite3_max_blobsize = 0;sqlite3_max_blobsize52851,1880829
static void updateMaxBlobsize(Mem *p){updateMaxBlobsize52852,1880870
SQLITE_API int sqlite3_found_count = 0;sqlite3_found_count52867,1881350
# define UPDATE_MAX_BLOBSIZE(UPDATE_MAX_BLOBSIZE52875,1881587
# define UPDATE_MAX_BLOBSIZE(UPDATE_MAX_BLOBSIZE52877,1881647
#define Stringify(Stringify52884,1881802
#define Deephemeralize(Deephemeralize52899,1882436
#define ExpandBlob(ExpandBlob52907,1882651
SQLITE_PRIVATE void sqlite3VdbeMemStoreType(Mem *pMem){sqlite3VdbeMemStoreType52915,1882961
static VdbeCursor *allocateCursor(allocateCursor52937,1883451
static void applyNumericAffinity(Mem *pRec){applyNumericAffinity52999,1885786
static void applyAffinity(applyAffinity53048,1887186
SQLITE_API int sqlite3_value_numeric_type(sqlite3_value *pVal){sqlite3_value_numeric_type53080,1888390
SQLITE_PRIVATE void sqlite3ValueApplyAffinity(sqlite3ValueApplyAffinity53091,1888679
SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){sqlite3VdbeMemPrettyPrint53104,1888953
static void memTracePrint(FILE *out, Mem *p){memTracePrint53186,1891085
static void registerTrace(FILE *out, int iReg, Mem *p){registerTrace53206,1891667
#  define REGISTER_TRACE(REGISTER_TRACE53214,1891836
#  define REGISTER_TRACE(REGISTER_TRACE53216,1891912
#define _HWTIME_H__HWTIME_H_53244,1892740
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime53257,1893132
  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){__declspec53265,1893340
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime53276,1893555
  __inline__ sqlite_uint64 sqlite3Hwtime(void){sqlite3Hwtime53284,1893750
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }sqlite3Hwtime53308,1894492
#define CHECK_FOR_INTERRUPT CHECK_FOR_INTERRUPT53329,1895260
static int fileExists(sqlite3 *db, const char *zFile){fileExists53333,1895370
static int checkSavepointCount(sqlite3 *db){checkSavepointCount53360,1896222
SQLITE_PRIVATE int sqlite3VdbeExec(sqlite3VdbeExec53400,1897698
#   define MAX_ROWID MAX_ROWID56988,2022681
typedef struct Incrblob Incrblob;Incrblob59182,2094774
struct Incrblob {Incrblob59183,2094808
  int flags;              /* Copy of "flags" passed to sqlite3_blob_open() */flags59184,2094826
  int nByte;              /* Size of open blob, in bytes */nByte59185,2094904
  int iOffset;            /* Byte offset of blob in cursor data */iOffset59186,2094964
  BtCursor *pCsr;         /* Cursor pointing at blob row */pCsr59187,2095031
  sqlite3_stmt *pStmt;    /* Statement holding cursor open */pStmt59188,2095091
  sqlite3 *db;            /* The associated database */db59189,2095153
SQLITE_API int sqlite3_blob_open(sqlite3_blob_open59195,2095242
SQLITE_API int sqlite3_blob_close(sqlite3_blob *pBlob){sqlite3_blob_close59447,2103791
static int blobReadWrite(blobReadWrite59467,2104172
SQLITE_API int sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){sqlite3_blob_read59517,2105394
SQLITE_API int sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){sqlite3_blob_write59524,2105583
SQLITE_API int sqlite3_blob_bytes(sqlite3_blob *pBlob){sqlite3_blob_bytes59534,2105919
struct JournalFile {JournalFile59576,2107394
  sqlite3_io_methods *pMethod;    /* I/O methods on journal files */pMethod59577,2107415
  int nBuf;                       /* Size of zBuf[] in bytes */nBuf59578,2107484
  char *zBuf;                     /* Space to buffer journal writes */zBuf59579,2107548
  int iSize;                      /* Amount of zBuf[] currently used */iSize59580,2107619
  int flags;                      /* xOpen flags */flags59581,2107691
  sqlite3_vfs *pVfs;              /* The "real" underlying VFS */pVfs59582,2107743
  sqlite3_file *pReal;            /* The "real" underlying file descriptor */pReal59583,2107809
  const char *zJournal;           /* Name of the journal file */zJournal59584,2107887
typedef struct JournalFile JournalFile;JournalFile59586,2107955
static int createFile(JournalFile *p){createFile59592,2108096
static int jrnlClose(sqlite3_file *pJfd){jrnlClose59611,2108519
static int jrnlRead(jrnlRead59623,2108735
static int jrnlWrite(jrnlWrite59644,2109300
static int jrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){jrnlTruncate59671,2110004
static int jrnlSync(sqlite3_file *pJfd, int flags){jrnlSync59685,2110286
static int jrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){jrnlFileSize59699,2110542
static struct sqlite3_io_methods JournalFileMethods = {JournalFileMethods59713,2110863
SQLITE_PRIVATE int sqlite3JournalOpen(sqlite3JournalOpen59732,2111389
SQLITE_PRIVATE int sqlite3JournalCreate(sqlite3_file *p){sqlite3JournalCreate59761,2112277
SQLITE_PRIVATE int sqlite3JournalSize(sqlite3_vfs *pVfs){sqlite3JournalSize59772,2112576
typedef struct MemJournal MemJournal;MemJournal59797,2113496
typedef struct FilePoint FilePoint;FilePoint59798,2113534
typedef struct FileChunk FileChunk;FileChunk59799,2113570
#define JOURNAL_CHUNKSIZE JOURNAL_CHUNKSIZE59809,2113933
# define MIN(MIN59814,2114060
struct FileChunk {FileChunk59820,2114184
  FileChunk *pNext;               /* Next chunk in the journal */pNext59821,2114203
  u8 zChunk[JOURNAL_CHUNKSIZE];   /* Content of this chunk */zChunk59822,2114269
struct FilePoint {FilePoint59829,2114469
  sqlite3_int64 iOffset;          /* Offset from the beginning of the file */iOffset59830,2114488
  FileChunk *pChunk;              /* Specific chunk into which cursor points */pChunk59831,2114566
struct MemJournal {MemJournal59838,2114763
  sqlite3_io_methods *pMethod;    /* Parent class. MUST BE FIRST */pMethod59839,2114783
  FileChunk *pFirst;              /* Head of in-memory chunk-list */pFirst59840,2114851
  FilePoint endpoint;             /* Pointer to the end of the file */endpoint59841,2114920
  FilePoint readpoint;            /* Pointer to the end of the last xRead() */readpoint59842,2114991
static int memjrnlRead(memjrnlRead59849,2115190
static int memjrnlWrite(memjrnlWrite59894,2116455
static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){memjrnlTruncate59944,2117850
static int memjrnlClose(sqlite3_file *pJfd){memjrnlClose59962,2118227
static int memjrnlSync(sqlite3_file *NotUsed, int NotUsed2){   /*NO_TEST*/memjrnlSync59976,2118621
static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){memjrnlFileSize59985,2119043
static struct sqlite3_io_methods MemJournalMethods = {MemJournalMethods59994,2119282
SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *pJfd){sqlite3MemJournalOpen60013,2119846
SQLITE_PRIVATE int sqlite3IsMemJournal(sqlite3_file *pJfd){sqlite3IsMemJournal60024,2120154
SQLITE_PRIVATE int sqlite3MemJournalSize(void){sqlite3MemJournalSize60032,2120392
SQLITE_PRIVATE int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){sqlite3WalkExpr60073,2121842
SQLITE_PRIVATE int sqlite3WalkExprList(Walker *pWalker, ExprList *p){sqlite3WalkExprList60096,2122671
SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){sqlite3WalkSelectExpr60113,2123192
SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){sqlite3WalkSelectFrom60131,2124026
SQLITE_PRIVATE int sqlite3WalkSelect(Walker *pWalker, Select *p){sqlite3WalkSelect60158,2124778
static void resolveAlias(resolveAlias60218,2127036
static int lookupName(lookupName60298,2130351
SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){sqlite3CreateColumnExpr60578,2139957
static int resolveExprStep(Walker *pWalker, Expr *pExpr){resolveExprStep60606,2140844
static int resolveAsName(resolveAsName60790,2146944
static int resolveOrderByTermToExprList(resolveOrderByTermToExprList60829,2148226
static void resolveOutOfRangeError(resolveOutOfRangeError60876,2149612
static int resolveCompoundOrderBy(resolveCompoundOrderBy60902,2150726
SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy(sqlite3ResolveOrderGroupBy60992,2153379
static int resolveOrderGroupBy(resolveOrderGroupBy61042,2155355
static int resolveSelectStep(Walker *pWalker, Select *p){resolveSelectStep61092,2157285
SQLITE_PRIVATE int sqlite3ResolveExprNames( sqlite3ResolveExprNames61307,2164816
SQLITE_PRIVATE void sqlite3ResolveSelectNames(sqlite3ResolveSelectNames61358,2166215
SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr){sqlite3ExprAffinity61406,2167848
SQLITE_PRIVATE Expr *sqlite3ExprSetColl(Parse *pParse, Expr *pExpr, Token *pCollName){sqlite3ExprSetColl61438,2168968
SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){sqlite3ExprCollSeq61458,2169557
SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2){sqlite3CompareAffinity61497,2170649
static char comparisonAffinity(Expr *pExpr){comparisonAffinity61524,2171513
SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){sqlite3IndexAffinityOk61547,2172358
static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){binaryCompareP561563,2172813
SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq(sqlite3BinaryCompareCollSeq61581,2173479
static int codeCompare(codeCompare61606,2174027
SQLITE_PRIVATE int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){sqlite3ExprCheckHeight61633,2174932
static void heightOfExpr(Expr *p, int *pnHeight){heightOfExpr61654,2175633
static void heightOfExprList(ExprList *p, int *pnHeight){heightOfExprList61661,2175768
static void heightOfSelect(Select *p, int *pnHeight){heightOfSelect61669,2175936
static void exprSetHeight(Expr *p){exprSetHeight61689,2176620
SQLITE_PRIVATE void sqlite3ExprSetHeight(Parse *pParse, Expr *p){sqlite3ExprSetHeight61706,2177097
SQLITE_PRIVATE int sqlite3SelectExprHeight(Select *p){sqlite3SelectExprHeight61715,2177351
  #define exprSetHeight(exprSetHeight61721,2177482
SQLITE_PRIVATE Expr *sqlite3ExprAlloc(sqlite3ExprAlloc61744,2178559
SQLITE_PRIVATE Expr *sqlite3Expr(sqlite3Expr61791,2179840
SQLITE_PRIVATE void sqlite3ExprAttachSubtrees(sqlite3ExprAttachSubtrees61808,2180385
SQLITE_PRIVATE Expr *sqlite3PExpr(sqlite3PExpr61844,2181269
SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){sqlite3ExprAnd61860,2181800
SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){sqlite3ExprFunction61876,2182183
SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr){sqlite3ExprAssignVarNumber61907,2183276
SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3 *db, Expr *p){sqlite3ExprDelete61977,2185577
static int exprStructSize(Expr *p){exprStructSize62001,2186322
static int dupedExprStructSize(Expr *p, int flags){dupedExprStructSize62041,2188181
static int dupedExprNodeSize(Expr *p, int flags){dupedExprNodeSize62065,2188975
static int dupedExprSize(Expr *p, int flags){dupedExprSize62086,2189813
static Expr *exprDup(sqlite3 *db, Expr *p, int flags, u8 **pzBuffer){exprDup62105,2190498
SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){sqlite3ExprDup62206,2194141
SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){sqlite3ExprListDup62209,2194248
SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){sqlite3SrcListDup62245,2195473
SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){sqlite3IdListDup62278,2196760
SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){sqlite3SelectDup62298,2197349
SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){sqlite3SelectDup62323,2198306
SQLITE_PRIVATE ExprList *sqlite3ExprListAppend(sqlite3ExprListAppend62338,2198741
SQLITE_PRIVATE void sqlite3ExprListSetName(sqlite3ExprListSetName62384,2200047
SQLITE_PRIVATE void sqlite3ExprListSetSpan(sqlite3ExprListSetSpan62409,2200930
SQLITE_PRIVATE void sqlite3ExprListCheckLength(sqlite3ExprListCheckLength62430,2201673
SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){sqlite3ExprListDelete62446,2202073
static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){exprNodeIsConstant62474,2202965
static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){selectNodeIsConstant62506,2204047
static int exprIsConst(Expr *p, int initFlag){exprIsConst62511,2204185
SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr *p){sqlite3ExprIsConstant62528,2204681
SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr *p){sqlite3ExprIsConstantNotJoin62538,2204998
SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr *p){sqlite3ExprIsConstantOrFunction62551,2205414
SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr *p, int *pValue){sqlite3ExprIsInteger62561,2205802
SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr *p){sqlite3ExprCanBeNull62611,2207197
SQLITE_PRIVATE void sqlite3ExprCodeIsNullJump(sqlite3ExprCodeIsNullJump62634,2207839
SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){sqlite3ExprNeedsNoAffinityChange62655,2208611
SQLITE_PRIVATE int sqlite3IsRowid(const char *z){sqlite3IsRowid62688,2209463
static int isCandidateForInOpt(Select *p){isCandidateForInOpt62708,2210009
SQLITE_PRIVATE int sqlite3FindInIndex(Parse *pParse, Expr *pX, int *prNotFound){sqlite3FindInIndex62793,2214040
SQLITE_PRIVATE int sqlite3CodeSubselect(sqlite3CodeSubselect62930,2219674
static void sqlite3ExprCodeIN(sqlite3ExprCodeIN63139,2227717
static char *dup8bytes(Vdbe *v, const char *in){dup8bytes63246,2231867
static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){codeReal63263,2232358
static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){codeInteger63285,2233020
static void cacheEntryClear(Parse *pParse, struct yColCache *p){cacheEntryClear63314,2233794
SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){sqlite3ExprCacheStore63328,2234147
SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){sqlite3ExprCacheRemove63401,2236236
SQLITE_PRIVATE void sqlite3ExprCachePush(Parse *pParse){sqlite3ExprCachePush63419,2236730
SQLITE_PRIVATE void sqlite3ExprCachePop(Parse *pParse, int N){sqlite3ExprCachePop63428,2237001
static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){sqlite3ExprCachePinRegister63448,2237585
SQLITE_PRIVATE int sqlite3ExprCodeGetColumn(sqlite3ExprCodeGetColumn63467,2238222
SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse *pParse){sqlite3ExprCacheClear63500,2239260
SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){sqlite3ExprCacheAffinityChange63516,2239607
SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){sqlite3ExprCodeMove63524,2239888
SQLITE_PRIVATE void sqlite3ExprCodeCopy(Parse *pParse, int iFrom, int iTo, int nReg){sqlite3ExprCodeCopy63541,2240368
static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){usedAsColumnCache63557,2240876
SQLITE_PRIVATE void sqlite3ExprHardCopy(Parse *pParse, int iReg, int nReg){sqlite3ExprHardCopy63573,2241374
static int codeAlias(Parse *pParse, int iAlias, Expr *pExpr, int target){codeAlias63604,2242466
SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCodeTarget63646,2243937
SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){sqlite3ExprCodeTemp64262,2265938
SQLITE_PRIVATE int sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCode64279,2266388
SQLITE_PRIVATE int sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){sqlite3ExprCodeAndCache64303,2267208
static int isAppropriateForFactoring(Expr *p){isAppropriateForFactoring64342,2268755
static int evalConstExpr(Walker *pWalker, Expr *pExpr){evalConstExpr64390,2270118
SQLITE_PRIVATE void sqlite3ExprCodeConstants(Parse *pParse, Expr *pExpr){sqlite3ExprCodeConstants64434,2271415
SQLITE_PRIVATE int sqlite3ExprCodeExprList(sqlite3ExprCodeExprList64449,2271807
static void exprCodeBetween(exprCodeBetween64489,2272866
SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){sqlite3ExprIfTrue64547,2275290
SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){sqlite3ExprIfFalse64665,2279111
SQLITE_PRIVATE int sqlite3ExprCompare(Expr *pA, Expr *pB){sqlite3ExprCompare64815,2284337
static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){addAggInfoColumn64862,2285981
static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){addAggInfoFunc64880,2286388
static int analyzeAggregate(Walker *pWalker, Expr *pExpr){analyzeAggregate64899,2286829
static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){analyzeAggregatesInSelect65022,2291504
SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){sqlite3ExprAnalyzeAggregates65042,2292103
SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){sqlite3ExprAnalyzeAggList65057,2292540
SQLITE_PRIVATE int sqlite3GetTempReg(Parse *pParse){sqlite3GetTempReg65070,2292887
SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse *pParse, int iReg){sqlite3ReleaseTempReg65085,2293306
SQLITE_PRIVATE int sqlite3GetTempRange(Parse *pParse, int nReg){sqlite3GetTempRange65102,2293745
SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){sqlite3ReleaseTempRange65116,2294080
static void renameTableFunc(renameTableFunc65161,2295635
static void renameParentFunc(renameParentFunc65226,2297694
static void renameTriggerFunc(renameTriggerFunc65281,2299542
SQLITE_PRIVATE void sqlite3AlterFunctions(sqlite3 *db){sqlite3AlterFunctions65353,2301776
static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){whereOrName65382,2302944
static char *whereForeignKeys(Parse *pParse, Table *pTab){whereForeignKeys65400,2303538
static char *whereTempTriggers(Parse *pParse, Table *pTab){whereTempTriggers65416,2304040
static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){reloadTableSchema65445,2305155
SQLITE_PRIVATE void sqlite3AlterRenameTable(sqlite3AlterRenameTable65490,2306682
SQLITE_PRIVATE void sqlite3MinimumFileFormat(Parse *pParse, int iDb, int minFormat){sqlite3MinimumFileFormat65690,2313408
SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){sqlite3AlterFinishAddColumn65719,2314457
SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){sqlite3AlterBeginAddColumn65840,2318599
static void openStatTable(openStatTable65952,2322567
static void analyzeOneTable(analyzeOneTable66022,2324892
static void loadAnalysis(Parse *pParse, int iDb){loadAnalysis66247,2334568
static void analyzeDatabase(Parse *pParse, int iDb){analyzeDatabase66257,2334790
static void analyzeTable(Parse *pParse, Table *pTab){analyzeTable66280,2335436
SQLITE_PRIVATE void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){sqlite3Analyze66307,2336357
typedef struct analysisInfo analysisInfo;analysisInfo66365,2337929
struct analysisInfo {analysisInfo66366,2337971
  sqlite3 *db;db66367,2337993
  const char *zDatabase;zDatabase66368,2338008
static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){analysisLoader66378,2338237
SQLITE_PRIVATE void sqlite3DeleteIndexSamples(Index *pIdx){sqlite3DeleteIndexSamples66412,2338973
SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){sqlite3AnalysisLoad66451,2340359
static int resolveAttachExpr(NameContext *pName, Expr *pExpr)resolveAttachExpr66601,2345086
static void attachFunc(attachFunc66629,2345844
static void detachFunc(detachFunc66802,2351042
static void codeAttach(codeAttach66854,2352389
SQLITE_PRIVATE void sqlite3Detach(Parse *pParse, Expr *pDbname){sqlite3Detach66926,2354526
SQLITE_PRIVATE void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){sqlite3Attach66947,2355158
SQLITE_PRIVATE int sqlite3FixInit(sqlite3FixInit66971,2356040
SQLITE_PRIVATE int sqlite3FixSrcList(sqlite3FixSrcList67004,2357362
SQLITE_PRIVATE int sqlite3FixSelect(sqlite3FixSelect67031,2358278
SQLITE_PRIVATE int sqlite3FixExpr(sqlite3FixExpr67052,2358808
SQLITE_PRIVATE int sqlite3FixExprList(sqlite3FixExprList67070,2359346
SQLITE_PRIVATE int sqlite3FixTriggerStep(sqlite3FixTriggerStep67087,2359756
SQLITE_API int sqlite3_set_authorizer(sqlite3_set_authorizer67177,2362870
static void sqliteAuthBadReturnCode(Parse *pParse){sqliteAuthBadReturnCode67194,2363332
SQLITE_PRIVATE int sqlite3AuthReadCol(sqlite3AuthReadCol67208,2363927
SQLITE_PRIVATE void sqlite3AuthRead(sqlite3AuthRead67241,2365216
SQLITE_PRIVATE int sqlite3AuthCheck(sqlite3AuthCheck67298,2367064
SQLITE_PRIVATE void sqlite3AuthContextPush(sqlite3AuthContextPush67334,2368009
SQLITE_PRIVATE void sqlite3AuthContextPop(AuthContext *pContext){sqlite3AuthContextPop67349,2368352
SQLITE_PRIVATE void sqlite3BeginParse(Parse *pParse, int explainFlag){sqlite3BeginParse67389,2369588
struct TableLock {TableLock67399,2369859
  int iDb;             /* The database containing the table to be locked */iDb67400,2369878
  int iTab;            /* The root page of the table to be locked */iTab67401,2369954
  u8 isWriteLock;      /* True for write lock.  False for a read lock */isWriteLock67402,2370023
  const char *zName;   /* Name of the table */zName67403,2370096
SQLITE_PRIVATE void sqlite3TableLock(sqlite3TableLock67416,2370557
static void codeTableLocks(Parse *pParse){codeTableLocks67456,2371760
  #define codeTableLocks(codeTableLocks67471,2372174
SQLITE_PRIVATE void sqlite3FinishCoding(Parse *pParse){sqlite3FinishCoding67484,2372571
SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){sqlite3NestedParse67586,2376114
# define SAVE_SZ SAVE_SZ67591,2376272
SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){sqlite3FindTable67624,2377396
SQLITE_PRIVATE Table *sqlite3LocateTable(sqlite3LocateTable67649,2378302
SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){sqlite3FindIndex67688,2379623
static void freeIndex(Index *p){freeIndex67706,2380144
static void sqlite3DeleteIndex(Index *p){sqlite3DeleteIndex67723,2380613
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){sqlite3UnlinkAndDeleteIndex67739,2381088
SQLITE_PRIVATE void sqlite3ResetInternalSchema(sqlite3 *db, int iDb){sqlite3ResetInternalSchema67775,2382287
SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3 *db){sqlite3CommitInternalChanges67825,2383640
static void sqliteResetColumnNames(Table *pTable){sqliteResetColumnNames67832,2383798
SQLITE_PRIVATE void sqlite3DeleteTable(Table *pTable){sqlite3DeleteTable67861,2384661
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){sqlite3UnlinkAndDeleteTable67904,2385754
SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3 *db, Token *pName){sqlite3NameFromToken67932,2386723
SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *p, int iDb){sqlite3OpenMasterTable67947,2387078
SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *db, const char *zName){sqlite3FindDbName67963,2387668
SQLITE_PRIVATE int sqlite3FindDb(sqlite3 *db, Token *pName){sqlite3FindDb67984,2388305
SQLITE_PRIVATE int sqlite3TwoPartName(sqlite3TwoPartName68009,2389187
SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *pParse, const char *zName){sqlite3CheckObjectName68046,2390380
SQLITE_PRIVATE void sqlite3StartTable(sqlite3StartTable68072,2391620
#define STRICMP(STRICMP68276,2398695
SQLITE_PRIVATE void sqlite3AddColumn(Parse *pParse, Token *pName){sqlite3AddColumn68289,2399136
SQLITE_PRIVATE void sqlite3AddNotNull(Parse *pParse, int onError){sqlite3AddNotNull68338,2400523
SQLITE_PRIVATE char sqlite3AffinityType(const char *zIn){sqlite3AffinityType68370,2401627
SQLITE_PRIVATE void sqlite3AddColumnType(Parse *pParse, Token *pType){sqlite3AddColumnType68415,2403307
SQLITE_PRIVATE void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){sqlite3AddDefaultValue68437,2403971
SQLITE_PRIVATE void sqlite3AddPrimaryKey(sqlite3AddPrimaryKey68480,2405698
SQLITE_PRIVATE void sqlite3AddCheckConstraint(sqlite3AddCheckConstraint68544,2407574
SQLITE_PRIVATE void sqlite3AddCollateType(Parse *pParse, Token *pToken){sqlite3AddCollateType68564,2408068
SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){sqlite3LocateCollSeq68615,2409780
SQLITE_PRIVATE void sqlite3ChangeCookie(Parse *pParse, int iDb){sqlite3ChangeCookie68649,2410957
static int identLength(const char *z){identLength68666,2411565
static void identPut(char *z, int *pIdx, char *zSignedIdent){identPut68687,2412354
static char *createTableStmt(sqlite3 *db, Table *p){createTableStmt68715,2413122
SQLITE_PRIVATE void sqlite3EndTable(sqlite3EndTable68799,2415870
SQLITE_PRIVATE void sqlite3CreateView(sqlite3CreateView69005,2422004
SQLITE_PRIVATE int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){sqlite3ViewGetColumnNames69085,2424627
static void sqliteViewResetAll(sqlite3 *db, int idx){sqliteViewResetAll69179,2427769
# define sqliteViewResetAll(sqliteViewResetAll69191,2428137
SQLITE_PRIVATE void sqlite3RootPageMoved(Db *pDb, int iFrom, int iTo){sqlite3RootPageMoved69212,2429113
static void destroyRootPage(Parse *pParse, int iTable, int iDb){destroyRootPage69239,2429941
static void destroyTable(Parse *pParse, Table *pTab){destroyTable69267,2431123
SQLITE_PRIVATE void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){sqlite3DropTable69324,2432859
SQLITE_PRIVATE void sqlite3CreateForeignKey(sqlite3CreateForeignKey69501,2438559
SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){sqlite3DeferForeignKey69621,2441927
static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){sqlite3RefillIndex69642,2442789
SQLITE_PRIVATE Index *sqlite3CreateIndex(sqlite3CreateIndex69726,2446602
SQLITE_PRIVATE void sqlite3DefaultRowEst(Index *pIdx){sqlite3DefaultRowEst70208,2463859
SQLITE_PRIVATE void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){sqlite3DropIndex70229,2464269
SQLITE_PRIVATE void *sqlite3ArrayAllocate(sqlite3ArrayAllocate70312,2466897
SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){sqlite3IdListAppend70347,2467973
SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3 *db, IdList *pList){sqlite3IdListDelete70374,2468518
SQLITE_PRIVATE int sqlite3IdListIndex(IdList *pList, const char *zName){sqlite3IdListIndex70388,2468852
SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge(sqlite3SrcListEnlarge70416,2469817
SQLITE_PRIVATE SrcList *sqlite3SrcListAppend(sqlite3SrcListAppend70498,2472607
SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){sqlite3SrcListAssignCursors70533,2473657
SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){sqlite3SrcListDelete70551,2474154
SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm(sqlite3SrcListAppendFromTerm70584,2475523
SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){sqlite3SrcListIndexedBy70628,2476974
SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){sqlite3SrcListShiftJoinType70658,2478100
SQLITE_PRIVATE void sqlite3BeginTransaction(Parse *pParse, int type){sqlite3BeginTransaction70671,2478336
SQLITE_PRIVATE void sqlite3CommitTransaction(Parse *pParse){sqlite3CommitTransaction70697,2478926
SQLITE_PRIVATE void sqlite3RollbackTransaction(Parse *pParse){sqlite3RollbackTransaction70717,2479327
SQLITE_PRIVATE void sqlite3Savepoint(Parse *pParse, int op, Token *pName){sqlite3Savepoint70738,2479825
SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *pParse){sqlite3OpenTempDatabase70758,2480564
SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse *pParse, int iDb){sqlite3CodeVerifySchema70810,2482605
SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){sqlite3BeginWriteOperation70849,2484082
SQLITE_PRIVATE void sqlite3MultiWrite(Parse *pParse){sqlite3MultiWrite70863,2484697
SQLITE_PRIVATE void sqlite3MayAbort(Parse *pParse){sqlite3MayAbort70884,2485702
SQLITE_PRIVATE void sqlite3HaltConstraint(Parse *pParse, int onError, char *p4, int p4type){sqlite3HaltConstraint70894,2486033
static int collationMatch(const char *zColl, Index *pIndex){collationMatch70907,2486449
static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){reindexTable70926,2486880
static void reindexDatabases(Parse *pParse, char const *zColl){reindexDatabases70945,2487512
SQLITE_PRIVATE void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){sqlite3Reindex70976,2488666
SQLITE_PRIVATE KeyInfo *sqlite3IndexKeyinfo(Parse *pParse, Index *pIdx){sqlite3IndexKeyinfo71040,2490917
static void callCollNeeded(sqlite3 *db, int enc, const char *zName){callCollNeeded71090,2492461
static int synthCollSeq(sqlite3 *db, CollSeq *pColl){synthCollSeq71119,2493498
SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq(sqlite3GetCollSeq71149,2494558
SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){sqlite3CheckCollSeq71186,2495896
static CollSeq *findCollSeqEntry(findCollSeqEntry71216,2496916
SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq(sqlite3FindCollSeq71269,2498727
static int matchQuality(FuncDef *p, int nArg, u8 enc){matchQuality71308,2500197
static FuncDef *functionSearch(functionSearch71332,2500819
SQLITE_PRIVATE void sqlite3FuncDefInsert(sqlite3FuncDefInsert71350,2501279
SQLITE_PRIVATE FuncDef *sqlite3FindFunction(sqlite3FindFunction71392,2502802
SQLITE_PRIVATE void sqlite3SchemaFree(void *p){sqlite3SchemaFree71470,2505573
SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){sqlite3SchemaGet71500,2506451
SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){sqlite3SrcListLookup71541,2507812
SQLITE_PRIVATE int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){sqlite3IsReadOnly71562,2508381
SQLITE_PRIVATE void sqlite3MaterializeView(sqlite3MaterializeView71599,2509659
SQLITE_PRIVATE Expr *sqlite3LimitWhere(sqlite3LimitWhere71641,2511111
SQLITE_PRIVATE void sqlite3DeleteFrom(sqlite3DeleteFrom71733,2514644
# undef isViewisView71784,2516764
# define isView isView71785,2516779
 #undef isViewisView71963,2522863
 #undef pTriggerpTrigger71966,2522901
SQLITE_PRIVATE void sqlite3GenerateRowDelete(sqlite3GenerateRowDelete71988,2523618
SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete(sqlite3GenerateRowIndexDelete72096,2528173
SQLITE_PRIVATE int sqlite3GenerateIndexKey(sqlite3GenerateIndexKey72124,2529238
static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){sqlite3GetFuncCollSeq72181,2531194
static void minmaxFunc(minmaxFunc72188,2531358
static void typeofFunc(typeofFunc72218,2532076
static void lengthFunc(lengthFunc72239,2532606
static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){absFunc72279,2533433
static void substrFunc(substrFunc72329,2535135
static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){roundFunc72415,2536886
static void *contextMalloc(sqlite3_context *context, i64 nByte){contextMalloc72456,2538137
static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){upperFunc72477,2538688
static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){lowerFunc72497,2539298
#define ifnullFunc ifnullFunc72545,2540616
static void randomFunc(randomFunc72550,2540756
static void randomBlob(randomBlob72576,2541585
static void last_insert_rowid(last_insert_rowid72600,2542102
static void changes(changes72620,2542744
static void total_changes(total_changes72634,2543124
struct compareInfo {compareInfo72649,2543552
  u8 matchAll;matchAll72650,2543573
  u8 matchOne;matchOne72651,2543588
  u8 matchSet;matchSet72652,2543603
  u8 noCase;noCase72653,2543618
# define sqlite3Utf8Read(sqlite3Utf8Read72663,2543929
# define GlogUpperToLower(GlogUpperToLower72664,2543971
# define GlogUpperToLower(GlogUpperToLower72666,2544037
static const struct compareInfo globInfo = { '*', '?', '[', 0 };globInfo72669,2544122
static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };likeInfoNorm72672,2544300
static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };likeInfoAlt72675,2544494
static int patternCompare(patternCompare72705,2545570
SQLITE_API int sqlite3_like_count = 0;sqlite3_like_count72819,2548998
static void likeFunc(likeFunc72835,2549426
static void nullifFunc(nullifFunc72888,2551081
static void versionFunc(versionFunc72904,2551487
static void sourceidFunc(sourceidFunc72920,2551979
static void compileoptionusedFunc(compileoptionusedFunc72937,2552504
static void compileoptiongetFunc(compileoptiongetFunc72959,2553173
static const char hexdigits[] = {hexdigits72976,2553680
static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){quoteFunc72992,2554292
static void hexFunc(hexFunc73057,2556151
static void zeroblobFunc(zeroblobFunc73085,2556859
static void replaceFunc(replaceFunc73110,2557623
static void trimFunc(trimFunc73194,2560391
static void soundexFunc(soundexFunc73286,2563124
static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){loadExt73339,2564694
typedef struct SumCtx SumCtx;SumCtx73362,2565304
struct SumCtx {SumCtx73363,2565334
  double rSum;      /* Floating point sum */rSum73364,2565350
  i64 iSum;         /* Integer sum */   iSum73365,2565395
  i64 cnt;          /* Number of elements summed */cnt73366,2565436
  u8 overflow;      /* True if integer overflow seen */overflow73367,2565488
  u8 approx;        /* True if non-integer value was input to the sum */approx73368,2565544
static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){sumStep73381,2566058
static void sumFinalize(sqlite3_context *context){sumFinalize73407,2566871
static void avgFinalize(sqlite3_context *context){avgFinalize73420,2567228
static void totalFinalize(sqlite3_context *context){totalFinalize73427,2567426
typedef struct CountCtx CountCtx;CountCtx73438,2567763
struct CountCtx {CountCtx73439,2567797
  i64 n;n73440,2567815
static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){countStep73446,2567891
static void countFinalize(sqlite3_context *context){countFinalize73462,2568535
static void minmaxStep(minmaxStep73471,2568766
static void minMaxFinalize(sqlite3_context *context){minMaxFinalize73505,2569880
static void groupConcatStep(groupConcatStep73519,2570197
static void groupConcatFinalize(sqlite3_context *context){groupConcatFinalize73552,2571123
SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(sqlite3 *db){sqlite3RegisterBuiltinFunctions73572,2571715
static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){setLikeOptFlag73588,2572127
SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){sqlite3RegisterLikeFunctions73602,2572571
SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){sqlite3IsLikeFunction73625,2573528
SQLITE_PRIVATE void sqlite3RegisterGlobalFunctions(void){sqlite3RegisterGlobalFunctions73660,2574770
static int locateFkeyIndex(locateFkeyIndex73932,2587359
static void fkLookupParent(fkLookupParent74065,2592736
static void fkScanChildren(fkScanChildren74208,2599394
SQLITE_PRIVATE FKey *sqlite3FkReferences(Table *pTab){sqlite3FkReferences74331,2604475
static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){fkTriggerDelete74344,2604974
SQLITE_PRIVATE void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){sqlite3FkDropTable74372,2606053
SQLITE_PRIVATE void sqlite3FkCheck(sqlite3FkCheck74433,2608597
#define COLUMN_MASK(COLUMN_MASK74575,2614144
SQLITE_PRIVATE u32 sqlite3FkOldmask(sqlite3FkOldmask74581,2614319
SQLITE_PRIVATE int sqlite3FkRequired(sqlite3FkRequired74617,2615682
static Trigger *fkActionTrigger(fkActionTrigger74692,2618563
SQLITE_PRIVATE void sqlite3FkActions(sqlite3FkActions74881,2625659
SQLITE_PRIVATE void sqlite3FkDelete(Table *pTab){sqlite3FkDelete74909,2626810
SQLITE_PRIVATE void sqlite3OpenTable(sqlite3OpenTable74964,2628676
SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(Vdbe *v, Index *pIdx){sqlite3IndexAffinityStr75001,2630078
SQLITE_PRIVATE void sqlite3TableAffinityStr(Vdbe *v, Table *pTab){sqlite3TableAffinityStr75043,2631391
static int readsTable(Parse *p, int iStartAddr, int iDb, Table *pTab){readsTable75080,2632582
static int autoIncBegin(autoIncBegin75135,2634308
SQLITE_PRIVATE void sqlite3AutoincrementBegin(Parse *pParse){sqlite3AutoincrementBegin75167,2635401
static void autoIncStep(Parse *pParse, int memId, int regRowid){autoIncStep75208,2637168
SQLITE_PRIVATE void sqlite3AutoincrementEnd(Parse *pParse){sqlite3AutoincrementEnd75221,2637629
# define autoIncBegin(autoIncBegin75259,2638896
# define autoIncStep(autoIncStep75260,2638929
SQLITE_PRIVATE void sqlite3Insert(sqlite3Insert75375,2643185
# undef isViewisView75457,2646862
# define isView isView75458,2646877
 #undef isViewisView75996,2665450
 #undef pTriggerpTrigger75999,2665488
 #undef tmasktmask76002,2665525
SQLITE_PRIVATE void sqlite3GenerateConstraintChecks(sqlite3GenerateConstraintChecks76081,2669277
SQLITE_PRIVATE void sqlite3CompleteInsertion(sqlite3CompleteInsertion76366,2679706
SQLITE_PRIVATE int sqlite3OpenTableAndIndices(sqlite3OpenTableAndIndices76426,2681707
SQLITE_API int sqlite3_xferopt_count;sqlite3_xferopt_count76463,2682845
static int xferCompatibleCollation(const char *z1, const char *z2){xferCompatibleCollation76471,2683004
static int xferCompatibleIndex(Index *pDest, Index *pSrc){xferCompatibleIndex76492,2683581
static int xferOptimization(xferOptimization76549,2685486
SQLITE_API int sqlite3_exec(sqlite3_exec76805,2695567
  #define SQLITE_CORE SQLITE_CORE76940,2699807
#define _SQLITE3EXT_H__SQLITE3EXT_H_76962,2700714
typedef struct sqlite3_api_routines sqlite3_api_routines;sqlite3_api_routines76964,2700738
struct sqlite3_api_routines {sqlite3_api_routines76976,2701170
  void * (*aggregate_context)(sqlite3_context*,int nBytes);aggregate_context76977,2701200
  int  (*aggregate_count)(sqlite3_context*);aggregate_count76978,2701260
  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));bind_blob76979,2701305
  int  (*bind_double)(sqlite3_stmt*,int,double);bind_double76980,2701378
  int  (*bind_int)(sqlite3_stmt*,int,int);bind_int76981,2701427
  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);bind_int6476982,2701470
  int  (*bind_null)(sqlite3_stmt*,int);bind_null76983,2701524
  int  (*bind_parameter_count)(sqlite3_stmt*);bind_parameter_count76984,2701564
  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);bind_parameter_index76985,2701611
  const char * (*bind_parameter_name)(sqlite3_stmt*,int);bind_parameter_name76986,2701675
  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));bind_text76987,2701733
  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));bind_text1676988,2701806
  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);bind_value76989,2701879
  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);busy_handler76990,2701941
  int  (*busy_timeout)(sqlite3*,int ms);busy_timeout76991,2701999
  int  (*changes)(sqlite3*);changes76992,2702040
  int  (*close)(sqlite3*);close76993,2702069
  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const char*));collation_needed76994,2702096
  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const void*));collation_needed1676995,2702189
  const void * (*column_blob)(sqlite3_stmt*,int iCol);column_blob76996,2702284
  int  (*column_bytes)(sqlite3_stmt*,int iCol);column_bytes76997,2702339
  int  (*column_bytes16)(sqlite3_stmt*,int iCol);column_bytes1676998,2702387
  int  (*column_count)(sqlite3_stmt*pStmt);column_count76999,2702437
  const char * (*column_database_name)(sqlite3_stmt*,int);column_database_name77000,2702481
  const void * (*column_database_name16)(sqlite3_stmt*,int);column_database_name1677001,2702540
  const char * (*column_decltype)(sqlite3_stmt*,int i);column_decltype77002,2702601
  const void * (*column_decltype16)(sqlite3_stmt*,int);column_decltype1677003,2702657
  double  (*column_double)(sqlite3_stmt*,int iCol);column_double77004,2702713
  int  (*column_int)(sqlite3_stmt*,int iCol);column_int77005,2702765
  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);column_int6477006,2702811
  const char * (*column_name)(sqlite3_stmt*,int);column_name77007,2702868
  const void * (*column_name16)(sqlite3_stmt*,int);column_name1677008,2702918
  const char * (*column_origin_name)(sqlite3_stmt*,int);column_origin_name77009,2702970
  const void * (*column_origin_name16)(sqlite3_stmt*,int);column_origin_name1677010,2703027
  const char * (*column_table_name)(sqlite3_stmt*,int);column_table_name77011,2703086
  const void * (*column_table_name16)(sqlite3_stmt*,int);column_table_name1677012,2703142
  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);column_text77013,2703200
  const void * (*column_text16)(sqlite3_stmt*,int iCol);column_text1677014,2703264
  int  (*column_type)(sqlite3_stmt*,int iCol);column_type77015,2703321
  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);column_value77016,2703368
  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);commit_hook77017,2703426
  int  (*complete)(const char*sql);complete77018,2703481
  int  (*complete16)(const void*sql);complete1677019,2703517
  int  (*create_collation)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*));create_collation77020,2703555
  int  (*create_collation16)(sqlite3*,const void*,int,void*,int(*)(void*,int,const void*,int,const void*));create_collation1677021,2703661
  int  (*create_function)(sqlite3*,const char*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));create_function77022,2703769
  int  (*create_function16)(sqlite3*,const void*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));create_function1677023,2703969
  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);create_module77024,2704171
  int  (*data_count)(sqlite3_stmt*pStmt);data_count77025,2704245
  sqlite3 * (*db_handle)(sqlite3_stmt*);db_handle77026,2704287
  int (*declare_vtab)(sqlite3*,const char*);declare_vtab77027,2704328
  int  (*enable_shared_cache)(int);enable_shared_cache77028,2704373
  int  (*errcode)(sqlite3*db);errcode77029,2704409
  const char * (*errmsg)(sqlite3*);errmsg77030,2704440
  const void * (*errmsg16)(sqlite3*);errmsg1677031,2704476
  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);exec77032,2704514
  int  (*expired)(sqlite3_stmt*);expired77033,2704582
  int  (*finalize)(sqlite3_stmt*pStmt);finalize77034,2704616
  void  (*free)(void*);free77035,2704656
  void  (*free_table)(char**result);free_table77036,2704680
  int  (*get_autocommit)(sqlite3*);get_autocommit77037,2704717
  void * (*get_auxdata)(sqlite3_context*,int);get_auxdata77038,2704753
  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);get_table77039,2704800
  int  (*global_recover)(void);global_recover77040,2704868
  void  (*interruptx)(sqlite3*);interruptx77041,2704900
  sqlite_int64  (*last_insert_rowid)(sqlite3*);last_insert_rowid77042,2704933
  const char * (*libversion)(void);libversion77043,2704981
  int  (*libversion_number)(void);libversion_number77044,2705017
  void *(*malloc)(int);malloc77045,2705052
  char * (*mprintf)(const char*,...);mprintf77046,2705076
  int  (*open)(const char*,sqlite3**);open77047,2705114
  int  (*open16)(const void*,sqlite3**);open1677048,2705153
  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);prepare77049,2705194
  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);prepare1677050,2705267
  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);profile77051,2705342
  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);progress_handler77052,2705420
  void *(*realloc)(void*,int);realloc77053,2705483
  int  (*reset)(sqlite3_stmt*pStmt);reset77054,2705514
  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));result_blob77055,2705551
  void  (*result_double)(sqlite3_context*,double);result_double77056,2705624
  void  (*result_error)(sqlite3_context*,const char*,int);result_error77057,2705675
  void  (*result_error16)(sqlite3_context*,const void*,int);result_error1677058,2705734
  void  (*result_int)(sqlite3_context*,int);result_int77059,2705795
  void  (*result_int64)(sqlite3_context*,sqlite_int64);result_int6477060,2705840
  void  (*result_null)(sqlite3_context*);result_null77061,2705896
  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));result_text77062,2705938
  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));result_text1677063,2706011
  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));result_text16be77064,2706086
  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));result_text16le77065,2706163
  void  (*result_value)(sqlite3_context*,sqlite3_value*);result_value77066,2706240
  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);rollback_hook77067,2706298
  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,const char*,const char*),void*);set_authorizer77068,2706356
  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));set_auxdata77069,2706464
  char * (*snprintf)(int,char*,const char*,...);snprintf77070,2706532
  int  (*step)(sqlite3_stmt*);step77071,2706581
  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,char const**,char const**,int*,int*,int*);table_column_metadata77072,2706612
  void  (*thread_cleanup)(void);thread_cleanup77073,2706732
  int  (*total_changes)(sqlite3*);total_changes77074,2706765
  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);trace77075,2706800
  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);transfer_bindings77076,2706868
  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,sqlite_int64),void*);update_hook77077,2706926
  void * (*user_data)(sqlite3_context*);user_data77078,2707024
  const void * (*value_blob)(sqlite3_value*);value_blob77079,2707065
  int  (*value_bytes)(sqlite3_value*);value_bytes77080,2707111
  int  (*value_bytes16)(sqlite3_value*);value_bytes1677081,2707150
  double  (*value_double)(sqlite3_value*);value_double77082,2707191
  int  (*value_int)(sqlite3_value*);value_int77083,2707234
  sqlite_int64  (*value_int64)(sqlite3_value*);value_int6477084,2707271
  int  (*value_numeric_type)(sqlite3_value*);value_numeric_type77085,2707319
  const unsigned char * (*value_text)(sqlite3_value*);value_text77086,2707365
  const void * (*value_text16)(sqlite3_value*);value_text1677087,2707420
  const void * (*value_text16be)(sqlite3_value*);value_text16be77088,2707468
  const void * (*value_text16le)(sqlite3_value*);value_text16le77089,2707518
  int  (*value_type)(sqlite3_value*);value_type77090,2707568
  char *(*vmprintf)(const char*,va_list);vmprintf77091,2707606
  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);overload_function77093,2707666
  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);prepare_v277095,2707761
  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);prepare16_v277096,2707836
  int (*clear_bindings)(sqlite3_stmt*);clear_bindings77097,2707913
  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,void (*xDestroy)(void *));create_module_v277099,2707976
  int (*bind_zeroblob)(sqlite3_stmt*,int,int);bind_zeroblob77101,2708101
  int (*blob_bytes)(sqlite3_blob*);blob_bytes77102,2708148
  int (*blob_close)(sqlite3_blob*);blob_close77103,2708184
  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,int,sqlite3_blob**);blob_open77104,2708220
  int (*blob_read)(sqlite3_blob*,void*,int,int);blob_read77105,2708319
  int (*blob_write)(sqlite3_blob*,const void*,int,int);blob_write77106,2708368
  int (*create_collation_v2)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*),void(*)(void*));create_collation_v277107,2708424
  int (*file_control)(sqlite3*,const char*,int,void*);file_control77108,2708547
  sqlite3_int64 (*memory_highwater)(int);memory_highwater77109,2708602
  sqlite3_int64 (*memory_used)(void);memory_used77110,2708644
  sqlite3_mutex *(*mutex_alloc)(int);mutex_alloc77111,2708682
  void (*mutex_enter)(sqlite3_mutex*);mutex_enter77112,2708720
  void (*mutex_free)(sqlite3_mutex*);mutex_free77113,2708759
  void (*mutex_leave)(sqlite3_mutex*);mutex_leave77114,2708797
  int (*mutex_try)(sqlite3_mutex*);mutex_try77115,2708836
  int (*open_v2)(const char*,sqlite3**,int,const char*);open_v277116,2708872
  int (*release_memory)(int);release_memory77117,2708929
  void (*result_error_nomem)(sqlite3_context*);result_error_nomem77118,2708959
  void (*result_error_toobig)(sqlite3_context*);result_error_toobig77119,2709007
  int (*sleep)(int);sleep77120,2709056
  void (*soft_heap_limit)(int);soft_heap_limit77121,2709077
  sqlite3_vfs *(*vfs_find)(const char*);vfs_find77122,2709109
  int (*vfs_register)(sqlite3_vfs*,int);vfs_register77123,2709150
  int (*vfs_unregister)(sqlite3_vfs*);vfs_unregister77124,2709191
  int (*xthreadsafe)(void);xthreadsafe77125,2709230
  void (*result_zeroblob)(sqlite3_context*,int);result_zeroblob77126,2709258
  void (*result_error_code)(sqlite3_context*,int);result_error_code77127,2709307
  int (*test_control)(int, ...);test_control77128,2709358
  void (*randomness)(int,void*);randomness77129,2709391
  sqlite3 *(*context_db_handle)(sqlite3_context*);context_db_handle77130,2709424
  int (*extended_result_codes)(sqlite3*,int);extended_result_codes77131,2709475
  int (*limit)(sqlite3*,int,int);limit77132,2709521
  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);next_stmt77133,2709555
  const char *(*sql)(sqlite3_stmt*);sql77134,2709609
  int (*status)(int,int*,int*,int);status77135,2709646
#define sqlite3_aggregate_context sqlite3_aggregate_context77150,2710185
#define sqlite3_aggregate_count sqlite3_aggregate_count77152,2710286
#define sqlite3_bind_blob sqlite3_bind_blob77154,2710361
#define sqlite3_bind_double sqlite3_bind_double77155,2710423
#define sqlite3_bind_int sqlite3_bind_int77156,2710487
#define sqlite3_bind_int64 sqlite3_bind_int6477157,2710548
#define sqlite3_bind_null sqlite3_bind_null77158,2710611
#define sqlite3_bind_parameter_count sqlite3_bind_parameter_count77159,2710673
#define sqlite3_bind_parameter_index sqlite3_bind_parameter_index77160,2710746
#define sqlite3_bind_parameter_name sqlite3_bind_parameter_name77161,2710819
#define sqlite3_bind_text sqlite3_bind_text77162,2710891
#define sqlite3_bind_text16 sqlite3_bind_text1677163,2710953
#define sqlite3_bind_value sqlite3_bind_value77164,2711017
#define sqlite3_busy_handler sqlite3_busy_handler77165,2711080
#define sqlite3_busy_timeout sqlite3_busy_timeout77166,2711145
#define sqlite3_changes sqlite3_changes77167,2711210
#define sqlite3_close sqlite3_close77168,2711270
#define sqlite3_collation_needed sqlite3_collation_needed77169,2711328
#define sqlite3_collation_needed16 sqlite3_collation_needed1677170,2711397
#define sqlite3_column_blob sqlite3_column_blob77171,2711468
#define sqlite3_column_bytes sqlite3_column_bytes77172,2711532
#define sqlite3_column_bytes16 sqlite3_column_bytes1677173,2711597
#define sqlite3_column_count sqlite3_column_count77174,2711664
#define sqlite3_column_database_name sqlite3_column_database_name77175,2711729
#define sqlite3_column_database_name16 sqlite3_column_database_name1677176,2711802
#define sqlite3_column_decltype sqlite3_column_decltype77177,2711877
#define sqlite3_column_decltype16 sqlite3_column_decltype1677178,2711945
#define sqlite3_column_double sqlite3_column_double77179,2712015
#define sqlite3_column_int sqlite3_column_int77180,2712081
#define sqlite3_column_int64 sqlite3_column_int6477181,2712144
#define sqlite3_column_name sqlite3_column_name77182,2712209
#define sqlite3_column_name16 sqlite3_column_name1677183,2712273
#define sqlite3_column_origin_name sqlite3_column_origin_name77184,2712339
#define sqlite3_column_origin_name16 sqlite3_column_origin_name1677185,2712410
#define sqlite3_column_table_name sqlite3_column_table_name77186,2712483
#define sqlite3_column_table_name16 sqlite3_column_table_name1677187,2712553
#define sqlite3_column_text sqlite3_column_text77188,2712625
#define sqlite3_column_text16 sqlite3_column_text1677189,2712689
#define sqlite3_column_type sqlite3_column_type77190,2712755
#define sqlite3_column_value sqlite3_column_value77191,2712819
#define sqlite3_commit_hook sqlite3_commit_hook77192,2712884
#define sqlite3_complete sqlite3_complete77193,2712948
#define sqlite3_complete16 sqlite3_complete1677194,2713009
#define sqlite3_create_collation sqlite3_create_collation77195,2713072
#define sqlite3_create_collation16 sqlite3_create_collation1677196,2713141
#define sqlite3_create_function sqlite3_create_function77197,2713212
#define sqlite3_create_function16 sqlite3_create_function1677198,2713280
#define sqlite3_create_module sqlite3_create_module77199,2713350
#define sqlite3_create_module_v2 sqlite3_create_module_v277200,2713416
#define sqlite3_data_count sqlite3_data_count77201,2713485
#define sqlite3_db_handle sqlite3_db_handle77202,2713548
#define sqlite3_declare_vtab sqlite3_declare_vtab77203,2713610
#define sqlite3_enable_shared_cache sqlite3_enable_shared_cache77204,2713675
#define sqlite3_errcode sqlite3_errcode77205,2713747
#define sqlite3_errmsg sqlite3_errmsg77206,2713807
#define sqlite3_errmsg16 sqlite3_errmsg1677207,2713866
#define sqlite3_exec sqlite3_exec77208,2713927
#define sqlite3_expired sqlite3_expired77210,2714015
#define sqlite3_finalize sqlite3_finalize77212,2714082
#define sqlite3_free sqlite3_free77213,2714143
#define sqlite3_free_table sqlite3_free_table77214,2714200
#define sqlite3_get_autocommit sqlite3_get_autocommit77215,2714263
#define sqlite3_get_auxdata sqlite3_get_auxdata77216,2714330
#define sqlite3_get_table sqlite3_get_table77217,2714394
#define sqlite3_global_recover sqlite3_global_recover77219,2714487
#define sqlite3_interrupt sqlite3_interrupt77221,2714561
#define sqlite3_last_insert_rowid sqlite3_last_insert_rowid77222,2714624
#define sqlite3_libversion sqlite3_libversion77223,2714694
#define sqlite3_libversion_number sqlite3_libversion_number77224,2714757
#define sqlite3_malloc sqlite3_malloc77225,2714827
#define sqlite3_mprintf sqlite3_mprintf77226,2714886
#define sqlite3_open sqlite3_open77227,2714946
#define sqlite3_open16 sqlite3_open1677228,2715003
#define sqlite3_prepare sqlite3_prepare77229,2715062
#define sqlite3_prepare16 sqlite3_prepare1677230,2715122
#define sqlite3_prepare_v2 sqlite3_prepare_v277231,2715184
#define sqlite3_prepare16_v2 sqlite3_prepare16_v277232,2715247
#define sqlite3_profile sqlite3_profile77233,2715312
#define sqlite3_progress_handler sqlite3_progress_handler77234,2715372
#define sqlite3_realloc sqlite3_realloc77235,2715441
#define sqlite3_reset sqlite3_reset77236,2715501
#define sqlite3_result_blob sqlite3_result_blob77237,2715559
#define sqlite3_result_double sqlite3_result_double77238,2715623
#define sqlite3_result_error sqlite3_result_error77239,2715689
#define sqlite3_result_error16 sqlite3_result_error1677240,2715754
#define sqlite3_result_int sqlite3_result_int77241,2715821
#define sqlite3_result_int64 sqlite3_result_int6477242,2715884
#define sqlite3_result_null sqlite3_result_null77243,2715949
#define sqlite3_result_text sqlite3_result_text77244,2716013
#define sqlite3_result_text16 sqlite3_result_text1677245,2716077
#define sqlite3_result_text16be sqlite3_result_text16be77246,2716143
#define sqlite3_result_text16le sqlite3_result_text16le77247,2716211
#define sqlite3_result_value sqlite3_result_value77248,2716279
#define sqlite3_rollback_hook sqlite3_rollback_hook77249,2716344
#define sqlite3_set_authorizer sqlite3_set_authorizer77250,2716410
#define sqlite3_set_auxdata sqlite3_set_auxdata77251,2716477
#define sqlite3_snprintf sqlite3_snprintf77252,2716541
#define sqlite3_step sqlite3_step77253,2716602
#define sqlite3_table_column_metadata sqlite3_table_column_metadata77254,2716659
#define sqlite3_thread_cleanup sqlite3_thread_cleanup77255,2716733
#define sqlite3_total_changes sqlite3_total_changes77256,2716800
#define sqlite3_trace sqlite3_trace77257,2716866
#define sqlite3_transfer_bindings sqlite3_transfer_bindings77259,2716955
#define sqlite3_update_hook sqlite3_update_hook77261,2717032
#define sqlite3_user_data sqlite3_user_data77262,2717096
#define sqlite3_value_blob sqlite3_value_blob77263,2717158
#define sqlite3_value_bytes sqlite3_value_bytes77264,2717221
#define sqlite3_value_bytes16 sqlite3_value_bytes1677265,2717285
#define sqlite3_value_double sqlite3_value_double77266,2717351
#define sqlite3_value_int sqlite3_value_int77267,2717416
#define sqlite3_value_int64 sqlite3_value_int6477268,2717478
#define sqlite3_value_numeric_type sqlite3_value_numeric_type77269,2717542
#define sqlite3_value_text sqlite3_value_text77270,2717613
#define sqlite3_value_text16 sqlite3_value_text1677271,2717676
#define sqlite3_value_text16be sqlite3_value_text16be77272,2717741
#define sqlite3_value_text16le sqlite3_value_text16le77273,2717808
#define sqlite3_value_type sqlite3_value_type77274,2717875
#define sqlite3_vmprintf sqlite3_vmprintf77275,2717938
#define sqlite3_overload_function sqlite3_overload_function77276,2717999
#define sqlite3_prepare_v2 sqlite3_prepare_v277277,2718069
#define sqlite3_prepare16_v2 sqlite3_prepare16_v277278,2718132
#define sqlite3_clear_bindings sqlite3_clear_bindings77279,2718197
#define sqlite3_bind_zeroblob sqlite3_bind_zeroblob77280,2718264
#define sqlite3_blob_bytes sqlite3_blob_bytes77281,2718330
#define sqlite3_blob_close sqlite3_blob_close77282,2718393
#define sqlite3_blob_open sqlite3_blob_open77283,2718456
#define sqlite3_blob_read sqlite3_blob_read77284,2718518
#define sqlite3_blob_write sqlite3_blob_write77285,2718580
#define sqlite3_create_collation_v2 sqlite3_create_collation_v277286,2718643
#define sqlite3_file_control sqlite3_file_control77287,2718715
#define sqlite3_memory_highwater sqlite3_memory_highwater77288,2718780
#define sqlite3_memory_used sqlite3_memory_used77289,2718849
#define sqlite3_mutex_alloc sqlite3_mutex_alloc77290,2718913
#define sqlite3_mutex_enter sqlite3_mutex_enter77291,2718977
#define sqlite3_mutex_free sqlite3_mutex_free77292,2719041
#define sqlite3_mutex_leave sqlite3_mutex_leave77293,2719104
#define sqlite3_mutex_try sqlite3_mutex_try77294,2719168
#define sqlite3_open_v2 sqlite3_open_v277295,2719230
#define sqlite3_release_memory sqlite3_release_memory77296,2719290
#define sqlite3_result_error_nomem sqlite3_result_error_nomem77297,2719357
#define sqlite3_result_error_toobig sqlite3_result_error_toobig77298,2719428
#define sqlite3_sleep sqlite3_sleep77299,2719500
#define sqlite3_soft_heap_limit sqlite3_soft_heap_limit77300,2719558
#define sqlite3_vfs_find sqlite3_vfs_find77301,2719626
#define sqlite3_vfs_register sqlite3_vfs_register77302,2719687
#define sqlite3_vfs_unregister sqlite3_vfs_unregister77303,2719752
#define sqlite3_threadsafe sqlite3_threadsafe77304,2719819
#define sqlite3_result_zeroblob sqlite3_result_zeroblob77305,2719883
#define sqlite3_result_error_code sqlite3_result_error_code77306,2719951
#define sqlite3_test_control sqlite3_test_control77307,2720021
#define sqlite3_randomness sqlite3_randomness77308,2720086
#define sqlite3_context_db_handle sqlite3_context_db_handle77309,2720149
#define sqlite3_extended_result_codes sqlite3_extended_result_codes77310,2720219
#define sqlite3_limit sqlite3_limit77311,2720293
#define sqlite3_next_stmt sqlite3_next_stmt77312,2720351
#define sqlite3_sql sqlite3_sql77313,2720413
#define sqlite3_status sqlite3_status77314,2720469
#define SQLITE_EXTENSION_INIT1 SQLITE_EXTENSION_INIT177317,2720554
#define SQLITE_EXTENSION_INIT2(SQLITE_EXTENSION_INIT277318,2720634
# define sqlite3_column_database_name sqlite3_column_database_name77333,2721104
# define sqlite3_column_database_name16 sqlite3_column_database_name1677334,2721146
# define sqlite3_column_table_name sqlite3_column_table_name77335,2721188
# define sqlite3_column_table_name16 sqlite3_column_table_name1677336,2721230
# define sqlite3_column_origin_name sqlite3_column_origin_name77337,2721272
# define sqlite3_column_origin_name16 sqlite3_column_origin_name1677338,2721314
# define sqlite3_table_column_metadata sqlite3_table_column_metadata77339,2721356
# define sqlite3_set_authorizer sqlite3_set_authorizer77343,2721439
# define sqlite3_bind_text16 sqlite3_bind_text1677347,2721514
# define sqlite3_collation_needed16 sqlite3_collation_needed1677348,2721556
# define sqlite3_column_decltype16 sqlite3_column_decltype1677349,2721598
# define sqlite3_column_name16 sqlite3_column_name1677350,2721640
# define sqlite3_column_text16 sqlite3_column_text1677351,2721682
# define sqlite3_complete16 sqlite3_complete1677352,2721724
# define sqlite3_create_collation16 sqlite3_create_collation1677353,2721766
# define sqlite3_create_function16 sqlite3_create_function1677354,2721808
# define sqlite3_errmsg16 sqlite3_errmsg1677355,2721850
# define sqlite3_open16 sqlite3_open1677356,2721892
# define sqlite3_prepare16 sqlite3_prepare1677357,2721934
# define sqlite3_prepare16_v2 sqlite3_prepare16_v277358,2721976
# define sqlite3_result_error16 sqlite3_result_error1677359,2722018
# define sqlite3_result_text16 sqlite3_result_text1677360,2722060
# define sqlite3_result_text16be sqlite3_result_text16be77361,2722102
# define sqlite3_result_text16le sqlite3_result_text16le77362,2722144
# define sqlite3_value_text16 sqlite3_value_text1677363,2722186
# define sqlite3_value_text16be sqlite3_value_text16be77364,2722228
# define sqlite3_value_text16le sqlite3_value_text16le77365,2722270
# define sqlite3_column_database_name16 sqlite3_column_database_name1677366,2722312
# define sqlite3_column_table_name16 sqlite3_column_table_name1677367,2722354
# define sqlite3_column_origin_name16 sqlite3_column_origin_name1677368,2722396
# define sqlite3_complete sqlite3_complete77372,2722474
# define sqlite3_complete16 sqlite3_complete1677373,2722502
# define sqlite3_progress_handler sqlite3_progress_handler77377,2722577
# define sqlite3_create_module sqlite3_create_module77381,2722653
# define sqlite3_create_module_v2 sqlite3_create_module_v277382,2722686
# define sqlite3_declare_vtab sqlite3_declare_vtab77383,2722722
# define sqlite3_enable_shared_cache sqlite3_enable_shared_cache77387,2722794
# define sqlite3_profile sqlite3_profile77391,2722866
# define sqlite3_trace sqlite3_trace77392,2722899
# define sqlite3_free_table sqlite3_free_table77396,2722969
# define sqlite3_get_table sqlite3_get_table77397,2723002
#define sqlite3_bind_zeroblob sqlite3_bind_zeroblob77401,2723071
#define sqlite3_blob_bytes sqlite3_blob_bytes77402,2723104
#define sqlite3_blob_close sqlite3_blob_close77403,2723137
#define sqlite3_blob_open sqlite3_blob_open77404,2723170
#define sqlite3_blob_read sqlite3_blob_read77405,2723203
#define sqlite3_blob_write sqlite3_blob_write77406,2723236
static const sqlite3_api_routines sqlite3Apis = {sqlite3Apis77424,2723905
static int sqlite3LoadExtension(sqlite3LoadExtension77646,2729051
SQLITE_API int sqlite3_load_extension(sqlite3_load_extension77730,2731792
SQLITE_PRIVATE void sqlite3CloseExtensions(sqlite3 *db){sqlite3CloseExtensions77748,2732422
SQLITE_API int sqlite3_enable_load_extension(sqlite3 *db, int onoff){sqlite3_enable_load_extension77761,2732808
static const sqlite3_api_routines sqlite3Apis = { 0 };sqlite3Apis77781,2733387
typedef struct sqlite3AutoExtList sqlite3AutoExtList;sqlite3AutoExtList77792,2733658
static SQLITE_WSD struct sqlite3AutoExtList {sqlite3AutoExtList77793,2733712
  int nExt;              /* Number of entries in aExt[] */          nExt77794,2733758
  void (**aExt)(void);   /* Pointers to the extension init functions */aExt77795,2733827
} sqlite3Autoext = { 0, 0 };sqlite3Autoext77796,2733899
# define wsdAutoextInit wsdAutoextInit77805,2734290
# define wsdAutoext wsdAutoext77807,2734385
# define wsdAutoextInitwsdAutoextInit77809,2734416
# define wsdAutoext wsdAutoext77810,2734440
SQLITE_API int sqlite3_auto_extension(void (*xInit)(void)){sqlite3_auto_extension77818,2734598
SQLITE_API void sqlite3_reset_auto_extension(void){sqlite3_reset_auto_extension77857,2735541
SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3 *db){sqlite3AutoLoadExtensions77879,2736063
static u8 getSafetyLevel(const char *z){getSafetyLevel77943,2738087
static u8 getBoolean(const char *z){getBoolean77965,2738707
static int getLockingMode(const char *z){getLockingMode77972,2738838
static int getAutoVacuum(const char *z){getAutoVacuum77987,2739324
static int getTempStore(const char *z){getTempStore78003,2739904
static int invalidateTempStorage(Parse *pParse){invalidateTempStorage78021,2740362
static int changeTempStorage(Parse *pParse, const char *zStorageType){changeTempStorage78043,2741063
static void returnSingleInt(Parse *pParse, const char *zLabel, i64 value){returnSingleInt78058,2741470
static int flagPragma(Parse *pParse, const char *zLeft, const char *zRight){flagPragma78077,2742157
static const char *actionName(u8 action){actionName78156,2745085
SQLITE_PRIVATE void sqlite3Pragma(sqlite3Pragma78185,2746003
#    define SQLITE_ENABLE_LOCKING_STYLE SQLITE_ENABLE_LOCKING_STYLE78680,2763510
# define SQLITE_INTEGRITY_CHECK_ERROR_MAX SQLITE_INTEGRITY_CHECK_ERROR_MAX78964,2773974
static void corruptSchema(corruptSchema79410,2790825
SQLITE_PRIVATE int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){sqlite3InitCallback79440,2791917
static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){sqlite3InitOne79519,2794730
SQLITE_PRIVATE int sqlite3Init(sqlite3 *db, char **pzErrMsg){sqlite3Init79769,2802652
SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse){sqlite3ReadSchema79810,2803818
static void schemaIsValid(Parse *pParse){schemaIsValid79830,2804292
SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){sqlite3SchemaToIndex79877,2805863
static int sqlite3Prepare(sqlite3Prepare79905,2806789
static int sqlite3LockAndPrepare(sqlite3LockAndPrepare80067,2812014
SQLITE_PRIVATE int sqlite3Reprepare(Vdbe *p){sqlite3Reprepare80102,2813296
SQLITE_API int sqlite3_prepare(sqlite3_prepare80139,2814423
SQLITE_API int sqlite3_prepare_v2(sqlite3_prepare_v280151,2814931
static int sqlite3Prepare16(sqlite3Prepare1680169,2815550
SQLITE_API int sqlite3_prepare16(sqlite3_prepare1680219,2817475
SQLITE_API int sqlite3_prepare16_v2(sqlite3_prepare16_v280231,2817979
static void clearSelect(sqlite3 *db, Select *p){clearSelect80268,2819277
SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){sqlite3SelectDestInit80283,2819718
SQLITE_PRIVATE Select *sqlite3SelectNew(sqlite3SelectNew80296,2820003
SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3 *db, Select *p){sqlite3SelectDelete80345,2821613
SQLITE_PRIVATE int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){sqlite3JoinType80369,2822232
static int columnIndex(Table *pTab, const char *zCol){columnIndex80430,2824256
static int tableAndColumnIndex(tableAndColumnIndex80447,2824708
static void addWhereTerm(addWhereTerm80482,2825864
static void setJoinExpr(Expr *p, int iTable){setJoinExpr80541,2828300
static int sqliteProcessJoin(Parse *pParse, Select *p){sqliteProcessJoin80566,2829263
static void pushOntoSorter(pushOntoSorter80658,2832594
static void codeOffset(codeOffset80698,2834037
static void codeDistinct(codeDistinct80722,2834911
static int checkForMultiColumnSelectError(checkForMultiColumnSelectError80746,2835741
static void selectInnerLoop(selectInnerLoop80770,2836535
static KeyInfo *keyInfoFromExprList(Parse *pParse, ExprList *pList){keyInfoFromExprList80995,2844368
static void generateSortTail(generateSortTail81029,2845353
static const char *columnType(columnType81142,2849131
static void generateColumnTypes(generateColumnTypes81270,2853582
static void generateColumnNames(generateColumnNames81310,2854937
static const char *selectOpName(int id){selectOpName81377,2857099
static int selectColumnsFromExprList(selectColumnsFromExprList81402,2857926
static void selectAddColumnTypeAndCollation(selectAddColumnTypeAndCollation81493,2861358
SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){sqlite3ResultSetOfSelect81530,2862490
SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse *pParse){sqlite3GetVdbe81566,2863628
static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){computeLimitRegisters81598,2864838
static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){multiSelectCollSeq81656,2866937
static int multiSelect(multiSelect81711,2868711
static int generateOutputSubroutine(generateOutputSubroutine82057,2880584
static int multiSelectOrderBy(multiSelectOrderBy82280,2888749
static Expr *substExpr(substExpr82640,2902094
static void substExprList(substExprList82672,2903181
static void substSelect(substSelect82684,2903588
static int flattenSubquery(flattenSubquery82817,2908947
static u8 minMaxQuery(Select *p){minMaxQuery83197,2922787
static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){isSimpleCount83228,2923900
SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){sqlite3IndexedByLookup83258,2924770
static int selectExpander(Walker *pWalker, Select *p){selectExpander83300,2926360
static int exprWalkNoop(Walker *NotUsed, Expr *NotUsed2){exprWalkNoop83528,2934636
static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){sqlite3SelectExpand83546,2935329
static int selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){selectAddSubqueryTypeInfo83569,2936091
static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){sqlite3SelectAddTypeInfo83603,2937073
SQLITE_PRIVATE void sqlite3SelectPrep(sqlite3SelectPrep83626,2937847
static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){resetAccumulator83649,2938625
static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){finalizeAggFunctions83681,2939678
static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){updateAccumulator83697,2940210
SQLITE_PRIVATE int sqlite3Select(sqlite3Select83808,2944558
SQLITE_PRIVATE void sqlite3PrintExpr(Expr *p){sqlite3PrintExpr84453,2969716
SQLITE_PRIVATE void sqlite3PrintExprList(ExprList *pList){sqlite3PrintExprList84469,2970112
SQLITE_PRIVATE void sqlite3PrintSelect(Select *p, int indent){sqlite3PrintSelect84478,2970326
typedef struct TabResult {TabResult84561,2973026
  char **azResult;   /* Accumulated output */azResult84562,2973053
  char *zErrMsg;     /* Error message text, if an error occurs */zErrMsg84563,2973099
  int nAlloc;        /* Slots allocated for azResult[] */nAlloc84564,2973165
  int nRow;          /* Number of rows in the result */nRow84565,2973223
  int nColumn;       /* Number of columns in the result */nColumn84566,2973279
  int nData;         /* Slots used in azResult[].  (nRow+1)*nColumn */nData84567,2973338
  int rc;            /* Return code from sqlite3_exec() */rc84568,2973409
} TabResult;TabResult84569,2973468
static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){sqlite3_get_table_cb84576,2973657
SQLITE_API int sqlite3_get_table(sqlite3_get_table84650,2975823
SQLITE_API void sqlite3_free_table(sqlite3_free_table84716,2977808
SQLITE_PRIVATE void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){sqlite3DeleteTriggerStep84750,2978842
SQLITE_PRIVATE Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){sqlite3TriggerList84778,2979903
SQLITE_PRIVATE void sqlite3BeginTrigger(sqlite3BeginTrigger84810,2980982
SQLITE_PRIVATE void sqlite3FinishTrigger(sqlite3FinishTrigger84984,2987454
SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){sqlite3TriggerSelectStep85065,2990305
static TriggerStep *triggerStepAllocate(triggerStepAllocate85083,2990900
SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep(sqlite3TriggerInsertStep85108,2991627
SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep(sqlite3TriggerUpdateStep85141,2992914
SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep(sqlite3TriggerDeleteStep85166,2993905
SQLITE_PRIVATE void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){sqlite3DeleteTrigger85185,2994472
SQLITE_PRIVATE void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){sqlite3DropTrigger85203,2995151
static Table *tableOfTrigger(Trigger *pTrigger){tableOfTrigger85242,2996215
SQLITE_PRIVATE void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){sqlite3DropTriggerPtr85251,2996448
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){sqlite3UnlinkAndDeleteTrigger85309,2998350
static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){checkColumnOverlap85334,2999336
SQLITE_PRIVATE Trigger *sqlite3TriggersExist(sqlite3TriggersExist85349,2999861
static SrcList *targetSrcList(targetSrcList85381,3000975
static int codeTriggerProgram(codeTriggerProgram85406,3001732
static const char *onErrorText(int onError){onErrorText85483,3004241
static void transferParseError(Parse *pTo, Parse *pFrom){transferParseError85501,3004748
static TriggerPrg *codeRowTrigger(codeRowTrigger85516,3005180
static TriggerPrg *getRowTrigger(getRowTrigger85626,3009350
SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect(sqlite3CodeRowTriggerDirect85660,3010561
SQLITE_PRIVATE void sqlite3CodeRowTrigger(sqlite3CodeRowTrigger85731,3014017
SQLITE_PRIVATE u32 sqlite3TriggerColmask(sqlite3TriggerColmask85793,3016886
SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){sqlite3ColumnDefault85884,3020629
SQLITE_PRIVATE void sqlite3Update(sqlite3Update85912,3021556
# undef isViewisView85983,3024709
# define isView isView85984,3024724
 #undef isViewisView86393,3038400
 #undef pTriggerpTrigger86396,3038438
static void updateVirtualTable(updateVirtualTable86419,3039141
static int vacuumFinalize(sqlite3 *db, sqlite3_stmt *pStmt, char **pzErrMsg){vacuumFinalize86516,3042975
static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){execSql86528,3043253
static int execExecSql(sqlite3 *db, char **pzErrMsg, const char *zSql){execExecSql86547,3043805
SQLITE_PRIVATE void sqlite3Vacuum(Parse *pParse){sqlite3Vacuum86575,3044625
SQLITE_PRIVATE int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db){sqlite3RunVacuum86586,3044849
static int createModule(createModule86842,3054769
SQLITE_API int sqlite3_create_module(sqlite3_create_module86884,3056034
SQLITE_API int sqlite3_create_module_v2(sqlite3_create_module_v286896,3056498
SQLITE_PRIVATE void sqlite3VtabLock(VTable *pVTab){sqlite3VtabLock86914,3057286
SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){sqlite3GetVTable86924,3057578
SQLITE_PRIVATE void sqlite3VtabUnlock(VTable *pVTab){sqlite3VtabUnlock86935,3057930
static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){vtabDisconnectAll86959,3058598
SQLITE_PRIVATE void sqlite3VtabUnlockList(sqlite3 *db){sqlite3VtabUnlockList87013,3060515
SQLITE_PRIVATE void sqlite3VtabClear(Table *p){sqlite3VtabClear87044,3061559
static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){addModuleArgument87061,3062000
SQLITE_PRIVATE void sqlite3VtabBeginParse(sqlite3VtabBeginParse87086,3062782
static void addArgumentToVtab(Parse *pParse){addArgumentToVtab87130,3064548
SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){sqlite3VtabFinishParse87143,3064946
SQLITE_PRIVATE void sqlite3VtabArgInit(Parse *pParse){sqlite3VtabArgInit87225,3067922
SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse *pParse, Token *p){sqlite3VtabArgExtend87235,3068203
static int vtabCallConstructor(vtabCallConstructor87251,3068620
SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){sqlite3VtabCallConnect87357,3071809
static int addToVTrans(sqlite3 *db, VTable *pVTab){addToVTrans87391,3072677
SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){sqlite3VtabCallCreate87420,3073632
SQLITE_API int sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){sqlite3_declare_vtab87458,3074914
SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){sqlite3VtabCallDestroy87521,3076529
static void callFinaliser(sqlite3 *db, int offset){callFinaliser87552,3077462
SQLITE_PRIVATE int sqlite3VtabSync(sqlite3 *db, char **pzErrmsg){sqlite3VtabSync87579,3078266
SQLITE_PRIVATE int sqlite3VtabRollback(sqlite3 *db){sqlite3VtabRollback87603,3078882
SQLITE_PRIVATE int sqlite3VtabCommit(sqlite3 *db){sqlite3VtabCommit87612,3079135
SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){sqlite3VtabBegin87625,3079564
SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction(sqlite3VtabOverloadFunction87675,3081022
SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){sqlite3VtabMakeWritable87741,3083130
SQLITE_PRIVATE int sqlite3WhereTrace = 0;sqlite3WhereTrace87787,3084795
# define WHERETRACE(WHERETRACE87790,3084894
# define WHERETRACE(WHERETRACE87792,3084967
typedef struct WhereClause WhereClause;WhereClause87797,3085022
typedef struct WhereMaskSet WhereMaskSet;WhereMaskSet87798,3085062
typedef struct WhereOrInfo WhereOrInfo;WhereOrInfo87799,3085104
typedef struct WhereAndInfo WhereAndInfo;WhereAndInfo87800,3085144
typedef struct WhereCost WhereCost;WhereCost87801,3085186
typedef struct WhereTerm WhereTerm;WhereTerm87854,3087713
struct WhereTerm {WhereTerm87855,3087749
  Expr *pExpr;            /* Pointer to the subexpression that is this term */pExpr87856,3087768
  int iParent;            /* Disable pWC->a[iParent] when this term disabled */iParent87857,3087847
  int leftCursor;         /* Cursor number of X in "X <op> <expr>" */leftCursor87858,3087927
    int leftColumn;         /* Column number of X in "X <op> <expr>" */leftColumn87860,3088007
    WhereOrInfo *pOrInfo;   /* Extra information if eOperator==WO_OR */pOrInfo87861,3088079
    WhereAndInfo *pAndInfo; /* Extra information if eOperator==WO_AND */pAndInfo87862,3088151
  } u;u87863,3088224
  u16 eOperator;          /* A WO_xx value describing <op> */eOperator87864,3088231
  u8 wtFlags;             /* TERM_xxx bit flags.  See below */wtFlags87865,3088293
  u8 nChild;              /* Number of children that must disable us */nChild87866,3088356
  WhereClause *pWC;       /* The clause this term is part of */pWC87867,3088428
  Bitmask prereqRight;    /* Bitmask of tables used by pExpr->pRight */prereqRight87868,3088492
  Bitmask prereqAll;      /* Bitmask of tables referenced by pExpr */prereqAll87869,3088564
#define TERM_DYNAMIC TERM_DYNAMIC87875,3088683
#define TERM_VIRTUAL TERM_VIRTUAL87876,3088762
#define TERM_CODED TERM_CODED87877,3088836
#define TERM_COPIED TERM_COPIED87878,3088900
#define TERM_ORINFO TERM_ORINFO87879,3088949
#define TERM_ANDINFO TERM_ANDINFO87880,3089030
#define TERM_OR_OK TERM_OR_OK87881,3089109
struct WhereClause {WhereClause87887,3089331
  Parse *pParse;           /* The parser context */pParse87888,3089352
  WhereMaskSet *pMaskSet;  /* Mapping of table cursor numbers to bitmasks */pMaskSet87889,3089404
  Bitmask vmask;           /* Bitmask identifying virtual table cursors */vmask87890,3089481
  u8 op;                   /* Split operator.  TK_AND or TK_OR */op87891,3089556
  int nTerm;               /* Number of terms */nTerm87892,3089622
  int nSlot;               /* Number of entries in a[] */nSlot87893,3089671
  WhereTerm *a;            /* Each a[] describes a term of the WHERE cluase */a87894,3089729
  WhereTerm aStatic[1];    /* Initial static space for a[] */aStatic87896,3089840
  WhereTerm aStatic[8];    /* Initial static space for a[] */aStatic87898,3089908
struct WhereOrInfo {WhereOrInfo87906,3090121
  WhereClause wc;          /* Decomposition into subterms */wc87907,3090142
  Bitmask indexable;       /* Bitmask of all indexable tables in the clause */indexable87908,3090203
struct WhereAndInfo {WhereAndInfo87915,3090428
  WhereClause wc;          /* The subexpression broken out */wc87916,3090450
struct WhereMaskSet {WhereMaskSet87945,3091781
  int n;                        /* Number of assigned cursor values */n87946,3091803
  int ix[BMS];                  /* Cursor assigned to each bit */ix87947,3091874
struct WhereCost {WhereCost87954,3092051
  WherePlan plan;    /* The lookup strategy */plan87955,3092070
  double rCost;      /* Overall cost of pursuing this search strategy */rCost87956,3092117
  double nRow;       /* Estimated number of output rows */nRow87957,3092190
  Bitmask used;      /* Bitmask of cursors used by this plan */used87958,3092249
#define WO_IN WO_IN87966,3092489
#define WO_EQ WO_EQ87967,3092513
#define WO_LT WO_LT87968,3092537
#define WO_LE WO_LE87969,3092578
#define WO_GT WO_GT87970,3092619
#define WO_GE WO_GE87971,3092660
#define WO_MATCH WO_MATCH87972,3092701
#define WO_ISNULL WO_ISNULL87973,3092725
#define WO_OR WO_OR87974,3092749
#define WO_AND WO_AND87975,3092816
#define WO_ALL WO_ALL87977,3092885
#define WO_SINGLE WO_SINGLE87978,3092954
#define WHERE_ROWID_EQ WHERE_ROWID_EQ87993,3093672
#define WHERE_ROWID_RANGE WHERE_ROWID_RANGE87994,3093746
#define WHERE_COLUMN_EQ WHERE_COLUMN_EQ87995,3093820
#define WHERE_COLUMN_RANGE WHERE_COLUMN_RANGE87996,3093899
#define WHERE_COLUMN_IN WHERE_COLUMN_IN87997,3093965
#define WHERE_COLUMN_NULL WHERE_COLUMN_NULL87998,3094021
#define WHERE_INDEXED WHERE_INDEXED87999,3094076
#define WHERE_IN_ABLE WHERE_IN_ABLE88000,3094149
#define WHERE_TOP_LIMIT WHERE_TOP_LIMIT88001,3094225
#define WHERE_BTM_LIMIT WHERE_BTM_LIMIT88002,3094299
#define WHERE_IDX_ONLY WHERE_IDX_ONLY88003,3094373
#define WHERE_ORDERBY WHERE_ORDERBY88004,3094446
#define WHERE_REVERSE WHERE_REVERSE88005,3094527
#define WHERE_UNIQUE WHERE_UNIQUE88006,3094594
#define WHERE_VIRTUALTABLE WHERE_VIRTUALTABLE88007,3094668
#define WHERE_MULTI_OR WHERE_MULTI_OR88008,3094742
static void whereClauseInit(whereClauseInit88013,3094872
static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){whereOrInfoDelete88032,3095397
static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){whereAndInfoDelete88040,3095582
static void whereClauseClear(WhereClause *pWC){whereClauseClear88049,3095846
static int whereClauseInsert(WhereClause *pWC, Expr *p, u8 wtFlags){whereClauseInsert88087,3097301
static void whereSplit(WhereClause *pWC, Expr *pExpr, int op){whereSplit88132,3098848
#define initMaskSet(initMaskSet88146,3099179
static Bitmask getMask(WhereMaskSet *pMaskSet, int iCursor){getMask88152,3099329
static void createMask(WhereMaskSet *pMaskSet, int iCursor){createMask88171,3099845
static Bitmask exprTableUsage(WhereMaskSet *pMaskSet, Expr *p){exprTableUsage88192,3100773
static Bitmask exprListTableUsage(WhereMaskSet *pMaskSet, ExprList *pList){exprListTableUsage88208,3101244
static Bitmask exprSelectTableUsage(WhereMaskSet *pMaskSet, Select *pS){exprSelectTableUsage88218,3101485
static int allowedOp(int op){allowedOp88236,3102092
#define SWAP(SWAP88247,3102378
static void exprCommute(Parse *pParse, Expr *pExpr){exprCommute88261,3102965
static u16 operatorMask(int op){operatorMask88284,3103871
static WhereTerm *findTerm(findTerm88311,3104654
static void exprAnalyzeAll(exprAnalyzeAll88366,3106356
static int isLikeOrGlob(isLikeOrGlob88385,3106924
static int isMatchOfColumn(isMatchOfColumn88493,3110998
static void transferJoinMarkings(Expr *pDerived, Expr *pBase){transferJoinMarkings88519,3111539
static void exprAnalyzeOrTerm(exprAnalyzeOrTerm88601,3114923
static void exprAnalyze(exprAnalyze88851,3125223
static int referencesOtherTables(referencesOtherTables89093,3134020
static int isSortingIndex(isSortingIndex89128,3135441
static double estLog(double N){estLog89257,3140471
static void TRACE_IDX_INPUTS(sqlite3_index_info *p){TRACE_IDX_INPUTS89274,3140884
static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){TRACE_IDX_OUTPUTS89292,3141411
#define TRACE_IDX_INPUTS(TRACE_IDX_INPUTS89307,3141936
#define TRACE_IDX_OUTPUTS(TRACE_IDX_OUTPUTS89308,3141964
static void bestOrClauseIndex(bestOrClauseIndex89324,3142438
static sqlite3_index_info *allocateIndexInfo(allocateIndexInfo89406,3145603
static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){vtabBestIndex89519,3149978
static void bestVirtualIndex(bestVirtualIndex89568,3151594
static int whereRangeRegion(whereRangeRegion89712,3157187
static int valueFromExpr(valueFromExpr89807,3160401
static int whereRangeScanEst(whereRangeScanEst89867,3162811
static void bestBtreeIndex(bestBtreeIndex89969,3166133
static void bestIndex(bestIndex90293,3178577
static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){disableTerm90339,3180452
static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){codeApplyAffinity90365,3181306
static int codeEqualityTerm(codeEqualityTerm90405,3182448
static int codeAllEqualityTerms(codeAllEqualityTerms90498,3186088
static Bitmask codeOneLoopStart(codeOneLoopStart90572,3188763
SQLITE_API char sqlite3_query_plan[BMS*2*40];  /* Text of the join */sqlite3_query_plan91201,3214485
static int nQPlan = 0;              /* Next free slow in _query_plan[] */nQPlan91202,3214555
static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){whereInfoFree91210,3214693
SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin(sqlite3WhereBegin91317,3219028
SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo *pWInfo){sqlite3WhereEnd91756,3236714
#define YYNOERRORRECOVERY YYNOERRORRECOVERY91894,3241708
#define yytestcase(yytestcase91899,3241787
struct LimitVal {LimitVal91905,3241928
  Expr *pLimit;    /* The LIMIT expression.  NULL if there is no limit */pLimit91906,3241946
  Expr *pOffset;   /* The OFFSET expression.  NULL if there is none */pOffset91907,3242020
struct LikeOp {LikeOp91914,3242204
  Token eOperator;  /* "like" or "glob" or "regexp" */eOperator91915,3242220
  int not;         /* True if the NOT keyword is present */not91916,3242275
struct TrigEvent { int a; IdList * b; };TrigEvent91928,3242616
struct TrigEvent { int a; IdList * b; };a91928,3242616
struct TrigEvent { int a; IdList * b; };b91928,3242616
struct AttachKey { int type;  Token key; };AttachKey91933,3242736
struct AttachKey { int type;  Token key; };type91933,3242736
struct AttachKey { int type;  Token key; };key91933,3242736
  static void spanSet(ExprSpan *pOut, Token *pStart, Token *pEnd){spanSet91940,3242996
  static void spanExpr(ExprSpan *pOut, Parse *pParse, int op, Token *pValue){spanExpr91949,3243316
  static void spanBinaryExpr(spanBinaryExpr91958,3243674
  static void spanUnaryPostfix(spanUnaryPostfix91972,3244196
  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){binaryToUnaryIfNull91986,3244829
  static void spanUnaryPrefix(spanUnaryPrefix91997,3245151
# define INTERFACE INTERFACE92021,3246051
#define YYCODETYPE YYCODETYPE92057,3248371
#define YYNOCODE YYNOCODE92058,3248404
#define YYACTIONTYPE YYACTIONTYPE92059,3248425
#define YYWILDCARD YYWILDCARD92060,3248465
#define sqlite3ParserTOKENTYPE sqlite3ParserTOKENTYPE92061,3248487
  int yyinit;yyinit92063,3248540
  sqlite3ParserTOKENTYPE yy0;yy092064,3248554
  Select* yy3;yy392065,3248584
  ExprList* yy14;yy1492066,3248599
  SrcList* yy65;yy6592067,3248617
  struct LikeOp yy96;yy9692068,3248634
  Expr* yy132;yy13292069,3248656
  u8 yy186;yy18692070,3248671
  int yy328;yy32892071,3248683
  ExprSpan yy346;yy34692072,3248696
  struct TrigEvent yy378;yy37892073,3248714
  IdList* yy408;yy40892074,3248740
  struct {int value; int mask;} yy429;value92075,3248757
  struct {int value; int mask;} yy429;mask92075,3248757
  struct {int value; int mask;} yy429;yy42992075,3248757
  TriggerStep* yy473;yy47392076,3248796
  struct LimitVal yy476;yy47692077,3248818
} YYMINORTYPE;YYMINORTYPE92078,3248843
#define YYSTACKDEPTH YYSTACKDEPTH92080,3248879
#define sqlite3ParserARG_SDECL sqlite3ParserARG_SDECL92082,3248911
#define sqlite3ParserARG_PDECL sqlite3ParserARG_PDECL92083,3248957
#define sqlite3ParserARG_FETCH sqlite3ParserARG_FETCH92084,3249003
#define sqlite3ParserARG_STORE sqlite3ParserARG_STORE92085,3249068
#define YYNSTATE YYNSTATE92086,3249126
#define YYNRULE YYNRULE92087,3249147
#define YYFALLBACK YYFALLBACK92088,3249167
#define YY_NO_ACTION YY_NO_ACTION92089,3249188
#define YY_ACCEPT_ACTION YY_ACCEPT_ACTION92090,3249235
#define YY_ERROR_ACTION YY_ERROR_ACTION92091,3249282
static const YYMINORTYPE yyzerominor = { 0 };yyzerominor92095,3249426
# define yytestcase(yytestcase92106,3249820
#define YY_ACTTAB_COUNT YY_ACTTAB_COUNT92157,3252052
static const YYACTIONTYPE yy_action[] = {yy_action92158,3252083
static const YYCODETYPE yy_lookahead[] = {yy_lookahead92315,3263598
#define YY_SHIFT_USE_DFLT YY_SHIFT_USE_DFLT92472,3275114
#define YY_SHIFT_COUNT YY_SHIFT_COUNT92473,3275146
#define YY_SHIFT_MIN YY_SHIFT_MIN92474,3275175
#define YY_SHIFT_MAX YY_SHIFT_MAX92475,3275204
static const short yy_shift_ofst[] = {yy_shift_ofst92476,3275234
#define YY_REDUCE_USE_DFLT YY_REDUCE_USE_DFLT92520,3278378
#define YY_REDUCE_COUNT YY_REDUCE_COUNT92521,3278412
#define YY_REDUCE_MIN YY_REDUCE_MIN92522,3278442
#define YY_REDUCE_MAX YY_REDUCE_MAX92523,3278473
static const short yy_reduce_ofst[] = {yy_reduce_ofst92524,3278504
static const YYACTIONTYPE yy_default[] = {yy_default92558,3280873
static const YYCODETYPE yyFallback[] = {yyFallback92636,3286011
struct yyStackEntry {yyStackEntry92719,3288724
  YYACTIONTYPE stateno;  /* The state-number */stateno92720,3288746
  YYCODETYPE major;      /* The major token value.  This is the codemajor92721,3288794
  YYMINORTYPE minor;     /* The user-supplied minor token value.  Thisminor92723,3288935
typedef struct yyStackEntry yyStackEntry;yyStackEntry92726,3289067
struct yyParser {yyParser92730,3289209
  int yyidx;                    /* Index of top element in stack */yyidx92731,3289227
  int yyidxMax;                 /* Maximum value of yyidx */yyidxMax92733,3289323
  int yyerrcnt;                 /* Shifts left before out of the error */yyerrcnt92735,3289391
  int yystksz;                  /* Current side of the stack */yystksz92738,3289563
  yyStackEntry *yystack;        /* The parser's stack */yystack92739,3289627
typedef struct yyParser yyParser;yyParser92744,3289764
static FILE *yyTraceFILE = 0;yyTraceFILE92747,3289814
static char *yyTracePrompt = 0;yyTracePrompt92748,3289844
SQLITE_PRIVATE void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){sqlite3ParserTrace92769,3290388
static const char *const yyTokenName[] = { yyTokenName92780,3290780
static const char *const yyRuleName[] = {yyRuleName92851,3295347
static void yyGrowStack(yyParser *p){yyGrowStack93190,3309210
SQLITE_PRIVATE void *sqlite3ParserAlloc(void *(*mallocProc)(size_t)){sqlite3ParserAlloc93221,3309921
static void yy_destructor(yy_destructor93243,3310522
static int yy_pop_parser_stack(yyParser *pParser){yy_pop_parser_stack93339,3313136
SQLITE_PRIVATE void sqlite3ParserFree(sqlite3ParserFree93371,3314043
SQLITE_PRIVATE int sqlite3ParserStackPeak(void *p){sqlite3ParserStackPeak93390,3314627
static int yy_find_shift_action(yy_find_shift_action93404,3315030
static int yy_find_reduce_action(yy_find_reduce_action93469,3316883
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){yyStackOverflow93499,3317606
static void yy_shift(yy_shift93520,3318262
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */lhs93567,3319678
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */nrhs93568,3319751
} yyRuleInfo[] = {yyRuleInfo93569,3319829
static void yy_reduce(yy_reduce93908,3324628
static void yy_parse_failed(yy_parse_failed95066,3376167
static void yy_syntax_error(yy_syntax_error95085,3376712
#define TOKEN TOKEN95091,3376966
static void yy_accept(yy_accept95103,3377370
SQLITE_PRIVATE void sqlite3Parser(sqlite3Parser95137,3378436
# define charMap(charMap95316,3384572
# define charMap(charMap95319,3384658
const unsigned char ebcdicToAscii[] = {ebcdicToAscii95320,3384710
static int keywordCode(const char *z, int n){keywordCode95368,3387311
SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char *z, int n){sqlite3KeywordCode95620,3400233
#define SQLITE_N_KEYWORD SQLITE_N_KEYWORD95623,3400340
#define IdChar(IdChar95646,3401116
SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[] = {sqlite3IsEbcdicIdChar95649,3401209
#define IdChar(IdChar95664,3402064
SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *z, int *tokenType){sqlite3GetToken95672,3402259
SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){sqlite3RunParser95949,3409112
#define IdChar(IdChar96117,3414488
SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[];sqlite3IsEbcdicIdChar96120,3414581
#define IdChar(IdChar96121,3414632
#define tkSEMI tkSEMI96130,3414877
#define tkWS tkWS96131,3414897
#define tkOTHER tkOTHER96132,3414917
#define tkEXPLAIN tkEXPLAIN96134,3414965
#define tkCREATE tkCREATE96135,3414985
#define tkTEMP tkTEMP96136,3415005
#define tkTRIGGER tkTRIGGER96137,3415025
#define tkEND tkEND96138,3415045
SQLITE_API int sqlite3_complete(const char *zSql){sqlite3_complete96194,3417280
SQLITE_API int sqlite3_complete16(const void *zSql){sqlite3_complete1696352,3422268
SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;sqlite3_version96496,3426758
SQLITE_API const char *sqlite3_libversion(void){ return sqlite3_version; }sqlite3_libversion96498,3426823
SQLITE_API const char *sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }sqlite3_sourceid96499,3426898
SQLITE_API int sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }sqlite3_libversion_number96500,3426972
SQLITE_API int sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }sqlite3_threadsafe96501,3427052
SQLITE_PRIVATE void (*sqlite3IoTrace)(const char*, ...) = 0;sqlite3IoTrace96510,3427420
SQLITE_API char *sqlite3_temp_directory = 0;sqlite3_temp_directory96520,3427711
SQLITE_API int sqlite3_initialize(void){sqlite3_initialize96553,3429093
SQLITE_API int sqlite3_shutdown(void){sqlite3_shutdown96686,3433889
SQLITE_API int sqlite3_config(int op, ...){sqlite3_config96717,3434760
static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){setupLookaside96880,3440110
SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3 *db){sqlite3_db_mutex96936,3441565
SQLITE_API int sqlite3_db_config(sqlite3 *db, int op, ...){sqlite3_db_config96943,3441715
static int allSpaces(const char *z, int n){allSpaces96968,3442201
static int binCollFunc(binCollFunc96980,3442530
static int nocaseCollatingFunc(nocaseCollatingFunc97010,3443270
SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(sqlite3 *db){sqlite3_last_insert_rowid97027,3443623
SQLITE_API int sqlite3_changes(sqlite3 *db){sqlite3_changes97034,3443795
SQLITE_API int sqlite3_total_changes(sqlite3 *db){sqlite3_total_changes97041,3443941
SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *db){sqlite3CloseSavepoints97050,3444210
SQLITE_API int sqlite3_close(sqlite3 *db){sqlite3_close97064,3444523
SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3 *db){sqlite3RollbackAll97190,3448125
SQLITE_PRIVATE const char *sqlite3ErrStr(int rc){sqlite3ErrStr97225,3449051
static int sqliteDefaultBusyCallback(sqliteDefaultBusyCallback97269,3450996
# define NDELAY NDELAY97278,3451390
SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler *p){sqlite3InvokeBusyHandler97315,3452304
SQLITE_API int sqlite3_busy_handler(sqlite3_busy_handler97331,3452677
SQLITE_API void sqlite3_progress_handler(sqlite3_progress_handler97350,3453186
SQLITE_API int sqlite3_busy_timeout(sqlite3 *db, int ms){sqlite3_busy_timeout97375,3453701
SQLITE_API void sqlite3_interrupt(sqlite3 *db){sqlite3_interrupt97388,3454013
SQLITE_PRIVATE int sqlite3CreateFunc(sqlite3CreateFunc97399,3454368
SQLITE_API int sqlite3_create_function(sqlite3_create_function97483,3456810
SQLITE_API int sqlite3_create_function16(sqlite3_create_function1697502,3457310
SQLITE_API int sqlite3_overload_function(sqlite3_overload_function97538,3458436
SQLITE_API void *sqlite3_trace(sqlite3 *db, void (*xTrace)(void*,const char*), void *pArg){sqlite3_trace97564,3459175
SQLITE_API void *sqlite3_profile(sqlite3_profile97581,3459741
SQLITE_API void *sqlite3_commit_hook(sqlite3_commit_hook97602,3460247
SQLITE_API void *sqlite3_update_hook(sqlite3_update_hook97620,3460793
SQLITE_API void *sqlite3_rollback_hook(sqlite3_rollback_hook97638,3461330
SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3 *db){sqlite3TempInMemory97671,3462826
SQLITE_PRIVATE int sqlite3BtreeFactory(sqlite3BtreeFactory97699,3463793
SQLITE_API const char *sqlite3_errmsg(sqlite3 *db){sqlite3_errmsg97744,3465326
SQLITE_API const void *sqlite3_errmsg16(sqlite3 *db){sqlite3_errmsg1697771,3465955
SQLITE_API int sqlite3_errcode(sqlite3 *db){sqlite3_errcode97817,3467398
SQLITE_API int sqlite3_extended_errcode(sqlite3 *db){sqlite3_extended_errcode97826,3467625
static int createCollation(createCollation97840,3467955
static const int aHardLimit[] = {aHardLimit97921,3470347
SQLITE_API int sqlite3_limit(sqlite3 *db, int limitId, int newLimit){sqlite3_limit97980,3472052
static int openDatabase(openDatabase98000,3472572
SQLITE_API int sqlite3_open(sqlite3_open98231,3479322
SQLITE_API int sqlite3_open_v2(sqlite3_open_v298238,3479509
SQLITE_API int sqlite3_open16(sqlite3_open1698251,3479870
SQLITE_API int sqlite3_create_collation(sqlite3_create_collation98288,3480847
SQLITE_API int sqlite3_create_collation_v2(sqlite3_create_collation_v298307,3481320
SQLITE_API int sqlite3_create_collation16(sqlite3_create_collation1698328,3481847
SQLITE_API int sqlite3_collation_needed(sqlite3_collation_needed98354,3482574
SQLITE_API int sqlite3_collation_needed16(sqlite3_collation_needed1698372,3483084
SQLITE_API int sqlite3_global_recover(void){sqlite3_global_recover98392,3483665
SQLITE_API int sqlite3_get_autocommit(sqlite3 *db){sqlite3_get_autocommit98406,3484076
SQLITE_PRIVATE int sqlite3CorruptError(int lineno){sqlite3CorruptError98421,3484599
SQLITE_PRIVATE int sqlite3MisuseError(int lineno){sqlite3MisuseError98427,3484821
SQLITE_PRIVATE int sqlite3CantopenError(int lineno){sqlite3CantopenError98432,3485016
SQLITE_API void sqlite3_thread_cleanup(void){sqlite3_thread_cleanup98447,3485507
SQLITE_API int sqlite3_table_column_metadata(sqlite3_table_column_metadata98456,3485733
SQLITE_API int sqlite3_sleep(int ms){sqlite3_sleep98567,3489043
SQLITE_API int sqlite3_extended_result_codes(sqlite3 *db, int onoff){sqlite3_extended_result_codes98583,3489407
SQLITE_API int sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){sqlite3_file_control98593,3489677
SQLITE_API int sqlite3_test_control(int op, ...){sqlite3_test_control98627,3490488
#define assertMutexHeld(assertMutexHeld98848,3498027
static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;sqlite3BlockedList98857,3498379
static void checkListProperties(sqlite3 *db){checkListProperties98874,3499017
# define checkListProperties(checkListProperties98893,3499589
static void removeFromBlockedList(sqlite3 *db){removeFromBlockedList98900,3499777
static void addToBlockedList(sqlite3 *db){addToBlockedList98915,3500123
static void enterMutex(void){enterMutex98930,3500407
static void leaveMutex(void){leaveMutex98938,3500578
SQLITE_API int sqlite3_unlock_notify(sqlite3_unlock_notify98965,3501508
SQLITE_PRIVATE void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){sqlite3ConnectionBlocked99014,3502869
SQLITE_PRIVATE void sqlite3ConnectionUnlocked(sqlite3 *db){sqlite3ConnectionUnlocked99042,3503837
SQLITE_PRIVATE void sqlite3ConnectionClosed(sqlite3 *db){sqlite3ConnectionClosed99141,3507686
# define SQLITE_CORE SQLITE_CORE99449,3520790
#define _FTSINT_H_FTSINT_H99469,3521380
# define NDEBUG NDEBUG99472,3521447
#define _FTS3_TOKENIZER_H__FTS3_TOKENIZER_H_99497,3522317
typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;sqlite3_tokenizer_module99523,3523503
typedef struct sqlite3_tokenizer sqlite3_tokenizer;sqlite3_tokenizer99524,3523569
typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;sqlite3_tokenizer_cursor99525,3523621
struct sqlite3_tokenizer_module {sqlite3_tokenizer_module99527,3523688
  int iVersion;iVersion99532,3523784
  int (*xCreate)(xCreate99551,3524567
  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);xDestroy99561,3524935
  int (*xOpen)(xOpen99568,3525198
  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);xClose99578,3525564
  int (*xNext)(xNext99604,3526850
struct sqlite3_tokenizer {sqlite3_tokenizer99613,3527248
  const sqlite3_tokenizer_module *pModule;  /* The module for this tokenizer */pModule99614,3527275
struct sqlite3_tokenizer_cursor {sqlite3_tokenizer_cursor99618,3527430
  sqlite3_tokenizer *pTokenizer;       /* Tokenizer for this cursor. */pTokenizer99619,3527464
#define _FTS3_HASH_H__FTS3_HASH_H_99650,3528660
typedef struct Fts3Hash Fts3Hash;Fts3Hash99653,3528725
typedef struct Fts3HashElem Fts3HashElem;Fts3HashElem99654,3528759
struct Fts3Hash {Fts3Hash99664,3529258
  char keyClass;          /* HASH_INT, _POINTER, _STRING, _BINARY */keyClass99665,3529276
  char copyKey;           /* True if copy of key made on insert */copyKey99666,3529345
  int count;              /* Number of entries in this table */count99667,3529412
  Fts3HashElem *first;    /* The first element of the array */first99668,3529476
  int htsize;             /* Number of buckets in the hash table */htsize99669,3529539
  struct _fts3ht {        /* the hash table */_fts3ht99670,3529607
    int count;               /* Number of entries with this hash */count99671,3529654
    Fts3HashElem *chain;     /* Pointer to first entry with this hash */chain99672,3529722
  } *ht;ht99673,3529795
struct Fts3HashElem {Fts3HashElem99682,3530066
  Fts3HashElem *next, *prev; /* Next and previous elements in the table */next99683,3530088
  Fts3HashElem *next, *prev; /* Next and previous elements in the table */prev99683,3530088
  void *data;                /* Data associated with this element */data99684,3530163
  void *pKey; int nKey;      /* Key associated with this element */pKey99685,3530232
  void *pKey; int nKey;      /* Key associated with this element */nKey99685,3530232
#define FTS3_HASH_STRING FTS3_HASH_STRING99700,3530807
#define FTS3_HASH_BINARY FTS3_HASH_BINARY99701,3530837
#define fts3HashInit fts3HashInit99715,3531386
#define fts3HashInsert fts3HashInsert99716,3531431
#define fts3HashFind fts3HashFind99717,3531478
#define fts3HashClear fts3HashClear99718,3531523
#define fts3HashFindElem fts3HashFindElem99719,3531569
#define fts3HashFirst(fts3HashFirst99733,3531902
#define fts3HashNext(fts3HashNext99734,3531941
#define fts3HashData(fts3HashData99735,3531979
#define fts3HashKey(fts3HashKey99736,3532017
#define fts3HashKeysize(fts3HashKeysize99737,3532055
#define fts3HashCount(fts3HashCount99742,3532138
#define FTS3_MERGE_COUNT FTS3_MERGE_COUNT99754,3532541
#define FTS3_MAX_PENDING_DATA FTS3_MAX_PENDING_DATA99764,3532986
#define SizeofArray(SizeofArray99771,3533237
#define FTS3_VARINT_MAX FTS3_VARINT_MAX99777,3533442
# define ALWAYS(ALWAYS99789,3533705
# define NEVER(NEVER99790,3533728
typedef unsigned char u8;         /* 1-byte (or larger) unsigned integer */u899794,3533791
typedef short int i16;            /* 2-byte (or larger) signed integer */i1699795,3533867
typedef unsigned int u32;         /* 4-byte unsigned integer */u3299796,3533941
typedef sqlite3_uint64 u64;       /* 8-byte unsigned integer */u6499797,3534005
#define UNUSED_PARAMETER(UNUSED_PARAMETER99801,3534142
typedef struct Fts3Table Fts3Table;Fts3Table99804,3534188
typedef struct Fts3Cursor Fts3Cursor;Fts3Cursor99805,3534224
typedef struct Fts3Expr Fts3Expr;Fts3Expr99806,3534262
typedef struct Fts3Phrase Fts3Phrase;Fts3Phrase99807,3534296
typedef struct Fts3SegReader Fts3SegReader;Fts3SegReader99808,3534334
typedef struct Fts3SegFilter Fts3SegFilter;Fts3SegFilter99809,3534378
struct Fts3Table {Fts3Table99818,3534719
  sqlite3_vtab base;              /* Base class used by SQLite core */base99819,3534738
  sqlite3 *db;                    /* The database connection */db99820,3534809
  const char *zDb;                /* logical database name */zDb99821,3534873
  const char *zName;              /* virtual table name */zName99822,3534935
  int nColumn;                    /* number of named columns in virtual table */nColumn99823,3534994
  char **azColumn;                /* column names.  malloced */azColumn99824,3535075
  sqlite3_tokenizer *pTokenizer;  /* tokenizer for inserts and queries */pTokenizer99825,3535139
  sqlite3_stmt *aStmt[25];aStmt99830,3535364
  char *zSelectLeaves;zSelectLeaves99837,3535537
  int nLeavesStmt;                /* Valid statements in aLeavesStmt */nLeavesStmt99838,3535560
  int nLeavesTotal;               /* Total number of prepared leaves stmts */nLeavesTotal99839,3535632
  int nLeavesAlloc;               /* Allocated size of aLeavesStmt */nLeavesAlloc99840,3535710
  sqlite3_stmt **aLeavesStmt;     /* Array of prepared zSelectLeaves stmts */aLeavesStmt99841,3535780
  int nNodeSize;                  /* Soft limit for node size */nNodeSize99843,3535859
  u8 bHasContent;                 /* True if %_content table exists */bHasContent99844,3535924
  u8 bHasDocsize;                 /* True if %_docsize table exists */bHasDocsize99845,3535995
  int nMaxPendingData;nMaxPendingData99854,3536467
  int nPendingData;nPendingData99855,3536490
  sqlite_int64 iPrevDocid;iPrevDocid99856,3536510
  Fts3Hash pendingTerms;pendingTerms99857,3536537
struct Fts3Cursor {Fts3Cursor99865,3536779
  sqlite3_vtab_cursor base;       /* Base class used by SQLite core */base99866,3536799
  i16 eSearch;                    /* Search strategy (see below) */eSearch99867,3536870
  u8 isEof;                       /* True if at End Of Results */isEof99868,3536938
  u8 isRequireSeek;               /* True if must seek pStmt to %_content row */isRequireSeek99869,3537004
  sqlite3_stmt *pStmt;            /* Prepared statement in use by the cursor */pStmt99870,3537085
  Fts3Expr *pExpr;                /* Parsed MATCH query string */pExpr99871,3537165
  sqlite3_int64 iPrevId;          /* Previous id read from aDoclist */iPrevId99872,3537231
  char *pNextId;                  /* Pointer into the body of aDoclist */pNextId99873,3537302
  char *aDoclist;                 /* List of docids for full-text queries */aDoclist99874,3537376
  int nDoclist;                   /* Size of buffer at aDoclist */nDoclist99875,3537453
  int isMatchinfoNeeded;          /* True when aMatchinfo[] needs filling in */isMatchinfoNeeded99876,3537520
  u32 *aMatchinfo;                /* Information about most recent match */aMatchinfo99877,3537600
#define FTS3_FULLSCAN_SEARCH FTS3_FULLSCAN_SEARCH99895,3538372
#define FTS3_DOCID_SEARCH FTS3_DOCID_SEARCH99896,3538443
#define FTS3_FULLTEXT_SEARCH FTS3_FULLTEXT_SEARCH99897,3538518
struct Fts3Phrase {Fts3Phrase99905,3538831
  int nToken;                /* Number of tokens in the phrase */nToken99906,3538851
  int iColumn;               /* Index of column this phrase must match */iColumn99907,3538917
  int isNot;                 /* Phrase prefixed by unary not (-) operator */isNot99908,3538991
  struct PhraseToken {PhraseToken99909,3539068
    char *z;                 /* Text of the token */z99910,3539091
    int n;                   /* Number of bytes in buffer pointed to by z */n99911,3539144
    int isPrefix;            /* True if token ends in with a "*" character */isPrefix99912,3539221
  } aToken[1];               /* One entry for each token in the phrase */aToken99913,3539299
struct Fts3Expr {Fts3Expr99929,3540010
  int eType;                 /* One of the FTSQUERY_XXX values defined below */eType99930,3540028
  int nNear;                 /* Valid if eType==FTSQUERY_NEAR */nNear99931,3540108
  Fts3Expr *pParent;         /* pParent->pLeft==this or pParent->pRight==this */pParent99932,3540173
  Fts3Expr *pLeft;           /* Left operand */pLeft99933,3540254
  Fts3Expr *pRight;          /* Right operand */pRight99934,3540302
  Fts3Phrase *pPhrase;       /* Valid if eType==FTSQUERY_PHRASE */pPhrase99935,3540351
  int isLoaded;              /* True if aDoclist/nDoclist are initialized. */isLoaded99937,3540419
  char *aDoclist;            /* Buffer containing doclist */aDoclist99938,3540497
  int nDoclist;              /* Size of aDoclist in bytes */nDoclist99939,3540558
  sqlite3_int64 iCurrent;iCurrent99941,3540620
  char *pCurrent;pCurrent99942,3540646
#define FTSQUERY_NEAR FTSQUERY_NEAR99956,3540949
#define FTSQUERY_NOT FTSQUERY_NOT99957,3540975
#define FTSQUERY_AND FTSQUERY_AND99958,3541001
#define FTSQUERY_OR FTSQUERY_OR99959,3541027
#define FTSQUERY_PHRASE FTSQUERY_PHRASE99960,3541053
#define FTS3_SEGMENT_REQUIRE_POS FTS3_SEGMENT_REQUIRE_POS99987,3542458
#define FTS3_SEGMENT_IGNORE_EMPTY FTS3_SEGMENT_IGNORE_EMPTY99988,3542504
#define FTS3_SEGMENT_COLUMN_FILTER FTS3_SEGMENT_COLUMN_FILTER99989,3542550
#define FTS3_SEGMENT_PREFIX FTS3_SEGMENT_PREFIX99990,3542596
struct Fts3SegFilter {Fts3SegFilter99993,3542703
  const char *zTerm;zTerm99994,3542726
  int nTerm;nTerm99995,3542747
  int iCol;iCol99996,3542760
  int flags;flags99997,3542772
SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){sqlite3Fts3PutVarint100049,3544647
SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *p, sqlite_int64 *v){sqlite3Fts3GetVarint100066,3545181
SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *p, int *pi){sqlite3Fts3GetVarint32100082,3545665
SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64 v){sqlite3Fts3VarintLen100093,3545933
SQLITE_PRIVATE void sqlite3Fts3Dequote(char *z){sqlite3Fts3Dequote100116,3546429
static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){fts3GetDeltaVarint100145,3547279
static void fts3GetDeltaVarint2(char **pp, char *pEnd, sqlite3_int64 *pVal){fts3GetDeltaVarint2100157,3547665
static int fts3DisconnectMethod(sqlite3_vtab *pVtab){fts3DisconnectMethod100168,3547873
void fts3DbExec(fts3DbExec100198,3548658
static int fts3DestroyMethod(sqlite3_vtab *pVtab){fts3DestroyMethod100221,3549197
static int fts3DeclareVtab(Fts3Table *p){fts3DeclareVtab100246,3550235
static int fts3CreateTables(Fts3Table *p){fts3CreateTables100279,3551280
static int fts3TableExistsCallback(void *pArg, int n, char **pp1, char **pp2){fts3TableExistsCallback100334,3552931
static void fts3TableExists(fts3TableExists100342,3553108
static int fts3InitVtab(fts3InitVtab100375,3554131
static int fts3ConnectMethod(fts3ConnectMethod100511,3558131
static int fts3CreateMethod(fts3CreateMethod100521,3558651
static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){fts3BestIndexMethod100540,3559458
static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){fts3OpenMethod100593,3561270
static int fulltextClose(sqlite3_vtab_cursor *pCursor){fulltextClose100614,3561954
static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){fts3CursorSeek100624,3562234
static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){fts3NextMethod100650,3562978
static int fts3SelectLeaf(fts3SelectLeaf100687,3564331
static void fts3PutDeltaVarint(fts3PutDeltaVarint100771,3567559
static void fts3PoslistCopy(char **pp, char **ppPoslist){fts3PoslistCopy100790,3568305
static void fts3ColumnlistCopy(char **pp, char **ppPoslist){fts3ColumnlistCopy100817,3569142
#define OFFSET_LIST_END OFFSET_LIST_END100837,3569646
static void fts3ReadNextPos(fts3ReadNextPos100850,3570223
static int fts3PutColNumber(char **pp, int iCol){fts3PutColNumber100870,3570817
static void fts3PoslistMerge(fts3PoslistMerge100884,3571107
static int fts3PoslistPhraseMerge(fts3PoslistPhraseMerge100953,3573119
static int fts3PoslistNearMerge(fts3PoslistNearMerge101064,3576026
#define MERGE_NOT MERGE_NOT101108,3577271
#define MERGE_AND MERGE_AND101109,3577322
#define MERGE_OR MERGE_OR101110,3577373
#define MERGE_POS_OR MERGE_POS_OR101111,3577424
#define MERGE_PHRASE MERGE_PHRASE101112,3577475
#define MERGE_POS_PHRASE MERGE_POS_PHRASE101113,3577526
#define MERGE_NEAR MERGE_NEAR101114,3577577
#define MERGE_POS_NEAR MERGE_POS_NEAR101115,3577628
static int fts3DoclistMerge(fts3DoclistMerge101127,3578156
typedef struct TermSelect TermSelect;TermSelect101282,3582860
struct TermSelect {TermSelect101283,3582898
  int isReqPos;isReqPos101284,3582918
  char *aOutput;                  /* Malloc'd output buffer */aOutput101285,3582934
  int nOutput;                    /* Size of output in bytes */nOutput101286,3582997
static int fts3TermSelectCb(fts3TermSelectCb101294,3583235
static int fts3TermSelect(fts3TermSelect101349,3584967
static int fts3PhraseSelect(fts3PhraseSelect101479,3589740
static int fts3NearMerge(fts3NearMerge101536,3591755
SQLITE_PRIVATE int sqlite3Fts3ExprNearTrim(Fts3Expr *pLeft, Fts3Expr *pRight, int nNear){sqlite3Fts3ExprNearTrim101570,3592842
static int evalFts3Expr(evalFts3Expr101608,3593963
static int fts3FilterMethod(fts3FilterMethod101722,3597886
static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){fts3EofMethod101800,3600645
static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){fts3RowidMethod101810,3600992
static int fts3ColumnMethod(fts3ColumnMethod101824,3601394
static int fts3UpdateMethod(fts3UpdateMethod101863,3602804
static int fts3SyncMethod(sqlite3_vtab *pVtab){fts3SyncMethod101876,3603276
static int fts3BeginMethod(sqlite3_vtab *pVtab){fts3BeginMethod101883,3603447
static int fts3CommitMethod(sqlite3_vtab *pVtab){fts3CommitMethod101894,3603775
static int fts3RollbackMethod(sqlite3_vtab *pVtab){fts3RollbackMethod101904,3604080
SQLITE_PRIVATE int sqlite3Fts3ExprLoadDoclist(Fts3Table *pTab, Fts3Expr *pExpr){sqlite3Fts3ExprLoadDoclist101915,3604440
SQLITE_PRIVATE char *sqlite3Fts3FindPositions(sqlite3Fts3FindPositions101924,3604786
static int fts3FunctionArg(fts3FunctionArg101978,3606587
static void fts3SnippetFunc(fts3SnippetFunc102001,3607330
static void fts3OffsetsFunc(fts3OffsetsFunc102042,3608803
static void fts3OptimizeFunc(fts3OptimizeFunc102068,3609594
static void fts3MatchinfoFunc(fts3MatchinfoFunc102102,3610601
static int fts3FindFunctionMethod(fts3FindFunctionMethod102124,3611254
static int fts3RenameMethod(fts3RenameMethod102160,3612328
static const sqlite3_module fts3Module = {fts3Module102196,3613332
static void hashDestroy(void *p){hashDestroy102224,3614356
SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db){sqlite3Fts3Init102251,3615582
SQLITE_API int sqlite3_extension_init(sqlite3_extension_init102323,3617686
SQLITE_API int sqlite3_fts3_enable_parentheses = 0;sqlite3_fts3_enable_parentheses102402,3620412
#  define sqlite3_fts3_enable_parentheses sqlite3_fts3_enable_parentheses102405,3620510
#  define sqlite3_fts3_enable_parentheses sqlite3_fts3_enable_parentheses102407,3620561
#define SQLITE_FTS3_DEFAULT_NEAR_PARAM SQLITE_FTS3_DEFAULT_NEAR_PARAM102414,3620663
typedef struct ParseContext ParseContext;ParseContext102417,3620707
struct ParseContext {ParseContext102418,3620749
  sqlite3_tokenizer *pTokenizer;      /* Tokenizer module */pTokenizer102419,3620771
  const char **azCol;                 /* Array of column names for fts3 table */azCol102420,3620832
  int nCol;                           /* Number of entries in azCol[] */nCol102421,3620913
  int iDefaultCol;                    /* Default column to query */iDefaultCol102422,3620986
  sqlite3_context *pCtx;              /* Write error message here */pCtx102423,3621054
  int nNest;                          /* Number of nested brackets */nNest102424,3621123
static int fts3isspace(char c){fts3isspace102438,3621744
static int getNextToken(getNextToken102454,3622412
static void *fts3ReallocOrFree(void *pOrig, int nNew){fts3ReallocOrFree102516,3624384
static int getNextString(getNextString102536,3625119
static int getNextNode(getNextNode102639,3628203
static int opPrecedence(Fts3Expr *p){opPrecedence102811,3633808
static void insertBinaryOperator(insertBinaryOperator102832,3634562
static int fts3ExprParse(fts3ExprParse102863,3635690
SQLITE_PRIVATE int sqlite3Fts3ExprParse(sqlite3Fts3ExprParse103028,3641137
SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *p){sqlite3Fts3ExprFree103066,3642210
static int queryTestTokenizer(queryTestTokenizer103086,3642717
static void exprToString(Fts3Expr *pExpr, char *zBuf){exprToString103117,3643563
static void fts3ExprTest(fts3ExprTest103169,3645181
SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3* db){sqlite3Fts3ExprInitTestInterface103248,3647192
static void *fts3HashMalloc(int n){fts3HashMalloc103291,3648552
static void fts3HashFree(void *p){fts3HashFree103298,3648669
SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){sqlite3Fts3HashInit103312,3649194
SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash *pH){sqlite3Fts3HashClear103327,3649661
static int fts3StrHash(const void *pKey, int nKey){fts3StrHash103350,3650186
static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){fts3StrCompare103360,3650421
static int fts3BinHash(const void *pKey, int nKey){fts3BinHash103368,3650663
static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){fts3BinCompare103376,3650849
static int (*ftsHashFunction(int keyClass))(const void*,int){ftsHashFunction103393,3651564
static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){ftsCompareFunction103408,3651979
static void fts3HashInsertElement(fts3HashInsertElement103419,3652252
static int fts3Rehash(Fts3Hash *pH, int new_size){fts3Rehash103449,3653161
static Fts3HashElem *fts3FindElementByHash(fts3FindElementByHash103473,3654083
static void fts3RemoveElementByHash(fts3RemoveElementByHash103501,3654971
SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem(sqlite3Fts3HashFindElem103535,3655749
SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){sqlite3Fts3HashFind103556,3656397
SQLITE_PRIVATE void *sqlite3Fts3HashInsert(sqlite3Fts3HashInsert103578,3657302
typedef struct porter_tokenizer {porter_tokenizer103672,3660158
  sqlite3_tokenizer base;      /* Base class */base103673,3660192
} porter_tokenizer;porter_tokenizer103674,3660240
typedef struct porter_tokenizer_cursor {porter_tokenizer_cursor103679,3660313
  sqlite3_tokenizer_cursor base;base103680,3660354
  const char *zInput;          /* input we are tokenizing */zInput103681,3660387
  int nInput;                  /* size of the input */nInput103682,3660448
  int iOffset;                 /* current position in zInput */iOffset103683,3660503
  int iToken;                  /* index of next token to be returned */iToken103684,3660567
  char *zToken;                /* storage for current token */zToken103685,3660639
  int nAllocated;              /* space allocated to zToken buffer */nAllocated103686,3660702
} porter_tokenizer_cursor;porter_tokenizer_cursor103687,3660772
static int porterCreate(porterCreate103693,3660843
static int porterDestroy(sqlite3_tokenizer *pTokenizer){porterDestroy103712,3661219
static int porterOpen(porterOpen103723,3661532
static int porterClose(sqlite3_tokenizer_cursor *pCursor){porterClose103756,3662399
static const char cType[] = {cType103765,3662622
static int isConsonant(const char *z){isConsonant103784,3663247
static int isVowel(const char *z){isVowel103793,3663443
static int m_gt_0(const char *z){m_gt_0103822,3664358
static int m_eq_1(const char *z){m_eq_1103832,3664582
static int m_gt_1(const char *z){m_gt_1103846,3664916
static int hasVowel(const char *z){hasVowel103860,3665236
static int doubleConsonant(const char *z){doubleConsonant103871,3665483
static int star_oh(const char *z){star_oh103883,3665847
static int stem(stem103903,3666402
static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){copy_stemmer103928,3667282
static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){porter_stemmer103975,3668778
static const char porterIdChar[] = {porterIdChar104198,3673890
#define isDelim(isDelim104206,3674294
static int porterNext(porterNext104212,3674502
static const sqlite3_tokenizer_module porterTokenizerModule = {porterTokenizerModule104260,3676034
SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule(sqlite3Fts3PorterTokenizerModule104273,3676280
static void scalarFunc(scalarFunc104335,3678466
static int fts3IsIdChar(char c){fts3IsIdChar104378,3679538
SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *zStr, int *pn){sqlite3Fts3NextToken104392,3680173
SQLITE_PRIVATE int sqlite3Fts3InitTokenizer(sqlite3Fts3InitTokenizer104429,3680919
static void testFunc(testFunc104528,3683918
int registerTokenizer(registerTokenizer104617,3686021
int queryTokenizer(queryTokenizer104639,3686483
static void intTestFunc(intTestFunc104684,3687832
SQLITE_PRIVATE int sqlite3Fts3InitHashTable(sqlite3Fts3InitHashTable104736,3689537
typedef struct simple_tokenizer {simple_tokenizer104807,3691571
  sqlite3_tokenizer base;base104808,3691605
  char delim[128];             /* flag ASCII delimiters */delim104809,3691631
} simple_tokenizer;simple_tokenizer104810,3691690
typedef struct simple_tokenizer_cursor {simple_tokenizer_cursor104812,3691711
  sqlite3_tokenizer_cursor base;base104813,3691752
  const char *pInput;          /* input we are tokenizing */pInput104814,3691785
  int nBytes;                  /* size of the input */nBytes104815,3691846
  int iOffset;                 /* current position in pInput */iOffset104816,3691901
  int iToken;                  /* index of next token to be returned */iToken104817,3691965
  char *pToken;                /* storage for current token */pToken104818,3692037
  int nTokenAllocated;         /* space allocated to zToken buffer */nTokenAllocated104819,3692100
} simple_tokenizer_cursor;simple_tokenizer_cursor104820,3692170
static int simpleDelim(simple_tokenizer *t, unsigned char c){simpleDelim104823,3692199
static int simpleCreate(simpleCreate104830,3692338
static int simpleDestroy(sqlite3_tokenizer *pTokenizer){simpleDestroy104871,3693374
static int simpleOpen(simpleOpen104882,3693687
static int simpleClose(sqlite3_tokenizer_cursor *pCursor){simpleClose104915,3694559
static int simpleNext(simpleNext104926,3694885
static const sqlite3_tokenizer_module simpleTokenizerModule = {simpleTokenizerModule104983,3696722
SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule(sqlite3Fts3SimpleTokenizerModule104996,3696968
typedef struct PendingList PendingList;PendingList105028,3698081
typedef struct SegmentNode SegmentNode;SegmentNode105029,3698121
typedef struct SegmentWriter SegmentWriter;SegmentWriter105030,3698161
struct PendingList {PendingList105037,3698388
  int nData;nData105038,3698409
  char *aData;aData105039,3698422
  int nSpace;nSpace105040,3698437
  sqlite3_int64 iLastDocid;iLastDocid105041,3698451
  sqlite3_int64 iLastCol;iLastCol105042,3698479
  sqlite3_int64 iLastPos;iLastPos105043,3698505
struct Fts3SegReader {Fts3SegReader105063,3699149
  int iIdx;                       /* Index within level, or 0x7FFFFFFF for PT */iIdx105064,3699172
  sqlite3_int64 iStartBlock;iStartBlock105065,3699253
  sqlite3_int64 iEndBlock;iEndBlock105066,3699282
  sqlite3_stmt *pStmt;            /* SQL Statement to access leaf nodes */pStmt105067,3699309
  char *aNode;                    /* Pointer to node data (or NULL) */aNode105068,3699384
  int nNode;                      /* Size of buffer at aNode (or 0) */nNode105069,3699455
  int nTermAlloc;                 /* Allocated size of zTerm buffer */nTermAlloc105070,3699526
  Fts3HashElem **ppNextElem;ppNextElem105071,3699597
  int nTerm;                      /* Number of bytes in current term */nTerm105078,3699873
  char *zTerm;                    /* Pointer to current term */zTerm105079,3699945
  char *aDoclist;                 /* Pointer to doclist of current entry */aDoclist105080,3700009
  int nDoclist;                   /* Size of doclist in current entry */nDoclist105081,3700085
  char *pOffsetList;pOffsetList105084,3700239
  sqlite3_int64 iDocid;iDocid105085,3700260
#define fts3SegReaderIsPending(fts3SegReaderIsPending105088,3700288
struct SegmentWriter {SegmentWriter105099,3700599
  SegmentNode *pTree;             /* Pointer to interior tree structure */pTree105100,3700622
  sqlite3_int64 iFirst;           /* First slot in %_segments written */iFirst105101,3700697
  sqlite3_int64 iFree;            /* Next free slot in %_segments */iFree105102,3700770
  char *zTerm;                    /* Pointer to previous term buffer */zTerm105103,3700839
  int nTerm;                      /* Number of bytes in zTerm */nTerm105104,3700911
  int nMalloc;                    /* Size of malloc'd buffer at zMalloc */nMalloc105105,3700976
  char *zMalloc;                  /* Malloc'd space (possibly) used for zTerm */zMalloc105106,3701051
  int nSize;                      /* Size of allocation at aData */nSize105107,3701132
  int nData;                      /* Bytes of data in aData */nData105108,3701200
  char *aData;                    /* Pointer to block from malloc() */aData105109,3701263
struct SegmentNode {SegmentNode105122,3701698
  SegmentNode *pParent;           /* Parent node (or NULL for root node) */pParent105123,3701719
  SegmentNode *pRight;            /* Pointer to right-sibling */pRight105124,3701795
  SegmentNode *pLeftmost;         /* Pointer to left-most node of this depth */pLeftmost105125,3701860
  int nEntry;                     /* Number of terms written to node so far */nEntry105126,3701940
  char *zTerm;                    /* Pointer to previous term buffer */zTerm105127,3702019
  int nTerm;                      /* Number of bytes in zTerm */nTerm105128,3702091
  int nMalloc;                    /* Size of malloc'd buffer at zMalloc */nMalloc105129,3702156
  char *zMalloc;                  /* Malloc'd space (possibly) used for zTerm */zMalloc105130,3702231
  int nData;                      /* Bytes of valid data so far */nData105131,3702312
  char *aData;                    /* Node data */aData105132,3702379
#define SQL_DELETE_CONTENT SQL_DELETE_CONTENT105138,3702497
#define SQL_IS_EMPTY SQL_IS_EMPTY105139,3702538
#define SQL_DELETE_ALL_CONTENT SQL_DELETE_ALL_CONTENT105140,3702579
#define SQL_DELETE_ALL_SEGMENTS SQL_DELETE_ALL_SEGMENTS105141,3702621
#define SQL_DELETE_ALL_SEGDIR SQL_DELETE_ALL_SEGDIR105142,3702662
#define SQL_DELETE_ALL_DOCSIZE SQL_DELETE_ALL_DOCSIZE105143,3702703
#define SQL_DELETE_ALL_STAT SQL_DELETE_ALL_STAT105144,3702744
#define SQL_SELECT_CONTENT_BY_ROWID SQL_SELECT_CONTENT_BY_ROWID105145,3702785
#define SQL_NEXT_SEGMENT_INDEX SQL_NEXT_SEGMENT_INDEX105146,3702826
#define SQL_INSERT_SEGMENTS SQL_INSERT_SEGMENTS105147,3702867
#define SQL_NEXT_SEGMENTS_ID SQL_NEXT_SEGMENTS_ID105148,3702908
#define SQL_INSERT_SEGDIR SQL_INSERT_SEGDIR105149,3702949
#define SQL_SELECT_LEVEL SQL_SELECT_LEVEL105150,3702990
#define SQL_SELECT_ALL_LEVEL SQL_SELECT_ALL_LEVEL105151,3703031
#define SQL_SELECT_LEVEL_COUNT SQL_SELECT_LEVEL_COUNT105152,3703072
#define SQL_SELECT_SEGDIR_COUNT_MAX SQL_SELECT_SEGDIR_COUNT_MAX105153,3703113
#define SQL_DELETE_SEGDIR_BY_LEVEL SQL_DELETE_SEGDIR_BY_LEVEL105154,3703154
#define SQL_DELETE_SEGMENTS_RANGE SQL_DELETE_SEGMENTS_RANGE105155,3703195
#define SQL_CONTENT_INSERT SQL_CONTENT_INSERT105156,3703236
#define SQL_GET_BLOCK SQL_GET_BLOCK105157,3703277
#define SQL_DELETE_DOCSIZE SQL_DELETE_DOCSIZE105158,3703318
#define SQL_REPLACE_DOCSIZE SQL_REPLACE_DOCSIZE105159,3703359
#define SQL_SELECT_DOCSIZE SQL_SELECT_DOCSIZE105160,3703400
#define SQL_SELECT_DOCTOTAL SQL_SELECT_DOCTOTAL105161,3703441
#define SQL_REPLACE_DOCTOTAL SQL_REPLACE_DOCTOTAL105162,3703482
static int fts3SqlStmt(fts3SqlStmt105175,3704037
static void fts3SqlExec(fts3SqlExec105269,3707580
SQLITE_PRIVATE int sqlite3Fts3ReadBlock(sqlite3Fts3ReadBlock105299,3708500
SQLITE_PRIVATE int sqlite3Fts3AllSegdirs(Fts3Table *p, sqlite3_stmt **ppStmt){sqlite3Fts3AllSegdirs105343,3709668
static int fts3PendingListAppendVarint(fts3PendingListAppendVarint105360,3710210
static int fts3PendingListAppend(fts3PendingListAppend105404,3711469
static int fts3PendingTermsAdd(fts3PendingTermsAdd105463,3713167
static int fts3PendingTermsDocid(Fts3Table *p, sqlite_int64 iDocid){fts3PendingTermsDocid105537,3715383
SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *p){sqlite3Fts3PendingTermsClear105552,3715966
static int fts3InsertTerms(Fts3Table *p, sqlite3_value **apVal, u32 *aSz){fts3InsertTerms105569,3716554
static int fts3InsertData(fts3InsertData105596,3717500
static int fts3DeleteAll(Fts3Table *p){fts3DeleteAll105654,3719407
static void fts3DeleteTerms(fts3DeleteTerms105676,3720143
static int fts3AllocateSegdirIdx(Fts3Table *p, int iLevel, int *piIdx){fts3AllocateSegdirIdx105728,3721805
static int fts3SegReaderNext(Fts3SegReader *pReader){fts3SegReaderNext105765,3723097
static void fts3SegReaderFirstDocid(Fts3SegReader *pReader){fts3SegReaderFirstDocid105833,3725249
static void fts3SegReaderNextDocid(fts3SegReaderNextDocid105851,3725940
SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3Table *p, Fts3SegReader *pReader){sqlite3Fts3SegReaderFree105892,3727101
SQLITE_PRIVATE int sqlite3Fts3SegReaderNew(sqlite3Fts3SegReaderNew105912,3727687
static int fts3CompareElemByTerm(const void *lhs, const void *rhs){fts3CompareElemByTerm106006,3730823
SQLITE_PRIVATE int sqlite3Fts3SegReaderPending(sqlite3Fts3SegReaderPending106024,3731351
static int fts3SegReaderNew(fts3SegReaderNew106119,3734410
static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){fts3SegReaderCmp106147,3735302
static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){fts3SegReaderDoclistCmp106180,3736169
static int fts3SegReaderTermCmp(fts3SegReaderTermCmp106201,3736885
static void fts3SegReaderSort(fts3SegReaderSort106226,3737650
static int fts3WriteSegment(fts3WriteSegment106259,3738607
static int fts3WriteSegdir(fts3WriteSegdir106279,3739237
static int fts3PrefixCompress(fts3PrefixCompress106312,3740566
static int fts3NodeAddTerm(fts3NodeAddTerm106328,3741110
static int fts3TreeFinishNode(fts3TreeFinishNode106439,3744920
static int fts3NodeWrite(fts3NodeWrite106465,3745830
static void fts3NodeFree(SegmentNode *pTree){fts3NodeFree106509,3747350
static int fts3SegWriterAdd(fts3SegWriterAdd106534,3748117
static int fts3SegWriterFlush(fts3SegWriterFlush106672,3753419
static void fts3SegWriterFree(SegmentWriter *pWriter){fts3SegWriterFree106707,3754799
static int fts3IsEmpty(Fts3Table *p, sqlite3_value **apVal, int *pisEmpty){fts3IsEmpty106726,3755496
static int fts3SegmentCount(Fts3Table *p, int iLevel, int *pnSegment){fts3SegmentCount106744,3755981
static int fts3SegmentCountMax(Fts3Table *p, int *pnSegment, int *pnMax){fts3SegmentCountMax106765,3756642
static int fts3DeleteSegdir(fts3DeleteSegdir106792,3757553
static void fts3ColumnFilter(fts3ColumnFilter106839,3759193
static int fts3MergeCallback(fts3MergeCallback106877,3760064
static int fts3FlushCallback(fts3FlushCallback106893,3760768
SQLITE_PRIVATE int sqlite3Fts3SegReaderIterate(sqlite3Fts3SegReaderIterate106930,3762575
static int fts3SegmentMerge(Fts3Table *p, int iLevel){fts3SegmentMerge107098,3768720
SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *p){sqlite3Fts3PendingTermsFlush107200,3772224
static void fts3EncodeIntArray(fts3EncodeIntArray107255,3774168
static void fts3DecodeIntArray(fts3DecodeIntArray107271,3774594
SQLITE_PRIVATE int sqlite3Fts3MatchinfoDocsizeLocal(Fts3Cursor *pCur, u32 *a){sqlite3Fts3MatchinfoDocsizeLocal107301,3775594
SQLITE_PRIVATE int sqlite3Fts3MatchinfoDocsizeGlobal(Fts3Cursor *pCur, u32 *a){sqlite3Fts3MatchinfoDocsizeGlobal107327,3776558
static void fts3InsertDocsize(fts3InsertDocsize107361,3777780
static void fts3UpdateDocTotals(fts3UpdateDocTotals107395,3778855
static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){fts3SpecialInsert107465,3780818
SQLITE_PRIVATE int sqlite3Fts3UpdateMethod(sqlite3Fts3UpdateMethod107498,3781703
SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *p){sqlite3Fts3Optimize107575,3784443
typedef struct LoadDoclistCtx LoadDoclistCtx;LoadDoclistCtx107618,3785639
struct LoadDoclistCtx {LoadDoclistCtx107619,3785685
  Fts3Table *pTab;                /* FTS3 Table */pTab107620,3785709
  int nPhrase;                    /* Number of phrases seen so far */nPhrase107621,3785760
  int nToken;                     /* Number of tokens seen so far */nToken107622,3785830
typedef struct SnippetIter SnippetIter;SnippetIter107629,3786009
typedef struct SnippetPhrase SnippetPhrase;SnippetPhrase107630,3786049
typedef struct SnippetFragment SnippetFragment;SnippetFragment107631,3786093
struct SnippetIter {SnippetIter107633,3786142
  Fts3Cursor *pCsr;               /* Cursor snippet is being generated from */pCsr107634,3786163
  int iCol;                       /* Extract snippet from this column */iCol107635,3786242
  int nSnippet;                   /* Requested snippet length (in tokens) */nSnippet107636,3786315
  int nPhrase;                    /* Number of phrases in query */nPhrase107637,3786392
  SnippetPhrase *aPhrase;         /* Array of size nPhrase */aPhrase107638,3786459
  int iCurrent;                   /* First token of current snippet */iCurrent107639,3786521
struct SnippetPhrase {SnippetPhrase107642,3786596
  int nToken;                     /* Number of tokens in phrase */nToken107643,3786619
  char *pList;                    /* Pointer to start of phrase position list */pList107644,3786686
  int iHead;                      /* Next value in position list */iHead107645,3786767
  char *pHead;                    /* Position list data following iHead */pHead107646,3786835
  int iTail;                      /* Next value in trailing position list */iTail107647,3786910
  char *pTail;                    /* Position list data following iTail */pTail107648,3786987
struct SnippetFragment {SnippetFragment107651,3787066
  int iCol;                       /* Column snippet is extracted from */iCol107652,3787091
  int iPos;                       /* Index of first token in snippet */iPos107653,3787164
  u64 covered;                    /* Mask of query phrases covered */covered107654,3787236
  u64 hlmask;                     /* Mask of snippet terms to highlight */hlmask107655,3787306
typedef struct MatchInfo MatchInfo;MatchInfo107662,3787521
struct MatchInfo {MatchInfo107663,3787557
  Fts3Cursor *pCursor;            /* FTS3 Cursor */pCursor107664,3787576
  int nCol;                       /* Number of columns in table */nCol107665,3787628
  u32 *aMatchinfo;                /* Pre-allocated buffer */aMatchinfo107666,3787695
typedef struct StrBuffer StrBuffer;StrBuffer107676,3787983
struct StrBuffer {StrBuffer107677,3788019
  char *z;                        /* Pointer to buffer containing string */z107678,3788038
  int n;                          /* Length of z in bytes (excl. nul-term) */n107679,3788114
  int nAlloc;                     /* Allocated size of buffer z in bytes */nAlloc107680,3788192
static void fts3GetDeltaPosition(char **pp, int *piPos){fts3GetDeltaPosition107704,3788991
static int fts3ExprIterate2(fts3ExprIterate2107713,3789190
static int fts3ExprIterate(fts3ExprIterate107745,3790446
static int fts3ExprNearTrim(Fts3Expr *pExpr){fts3ExprNearTrim107768,3791534
static int fts3ExprLoadDoclistsCb1(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3ExprLoadDoclistsCb1107804,3792480
static int fts3ExprLoadDoclistsCb2(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3ExprLoadDoclistsCb2107829,3793074
static int fts3ExprLoadDoclists(fts3ExprLoadDoclists107850,3793827
static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){fts3SnippetAdvance107872,3794696
static int fts3SnippetNextCandidate(SnippetIter *pIter){fts3SnippetNextCandidate107894,3795122
static void fts3SnippetDetails(fts3SnippetDetails107940,3796463
static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3SnippetFindPositions107993,3798251
static int fts3BestSnippet(fts3BestSnippet108031,3799510
static int fts3StringAppend(fts3StringAppend108115,3802313
int fts3SnippetShift(fts3SnippetShift108166,3804110
static int fts3SnippetText(fts3SnippetText108230,3806696
static int fts3ColumnlistCount(char **ppCollist){fts3ColumnlistCount108342,3811451
static void fts3LoadColumnlistCounts(char **pp, u32 *aOut, int isGlobal){fts3LoadColumnlistCounts108357,3811747
static int fts3ExprGlobalMatchinfoCb(fts3ExprGlobalMatchinfoCb108382,3812391
static int fts3ExprLocalMatchinfoCb(fts3ExprLocalMatchinfoCb108410,3813317
static int fts3GetMatchinfo(Fts3Cursor *pCsr){fts3GetMatchinfo108437,3814074
SQLITE_PRIVATE void sqlite3Fts3Snippet(sqlite3Fts3Snippet108499,3816124
typedef struct TermOffset TermOffset;TermOffset108597,3819635
typedef struct TermOffsetCtx TermOffsetCtx;TermOffsetCtx108598,3819673
struct TermOffset {TermOffset108600,3819718
  char *pList;                    /* Position-list */pList108601,3819738
  int iPos;                       /* Position just read from pList */iPos108602,3819792
  int iOff;                       /* Offset of this term from read positions */iOff108603,3819862
struct TermOffsetCtx {TermOffsetCtx108606,3819946
  int iCol;                       /* Column of table to populate aTerm for */iCol108607,3819969
  int iTerm;iTerm108608,3820047
  sqlite3_int64 iDocid;iDocid108609,3820060
  TermOffset *aTerm;aTerm108610,3820084
static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){fts3ExprTermOffsetInit108616,3820195
SQLITE_PRIVATE void sqlite3Fts3Offsets(sqlite3Fts3Offsets108644,3821050
SQLITE_PRIVATE void sqlite3Fts3Matchinfo(sqlite3_context *pContext, Fts3Cursor *pCsr){sqlite3Fts3Matchinfo108779,3825500
#define VARIANT_RSTARTREE_CHOOSESUBTREE VARIANT_RSTARTREE_CHOOSESUBTREE108830,3827262
#define VARIANT_RSTARTREE_REINSERT VARIANT_RSTARTREE_REINSERT108831,3827304
#define VARIANT_GUTTMAN_QUADRATIC_SPLIT VARIANT_GUTTMAN_QUADRATIC_SPLIT108836,3827404
#define VARIANT_GUTTMAN_LINEAR_SPLIT VARIANT_GUTTMAN_LINEAR_SPLIT108837,3827446
#define VARIANT_RSTARTREE_SPLIT VARIANT_RSTARTREE_SPLIT108838,3827488
#define VARIANT_GUTTMAN_SPLIT VARIANT_GUTTMAN_SPLIT108840,3827531
  #define PickNext PickNext108844,3827672
  #define PickSeeds PickSeeds108845,3827709
  #define AssignCells AssignCells108846,3827748
  #define PickNext PickNext108849,3827827
  #define PickSeeds PickSeeds108850,3827861
  #define AssignCells AssignCells108851,3827897
  #define AssignCells AssignCells108854,3827971
typedef sqlite3_int64 i64;i64108865,3828108
typedef unsigned char u8;u8108866,3828135
typedef unsigned int u32;u32108867,3828161
typedef struct Rtree Rtree;Rtree108870,3828195
typedef struct RtreeCursor RtreeCursor;RtreeCursor108871,3828223
typedef struct RtreeNode RtreeNode;RtreeNode108872,3828263
typedef struct RtreeCell RtreeCell;RtreeCell108873,3828299
typedef struct RtreeConstraint RtreeConstraint;RtreeConstraint108874,3828335
typedef union RtreeCoord RtreeCoord;RtreeCoord108875,3828383
#define RTREE_MAX_DIMENSIONS RTREE_MAX_DIMENSIONS108878,3828493
#define HASHSIZE HASHSIZE108884,3828675
struct Rtree {Rtree108889,3828738
  sqlite3_vtab base;base108890,3828753
  sqlite3 *db;                /* Host database connection */db108891,3828774
  int iNodeSize;              /* Size in bytes of each node in the node table */iNodeSize108892,3828835
  int nDim;                   /* Number of dimensions */nDim108893,3828916
  int nBytesPerCell;          /* Bytes consumed per cell */nBytesPerCell108894,3828973
  int iDepth;                 /* Current depth of the r-tree structure */iDepth108895,3829033
  char *zDb;                  /* Name of database containing r-tree table */zDb108896,3829107
  char *zName;                /* Name of r-tree table */ zName108897,3829184
  RtreeNode *aHash[HASHSIZE]; /* Hash table of in-memory nodes. */ aHash108898,3829242
  int nBusy;                  /* Current number of users of this structure */nBusy108899,3829310
  RtreeNode *pDeleted;pDeleted108906,3829665
  int iReinsertHeight;        /* Height of sub-trees Reinsert() has run on */iReinsertHeight108907,3829688
  sqlite3_stmt *pReadNode;pReadNode108910,3829830
  sqlite3_stmt *pWriteNode;pWriteNode108911,3829857
  sqlite3_stmt *pDeleteNode;pDeleteNode108912,3829885
  sqlite3_stmt *pReadRowid;pReadRowid108915,3829979
  sqlite3_stmt *pWriteRowid;pWriteRowid108916,3830007
  sqlite3_stmt *pDeleteRowid;pDeleteRowid108917,3830036
  sqlite3_stmt *pReadParent;pReadParent108920,3830132
  sqlite3_stmt *pWriteParent;pWriteParent108921,3830161
  sqlite3_stmt *pDeleteParent;pDeleteParent108922,3830191
  int eCoordType;eCoordType108924,3830223
#define RTREE_COORD_REAL32 RTREE_COORD_REAL32108928,3830283
#define RTREE_COORD_INT32 RTREE_COORD_INT32108929,3830312
#define RTREE_MINCELLS(RTREE_MINCELLS108940,3830616
#define RTREE_REINSERT(RTREE_REINSERT108941,3830686
#define RTREE_MAXCELLS RTREE_MAXCELLS108942,3830730
struct RtreeCursor {RtreeCursor108947,3830791
  sqlite3_vtab_cursor base;base108948,3830812
  RtreeNode *pNode;                 /* Node cursor is currently pointing at */pNode108949,3830840
  int iCell;                        /* Index of current cell in pNode */iCell108950,3830919
  int iStrategy;                    /* Copy of idxNum search parameter */iStrategy108951,3830992
  int nConstraint;                  /* Number of entries in aConstraint */nConstraint108952,3831066
  RtreeConstraint *aConstraint;     /* Search constraints. */aConstraint108953,3831141
union RtreeCoord {RtreeCoord108956,3831207
  float f;f108957,3831226
  int i;i108958,3831237
#define DCOORD(DCOORD108966,3831473
struct RtreeConstraint {RtreeConstraint108975,3831714
  int iCoord;                       /* Index of constrained coordinate */iCoord108976,3831739
  int op;                           /* Constraining operation */op108977,3831813
  double rValue;                    /* Constraint value. */rValue108978,3831878
#define RTREE_EQ RTREE_EQ108982,3831987
#define RTREE_LE RTREE_LE108983,3832009
#define RTREE_LT RTREE_LT108984,3832031
#define RTREE_GE RTREE_GE108985,3832053
#define RTREE_GT RTREE_GT108986,3832075
struct RtreeNode {RtreeNode109006,3832775
  RtreeNode *pParent;               /* Parent node */pParent109007,3832794
  i64 iNode;iNode109008,3832848
  int nRef;nRef109009,3832861
  int isDirty;isDirty109010,3832873
  u8 *zData;zData109011,3832888
  RtreeNode *pNext;                 /* Next node in this hash chain */pNext109012,3832901
#define NCELL(NCELL109014,3832975
struct RtreeCell {RtreeCell109019,3833085
  i64 iRowid;iRowid109020,3833104
  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];aCoord109021,3833118
# define MAX(MAX109025,3833179
# define MIN(MIN109028,3833240
static int readInt16(u8 *p){readInt16109035,3833420
static void readCoord(u8 *p, RtreeCoord *pCoord){readCoord109038,3833478
static i64 readInt64(u8 *p){readInt64109047,3833674
static int writeInt16(u8 *p, int i){writeInt16109065,3834137
static int writeCoord(u8 *p, RtreeCoord *pCoord){writeCoord109070,3834234
static int writeInt64(u8 *p, i64 i){writeInt64109081,3834484
static void nodeReference(RtreeNode *p){nodeReference109096,3834770
static void nodeZero(Rtree *pRtree, RtreeNode *p){nodeZero109105,3834906
static int nodeHash(i64 iNode){nodeHash109116,3835146
static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){nodeHashLookup109127,3835437
static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){nodeHashInsert109137,3835673
static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){nodeHashDelete109150,3835966
static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent, int zero){nodeNew109166,3836487
nodeAcquire(nodeAcquire109184,3836962
static void nodeOverwriteCell(nodeOverwriteCell109247,3838669
static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){nodeDeleteCell109265,3839058
nodeInsertCell(nodeInsertCell109281,3839594
nodeWrite(Rtree *pRtree, RtreeNode *pNode){nodeWrite109307,3840178
nodeRelease(Rtree *pRtree, RtreeNode *pNode){nodeRelease109333,3840900
static i64 nodeGetRowid(nodeGetRowid109360,3841579
static void nodeGetCoord(nodeGetCoord109372,3841826
static void nodeGetCell(nodeGetCell109386,3842178
static int rtreeCreate(rtreeCreate109410,3842733
static int rtreeConnect(rtreeConnect109423,3842982
static void rtreeReference(Rtree *pRtree){rtreeReference109436,3843225
static void rtreeRelease(Rtree *pRtree){rtreeRelease109444,3843404
static int rtreeDisconnect(sqlite3_vtab *pVtab){rtreeDisconnect109463,3843967
static int rtreeDestroy(sqlite3_vtab *pVtab){rtreeDestroy109471,3844125
static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){rtreeOpen109498,3844709
static int rtreeClose(sqlite3_vtab_cursor *cur){rtreeClose109516,3845114
static int rtreeEof(sqlite3_vtab_cursor *cur){rtreeEof109532,3845553
static int testRtreeCell(Rtree *pRtree, RtreeCursor *pCursor){testRtreeCell109543,3845900
static int testRtreeEntry(Rtree *pRtree, RtreeCursor *pCursor){testRtreeEntry109577,3846960
static int descendToCell(descendToCell109609,3847976
static int nodeRowidIndex(Rtree *pRtree, RtreeNode *pNode, i64 iRowid){nodeRowidIndex109669,3849308
static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode){nodeParentIndex109681,3849634
static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){rtreeNext109692,3849880
static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){rtreeRowid109730,3850910
static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){rtreeColumn109743,3851247
static int findLeafNode(Rtree *pRtree, i64 iRowid, RtreeNode **ppLeaf){findLeafNode109771,3852168
static int rtreeFilter(rtreeFilter109789,3852647
static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){rtreeBestIndex109898,3856013
static float cellArea(Rtree *pRtree, RtreeCell *p){cellArea109988,3859200
static float cellMargin(Rtree *pRtree, RtreeCell *p){cellMargin110001,3859530
static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){cellUnion110013,3859797
static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){cellContains110032,3860419
static float cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){cellGrowth110050,3860914
static float cellOverlap(cellOverlap110060,3861233
static float cellOverlapEnlargement(cellOverlapEnlargement110095,3861910
static int ChooseLeaf(ChooseLeaf110117,3862389
static void AdjustTree(AdjustTree110201,3864626
static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){rowidWrite110225,3865287
static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){parentWrite110235,3865626
static RtreeCell *LinearPickNext(LinearPickNext110249,3866096
static void LinearPickSeeds(LinearPickSeeds110267,3866425
static RtreeCell *QuadraticPickNext(QuadraticPickNext110329,3867894
  #define FABS(FABS110337,3868048
static void QuadraticPickSeeds(QuadraticPickSeeds110361,3868598
static void SortByDistance(SortByDistance110411,3869808
static void SortByDimension(SortByDimension110477,3871463
static int splitNodeStartree(splitNodeStartree110537,3873082
static int splitNodeGuttman(splitNodeGuttman110639,3875741
static int updateMapping(updateMapping110691,3877064
static int SplitNode(SplitNode110710,3877538
static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){fixLeafParent110835,3880637
static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){removeNode110855,3881245
static void fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){fixBoundingBox110898,3882422
static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){deleteCell110921,3883135
static int Reinsert(Reinsert110952,3883985
static int rtreeInsertCell(rtreeInsertCell111055,3886821
static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){reinsertNodeContent111092,3887751
static int newRowid(Rtree *pRtree, i64 *piRowid){newRowid111121,3888499
static int hashIsEmpty(Rtree *pRtree){hashIsEmpty111132,3888812
static int rtreeUpdate(rtreeUpdate111144,3889014
static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){rtreeRename111306,3893950
static sqlite3_module rtreeModule = {rtreeModule111324,3894523
static int rtreeSqlInit(rtreeSqlInit111347,3895810
  #define N_STATEMENT N_STATEMENT111356,3895954
static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){getIntFromStmt111426,3898360
static int getNodeSize(getNodeSize111456,3899503
static int rtreeInit(rtreeInit111494,3900599
static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){rtreenode111597,3904097
static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){rtreedepth111635,3905104
SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db){sqlite3RtreeInit111651,3905632
SQLITE_API int sqlite3_extension_init(sqlite3_extension_init111675,3906287
# define SQLITE_MAX_LIKE_PATTERN_LENGTH SQLITE_MAX_LIKE_PATTERN_LENGTH111738,3908069
static void xFree(void *p){xFree111744,3908200
static int icuLikeCompare(icuLikeCompare111753,3908426
static void icuLikeFunc(icuLikeFunc111844,3911132
static void icuFunctionError(icuFunctionError111890,3912462
static void icuRegexpDelete(void *p){icuRegexpDelete111905,3912984
static void icuRegexpFunc(sqlite3_context *p, int nArg, sqlite3_value **apArg){icuRegexpFunc111929,3913743
static void icuCaseFunc16(sqlite3_context *p, int nArg, sqlite3_value **apArg){icuCaseFunc16112010,3916243
static void icuCollationDel(void *pCtx){icuCollationDel112054,3917283
static int icuCollationColl(icuCollationColl112063,3917522
static void icuLoadCollation(icuLoadCollation112095,3918436
SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db){sqlite3IcuInit112134,3919549
SQLITE_API int sqlite3_extension_init(sqlite3_extension_init112174,3921000
typedef struct IcuTokenizer IcuTokenizer;IcuTokenizer112211,3922000
typedef struct IcuCursor IcuCursor;IcuCursor112212,3922042
struct IcuTokenizer {IcuTokenizer112214,3922079
  sqlite3_tokenizer base;base112215,3922101
  char *zLocale;zLocale112216,3922127
struct IcuCursor {IcuCursor112219,3922148
  sqlite3_tokenizer_cursor base;base112220,3922167
  UBreakIterator *pIter;      /* ICU break-iterator object */pIter112222,3922201
  int nChar;                  /* Number of UChar elements in pInput */nChar112223,3922263
  UChar *aChar;               /* Copy of input using utf-16 encoding */aChar112224,3922334
  int *aOffset;               /* Offsets of each character in utf-8 input */aOffset112225,3922406
  int nBuffer;nBuffer112227,3922484
  char *zBuffer;zBuffer112228,3922499
  int iToken;iToken112230,3922517
static int icuCreate(icuCreate112236,3922577
static int icuDestroy(sqlite3_tokenizer *pTokenizer){icuDestroy112266,3923217
static int icuOpen(icuOpen112278,3923566
static int icuClose(sqlite3_tokenizer_cursor *pCursor){icuClose112347,3925313
static int icuNext(icuNext112358,3925574
static const sqlite3_tokenizer_module icuTokenizerModule = {icuTokenizerModule112423,3927301
SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule(sqlite3Fts3IcuTokenizerModule112435,3927718

src/sqlite/sqlite3.h,23947
#define _SQLITE3_H__SQLITE3_H_34,1511
# define SQLITE_EXTERN SQLITE_EXTERN49,1760
# define SQLITE_APISQLITE_API53,1817
#define SQLITE_DEPRECATEDSQLITE_DEPRECATED70,2483
#define SQLITE_EXPERIMENTALSQLITE_EXPERIMENTAL71,2509
# undef SQLITE_VERSIONSQLITE_VERSION77,2637
# undef SQLITE_VERSION_NUMBERSQLITE_VERSION_NUMBER80,2696
#define SQLITE_VERSION SQLITE_VERSION110,4095
#define SQLITE_VERSION_NUMBER SQLITE_VERSION_NUMBER111,4136
#define SQLITE_SOURCE_ID SQLITE_SOURCE_ID112,4174
SQLITE_API SQLITE_EXTERN const char sqlite3_version[];sqlite3_version144,5753
typedef struct sqlite3 sqlite3;sqlite3227,9604
  typedef SQLITE_INT64_TYPE sqlite_int64;sqlite_int64246,10327
  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;sqlite_uint64247,10369
  typedef __int64 sqlite_int64;sqlite_int64249,10470
  typedef unsigned __int64 sqlite_uint64;sqlite_uint64250,10502
  typedef long long int sqlite_int64;sqlite_int64252,10550
  typedef unsigned long long int sqlite_uint64;sqlite_uint64253,10588
typedef sqlite_int64 sqlite3_int64;sqlite3_int64255,10643
typedef sqlite_uint64 sqlite3_uint64;sqlite3_uint64256,10679
# define double double263,10867
typedef int (*sqlite3_callback)(void*,int,char**, char**);sqlite3_callback297,12165
#define SQLITE_OK SQLITE_OK380,16159
#define SQLITE_ERROR SQLITE_ERROR382,16246
#define SQLITE_INTERNAL SQLITE_INTERNAL383,16314
#define SQLITE_PERM SQLITE_PERM384,16383
#define SQLITE_ABORT SQLITE_ABORT385,16446
#define SQLITE_BUSY SQLITE_BUSY386,16520
#define SQLITE_LOCKED SQLITE_LOCKED387,16586
#define SQLITE_NOMEM SQLITE_NOMEM388,16658
#define SQLITE_READONLY SQLITE_READONLY389,16714
#define SQLITE_INTERRUPT SQLITE_INTERRUPT390,16789
#define SQLITE_IOERR SQLITE_IOERR391,16870
#define SQLITE_CORRUPT SQLITE_CORRUPT392,16945
#define SQLITE_NOTFOUND SQLITE_NOTFOUND393,17020
#define SQLITE_FULL SQLITE_FULL394,17094
#define SQLITE_CANTOPEN SQLITE_CANTOPEN395,17174
#define SQLITE_PROTOCOL SQLITE_PROTOCOL396,17245
#define SQLITE_EMPTY SQLITE_EMPTY397,17322
#define SQLITE_SCHEMA SQLITE_SCHEMA398,17378
#define SQLITE_TOOBIG SQLITE_TOOBIG399,17444
#define SQLITE_CONSTRAINT SQLITE_CONSTRAINT400,17516
#define SQLITE_MISMATCH SQLITE_MISMATCH401,17588
#define SQLITE_MISUSE SQLITE_MISUSE402,17645
#define SQLITE_NOLFS SQLITE_NOLFS403,17708
#define SQLITE_AUTH SQLITE_AUTH404,17785
#define SQLITE_FORMAT SQLITE_FORMAT405,17844
#define SQLITE_RANGE SQLITE_RANGE406,17914
#define SQLITE_NOTADB SQLITE_NOTADB407,17995
#define SQLITE_ROW SQLITE_ROW408,18073
#define SQLITE_DONE SQLITE_DONE409,18148
#define SQLITE_IOERR_READ SQLITE_IOERR_READ435,19380
#define SQLITE_IOERR_SHORT_READ SQLITE_IOERR_SHORT_READ436,19443
#define SQLITE_IOERR_WRITE SQLITE_IOERR_WRITE437,19506
#define SQLITE_IOERR_FSYNC SQLITE_IOERR_FSYNC438,19569
#define SQLITE_IOERR_DIR_FSYNC SQLITE_IOERR_DIR_FSYNC439,19632
#define SQLITE_IOERR_TRUNCATE SQLITE_IOERR_TRUNCATE440,19695
#define SQLITE_IOERR_FSTAT SQLITE_IOERR_FSTAT441,19758
#define SQLITE_IOERR_UNLOCK SQLITE_IOERR_UNLOCK442,19821
#define SQLITE_IOERR_RDLOCK SQLITE_IOERR_RDLOCK443,19884
#define SQLITE_IOERR_DELETE SQLITE_IOERR_DELETE444,19947
#define SQLITE_IOERR_BLOCKED SQLITE_IOERR_BLOCKED445,20011
#define SQLITE_IOERR_NOMEM SQLITE_IOERR_NOMEM446,20075
#define SQLITE_IOERR_ACCESS SQLITE_IOERR_ACCESS447,20139
#define SQLITE_IOERR_CHECKRESERVEDLOCK SQLITE_IOERR_CHECKRESERVEDLOCK448,20203
#define SQLITE_IOERR_LOCK SQLITE_IOERR_LOCK449,20267
#define SQLITE_IOERR_CLOSE SQLITE_IOERR_CLOSE450,20331
#define SQLITE_IOERR_DIR_CLOSE SQLITE_IOERR_DIR_CLOSE451,20395
#define SQLITE_LOCKED_SHAREDCACHE SQLITE_LOCKED_SHAREDCACHE452,20459
#define SQLITE_OPEN_READONLY SQLITE_OPEN_READONLY462,20760
#define SQLITE_OPEN_READWRITE SQLITE_OPEN_READWRITE463,20840
#define SQLITE_OPEN_CREATE SQLITE_OPEN_CREATE464,20920
#define SQLITE_OPEN_DELETEONCLOSE SQLITE_OPEN_DELETEONCLOSE465,21000
#define SQLITE_OPEN_EXCLUSIVE SQLITE_OPEN_EXCLUSIVE466,21064
#define SQLITE_OPEN_AUTOPROXY SQLITE_OPEN_AUTOPROXY467,21128
#define SQLITE_OPEN_MAIN_DB SQLITE_OPEN_MAIN_DB468,21192
#define SQLITE_OPEN_TEMP_DB SQLITE_OPEN_TEMP_DB469,21256
#define SQLITE_OPEN_TRANSIENT_DB SQLITE_OPEN_TRANSIENT_DB470,21320
#define SQLITE_OPEN_MAIN_JOURNAL SQLITE_OPEN_MAIN_JOURNAL471,21384
#define SQLITE_OPEN_TEMP_JOURNAL SQLITE_OPEN_TEMP_JOURNAL472,21448
#define SQLITE_OPEN_SUBJOURNAL SQLITE_OPEN_SUBJOURNAL473,21512
#define SQLITE_OPEN_MASTER_JOURNAL SQLITE_OPEN_MASTER_JOURNAL474,21576
#define SQLITE_OPEN_NOMUTEX SQLITE_OPEN_NOMUTEX475,21640
#define SQLITE_OPEN_FULLMUTEX SQLITE_OPEN_FULLMUTEX476,21720
#define SQLITE_OPEN_SHAREDCACHE SQLITE_OPEN_SHAREDCACHE477,21800
#define SQLITE_OPEN_PRIVATECACHE SQLITE_OPEN_PRIVATECACHE478,21880
#define SQLITE_IOCAP_ATOMIC SQLITE_IOCAP_ATOMIC500,22840
#define SQLITE_IOCAP_ATOMIC512 SQLITE_IOCAP_ATOMIC512501,22888
#define SQLITE_IOCAP_ATOMIC1K SQLITE_IOCAP_ATOMIC1K502,22936
#define SQLITE_IOCAP_ATOMIC2K SQLITE_IOCAP_ATOMIC2K503,22984
#define SQLITE_IOCAP_ATOMIC4K SQLITE_IOCAP_ATOMIC4K504,23032
#define SQLITE_IOCAP_ATOMIC8K SQLITE_IOCAP_ATOMIC8K505,23080
#define SQLITE_IOCAP_ATOMIC16K SQLITE_IOCAP_ATOMIC16K506,23128
#define SQLITE_IOCAP_ATOMIC32K SQLITE_IOCAP_ATOMIC32K507,23176
#define SQLITE_IOCAP_ATOMIC64K SQLITE_IOCAP_ATOMIC64K508,23224
#define SQLITE_IOCAP_SAFE_APPEND SQLITE_IOCAP_SAFE_APPEND509,23272
#define SQLITE_IOCAP_SEQUENTIAL SQLITE_IOCAP_SEQUENTIAL510,23320
#define SQLITE_LOCK_NONE SQLITE_LOCK_NONE519,23573
#define SQLITE_LOCK_SHARED SQLITE_LOCK_SHARED520,23609
#define SQLITE_LOCK_RESERVED SQLITE_LOCK_RESERVED521,23645
#define SQLITE_LOCK_PENDING SQLITE_LOCK_PENDING522,23681
#define SQLITE_LOCK_EXCLUSIVE SQLITE_LOCK_EXCLUSIVE523,23717
#define SQLITE_SYNC_NORMAL SQLITE_SYNC_NORMAL539,24349
#define SQLITE_SYNC_FULL SQLITE_SYNC_FULL540,24391
#define SQLITE_SYNC_DATAONLY SQLITE_SYNC_DATAONLY541,24433
typedef struct sqlite3_file sqlite3_file;sqlite3_file554,24903
struct sqlite3_file {sqlite3_file555,24945
  const struct sqlite3_io_methods *pMethods;  /* Methods for an open file */pMethods556,24967
typedef struct sqlite3_io_methods sqlite3_io_methods;sqlite3_io_methods646,29087
struct sqlite3_io_methods {sqlite3_io_methods647,29141
  int iVersion;iVersion648,29169
  int (*xClose)(sqlite3_file*);xClose649,29185
  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);xRead650,29217
  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);xWrite651,29286
  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);xTruncate652,29362
  int (*xSync)(sqlite3_file*, int flags);xSync653,29417
  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);xFileSize654,29459
  int (*xLock)(sqlite3_file*, int);xLock655,29516
  int (*xUnlock)(sqlite3_file*, int);xUnlock656,29552
  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);xCheckReservedLock657,29590
  int (*xFileControl)(sqlite3_file*, int op, void *pArg);xFileControl658,29648
  int (*xSectorSize)(sqlite3_file*);xSectorSize659,29706
  int (*xDeviceCharacteristics)(sqlite3_file*);xDeviceCharacteristics660,29743
#define SQLITE_FCNTL_LOCKSTATE SQLITE_FCNTL_LOCKSTATE679,30502
#define SQLITE_GET_LOCKPROXYFILE SQLITE_GET_LOCKPROXYFILE680,30542
#define SQLITE_SET_LOCKPROXYFILE SQLITE_SET_LOCKPROXYFILE681,30582
#define SQLITE_LAST_ERRNO SQLITE_LAST_ERRNO682,30622
typedef struct sqlite3_mutex sqlite3_mutex;sqlite3_mutex694,31008
typedef struct sqlite3_vfs sqlite3_vfs;sqlite3_vfs825,37237
struct sqlite3_vfs {sqlite3_vfs826,37277
  int iVersion;            /* Structure version number */iVersion827,37298
  int szOsFile;            /* Size of subclassed sqlite3_file */szOsFile828,37356
  int mxPathname;          /* Maximum file pathname length */mxPathname829,37421
  sqlite3_vfs *pNext;      /* Next registered VFS */pNext830,37483
  const char *zName;       /* Name of this virtual file system */zName831,37536
  void *pAppData;          /* Pointer to application-specific data */pAppData832,37602
  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,xOpen833,37672
  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);xDelete835,37778
  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);xAccess836,37842
  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);xFullPathname837,37918
  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);xDlOpen838,37997
  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);xDlError839,38054
  void (*xDlClose)(sqlite3_vfs*, void*);xDlClose841,38182
  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);xRandomness842,38223
  int (*xSleep)(sqlite3_vfs*, int microseconds);xSleep843,38282
  int (*xCurrentTime)(sqlite3_vfs*, double*);xCurrentTime844,38331
  int (*xGetLastError)(sqlite3_vfs*, int, char *);xGetLastError845,38377
#define SQLITE_ACCESS_EXISTS SQLITE_ACCESS_EXISTS863,39087
#define SQLITE_ACCESS_READWRITE SQLITE_ACCESS_READWRITE864,39121
#define SQLITE_ACCESS_READ SQLITE_ACCESS_READ865,39155
typedef struct sqlite3_mem_methods sqlite3_mem_methods;sqlite3_mem_methods1072,49770
struct sqlite3_mem_methods {sqlite3_mem_methods1073,49826
  void *(*xMalloc)(int);         /* Memory allocation function */xMalloc1074,49855
  void (*xFree)(void*);          /* Free a prior allocation */xFree1075,49921
  void *(*xRealloc)(void*,int);  /* Resize an allocation */xRealloc1076,49984
  int (*xSize)(void*);           /* Return the size of an allocation */xSize1077,50044
  int (*xRoundup)(int);          /* Round up request size to allocation size */xRoundup1078,50116
  int (*xInit)(void*);           /* Initialize the memory allocator */xInit1079,50196
  void (*xShutdown)(void*);      /* Deinitialize the memory allocator */xShutdown1080,50267
  void *pAppData;                /* Argument to xInit() and xShutdown() */pAppData1081,50340
#define SQLITE_CONFIG_SINGLETHREAD SQLITE_CONFIG_SINGLETHREAD1274,60961
#define SQLITE_CONFIG_MULTITHREAD SQLITE_CONFIG_MULTITHREAD1275,61010
#define SQLITE_CONFIG_SERIALIZED SQLITE_CONFIG_SERIALIZED1276,61059
#define SQLITE_CONFIG_MALLOC SQLITE_CONFIG_MALLOC1277,61108
#define SQLITE_CONFIG_GETMALLOC SQLITE_CONFIG_GETMALLOC1278,61174
#define SQLITE_CONFIG_SCRATCH SQLITE_CONFIG_SCRATCH1279,61240
#define SQLITE_CONFIG_PAGECACHE SQLITE_CONFIG_PAGECACHE1280,61306
#define SQLITE_CONFIG_HEAP SQLITE_CONFIG_HEAP1281,61372
#define SQLITE_CONFIG_MEMSTATUS SQLITE_CONFIG_MEMSTATUS1282,61443
#define SQLITE_CONFIG_MUTEX SQLITE_CONFIG_MUTEX1283,61496
#define SQLITE_CONFIG_GETMUTEX SQLITE_CONFIG_GETMUTEX1284,61564
#define SQLITE_CONFIG_LOOKASIDE SQLITE_CONFIG_LOOKASIDE1286,61699
#define SQLITE_CONFIG_PCACHE SQLITE_CONFIG_PCACHE1287,61752
#define SQLITE_CONFIG_GETPCACHE SQLITE_CONFIG_GETPCACHE1288,61821
#define SQLITE_CONFIG_LOG SQLITE_CONFIG_LOG1289,61890
#define SQLITE_DBCONFIG_LOOKASIDE SQLITE_DBCONFIG_LOOKASIDE1324,63559
#define SQLITE_DENY SQLITE_DENY2010,96134
#define SQLITE_IGNORE SQLITE_IGNORE2011,96204
#define SQLITE_CREATE_INDEX SQLITE_CREATE_INDEX2033,97329
#define SQLITE_CREATE_TABLE SQLITE_CREATE_TABLE2034,97408
#define SQLITE_CREATE_TEMP_INDEX SQLITE_CREATE_TEMP_INDEX2035,97487
#define SQLITE_CREATE_TEMP_TABLE SQLITE_CREATE_TEMP_TABLE2036,97566
#define SQLITE_CREATE_TEMP_TRIGGER SQLITE_CREATE_TEMP_TRIGGER2037,97645
#define SQLITE_CREATE_TEMP_VIEW SQLITE_CREATE_TEMP_VIEW2038,97724
#define SQLITE_CREATE_TRIGGER SQLITE_CREATE_TRIGGER2039,97803
#define SQLITE_CREATE_VIEW SQLITE_CREATE_VIEW2040,97882
#define SQLITE_DELETE SQLITE_DELETE2041,97961
#define SQLITE_DROP_INDEX SQLITE_DROP_INDEX2042,98040
#define SQLITE_DROP_TABLE SQLITE_DROP_TABLE2043,98119
#define SQLITE_DROP_TEMP_INDEX SQLITE_DROP_TEMP_INDEX2044,98198
#define SQLITE_DROP_TEMP_TABLE SQLITE_DROP_TEMP_TABLE2045,98277
#define SQLITE_DROP_TEMP_TRIGGER SQLITE_DROP_TEMP_TRIGGER2046,98356
#define SQLITE_DROP_TEMP_VIEW SQLITE_DROP_TEMP_VIEW2047,98435
#define SQLITE_DROP_TRIGGER SQLITE_DROP_TRIGGER2048,98514
#define SQLITE_DROP_VIEW SQLITE_DROP_VIEW2049,98593
#define SQLITE_INSERT SQLITE_INSERT2050,98672
#define SQLITE_PRAGMA SQLITE_PRAGMA2051,98751
#define SQLITE_READ SQLITE_READ2052,98830
#define SQLITE_SELECT SQLITE_SELECT2053,98909
#define SQLITE_TRANSACTION SQLITE_TRANSACTION2054,98988
#define SQLITE_UPDATE SQLITE_UPDATE2055,99067
#define SQLITE_ATTACH SQLITE_ATTACH2056,99146
#define SQLITE_DETACH SQLITE_DETACH2057,99225
#define SQLITE_ALTER_TABLE SQLITE_ALTER_TABLE2058,99304
#define SQLITE_REINDEX SQLITE_REINDEX2059,99383
#define SQLITE_ANALYZE SQLITE_ANALYZE2060,99462
#define SQLITE_CREATE_VTABLE SQLITE_CREATE_VTABLE2061,99541
#define SQLITE_DROP_VTABLE SQLITE_DROP_VTABLE2062,99620
#define SQLITE_FUNCTION SQLITE_FUNCTION2063,99699
#define SQLITE_SAVEPOINT SQLITE_SAVEPOINT2064,99778
#define SQLITE_COPY SQLITE_COPY2065,99857
typedef struct sqlite3_stmt sqlite3_stmt;sqlite3_stmt2278,110086
#define SQLITE_LIMIT_LENGTH SQLITE_LIMIT_LENGTH2365,113702
#define SQLITE_LIMIT_SQL_LENGTH SQLITE_LIMIT_SQL_LENGTH2366,113751
#define SQLITE_LIMIT_COLUMN SQLITE_LIMIT_COLUMN2367,113800
#define SQLITE_LIMIT_EXPR_DEPTH SQLITE_LIMIT_EXPR_DEPTH2368,113849
#define SQLITE_LIMIT_COMPOUND_SELECT SQLITE_LIMIT_COMPOUND_SELECT2369,113898
#define SQLITE_LIMIT_VDBE_OP SQLITE_LIMIT_VDBE_OP2370,113947
#define SQLITE_LIMIT_FUNCTION_ARG SQLITE_LIMIT_FUNCTION_ARG2371,113996
#define SQLITE_LIMIT_ATTACHED SQLITE_LIMIT_ATTACHED2372,114045
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH SQLITE_LIMIT_LIKE_PATTERN_LENGTH2373,114094
#define SQLITE_LIMIT_VARIABLE_NUMBER SQLITE_LIMIT_VARIABLE_NUMBER2374,114143
#define SQLITE_LIMIT_TRIGGER_DEPTH SQLITE_LIMIT_TRIGGER_DEPTH2375,114192
typedef struct Mem sqlite3_value;sqlite3_value2532,121883
typedef struct sqlite3_context sqlite3_context;sqlite3_context2546,122465
#define SQLITE_INTEGER SQLITE_INTEGER2923,139578
#define SQLITE_FLOAT SQLITE_FLOAT2924,139604
#define SQLITE_BLOB SQLITE_BLOB2925,139630
#define SQLITE_NULL SQLITE_NULL2926,139656
# undef SQLITE_TEXTSQLITE_TEXT2928,139701
# define SQLITE_TEXT SQLITE_TEXT2930,139727
#define SQLITE3_TEXT SQLITE3_TEXT2932,139761
#define SQLITE_UTF8 SQLITE_UTF83250,155612
#define SQLITE_UTF16LE SQLITE_UTF16LE3251,155644
#define SQLITE_UTF16BE SQLITE_UTF16BE3252,155676
#define SQLITE_UTF16 SQLITE_UTF163253,155708
#define SQLITE_ANY SQLITE_ANY3254,155771
#define SQLITE_UTF16_ALIGNED SQLITE_UTF16_ALIGNED3255,155841
typedef void (*sqlite3_destructor_type)(void*);sqlite3_destructor_type3460,165580
#define SQLITE_STATIC SQLITE_STATIC3461,165628
#define SQLITE_TRANSIENT SQLITE_TRANSIENT3462,165684
SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;sqlite3_temp_directory3782,180404
typedef struct sqlite3_vtab sqlite3_vtab;sqlite3_vtab4175,197727
typedef struct sqlite3_index_info sqlite3_index_info;sqlite3_index_info4176,197769
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;sqlite3_vtab_cursor4177,197823
typedef struct sqlite3_module sqlite3_module;sqlite3_module4178,197879
struct sqlite3_module {sqlite3_module4197,198649
  int iVersion;iVersion4198,198673
  int (*xCreate)(sqlite3*, void *pAux,xCreate4199,198689
  int (*xConnect)(sqlite3*, void *pAux,xConnect4202,198824
  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);xBestIndex4205,198960
  int (*xDisconnect)(sqlite3_vtab *pVTab);xDisconnect4206,199023
  int (*xDestroy)(sqlite3_vtab *pVTab);xDestroy4207,199066
  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);xOpen4208,199106
  int (*xClose)(sqlite3_vtab_cursor*);xClose4209,199175
  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,xFilter4210,199214
  int (*xNext)(sqlite3_vtab_cursor*);xNext4212,199334
  int (*xEof)(sqlite3_vtab_cursor*);xEof4213,199372
  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);xColumn4214,199409
  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);xRowid4215,199472
  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);xUpdate4216,199534
  int (*xBegin)(sqlite3_vtab *pVTab);xBegin4217,199608
  int (*xSync)(sqlite3_vtab *pVTab);xSync4218,199646
  int (*xCommit)(sqlite3_vtab *pVTab);xCommit4219,199683
  int (*xRollback)(sqlite3_vtab *pVTab);xRollback4220,199722
  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,xFindFunction4221,199763
  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);xRename4224,199952
struct sqlite3_index_info {sqlite3_index_info4278,202397
  int nConstraint;           /* Number of entries in aConstraint */nConstraint4280,202440
  struct sqlite3_index_constraint {sqlite3_index_constraint4281,202508
     int iColumn;              /* Column on left-hand side of constraint */iColumn4282,202544
     unsigned char op;         /* Constraint operator */op4283,202620
     unsigned char usable;     /* True if this constraint is usable */usable4284,202677
     int iTermOffset;          /* Used internally - xBestIndex should ignore */iTermOffset4285,202748
  } *aConstraint;            /* Table of WHERE clause constraints */aConstraint4286,202828
  int nOrderBy;              /* Number of terms in the ORDER BY clause */nOrderBy4287,202897
  struct sqlite3_index_orderby {sqlite3_index_orderby4288,202971
     int iColumn;              /* Column number */iColumn4289,203004
     unsigned char desc;       /* True for DESC.  False for ASC. */desc4290,203055
  } *aOrderBy;               /* The ORDER BY clause */aOrderBy4291,203123
  struct sqlite3_index_constraint_usage {sqlite3_index_constraint_usage4293,203194
    int argvIndex;           /* if >0, constraint is part of argv to xFilter */argvIndex4294,203236
    unsigned char omit;      /* Do not code a test for this constraint */omit4295,203316
  } *aConstraintUsage;aConstraintUsage4296,203390
  int idxNum;                /* Number used to identify the index */idxNum4297,203413
  char *idxStr;              /* String, possibly obtained from sqlite3_malloc */idxStr4298,203482
  int needToFreeIdxStr;      /* Free idxStr using sqlite3_free() if true */needToFreeIdxStr4299,203563
  int orderByConsumed;       /* True if output is already ordered */orderByConsumed4300,203639
  double estimatedCost;      /* Estimated cost of using this index */estimatedCost4301,203708
#define SQLITE_INDEX_CONSTRAINT_EQ SQLITE_INDEX_CONSTRAINT_EQ4303,203781
#define SQLITE_INDEX_CONSTRAINT_GT SQLITE_INDEX_CONSTRAINT_GT4304,203821
#define SQLITE_INDEX_CONSTRAINT_LE SQLITE_INDEX_CONSTRAINT_LE4305,203861
#define SQLITE_INDEX_CONSTRAINT_LT SQLITE_INDEX_CONSTRAINT_LT4306,203901
#define SQLITE_INDEX_CONSTRAINT_GE SQLITE_INDEX_CONSTRAINT_GE4307,203942
#define SQLITE_INDEX_CONSTRAINT_MATCH SQLITE_INDEX_CONSTRAINT_MATCH4308,203983
struct sqlite3_vtab {sqlite3_vtab4367,206760
  const sqlite3_module *pModule;  /* The module for this virtual table */pModule4368,206782
  int nRef;                       /* NO LONGER USED */nRef4369,206856
  char *zErrMsg;                  /* Error message from sqlite3_mprintf() */zErrMsg4370,206911
struct sqlite3_vtab_cursor {sqlite3_vtab_cursor4392,207865
  sqlite3_vtab *pVtab;      /* Virtual table of this cursor */pVtab4393,207894
typedef struct sqlite3_blob sqlite3_blob;sqlite3_blob4451,210301
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;sqlite3_mutex_methods4843,228225
struct sqlite3_mutex_methods {sqlite3_mutex_methods4844,228285
  int (*xMutexInit)(void);xMutexInit4845,228316
  int (*xMutexEnd)(void);xMutexEnd4846,228343
  sqlite3_mutex *(*xMutexAlloc)(int);xMutexAlloc4847,228369
  void (*xMutexFree)(sqlite3_mutex *);xMutexFree4848,228407
  void (*xMutexEnter)(sqlite3_mutex *);xMutexEnter4849,228446
  int (*xMutexTry)(sqlite3_mutex *);xMutexTry4850,228486
  void (*xMutexLeave)(sqlite3_mutex *);xMutexLeave4851,228523
  int (*xMutexHeld)(sqlite3_mutex *);xMutexHeld4852,228563
  int (*xMutexNotheld)(sqlite3_mutex *);xMutexNotheld4853,228601
#define SQLITE_MUTEX_FAST SQLITE_MUTEX_FAST4900,230636
#define SQLITE_MUTEX_RECURSIVE SQLITE_MUTEX_RECURSIVE4901,230676
#define SQLITE_MUTEX_STATIC_MASTER SQLITE_MUTEX_STATIC_MASTER4902,230716
#define SQLITE_MUTEX_STATIC_MEM SQLITE_MUTEX_STATIC_MEM4903,230756
#define SQLITE_MUTEX_STATIC_MEM2 SQLITE_MUTEX_STATIC_MEM24904,230820
#define SQLITE_MUTEX_STATIC_OPEN SQLITE_MUTEX_STATIC_OPEN4905,230876
#define SQLITE_MUTEX_STATIC_PRNG SQLITE_MUTEX_STATIC_PRNG4906,230942
#define SQLITE_MUTEX_STATIC_LRU SQLITE_MUTEX_STATIC_LRU4907,231006
#define SQLITE_MUTEX_STATIC_LRU2 SQLITE_MUTEX_STATIC_LRU24908,231067
#define SQLITE_TESTCTRL_FIRST SQLITE_TESTCTRL_FIRST4979,234164
#define SQLITE_TESTCTRL_PRNG_SAVE SQLITE_TESTCTRL_PRNG_SAVE4980,234215
#define SQLITE_TESTCTRL_PRNG_RESTORE SQLITE_TESTCTRL_PRNG_RESTORE4981,234266
#define SQLITE_TESTCTRL_PRNG_RESET SQLITE_TESTCTRL_PRNG_RESET4982,234317
#define SQLITE_TESTCTRL_BITVEC_TEST SQLITE_TESTCTRL_BITVEC_TEST4983,234368
#define SQLITE_TESTCTRL_FAULT_INSTALL SQLITE_TESTCTRL_FAULT_INSTALL4984,234419
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS4985,234470
#define SQLITE_TESTCTRL_PENDING_BYTE SQLITE_TESTCTRL_PENDING_BYTE4986,234521
#define SQLITE_TESTCTRL_ASSERT SQLITE_TESTCTRL_ASSERT4987,234572
#define SQLITE_TESTCTRL_ALWAYS SQLITE_TESTCTRL_ALWAYS4988,234623
#define SQLITE_TESTCTRL_RESERVE SQLITE_TESTCTRL_RESERVE4989,234674
#define SQLITE_TESTCTRL_OPTIMIZATIONS SQLITE_TESTCTRL_OPTIMIZATIONS4990,234725
#define SQLITE_TESTCTRL_ISKEYWORD SQLITE_TESTCTRL_ISKEYWORD4991,234776
#define SQLITE_TESTCTRL_LAST SQLITE_TESTCTRL_LAST4992,234827
#define SQLITE_STATUS_MEMORY_USED SQLITE_STATUS_MEMORY_USED5104,240229
#define SQLITE_STATUS_PAGECACHE_USED SQLITE_STATUS_PAGECACHE_USED5105,240274
#define SQLITE_STATUS_PAGECACHE_OVERFLOW SQLITE_STATUS_PAGECACHE_OVERFLOW5106,240319
#define SQLITE_STATUS_SCRATCH_USED SQLITE_STATUS_SCRATCH_USED5107,240364
#define SQLITE_STATUS_SCRATCH_OVERFLOW SQLITE_STATUS_SCRATCH_OVERFLOW5108,240409
#define SQLITE_STATUS_MALLOC_SIZE SQLITE_STATUS_MALLOC_SIZE5109,240454
#define SQLITE_STATUS_PARSER_STACK SQLITE_STATUS_PARSER_STACK5110,240499
#define SQLITE_STATUS_PAGECACHE_SIZE SQLITE_STATUS_PAGECACHE_SIZE5111,240544
#define SQLITE_STATUS_SCRATCH_SIZE SQLITE_STATUS_SCRATCH_SIZE5112,240589
#define SQLITE_DBSTATUS_LOOKASIDE_USED SQLITE_DBSTATUS_LOOKASIDE_USED5153,242257
#define SQLITE_STMTSTATUS_FULLSCAN_STEP SQLITE_STMTSTATUS_FULLSCAN_STEP5204,244279
#define SQLITE_STMTSTATUS_SORT SQLITE_STMTSTATUS_SORT5205,244325
typedef struct sqlite3_pcache sqlite3_pcache;sqlite3_pcache5219,244761
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;sqlite3_pcache_methods5349,251801
struct sqlite3_pcache_methods {sqlite3_pcache_methods5350,251863
  void *pArg;pArg5351,251895
  int (*xInit)(void*);xInit5352,251909
  void (*xShutdown)(void*);xShutdown5353,251932
  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);xCreate5354,251960
  void (*xCachesize)(sqlite3_pcache*, int nCachesize);xCachesize5355,252018
  int (*xPagecount)(sqlite3_pcache*);xPagecount5356,252073
  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);xFetch5357,252111
  void (*xUnpin)(sqlite3_pcache*, void*, int discard);xUnpin5358,252177
  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);xRekey5359,252232
  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);xTruncate5360,252308
  void (*xDestroy)(sqlite3_pcache*);xDestroy5361,252363
typedef struct sqlite3_backup sqlite3_backup;sqlite3_backup5375,252755
# undef doubledouble5727,271133

src/sqlite/sqlite3ext.h,21592
#define _SQLITE3EXT_H__SQLITE3EXT_H_19,664
typedef struct sqlite3_api_routines sqlite3_api_routines;sqlite3_api_routines22,709
struct sqlite3_api_routines {sqlite3_api_routines34,1141
  void * (*aggregate_context)(sqlite3_context*,int nBytes);aggregate_context35,1171
  int  (*aggregate_count)(sqlite3_context*);aggregate_count36,1231
  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));bind_blob37,1276
  int  (*bind_double)(sqlite3_stmt*,int,double);bind_double38,1349
  int  (*bind_int)(sqlite3_stmt*,int,int);bind_int39,1398
  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);bind_int6440,1441
  int  (*bind_null)(sqlite3_stmt*,int);bind_null41,1495
  int  (*bind_parameter_count)(sqlite3_stmt*);bind_parameter_count42,1535
  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);bind_parameter_index43,1582
  const char * (*bind_parameter_name)(sqlite3_stmt*,int);bind_parameter_name44,1646
  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));bind_text45,1704
  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));bind_text1646,1777
  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);bind_value47,1850
  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);busy_handler48,1912
  int  (*busy_timeout)(sqlite3*,int ms);busy_timeout49,1970
  int  (*changes)(sqlite3*);changes50,2011
  int  (*close)(sqlite3*);close51,2040
  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const char*));collation_needed52,2067
  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,int eTextRep,const void*));collation_needed1653,2160
  const void * (*column_blob)(sqlite3_stmt*,int iCol);column_blob54,2255
  int  (*column_bytes)(sqlite3_stmt*,int iCol);column_bytes55,2310
  int  (*column_bytes16)(sqlite3_stmt*,int iCol);column_bytes1656,2358
  int  (*column_count)(sqlite3_stmt*pStmt);column_count57,2408
  const char * (*column_database_name)(sqlite3_stmt*,int);column_database_name58,2452
  const void * (*column_database_name16)(sqlite3_stmt*,int);column_database_name1659,2511
  const char * (*column_decltype)(sqlite3_stmt*,int i);column_decltype60,2572
  const void * (*column_decltype16)(sqlite3_stmt*,int);column_decltype1661,2628
  double  (*column_double)(sqlite3_stmt*,int iCol);column_double62,2684
  int  (*column_int)(sqlite3_stmt*,int iCol);column_int63,2736
  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);column_int6464,2782
  const char * (*column_name)(sqlite3_stmt*,int);column_name65,2839
  const void * (*column_name16)(sqlite3_stmt*,int);column_name1666,2889
  const char * (*column_origin_name)(sqlite3_stmt*,int);column_origin_name67,2941
  const void * (*column_origin_name16)(sqlite3_stmt*,int);column_origin_name1668,2998
  const char * (*column_table_name)(sqlite3_stmt*,int);column_table_name69,3057
  const void * (*column_table_name16)(sqlite3_stmt*,int);column_table_name1670,3113
  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);column_text71,3171
  const void * (*column_text16)(sqlite3_stmt*,int iCol);column_text1672,3235
  int  (*column_type)(sqlite3_stmt*,int iCol);column_type73,3292
  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);column_value74,3339
  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);commit_hook75,3397
  int  (*complete)(const char*sql);complete76,3452
  int  (*complete16)(const void*sql);complete1677,3488
  int  (*create_collation)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*));create_collation78,3526
  int  (*create_collation16)(sqlite3*,const void*,int,void*,int(*)(void*,int,const void*,int,const void*));create_collation1679,3632
  int  (*create_function)(sqlite3*,const char*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));create_function80,3740
  int  (*create_function16)(sqlite3*,const void*,int,int,void*,void (*xFunc)(sqlite3_context*,int,sqlite3_value**),void (*xStep)(sqlite3_context*,int,sqlite3_value**),void (*xFinal)(sqlite3_context*));create_function1681,3940
  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);create_module82,4142
  int  (*data_count)(sqlite3_stmt*pStmt);data_count83,4216
  sqlite3 * (*db_handle)(sqlite3_stmt*);db_handle84,4258
  int (*declare_vtab)(sqlite3*,const char*);declare_vtab85,4299
  int  (*enable_shared_cache)(int);enable_shared_cache86,4344
  int  (*errcode)(sqlite3*db);errcode87,4380
  const char * (*errmsg)(sqlite3*);errmsg88,4411
  const void * (*errmsg16)(sqlite3*);errmsg1689,4447
  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);exec90,4485
  int  (*expired)(sqlite3_stmt*);expired91,4553
  int  (*finalize)(sqlite3_stmt*pStmt);finalize92,4587
  void  (*free)(void*);free93,4627
  void  (*free_table)(char**result);free_table94,4651
  int  (*get_autocommit)(sqlite3*);get_autocommit95,4688
  void * (*get_auxdata)(sqlite3_context*,int);get_auxdata96,4724
  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);get_table97,4771
  int  (*global_recover)(void);global_recover98,4839
  void  (*interruptx)(sqlite3*);interruptx99,4871
  sqlite_int64  (*last_insert_rowid)(sqlite3*);last_insert_rowid100,4904
  const char * (*libversion)(void);libversion101,4952
  int  (*libversion_number)(void);libversion_number102,4988
  void *(*malloc)(int);malloc103,5023
  char * (*mprintf)(const char*,...);mprintf104,5047
  int  (*open)(const char*,sqlite3**);open105,5085
  int  (*open16)(const void*,sqlite3**);open16106,5124
  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);prepare107,5165
  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);prepare16108,5238
  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);profile109,5313
  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);progress_handler110,5391
  void *(*realloc)(void*,int);realloc111,5454
  int  (*reset)(sqlite3_stmt*pStmt);reset112,5485
  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));result_blob113,5522
  void  (*result_double)(sqlite3_context*,double);result_double114,5595
  void  (*result_error)(sqlite3_context*,const char*,int);result_error115,5646
  void  (*result_error16)(sqlite3_context*,const void*,int);result_error16116,5705
  void  (*result_int)(sqlite3_context*,int);result_int117,5766
  void  (*result_int64)(sqlite3_context*,sqlite_int64);result_int64118,5811
  void  (*result_null)(sqlite3_context*);result_null119,5867
  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));result_text120,5909
  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));result_text16121,5982
  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));result_text16be122,6057
  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));result_text16le123,6134
  void  (*result_value)(sqlite3_context*,sqlite3_value*);result_value124,6211
  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);rollback_hook125,6269
  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,const char*,const char*),void*);set_authorizer126,6327
  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));set_auxdata127,6435
  char * (*snprintf)(int,char*,const char*,...);snprintf128,6503
  int  (*step)(sqlite3_stmt*);step129,6552
  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,char const**,char const**,int*,int*,int*);table_column_metadata130,6583
  void  (*thread_cleanup)(void);thread_cleanup131,6703
  int  (*total_changes)(sqlite3*);total_changes132,6736
  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);trace133,6771
  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);transfer_bindings134,6839
  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,sqlite_int64),void*);update_hook135,6897
  void * (*user_data)(sqlite3_context*);user_data136,6995
  const void * (*value_blob)(sqlite3_value*);value_blob137,7036
  int  (*value_bytes)(sqlite3_value*);value_bytes138,7082
  int  (*value_bytes16)(sqlite3_value*);value_bytes16139,7121
  double  (*value_double)(sqlite3_value*);value_double140,7162
  int  (*value_int)(sqlite3_value*);value_int141,7205
  sqlite_int64  (*value_int64)(sqlite3_value*);value_int64142,7242
  int  (*value_numeric_type)(sqlite3_value*);value_numeric_type143,7290
  const unsigned char * (*value_text)(sqlite3_value*);value_text144,7336
  const void * (*value_text16)(sqlite3_value*);value_text16145,7391
  const void * (*value_text16be)(sqlite3_value*);value_text16be146,7439
  const void * (*value_text16le)(sqlite3_value*);value_text16le147,7489
  int  (*value_type)(sqlite3_value*);value_type148,7539
  char *(*vmprintf)(const char*,va_list);vmprintf149,7577
  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);overload_function151,7637
  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);prepare_v2153,7732
  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);prepare16_v2154,7807
  int (*clear_bindings)(sqlite3_stmt*);clear_bindings155,7884
  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,void (*xDestroy)(void *));create_module_v2157,7947
  int (*bind_zeroblob)(sqlite3_stmt*,int,int);bind_zeroblob159,8072
  int (*blob_bytes)(sqlite3_blob*);blob_bytes160,8119
  int (*blob_close)(sqlite3_blob*);blob_close161,8155
  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,int,sqlite3_blob**);blob_open162,8191
  int (*blob_read)(sqlite3_blob*,void*,int,int);blob_read163,8290
  int (*blob_write)(sqlite3_blob*,const void*,int,int);blob_write164,8339
  int (*create_collation_v2)(sqlite3*,const char*,int,void*,int(*)(void*,int,const void*,int,const void*),void(*)(void*));create_collation_v2165,8395
  int (*file_control)(sqlite3*,const char*,int,void*);file_control166,8518
  sqlite3_int64 (*memory_highwater)(int);memory_highwater167,8573
  sqlite3_int64 (*memory_used)(void);memory_used168,8615
  sqlite3_mutex *(*mutex_alloc)(int);mutex_alloc169,8653
  void (*mutex_enter)(sqlite3_mutex*);mutex_enter170,8691
  void (*mutex_free)(sqlite3_mutex*);mutex_free171,8730
  void (*mutex_leave)(sqlite3_mutex*);mutex_leave172,8768
  int (*mutex_try)(sqlite3_mutex*);mutex_try173,8807
  int (*open_v2)(const char*,sqlite3**,int,const char*);open_v2174,8843
  int (*release_memory)(int);release_memory175,8900
  void (*result_error_nomem)(sqlite3_context*);result_error_nomem176,8930
  void (*result_error_toobig)(sqlite3_context*);result_error_toobig177,8978
  int (*sleep)(int);sleep178,9027
  void (*soft_heap_limit)(int);soft_heap_limit179,9048
  sqlite3_vfs *(*vfs_find)(const char*);vfs_find180,9080
  int (*vfs_register)(sqlite3_vfs*,int);vfs_register181,9121
  int (*vfs_unregister)(sqlite3_vfs*);vfs_unregister182,9162
  int (*xthreadsafe)(void);xthreadsafe183,9201
  void (*result_zeroblob)(sqlite3_context*,int);result_zeroblob184,9229
  void (*result_error_code)(sqlite3_context*,int);result_error_code185,9278
  int (*test_control)(int, ...);test_control186,9329
  void (*randomness)(int,void*);randomness187,9362
  sqlite3 *(*context_db_handle)(sqlite3_context*);context_db_handle188,9395
  int (*extended_result_codes)(sqlite3*,int);extended_result_codes189,9446
  int (*limit)(sqlite3*,int,int);limit190,9492
  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);next_stmt191,9526
  const char *(*sql)(sqlite3_stmt*);sql192,9580
  int (*status)(int,int*,int*,int);status193,9617
#define sqlite3_aggregate_context sqlite3_aggregate_context208,10156
#define sqlite3_aggregate_count sqlite3_aggregate_count210,10257
#define sqlite3_bind_blob sqlite3_bind_blob212,10332
#define sqlite3_bind_double sqlite3_bind_double213,10394
#define sqlite3_bind_int sqlite3_bind_int214,10458
#define sqlite3_bind_int64 sqlite3_bind_int64215,10519
#define sqlite3_bind_null sqlite3_bind_null216,10582
#define sqlite3_bind_parameter_count sqlite3_bind_parameter_count217,10644
#define sqlite3_bind_parameter_index sqlite3_bind_parameter_index218,10717
#define sqlite3_bind_parameter_name sqlite3_bind_parameter_name219,10790
#define sqlite3_bind_text sqlite3_bind_text220,10862
#define sqlite3_bind_text16 sqlite3_bind_text16221,10924
#define sqlite3_bind_value sqlite3_bind_value222,10988
#define sqlite3_busy_handler sqlite3_busy_handler223,11051
#define sqlite3_busy_timeout sqlite3_busy_timeout224,11116
#define sqlite3_changes sqlite3_changes225,11181
#define sqlite3_close sqlite3_close226,11241
#define sqlite3_collation_needed sqlite3_collation_needed227,11299
#define sqlite3_collation_needed16 sqlite3_collation_needed16228,11368
#define sqlite3_column_blob sqlite3_column_blob229,11439
#define sqlite3_column_bytes sqlite3_column_bytes230,11503
#define sqlite3_column_bytes16 sqlite3_column_bytes16231,11568
#define sqlite3_column_count sqlite3_column_count232,11635
#define sqlite3_column_database_name sqlite3_column_database_name233,11700
#define sqlite3_column_database_name16 sqlite3_column_database_name16234,11773
#define sqlite3_column_decltype sqlite3_column_decltype235,11848
#define sqlite3_column_decltype16 sqlite3_column_decltype16236,11916
#define sqlite3_column_double sqlite3_column_double237,11986
#define sqlite3_column_int sqlite3_column_int238,12052
#define sqlite3_column_int64 sqlite3_column_int64239,12115
#define sqlite3_column_name sqlite3_column_name240,12180
#define sqlite3_column_name16 sqlite3_column_name16241,12244
#define sqlite3_column_origin_name sqlite3_column_origin_name242,12310
#define sqlite3_column_origin_name16 sqlite3_column_origin_name16243,12381
#define sqlite3_column_table_name sqlite3_column_table_name244,12454
#define sqlite3_column_table_name16 sqlite3_column_table_name16245,12524
#define sqlite3_column_text sqlite3_column_text246,12596
#define sqlite3_column_text16 sqlite3_column_text16247,12660
#define sqlite3_column_type sqlite3_column_type248,12726
#define sqlite3_column_value sqlite3_column_value249,12790
#define sqlite3_commit_hook sqlite3_commit_hook250,12855
#define sqlite3_complete sqlite3_complete251,12919
#define sqlite3_complete16 sqlite3_complete16252,12980
#define sqlite3_create_collation sqlite3_create_collation253,13043
#define sqlite3_create_collation16 sqlite3_create_collation16254,13112
#define sqlite3_create_function sqlite3_create_function255,13183
#define sqlite3_create_function16 sqlite3_create_function16256,13251
#define sqlite3_create_module sqlite3_create_module257,13321
#define sqlite3_create_module_v2 sqlite3_create_module_v2258,13387
#define sqlite3_data_count sqlite3_data_count259,13456
#define sqlite3_db_handle sqlite3_db_handle260,13519
#define sqlite3_declare_vtab sqlite3_declare_vtab261,13581
#define sqlite3_enable_shared_cache sqlite3_enable_shared_cache262,13646
#define sqlite3_errcode sqlite3_errcode263,13718
#define sqlite3_errmsg sqlite3_errmsg264,13778
#define sqlite3_errmsg16 sqlite3_errmsg16265,13837
#define sqlite3_exec sqlite3_exec266,13898
#define sqlite3_expired sqlite3_expired268,13986
#define sqlite3_finalize sqlite3_finalize270,14053
#define sqlite3_free sqlite3_free271,14114
#define sqlite3_free_table sqlite3_free_table272,14171
#define sqlite3_get_autocommit sqlite3_get_autocommit273,14234
#define sqlite3_get_auxdata sqlite3_get_auxdata274,14301
#define sqlite3_get_table sqlite3_get_table275,14365
#define sqlite3_global_recover sqlite3_global_recover277,14458
#define sqlite3_interrupt sqlite3_interrupt279,14532
#define sqlite3_last_insert_rowid sqlite3_last_insert_rowid280,14595
#define sqlite3_libversion sqlite3_libversion281,14665
#define sqlite3_libversion_number sqlite3_libversion_number282,14728
#define sqlite3_malloc sqlite3_malloc283,14798
#define sqlite3_mprintf sqlite3_mprintf284,14857
#define sqlite3_open sqlite3_open285,14917
#define sqlite3_open16 sqlite3_open16286,14974
#define sqlite3_prepare sqlite3_prepare287,15033
#define sqlite3_prepare16 sqlite3_prepare16288,15093
#define sqlite3_prepare_v2 sqlite3_prepare_v2289,15155
#define sqlite3_prepare16_v2 sqlite3_prepare16_v2290,15218
#define sqlite3_profile sqlite3_profile291,15283
#define sqlite3_progress_handler sqlite3_progress_handler292,15343
#define sqlite3_realloc sqlite3_realloc293,15412
#define sqlite3_reset sqlite3_reset294,15472
#define sqlite3_result_blob sqlite3_result_blob295,15530
#define sqlite3_result_double sqlite3_result_double296,15594
#define sqlite3_result_error sqlite3_result_error297,15660
#define sqlite3_result_error16 sqlite3_result_error16298,15725
#define sqlite3_result_int sqlite3_result_int299,15792
#define sqlite3_result_int64 sqlite3_result_int64300,15855
#define sqlite3_result_null sqlite3_result_null301,15920
#define sqlite3_result_text sqlite3_result_text302,15984
#define sqlite3_result_text16 sqlite3_result_text16303,16048
#define sqlite3_result_text16be sqlite3_result_text16be304,16114
#define sqlite3_result_text16le sqlite3_result_text16le305,16182
#define sqlite3_result_value sqlite3_result_value306,16250
#define sqlite3_rollback_hook sqlite3_rollback_hook307,16315
#define sqlite3_set_authorizer sqlite3_set_authorizer308,16381
#define sqlite3_set_auxdata sqlite3_set_auxdata309,16448
#define sqlite3_snprintf sqlite3_snprintf310,16512
#define sqlite3_step sqlite3_step311,16573
#define sqlite3_table_column_metadata sqlite3_table_column_metadata312,16630
#define sqlite3_thread_cleanup sqlite3_thread_cleanup313,16704
#define sqlite3_total_changes sqlite3_total_changes314,16771
#define sqlite3_trace sqlite3_trace315,16837
#define sqlite3_transfer_bindings sqlite3_transfer_bindings317,16926
#define sqlite3_update_hook sqlite3_update_hook319,17003
#define sqlite3_user_data sqlite3_user_data320,17067
#define sqlite3_value_blob sqlite3_value_blob321,17129
#define sqlite3_value_bytes sqlite3_value_bytes322,17192
#define sqlite3_value_bytes16 sqlite3_value_bytes16323,17256
#define sqlite3_value_double sqlite3_value_double324,17322
#define sqlite3_value_int sqlite3_value_int325,17387
#define sqlite3_value_int64 sqlite3_value_int64326,17449
#define sqlite3_value_numeric_type sqlite3_value_numeric_type327,17513
#define sqlite3_value_text sqlite3_value_text328,17584
#define sqlite3_value_text16 sqlite3_value_text16329,17647
#define sqlite3_value_text16be sqlite3_value_text16be330,17712
#define sqlite3_value_text16le sqlite3_value_text16le331,17779
#define sqlite3_value_type sqlite3_value_type332,17846
#define sqlite3_vmprintf sqlite3_vmprintf333,17909
#define sqlite3_overload_function sqlite3_overload_function334,17970
#define sqlite3_prepare_v2 sqlite3_prepare_v2335,18040
#define sqlite3_prepare16_v2 sqlite3_prepare16_v2336,18103
#define sqlite3_clear_bindings sqlite3_clear_bindings337,18168
#define sqlite3_bind_zeroblob sqlite3_bind_zeroblob338,18235
#define sqlite3_blob_bytes sqlite3_blob_bytes339,18301
#define sqlite3_blob_close sqlite3_blob_close340,18364
#define sqlite3_blob_open sqlite3_blob_open341,18427
#define sqlite3_blob_read sqlite3_blob_read342,18489
#define sqlite3_blob_write sqlite3_blob_write343,18551
#define sqlite3_create_collation_v2 sqlite3_create_collation_v2344,18614
#define sqlite3_file_control sqlite3_file_control345,18686
#define sqlite3_memory_highwater sqlite3_memory_highwater346,18751
#define sqlite3_memory_used sqlite3_memory_used347,18820
#define sqlite3_mutex_alloc sqlite3_mutex_alloc348,18884
#define sqlite3_mutex_enter sqlite3_mutex_enter349,18948
#define sqlite3_mutex_free sqlite3_mutex_free350,19012
#define sqlite3_mutex_leave sqlite3_mutex_leave351,19075
#define sqlite3_mutex_try sqlite3_mutex_try352,19139
#define sqlite3_open_v2 sqlite3_open_v2353,19201
#define sqlite3_release_memory sqlite3_release_memory354,19261
#define sqlite3_result_error_nomem sqlite3_result_error_nomem355,19328
#define sqlite3_result_error_toobig sqlite3_result_error_toobig356,19399
#define sqlite3_sleep sqlite3_sleep357,19471
#define sqlite3_soft_heap_limit sqlite3_soft_heap_limit358,19529
#define sqlite3_vfs_find sqlite3_vfs_find359,19597
#define sqlite3_vfs_register sqlite3_vfs_register360,19658
#define sqlite3_vfs_unregister sqlite3_vfs_unregister361,19723
#define sqlite3_threadsafe sqlite3_threadsafe362,19790
#define sqlite3_result_zeroblob sqlite3_result_zeroblob363,19854
#define sqlite3_result_error_code sqlite3_result_error_code364,19922
#define sqlite3_test_control sqlite3_test_control365,19992
#define sqlite3_randomness sqlite3_randomness366,20057
#define sqlite3_context_db_handle sqlite3_context_db_handle367,20120
#define sqlite3_extended_result_codes sqlite3_extended_result_codes368,20190
#define sqlite3_limit sqlite3_limit369,20264
#define sqlite3_next_stmt sqlite3_next_stmt370,20322
#define sqlite3_sql sqlite3_sql371,20384
#define sqlite3_status sqlite3_status372,20440
#define SQLITE_EXTENSION_INIT1 SQLITE_EXTENSION_INIT1375,20525
#define SQLITE_EXTENSION_INIT2(SQLITE_EXTENSION_INIT2376,20605

src/sqlite-all.c,0

src/sqlite.h,0
