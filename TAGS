
/Users/seth/src/r-dbi-git/SQLite/RSQLite/R/S4R.R,14
uusingR6,44

/Users/seth/src/r-dbi-git/SQLite/RSQLite/R/SQLite.R,1985
..SQLitePkgName24,843
..SQLitePkgRCS25,871
..SQLite.NA.string26,895
sdbSendPreparedQuery36,1231
sdbGetPreparedQuery41,1399
sdbBeginTransaction45,1536
sSQLiteObject59,1804
sSQLiteDriver60,1883
"SQLite62,1954
sdbUnloadDriver,SQLiteDriver69,2142
sdbGetInfo,SQLiteDriver73,2278
sdbListConnections,SQLiteDriver77,2409
ssummary,SQLiteDriver84,2624
sSQLiteConnection92,2770
sdbConnect,SQLiteDriver97,2965
sdbConnect,character101,3107
sdbConnect,SQLiteConnection108,3271
sdbDisconnect,SQLiteConnection116,3556
sdbGetInfo,SQLiteConnection120,3700
sdbGetException,SQLiteConnection124,3839
sdbSendQuery,SQLiteConnection,character131,4099
sdbSendPreparedQuery,SQLiteConnection,character,data.frame138,4337
sdbGetQuery,SQLiteConnection,character146,4651
sdbGetPreparedQuery,SQLiteConnection,character,data.frame152,4852
ssummary,SQLiteConnection160,5160
sdbCallProc,SQLiteConnection164,5280
sdbCommit,SQLiteConnection168,5384
sdbRollback,SQLiteConnection172,5508
sdbBeginTransaction,SQLiteConnection181,5750
sdbExistsTable,SQLiteConnection,character189,5913
sdbReadTable,SQLiteConnection,character197,6180
sdbWriteTable,SQLiteConnection,character,data.frame202,6385
sdbWriteTable,SQLiteConnection,character,character212,6773
sdbRemoveTable,SQLiteConnection,character219,7035
sdbListResults,SQLiteConnection227,7305
sSQLiteResult239,7531
sfetch,SQLiteResult244,7724
sdbClearResult,SQLiteResult248,7862
sdbGetInfo,SQLiteResult252,7997
sdbGetStatement,SQLiteResult256,8128
sdbColumnInfo,SQLiteResult260,8271
sdbGetRowsAffected,SQLiteResult267,8478
sdbGetRowCount,SQLiteResult271,8625
sdbHasCompleted,SQLiteResult275,8764
sdbListTables,SQLiteConnection285,8992
sdbListFields,SQLiteConnection,character298,9361
ssummary,SQLiteResult304,9569
sdbDataType,SQLiteObject312,9701
smake.db.names,SQLiteObject,character318,9841
sSQLKeywords,SQLiteObject326,10113
sisSQLKeyword,SQLiteObject,character331,10238

/Users/seth/src/r-dbi-git/SQLite/RSQLite/R/SQLiteSupport.R,739
"sqliteInitDriver21,827
"sqliteCloseDriver33,1225
"sqliteDescribeDriver40,1369
"sqliteDriverInfo69,2248
"sqliteNewConnection94,3124
"sqliteDescribeConnection122,4031
"sqliteCloseConnection150,4764
"sqliteConnectionInfo161,5010
"sqliteQuickColumn181,5499
ssqliteTransactionStatement189,5704
"sqliteExecStatement209,6268
"sqliteQuickSQL238,7199
"sqliteFetch255,7599
"sqliteFetchOneColumn285,8703
"sqliteResultInfo298,9055
"sqliteDescribeResult321,9787
"sqliteCloseResult344,10383
"sqliteTableFields355,10618
"sqliteReadTable374,11053
"dbBuildTableDefinition410,12415
"sqliteImportFile435,13414
ssqliteWriteTable520,15830
"safe.write627,19155
"sqliteDataType658,19954
..test_RSQLite677,20444

/Users/seth/src/r-dbi-git/SQLite/RSQLite/R/dbObjectId.R,97
sdbObjectId35,1596
sformat,dbObjectId49,1995
sshow,dbObjectId56,2171
"isIdCurrent65,2431

/Users/seth/src/r-dbi-git/SQLite/RSQLite/R/zzz.R,34
".First.lib1,0
..onLoad15,409

/Users/seth/src/r-dbi-git/SQLite/RSQLite/src/Rhelpers.h,1365
#define RHELPERS_H6,67
#  define singl 20,317
#  define Sint 21,340
#  define charPtr 22,360
#  define C_S_CPY(23,385
#  define COPY(29,603
#  define COPY_ALL(30,652
#  define EVAL_IN_FRAME(31,702
#  define GET_FROM_FRAME(32,753
#  define ASSIGN_IN_FRAME(33,811
#  define Stype 38,925
#  define LOGICAL_TYPE	39,959
#  define INTEGER_TYPE	40,990
#  define NUMERIC_TYPE	41,1021
#  define SINGLE_TYPE 42,1053
#  define REAL_TYPE 43,1086
#  define CHARACTER_TYPE 44,1119
#  define STRING_TYPE 45,1151
#  define COMPLEX_TYPE	46,1183
#  define LIST_TYPE	47,1215
#  define S_NULL_ENTRY 49,1244
#define LGL_EL(68,1921
#define INT_EL(69,1967
#define SGL_EL(70,2013
#define FLT_EL(71,2058
#define NUM_EL(72,2094
#define DBL_EL(73,2140
#define RAW_EL(74,2176
#  define LST_EL(76,2275
#  define CHR_EL(77,2317
#  define SET_CHR_EL(78,2365
#define LST_CHR_EL(82,2503
#define LST_LGL_EL(83,2558
#define LST_INT_EL(84,2613
#define LST_SGL_EL(85,2668
#define LST_FLT_EL(86,2723
#define LST_NUM_EL(87,2773
#define LST_DBL_EL(88,2828
#define LST_RAW_EL(89,2878
#define LST_LST_EL(90,2933
#  define SET_LST_CHR_EL(94,3110
#  define SET_LST_CHR_EL(96,3191
#  define NA_SET(103,3396
#  define NA_CHR_SET(104,3439
#  define IS_NA(105,3491
#  define SET_ROWNAMES(110,3597
#  define GET_CLASS_NAME(111,3662
#  define SET_CLASS_NAME(112,3705

/Users/seth/src/r-dbi-git/SQLite/RSQLite/src/RS-DBI.c,1315
static RS_DBI_manager *dbManager dbManager32,1229
RS_DBI_allocManager(35,1282
RS_DBI_freeManager(107,3770
RS_DBI_allocConnection(136,4481
RS_DBI_freeConnection(205,6794
RS_DBI_allocResultSet(260,8484
RS_DBI_freeResultSet(307,10025
RS_DBI_allocFields(343,11055
RS_DBI_freeFields(368,11818
RS_DBI_makeDataFrame(388,12434
RS_DBI_allocOutput(412,13025
RS_DBI_validHandle(468,14405
RS_DBI_setException(491,14898
RS_DBI_errorMessage(520,15758
void DBI_MSG(541,16332
RS_DBI_copyString(562,16862
RS_DBI_nCopyString(576,17221
RS_DBI_copyfields(609,17953
RS_DBI_createNamedList(641,19000
RS_DBI_SclassNames(679,19950
RS_DBI_asMgrHandle(711,20706
RS_DBI_asConHandle(722,20889
RS_DBI_asResHandle(734,21113
RS_DBI_getManager(747,21384
RS_DBI_getConnection(762,21747
RS_DBI_getResultSet(781,22289
RS_DBI_newEntry(806,23161
RS_DBI_lookup(819,23383
RS_DBI_listEntries(838,23756
RS_DBI_freeEntry(849,23941
is_validHandle(856,24085
RS_DBI_managerInfo(907,25800
RS_DBI_connectionInfo(943,26931
RS_DBI_resultSetInfo(978,28134
RS_DBI_getFieldDescriptions(1007,29028
RS_DBI_getTypeName(1041,30132
#define RS_DBI_MAX_IDENTIFIER_LENGTH 1071,31402
RS_DBI_makeSQLNames(1073,31472
void RS_na_set(1120,32828
int RS_is_na(1145,33223
const struct data_types RS_dataTypeTable[RS_dataTypeTable1170,33701

/Users/seth/src/r-dbi-git/SQLite/RSQLite/src/RS-DBI.h,2537
#define _RS_DBI_H 2,18
#define getpid 38,1241
#define pid_t 39,1264
typedef enum enum_dbi_exception 56,1767
  RS_DBI_MESSAGE,57,1801
  RS_DBI_WARNING,58,1819
  RS_DBI_ERROR,59,1837
  RS_DBI_TERMINATE60,1853
} DBI_EXCEPTION;61,1872
#define Mgr_Handle 67,2020
#define Con_Handle 68,2044
#define Res_Handle 69,2068
#define Db_Handle 70,2092
typedef enum enum_handle_type 74,2272
  MGR_HANDLE_TYPE 75,2304
  CON_HANDLE_TYPE 76,2354
  RES_HANDLE_TYPE 77,2407
} HANDLE_TYPE;78,2456
#define MGR_ID(80,2473
#define CON_ID(81,2547
#define RES_ID(82,2591
typedef struct st_sdbi_fields 93,3152
  int num_fields;94,3184
  char  **name;name95,3202
  Sint  *type;type96,3249
  Sint  *length;length97,3299
  Sint  *precision;precision98,3351
  Sint  *scale;scale99,3418
  Sint  *nullOk;nullOk100,3487
  Sint  *isVarLength;isVarLength101,3553
  Stype *Sclass;Sclass102,3614
} RS_DBI_fields;104,3738
typedef struct st_sdbi_exception 106,3756
  DBI_EXCEPTION  exceptionType;107,3791
  int  errorNum;108,3867
  char *errorMsg;errorMsg109,3944
} RS_DBI_exception;110,3996
typedef struct st_sdbi_resultset 116,4197
  void  *drvResultSet;drvResultSet117,4232
  void  *drvData;drvData118,4303
  Sint  managerId;119,4368
  Sint  connectionId;120,4426
  Sint  resultSetId;121,4488
  Sint  isSelect;122,4511
  char  *statement;statement123,4570
  Sint  rowsAffected;124,4615
  Sint  rowCount;125,4676
  Sint  completed;126,4741
  RS_DBI_fields *fields;fields127,4798
} RS_DBI_resultSet;128,4823
typedef struct st_sdbi_connection 137,5167
  void  *conParams;conParams138,5203
  void  *drvConnection;drvConnection139,5280
  void  *drvData;drvData140,5355
  RS_DBI_resultSet  **resultSets;resultSets141,5427
  Sint   *resultSetIds;resultSetIds142,5497
  Sint   length;143,5521
  Sint   num_res;144,5597
  Sint   counter;145,5663
  Sint   managerId;146,5730
  Sint   connectionId;147,5750
  RS_DBI_exception *exception;exception148,5774
} RS_DBI_connection;149,5805
typedef struct st_sdbi_manager 152,5843
  char *drvName;drvName153,5876
  void *drvData;drvData154,5950
  RS_DBI_connection **connections;connections155,6028
  Sint *connectionIds;connectionIds156,6092
  Sint length;157,6157
  Sint num_con;158,6233
  Sint counter;159,6301
  Sint fetch_default_rec;160,6376
  Sint managerId;161,6451
  RS_DBI_exception *exception;exception162,6515
} RS_DBI_manager;163,6550
struct data_types 247,10088
    char *typeName;typeName248,10108
    Sint typeId;249,10128

/Users/seth/src/r-dbi-git/SQLite/RSQLite/src/RS-SQLite.c,1142
char *compiledVarsion compiledVarsion24,898
#define RS_NA_STRING 37,1507
RS_SQLite_init(63,2498
RS_SQLite_closeManager(113,4074
RS_SQLite_cloneConnection(141,4706
RS_SQLite_allocConParams(166,5478
RS_SQLite_freeConParams(181,5925
RS_SQLite_setException(193,6241
RS_SQLite_freeException(218,6897
RS_SQLite_newConnection(229,7112
RS_SQLite_closeConnection(286,9050
int SQLite_decltype_to_type(339,10481
int RS_SQLite_get_row_count(381,12059
SEXP RS_SQLite_quick_column(404,12733
Res_Handle RS_SQLite_exec(484,15383
RS_SQLite_createParameterBinding(698,25361
RS_SQLite_freeParameterBinding(825,28728
RS_SQLite_createDataMappings(838,28920
static int single_step_with_reprepare(917,31621
static void fill_one_row(961,33131
SEXP RS_SQLite_fetch(1018,35264
RS_SQLite_mget(1107,38213
RS_SQLite_getException(1282,43963
RS_SQLite_closeResultSet(1305,44593
RS_SQLite_managerInfo(1334,45318
RS_SQLite_connectionInfo(1393,47235
RS_SQLite_resultSetInfo(1437,48722
RS_SQLite_typeNames(1468,49689
RS_SQLite_importFile(1488,50104
RS_sqlite_import(1555,51642
RS_sqlite_getline(1692,56154
int corrected_sqlite3_step(1744,57451

/Users/seth/src/r-dbi-git/SQLite/RSQLite/src/RS-SQLite.h,1219
#define _RS_SQLite_H 2,21
#define RS_SQLITE_MAX_CON 38,1127
#define RS_SQLITE_FETCH 39,1207
typedef struct st_sdbi_conParams 45,1460
  char *dbname;dbname46,1495
  int  loadable_extensions;47,1511
} RS_SQLite_conParams;48,1539
typedef struct st_sqlite_err 50,1563
   int  errorNum;51,1594
   char *errorMsg;errorMsg52,1612
} RS_SQLite_exception;53,1631
typedef struct st_sqlite_bindparam 55,1655
  SEXPTYPE  type;56,1692
  SEXP data;57,1710
  int      is_protected;58,1723
} RS_SQLite_bindParam;59,1748
#define RSQLITE_MSG(61,1772
enum SQL92_field_types 137,5001
     SQL92_TYPE_NULL,138,5026
     SQL92_TYPE_BIT,139,5048
     SQL92_TYPE_BIT_VAR,140,5069
     SQL92_TYPE_CHAR,141,5094
     SQL92_TYPE_CHAR_VAR,142,5116
     SQL92_TYPE_NCHAR,143,5142
     SQL92_TYPE_NCHAR_VAR,144,5165
     SQL92_TYPE_SMALLINT,145,5192
     SQL92_TYPE_INTEGER,146,5218
     SQL92_TYPE_DECIMAL,147,5243
     SQL92_TYPE_FLOAT,148,5268
     SQL92_TYPE_REAL,149,5291
     SQL92_TYPE_DOUBLE,150,5313
     SQL92_TYPE_TIMESTAMP,151,5337
     SQL92_TYPE_DATE,152,5364
     SQL92_TYPE_TIME,153,5386
     SQL92_TYPE_DATETIME154,5408
const struct data_types RS_SQLite_fieldTypes[RS_SQLite_fieldTypes157,5437

/Users/seth/src/r-dbi-git/SQLite/RSQLite/src/sqlite/sqlite3.c,281204
#define SQLITE_CORE 22,1307
#define SQLITE_AMALGAMATION 23,1329
# define SQLITE_PRIVATE 25,1382
# define SQLITE_API28,1439
#define _SQLITEINT_H_46,1995
# define _LARGE_FILE 68,2986
#   define _FILE_OFFSET_BITS 70,3042
# define _LARGEFILE_SOURCE 72,3082
# define SQLITE_MAX_LENGTH 110,4208
# define SQLITE_MAX_COLUMN 131,4974
# define SQLITE_MAX_SQL_LENGTH 142,5270
# define SQLITE_MAX_EXPR_DEPTH 156,5710
# define SQLITE_MAX_COMPOUND_SELECT 168,6173
# define SQLITE_MAX_VDBE_OP 176,6333
# define SQLITE_MAX_FUNCTION_ARG 183,6468
# define SQLITE_DEFAULT_CACHE_SIZE 191,6689
# define SQLITE_DEFAULT_TEMP_CACHE_SIZE 194,6776
# define SQLITE_MAX_ATTACHED 203,7052
# define SQLITE_MAX_VARIABLE_NUMBER 211,7203
# define SQLITE_MAX_PAGE_SIZE 226,7895
# define SQLITE_DEFAULT_PAGE_SIZE 234,8019
# undef SQLITE_DEFAULT_PAGE_SIZE237,8115
# define SQLITE_DEFAULT_PAGE_SIZE 238,8148
# define SQLITE_MAX_DEFAULT_PAGE_SIZE 249,8574
# undef SQLITE_MAX_DEFAULT_PAGE_SIZE252,8678
# define SQLITE_MAX_DEFAULT_PAGE_SIZE 253,8715
# define SQLITE_MAX_PAGE_COUNT 265,9036
# define SQLITE_MAX_LIKE_PATTERN_LENGTH 273,9206
# define SQLITE_MAX_TRIGGER_DEPTH 285,9544
# define SQLITE_MAX_TRIGGER_DEPTH 287,9587
# define _GNU_SOURCE305,10209
#define SQLITE_INDEX_SAMPLES 318,10391
#   define SQLITE_INT_TO_PTR(341,11314
#   define SQLITE_PTR_TO_INT(342,11370
#   define SQLITE_INT_TO_PTR(344,11431
#   define SQLITE_PTR_TO_INT(345,11477
# define SQLITE_INT_TO_PTR(348,11535
# define SQLITE_PTR_TO_INT(349,11591
# define SQLITE_THREADSAFE 360,11881
# define SQLITE_THREADSAFE 362,11925
# define SQLITE_DEFAULT_MEMSTATUS 373,12278
# define SQLITE_SYSTEM_MALLOC 399,13417
# define SQLITE_MALLOC_SOFT_LIMIT 407,13631
#  define _XOPEN_SOURCE 424,14302
# define NDEBUG 442,14886
# define testcase(461,15683
# define testcase(463,15749
# define TESTONLY(472,16009
# define TESTONLY(474,16039
# define VVA_ONLY(486,16519
# define VVA_ONLY(488,16549
# define ALWAYS(507,17296
# define NEVER(508,17324
# define ALWAYS(510,17375
# define NEVER(511,17421
# define ALWAYS(513,17473
# define NEVER(514,17501
# define likely(524,17809
# define unlikely(525,17855
# define likely(527,17907
# define unlikely(528,17935
#define _SQLITE3_H_566,19642
# define SQLITE_EXTERN 581,19878
# define SQLITE_API585,19935
#define SQLITE_DEPRECATED602,20601
#define SQLITE_EXPERIMENTAL603,20627
# undef SQLITE_VERSION609,20755
# undef SQLITE_VERSION_NUMBER612,20814
#define SQLITE_VERSION 654,22458
#define SQLITE_VERSION_NUMBER 655,22497
#define SQLITE_SOURCE_ID 656,22535
SQLITE_API const char sqlite3_version[sqlite3_version687,23941
typedef struct sqlite3 sqlite3;739,26302
  typedef SQLITE_INT64_TYPE sqlite_int64;755,26816
  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;756,26858
  typedef __int64 sqlite_int64;758,26959
  typedef unsigned __int64 sqlite_uint64;759,26991
  typedef long long int sqlite_int64;761,27039
  typedef unsigned long long int sqlite_uint64;762,27077
typedef sqlite_int64 sqlite3_int64;764,27132
typedef sqlite_uint64 sqlite3_uint64;765,27168
# define double 772,27356
typedef int (*sqlite3_callback)sqlite3_callback812,28694
#define SQLITE_OK 878,31598
#define SQLITE_ERROR 880,31685
#define SQLITE_INTERNAL 881,31753
#define SQLITE_PERM 882,31822
#define SQLITE_ABORT 883,31885
#define SQLITE_BUSY 884,31959
#define SQLITE_LOCKED 885,32025
#define SQLITE_NOMEM 886,32097
#define SQLITE_READONLY 887,32153
#define SQLITE_INTERRUPT 888,32228
#define SQLITE_IOERR 889,32309
#define SQLITE_CORRUPT 890,32384
#define SQLITE_NOTFOUND 891,32459
#define SQLITE_FULL 892,32533
#define SQLITE_CANTOPEN 893,32613
#define SQLITE_PROTOCOL 894,32684
#define SQLITE_EMPTY 895,32761
#define SQLITE_SCHEMA 896,32817
#define SQLITE_TOOBIG 897,32883
#define SQLITE_CONSTRAINT 898,32955
#define SQLITE_MISMATCH 899,33027
#define SQLITE_MISUSE 900,33084
#define SQLITE_NOLFS 901,33147
#define SQLITE_AUTH 902,33224
#define SQLITE_FORMAT 903,33283
#define SQLITE_RANGE 904,33353
#define SQLITE_NOTADB 905,33434
#define SQLITE_ROW 906,33512
#define SQLITE_DONE 907,33587
#define SQLITE_IOERR_READ 933,34837
#define SQLITE_IOERR_SHORT_READ 934,34900
#define SQLITE_IOERR_WRITE 935,34963
#define SQLITE_IOERR_FSYNC 936,35026
#define SQLITE_IOERR_DIR_FSYNC 937,35089
#define SQLITE_IOERR_TRUNCATE 938,35152
#define SQLITE_IOERR_FSTAT 939,35215
#define SQLITE_IOERR_UNLOCK 940,35278
#define SQLITE_IOERR_RDLOCK 941,35341
#define SQLITE_IOERR_DELETE 942,35404
#define SQLITE_IOERR_BLOCKED 943,35468
#define SQLITE_IOERR_NOMEM 944,35532
#define SQLITE_IOERR_ACCESS 945,35596
#define SQLITE_IOERR_CHECKRESERVEDLOCK 946,35660
#define SQLITE_IOERR_LOCK 947,35724
#define SQLITE_IOERR_CLOSE 948,35788
#define SQLITE_IOERR_DIR_CLOSE 949,35852
#define SQLITE_LOCKED_SHAREDCACHE 950,35916
#define SQLITE_OPEN_READONLY 960,36244
#define SQLITE_OPEN_READWRITE 961,36324
#define SQLITE_OPEN_CREATE 962,36404
#define SQLITE_OPEN_DELETEONCLOSE 963,36484
#define SQLITE_OPEN_EXCLUSIVE 964,36548
#define SQLITE_OPEN_MAIN_DB 965,36612
#define SQLITE_OPEN_TEMP_DB 966,36676
#define SQLITE_OPEN_TRANSIENT_DB 967,36740
#define SQLITE_OPEN_MAIN_JOURNAL 968,36804
#define SQLITE_OPEN_TEMP_JOURNAL 969,36868
#define SQLITE_OPEN_SUBJOURNAL 970,36932
#define SQLITE_OPEN_MASTER_JOURNAL 971,36996
#define SQLITE_OPEN_NOMUTEX 972,37060
#define SQLITE_OPEN_FULLMUTEX 973,37140
#define SQLITE_OPEN_SHAREDCACHE 974,37220
#define SQLITE_OPEN_PRIVATECACHE 975,37300
#define SQLITE_IOCAP_ATOMIC 997,38278
#define SQLITE_IOCAP_ATOMIC512 998,38326
#define SQLITE_IOCAP_ATOMIC1K 999,38374
#define SQLITE_IOCAP_ATOMIC2K 1000,38422
#define SQLITE_IOCAP_ATOMIC4K 1001,38470
#define SQLITE_IOCAP_ATOMIC8K 1002,38518
#define SQLITE_IOCAP_ATOMIC16K 1003,38566
#define SQLITE_IOCAP_ATOMIC32K 1004,38614
#define SQLITE_IOCAP_ATOMIC64K 1005,38662
#define SQLITE_IOCAP_SAFE_APPEND 1006,38710
#define SQLITE_IOCAP_SEQUENTIAL 1007,38758
#define SQLITE_LOCK_NONE 1016,39038
#define SQLITE_LOCK_SHARED 1017,39074
#define SQLITE_LOCK_RESERVED 1018,39110
#define SQLITE_LOCK_PENDING 1019,39146
#define SQLITE_LOCK_EXCLUSIVE 1020,39182
#define SQLITE_SYNC_NORMAL 1036,39832
#define SQLITE_SYNC_FULL 1037,39874
#define SQLITE_SYNC_DATAONLY 1038,39916
typedef struct sqlite3_file sqlite3_file;1051,40404
struct sqlite3_file 1052,40446
  const struct sqlite3_io_methods *pMethods;pMethods1053,40468
typedef struct sqlite3_io_methods sqlite3_io_methods;1143,44606
struct sqlite3_io_methods 1144,44660
  int iVersion;1145,44688
  int (*xClose)xClose1146,44704
  int (*xRead)xRead1147,44736
  int (*xWrite)xWrite1148,44805
  int (*xTruncate)xTruncate1149,44881
  int (*xSync)xSync1150,44936
  int (*xFileSize)xFileSize1151,44978
  int (*xLock)xLock1152,45035
  int (*xUnlock)xUnlock1153,45071
  int (*xCheckReservedLock)xCheckReservedLock1154,45109
  int (*xFileControl)xFileControl1155,45167
  int (*xSectorSize)xSectorSize1156,45225
  int (*xDeviceCharacteristics)xDeviceCharacteristics1157,45262
#define SQLITE_FCNTL_LOCKSTATE 1176,46039
#define SQLITE_GET_LOCKPROXYFILE 1177,46079
#define SQLITE_SET_LOCKPROXYFILE 1178,46119
#define SQLITE_LAST_ERRNO 1179,46159
typedef struct sqlite3_mutex sqlite3_mutex;1191,46563
typedef struct sqlite3_vfs sqlite3_vfs;1322,52810
struct sqlite3_vfs 1323,52850
  int iVersion;1324,52871
  int szOsFile;1325,52929
  int mxPathname;1326,52994
  sqlite3_vfs *pNext;pNext1327,53056
  const char *zName;zName1328,53109
  void *pAppData;pAppData1329,53175
  int (*xOpen)xOpen1330,53245
  int (*xDelete)xDelete1332,53351
  int (*xAccess)xAccess1333,53415
  int (*xFullPathname)xFullPathname1334,53491
  void *(*xDlOpen)xDlOpen1335,53570
  void (*xDlError)xDlError1336,53627
  void (*(*xDlSym)xDlSym1337,53687
  void (*xDlClose)xDlClose1338,53755
  int (*xRandomness)xRandomness1339,53796
  int (*xSleep)xSleep1340,53855
  int (*xCurrentTime)xCurrentTime1341,53904
  int (*xGetLastError)xGetLastError1342,53950
#define SQLITE_ACCESS_EXISTS 1360,54684
#define SQLITE_ACCESS_READWRITE 1361,54718
#define SQLITE_ACCESS_READ 1362,54752
typedef struct sqlite3_mem_methods sqlite3_mem_methods;1564,64963
struct sqlite3_mem_methods 1565,65019
  void *(*xMalloc)xMalloc1566,65048
  void (*xFree)xFree1567,65114
  void *(*xRealloc)xRealloc1568,65177
  int (*xSize)xSize1569,65237
  int (*xRoundup)xRoundup1570,65309
  int (*xInit)xInit1571,65389
  void (*xShutdown)xShutdown1572,65460
  void *pAppData;pAppData1573,65533
#define SQLITE_CONFIG_SINGLETHREAD 1736,74119
#define SQLITE_CONFIG_MULTITHREAD 1737,74168
#define SQLITE_CONFIG_SERIALIZED 1738,74217
#define SQLITE_CONFIG_MALLOC 1739,74266
#define SQLITE_CONFIG_GETMALLOC 1740,74332
#define SQLITE_CONFIG_SCRATCH 1741,74398
#define SQLITE_CONFIG_PAGECACHE 1742,74464
#define SQLITE_CONFIG_HEAP 1743,74530
#define SQLITE_CONFIG_MEMSTATUS 1744,74601
#define SQLITE_CONFIG_MUTEX 1745,74654
#define SQLITE_CONFIG_GETMUTEX 1746,74722
#define SQLITE_CONFIG_LOOKASIDE 1748,74857
#define SQLITE_CONFIG_PCACHE 1749,74910
#define SQLITE_CONFIG_GETPCACHE 1750,74979
#define SQLITE_DBCONFIG_LOOKASIDE 1783,76596
#define SQLITE_DENY 2500,109626
#define SQLITE_IGNORE 2501,109696
#define SQLITE_CREATE_INDEX 2526,110893
#define SQLITE_CREATE_TABLE 2527,110972
#define SQLITE_CREATE_TEMP_INDEX 2528,111051
#define SQLITE_CREATE_TEMP_TABLE 2529,111130
#define SQLITE_CREATE_TEMP_TRIGGER 2530,111209
#define SQLITE_CREATE_TEMP_VIEW 2531,111288
#define SQLITE_CREATE_TRIGGER 2532,111367
#define SQLITE_CREATE_VIEW 2533,111446
#define SQLITE_DELETE 2534,111525
#define SQLITE_DROP_INDEX 2535,111604
#define SQLITE_DROP_TABLE 2536,111683
#define SQLITE_DROP_TEMP_INDEX 2537,111762
#define SQLITE_DROP_TEMP_TABLE 2538,111841
#define SQLITE_DROP_TEMP_TRIGGER 2539,111920
#define SQLITE_DROP_TEMP_VIEW 2540,111999
#define SQLITE_DROP_TRIGGER 2541,112078
#define SQLITE_DROP_VIEW 2542,112157
#define SQLITE_INSERT 2543,112236
#define SQLITE_PRAGMA 2544,112315
#define SQLITE_READ 2545,112394
#define SQLITE_SELECT 2546,112473
#define SQLITE_TRANSACTION 2547,112552
#define SQLITE_UPDATE 2548,112631
#define SQLITE_ATTACH 2549,112710
#define SQLITE_DETACH 2550,112789
#define SQLITE_ALTER_TABLE 2551,112868
#define SQLITE_REINDEX 2552,112947
#define SQLITE_ANALYZE 2553,113026
#define SQLITE_CREATE_VTABLE 2554,113105
#define SQLITE_DROP_VTABLE 2555,113184
#define SQLITE_FUNCTION 2556,113263
#define SQLITE_SAVEPOINT 2557,113342
#define SQLITE_COPY 2558,113421
typedef struct sqlite3_stmt sqlite3_stmt;2782,123993
#define SQLITE_LIMIT_LENGTH 2872,127630
#define SQLITE_LIMIT_SQL_LENGTH 2873,127679
#define SQLITE_LIMIT_COLUMN 2874,127728
#define SQLITE_LIMIT_EXPR_DEPTH 2875,127777
#define SQLITE_LIMIT_COMPOUND_SELECT 2876,127826
#define SQLITE_LIMIT_VDBE_OP 2877,127875
#define SQLITE_LIMIT_FUNCTION_ARG 2878,127924
#define SQLITE_LIMIT_ATTACHED 2879,127973
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH 2880,128022
#define SQLITE_LIMIT_VARIABLE_NUMBER 2881,128071
#define SQLITE_LIMIT_TRIGGER_DEPTH 2882,128120
typedef struct Mem sqlite3_value;3037,135589
typedef struct sqlite3_context sqlite3_context;3051,136188
#define SQLITE_INTEGER 3462,154081
#define SQLITE_FLOAT 3463,154107
#define SQLITE_BLOB 3464,154133
#define SQLITE_NULL 3465,154159
# undef SQLITE_TEXT3467,154204
# define SQLITE_TEXT 3469,154230
#define SQLITE3_TEXT 3471,154264
#define SQLITE_UTF8 3798,170450
#define SQLITE_UTF16LE 3799,170482
#define SQLITE_UTF16BE 3800,170514
#define SQLITE_UTF16 3801,170546
#define SQLITE_ANY 3802,170609
#define SQLITE_UTF16_ALIGNED 3803,170679
typedef void (*sqlite3_destructor_type)sqlite3_destructor_type4008,179989
#define SQLITE_STATIC 4009,180037
#define SQLITE_TRANSIENT 4010,180093
SQLITE_API char *sqlite3_temp_directory;sqlite3_temp_directory4323,194732
typedef struct sqlite3_vtab sqlite3_vtab;4749,213315
typedef struct sqlite3_index_info sqlite3_index_info;4750,213357
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;4751,213411
typedef struct sqlite3_module sqlite3_module;4752,213467
struct sqlite3_module 4771,214253
  int iVersion;4772,214277
  int (*xCreate)xCreate4773,214293
  int (*xConnect)xConnect4776,214428
  int (*xBestIndex)xBestIndex4779,214564
  int (*xDisconnect)xDisconnect4780,214627
  int (*xDestroy)xDestroy4781,214670
  int (*xOpen)xOpen4782,214710
  int (*xClose)xClose4783,214779
  int (*xFilter)xFilter4784,214818
  int (*xNext)xNext4786,214938
  int (*xEof)xEof4787,214976
  int (*xColumn)xColumn4788,215013
  int (*xRowid)xRowid4789,215076
  int (*xUpdate)xUpdate4790,215138
  int (*xBegin)xBegin4791,215212
  int (*xSync)xSync4792,215250
  int (*xCommit)xCommit4793,215287
  int (*xRollback)xRollback4794,215326
  int (*xFindFunction)xFindFunction4795,215367
  int (*xRename)xRename4798,215556
struct sqlite3_index_info 4852,218004
  int nConstraint;4854,218047
  struct sqlite3_index_constraint 4855,218115
     int iColumn;4856,218151
     unsigned char op;4857,218227
     unsigned char usable;4858,218284
     int iTermOffset;4859,218355
  } *aConstraint;aConstraint4860,218435
  int nOrderBy;4861,218504
  struct sqlite3_index_orderby 4862,218578
     int iColumn;4863,218611
     unsigned char desc;4864,218662
  } *aOrderBy;aOrderBy4865,218730
  struct sqlite3_index_constraint_usage 4867,218801
    int argvIndex;4868,218843
    unsigned char omit;4869,218923
  } *aConstraintUsage;aConstraintUsage4870,218997
  int idxNum;4871,219020
  char *idxStr;idxStr4872,219089
  int needToFreeIdxStr;4873,219170
  int orderByConsumed;4874,219246
  double estimatedCost;4875,219315
#define SQLITE_INDEX_CONSTRAINT_EQ 4877,219388
#define SQLITE_INDEX_CONSTRAINT_GT 4878,219428
#define SQLITE_INDEX_CONSTRAINT_LE 4879,219468
#define SQLITE_INDEX_CONSTRAINT_LT 4880,219508
#define SQLITE_INDEX_CONSTRAINT_GE 4881,219549
#define SQLITE_INDEX_CONSTRAINT_MATCH 4882,219590
struct sqlite3_vtab 4948,222564
  const sqlite3_module *pModule;pModule4949,222586
  int nRef;4950,222660
  char *zErrMsg;zErrMsg4951,222715
struct sqlite3_vtab_cursor 4973,223688
  sqlite3_vtab *pVtab;pVtab4974,223717
typedef struct sqlite3_blob sqlite3_blob;5032,226165
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;5441,244609
struct sqlite3_mutex_methods 5442,244669
  int (*xMutexInit)xMutexInit5443,244700
  int (*xMutexEnd)xMutexEnd5444,244727
  sqlite3_mutex *(*xMutexAlloc)xMutexAlloc5445,244753
  void (*xMutexFree)xMutexFree5446,244791
  void (*xMutexEnter)xMutexEnter5447,244830
  int (*xMutexTry)xMutexTry5448,244870
  void (*xMutexLeave)xMutexLeave5449,244907
  int (*xMutexHeld)xMutexHeld5450,244947
  int (*xMutexNotheld)xMutexNotheld5451,244985
#define SQLITE_MUTEX_FAST 5496,247096
#define SQLITE_MUTEX_RECURSIVE 5497,247136
#define SQLITE_MUTEX_STATIC_MASTER 5498,247176
#define SQLITE_MUTEX_STATIC_MEM 5499,247216
#define SQLITE_MUTEX_STATIC_MEM2 5500,247280
#define SQLITE_MUTEX_STATIC_OPEN 5501,247336
#define SQLITE_MUTEX_STATIC_PRNG 5502,247402
#define SQLITE_MUTEX_STATIC_LRU 5503,247466
#define SQLITE_MUTEX_STATIC_LRU2 5504,247527
#define SQLITE_TESTCTRL_PRNG_SAVE 5573,250707
#define SQLITE_TESTCTRL_PRNG_RESTORE 5574,250758
#define SQLITE_TESTCTRL_PRNG_RESET 5575,250809
#define SQLITE_TESTCTRL_BITVEC_TEST 5576,250860
#define SQLITE_TESTCTRL_FAULT_INSTALL 5577,250911
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS 5578,250962
#define SQLITE_TESTCTRL_PENDING_BYTE 5579,251013
#define SQLITE_TESTCTRL_ASSERT 5580,251064
#define SQLITE_TESTCTRL_ALWAYS 5581,251115
#define SQLITE_TESTCTRL_RESERVE 5582,251166
#define SQLITE_STATUS_MEMORY_USED 5694,256530
#define SQLITE_STATUS_PAGECACHE_USED 5695,256575
#define SQLITE_STATUS_PAGECACHE_OVERFLOW 5696,256620
#define SQLITE_STATUS_SCRATCH_USED 5697,256665
#define SQLITE_STATUS_SCRATCH_OVERFLOW 5698,256710
#define SQLITE_STATUS_MALLOC_SIZE 5699,256755
#define SQLITE_STATUS_PARSER_STACK 5700,256800
#define SQLITE_STATUS_PAGECACHE_SIZE 5701,256845
#define SQLITE_STATUS_SCRATCH_SIZE 5702,256890
#define SQLITE_DBSTATUS_LOOKASIDE_USED 5743,258584
#define SQLITE_STMTSTATUS_FULLSCAN_STEP 5794,260631
#define SQLITE_STMTSTATUS_SORT 5795,260677
typedef struct sqlite3_pcache sqlite3_pcache;5809,261113
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;5939,268061
struct sqlite3_pcache_methods 5940,268123
  void *pArg;pArg5941,268155
  int (*xInit)xInit5942,268169
  void (*xShutdown)xShutdown5943,268192
  sqlite3_pcache *(*xCreate)xCreate5944,268220
  void (*xCachesize)xCachesize5945,268278
  int (*xPagecount)xPagecount5946,268333
  void *(*xFetch)xFetch5947,268371
  void (*xUnpin)xUnpin5948,268437
  void (*xRekey)xRekey5949,268492
  void (*xTruncate)xTruncate5950,268568
  void (*xDestroy)xDestroy5951,268623
typedef struct sqlite3_backup sqlite3_backup;5965,269014
# undef double6288,286358
#define _SQLITE_HASH_H_6318,287306
typedef struct Hash Hash;6321,287373
typedef struct HashElem HashElem;6322,287399
struct Hash 6345,288514
  unsigned int htsize;6346,288528
  unsigned int count;6347,288598
  HashElem *first;first6348,288664
  struct _ht 6349,288729
    int count;6350,288778
    HashElem *chain;chain6351,288848
  } *ht;ht6352,288923
struct HashElem 6361,289194
  HashElem *next,next6362,289212
  HashElem *next, *prev;prev6362,289212
  void *data;data6363,289289
  const char *pKey;pKey6364,289360
  const char *pKey; int nKey;6364,289360
#define sqliteHashFirst(6387,290033
#define sqliteHashNext(6388,290074
#define sqliteHashData(6389,290114
#define TK_SEMI 6404,290726
#define TK_EXPLAIN 6405,290771
#define TK_QUERY 6406,290816
#define TK_PLAN 6407,290861
#define TK_BEGIN 6408,290906
#define TK_TRANSACTION 6409,290951
#define TK_DEFERRED 6410,290996
#define TK_IMMEDIATE 6411,291041
#define TK_EXCLUSIVE 6412,291086
#define TK_COMMIT 6413,291131
#define TK_END 6414,291176
#define TK_ROLLBACK 6415,291221
#define TK_SAVEPOINT 6416,291266
#define TK_RELEASE 6417,291311
#define TK_TO 6418,291356
#define TK_TABLE 6419,291401
#define TK_CREATE 6420,291446
#define TK_IF 6421,291491
#define TK_NOT 6422,291536
#define TK_EXISTS 6423,291581
#define TK_TEMP 6424,291626
#define TK_LP 6425,291671
#define TK_RP 6426,291716
#define TK_AS 6427,291761
#define TK_COMMA 6428,291806
#define TK_ID 6429,291851
#define TK_INDEXED 6430,291896
#define TK_ABORT 6431,291941
#define TK_ACTION 6432,291986
#define TK_AFTER 6433,292031
#define TK_ANALYZE 6434,292076
#define TK_ASC 6435,292121
#define TK_ATTACH 6436,292166
#define TK_BEFORE 6437,292211
#define TK_BY 6438,292256
#define TK_CASCADE 6439,292301
#define TK_CAST 6440,292346
#define TK_COLUMNKW 6441,292391
#define TK_CONFLICT 6442,292436
#define TK_DATABASE 6443,292481
#define TK_DESC 6444,292526
#define TK_DETACH 6445,292571
#define TK_EACH 6446,292616
#define TK_FAIL 6447,292661
#define TK_FOR 6448,292706
#define TK_IGNORE 6449,292751
#define TK_INITIALLY 6450,292796
#define TK_INSTEAD 6451,292841
#define TK_LIKE_KW 6452,292886
#define TK_MATCH 6453,292931
#define TK_NO 6454,292976
#define TK_KEY 6455,293021
#define TK_OF 6456,293066
#define TK_OFFSET 6457,293111
#define TK_PRAGMA 6458,293156
#define TK_RAISE 6459,293201
#define TK_REPLACE 6460,293246
#define TK_RESTRICT 6461,293291
#define TK_ROW 6462,293336
#define TK_TRIGGER 6463,293381
#define TK_VACUUM 6464,293426
#define TK_VIEW 6465,293471
#define TK_VIRTUAL 6466,293516
#define TK_REINDEX 6467,293561
#define TK_RENAME 6468,293606
#define TK_CTIME_KW 6469,293651
#define TK_ANY 6470,293696
#define TK_OR 6471,293741
#define TK_AND 6472,293786
#define TK_IS 6473,293831
#define TK_BETWEEN 6474,293876
#define TK_IN 6475,293921
#define TK_ISNULL 6476,293966
#define TK_NOTNULL 6477,294011
#define TK_NE 6478,294056
#define TK_EQ 6479,294101
#define TK_GT 6480,294146
#define TK_LE 6481,294191
#define TK_LT 6482,294236
#define TK_GE 6483,294281
#define TK_ESCAPE 6484,294326
#define TK_BITAND 6485,294371
#define TK_BITOR 6486,294416
#define TK_LSHIFT 6487,294461
#define TK_RSHIFT 6488,294506
#define TK_PLUS 6489,294551
#define TK_MINUS 6490,294596
#define TK_STAR 6491,294641
#define TK_SLASH 6492,294686
#define TK_REM 6493,294731
#define TK_CONCAT 6494,294776
#define TK_COLLATE 6495,294821
#define TK_BITNOT 6496,294866
#define TK_STRING 6497,294911
#define TK_JOIN_KW 6498,294956
#define TK_CONSTRAINT 6499,295001
#define TK_DEFAULT 6500,295046
#define TK_NULL 6501,295091
#define TK_PRIMARY 6502,295136
#define TK_UNIQUE 6503,295181
#define TK_CHECK 6504,295227
#define TK_REFERENCES 6505,295273
#define TK_AUTOINCR 6506,295319
#define TK_ON 6507,295365
#define TK_DELETE 6508,295411
#define TK_UPDATE 6509,295457
#define TK_SET 6510,295503
#define TK_DEFERRABLE 6511,295549
#define TK_FOREIGN 6512,295595
#define TK_DROP 6513,295641
#define TK_UNION 6514,295687
#define TK_ALL 6515,295733
#define TK_EXCEPT 6516,295779
#define TK_INTERSECT 6517,295825
#define TK_SELECT 6518,295871
#define TK_DISTINCT 6519,295917
#define TK_DOT 6520,295963
#define TK_FROM 6521,296009
#define TK_JOIN 6522,296055
#define TK_USING 6523,296101
#define TK_ORDER 6524,296147
#define TK_GROUP 6525,296193
#define TK_HAVING 6526,296239
#define TK_LIMIT 6527,296285
#define TK_WHERE 6528,296331
#define TK_INTO 6529,296377
#define TK_VALUES 6530,296423
#define TK_INSERT 6531,296469
#define TK_INTEGER 6532,296515
#define TK_FLOAT 6533,296561
#define TK_BLOB 6534,296607
#define TK_REGISTER 6535,296653
#define TK_VARIABLE 6536,296699
#define TK_CASE 6537,296745
#define TK_WHEN 6538,296791
#define TK_THEN 6539,296837
#define TK_ELSE 6540,296883
#define TK_INDEX 6541,296929
#define TK_ALTER 6542,296975
#define TK_ADD 6543,297021
#define TK_TO_TEXT 6544,297067
#define TK_TO_BLOB 6545,297113
#define TK_TO_NUMERIC 6546,297159
#define TK_TO_INT 6547,297205
#define TK_TO_REAL 6548,297251
#define TK_ISNOT 6549,297297
#define TK_END_OF_FILE 6550,297343
#define TK_ILLEGAL 6551,297389
#define TK_SPACE 6552,297435
#define TK_UNCLOSED_STRING 6553,297481
#define TK_FUNCTION 6554,297527
#define TK_COLUMN 6555,297573
#define TK_AGG_FUNCTION 6556,297619
#define TK_AGG_COLUMN 6557,297665
#define TK_CONST_FUNC 6558,297711
#define TK_UMINUS 6559,297757
#define TK_UPLUS 6560,297803
# define double 6575,298258
# define LONGDOUBLE_TYPE 6576,298287
#   define SQLITE_BIG_DBL 6578,298349
# define SQLITE_OMIT_DATETIME_FUNCS 6580,298408
# define SQLITE_OMIT_TRACE 6581,298446
# undef SQLITE_MIXED_ENDIAN_64BIT_FLOAT6582,298475
# undef SQLITE_HAVE_ISNAN6583,298515
# define SQLITE_BIG_DBL 6586,298571
#define OMIT_TEMPDB 6595,298845
#define OMIT_TEMPDB 6597,298873
#define NULL_DISTINCT_FOR_UNIQUE 6612,299459
#define SQLITE_MAX_FILE_FORMAT 6620,299747
# define SQLITE_DEFAULT_FILE_FORMAT 6622,299815
# define SQLITE_DEFAULT_RECURSIVE_TRIGGERS 6626,299903
# define SQLITE_TEMP_STORE 6634,300088
#define offsetof(6642,300229
# define SQLITE_EBCDIC 6650,300462
# define SQLITE_ASCII 6652,300493
#  define UINT32_TYPE 6664,300840
#  define UINT32_TYPE 6666,300878
#  define UINT16_TYPE 6671,300970
#  define UINT16_TYPE 6673,301008
#  define INT16_TYPE 6678,301104
#  define INT16_TYPE 6680,301140
#  define UINT8_TYPE 6685,301226
#  define UINT8_TYPE 6687,301262
#  define INT8_TYPE 6692,301350
#  define INT8_TYPE 6694,301384
# define LONGDOUBLE_TYPE 6698,301455
typedef sqlite_int64 i64;6700,301499
typedef sqlite_uint64 u64;6701,301562
typedef UINT32_TYPE u32;6702,301627
typedef UINT16_TYPE u16;6703,301692
typedef INT16_TYPE i16;6704,301757
typedef UINT8_TYPE u8;6705,301820
typedef INT8_TYPE i8;6706,301885
#define SQLITE_MAX_U32 6714,302221
SQLITE_PRIVATE const int sqlite3one 6721,302391
SQLITE_PRIVATE const int sqlite3one;6723,302438
# define SQLITE_BIGENDIAN 6727,302615
# define SQLITE_LITTLEENDIAN 6728,302646
# define SQLITE_UTF16NATIVE 6729,302677
# define SQLITE_BIGENDIAN 6731,302727
# define SQLITE_LITTLEENDIAN 6732,302784
# define SQLITE_UTF16NATIVE 6733,302841
#define LARGEST_INT64 6741,303094
#define SMALLEST_INT64 6742,303154
#define ROUND8(6748,303336
#define ROUNDDOWN8(6753,303421
#define EIGHT_BYTE_ALIGNMENT(6758,303522
typedef struct BusyHandler BusyHandler;6770,303987
struct BusyHandler 6771,304027
  int (*xFunc)xFunc6772,304048
  void *pArg;pArg6773,304101
  int nBusy;6774,304163
#define MASTER_NAME 6782,304398
#define TEMP_MASTER_NAME 6783,304440
#define MASTER_ROOT 6788,304541
#define SCHEMA_TABLE(6793,304609
#define ArraySize(6799,304770
#define SQLITE_DYNAMIC 6805,304974
  #define SQLITE_WSD 6822,305846
  #define GLOBAL(6823,305873
  #define sqlite3GlobalConfig 6824,305943
  #define SQLITE_WSD 6828,306125
  #define GLOBAL(6829,306147
  #define sqlite3GlobalConfig 6830,306171
#define UNUSED_PARAMETER(6849,307151
#define UNUSED_PARAMETER2(6850,307189
typedef struct AggInfo AggInfo;6855,307303
typedef struct AuthContext AuthContext;6856,307335
typedef struct AutoincInfo AutoincInfo;6857,307375
typedef struct Bitvec Bitvec;6858,307415
typedef struct RowSet RowSet;6859,307445
typedef struct CollSeq CollSeq;6860,307475
typedef struct Column Column;6861,307507
typedef struct Db Db;6862,307537
typedef struct Schema Schema;6863,307559
typedef struct Expr Expr;6864,307589
typedef struct ExprList ExprList;6865,307615
typedef struct ExprSpan ExprSpan;6866,307649
typedef struct FKey FKey;6867,307683
typedef struct FuncDef FuncDef;6868,307709
typedef struct FuncDefHash FuncDefHash;6869,307741
typedef struct IdList IdList;6870,307781
typedef struct Index Index;6871,307811
typedef struct IndexSample IndexSample;6872,307839
typedef struct KeyClass KeyClass;6873,307879
typedef struct KeyInfo KeyInfo;6874,307913
typedef struct Lookaside Lookaside;6875,307945
typedef struct LookasideSlot LookasideSlot;6876,307981
typedef struct Module Module;6877,308025
typedef struct NameContext NameContext;6878,308055
typedef struct Parse Parse;6879,308095
typedef struct Savepoint Savepoint;6880,308123
typedef struct Select Select;6881,308159
typedef struct SrcList SrcList;6882,308189
typedef struct StrAccum StrAccum;6883,308221
typedef struct Table Table;6884,308255
typedef struct TableLock TableLock;6885,308283
typedef struct Token Token;6886,308319
typedef struct TriggerPrg TriggerPrg;6887,308347
typedef struct TriggerStep TriggerStep;6888,308385
typedef struct Trigger Trigger;6889,308425
typedef struct UnpackedRecord UnpackedRecord;6890,308457
typedef struct VTable VTable;6891,308503
typedef struct Walker Walker;6892,308533
typedef struct WherePlan WherePlan;6893,308563
typedef struct WhereInfo WhereInfo;6894,308599
typedef struct WhereLevel WhereLevel;6895,308635
#define _BTREE_H_6922,309660
#define SQLITE_N_BTREE_META 6927,309779
  #define SQLITE_DEFAULT_AUTOVACUUM 6934,309997
#define BTREE_AUTOVACUUM_NONE 6937,310043
#define BTREE_AUTOVACUUM_FULL 6938,310110
#define BTREE_AUTOVACUUM_INCR 6939,310175
typedef struct Btree Btree;6944,310283
typedef struct BtCursor BtCursor;6945,310311
typedef struct BtShared BtShared;6946,310345
typedef struct BtreeMutexArray BtreeMutexArray;6947,310379
struct BtreeMutexArray 6955,310673
  int nMutex;6956,310698
  Btree *aBtree[aBtree6957,310712
#define BTREE_OMIT_JOURNAL 6975,311267
#define BTREE_NO_READLOCK 6976,311337
#define BTREE_MEMORY 6977,311407
#define BTREE_READONLY 6978,311471
#define BTREE_READWRITE 6979,311544
#define BTREE_CREATE 6980,311615
#define BTREE_INTKEY 7016,313458
#define BTREE_ZERODATA 7017,313536
#define BTREE_LEAFDATA 7018,313602
#define BTREE_FREE_PAGE_COUNT 7039,314518
#define BTREE_SCHEMA_VERSION 7040,314554
#define BTREE_FILE_FORMAT 7041,314590
#define BTREE_DEFAULT_CACHE_SIZE 7042,314626
#define BTREE_LARGEST_ROOT_PAGE 7043,314662
#define BTREE_TEXT_ENCODING 7044,314698
#define BTREE_USER_VERSION 7045,314734
#define BTREE_INCR_VACUUM 7046,314770
# define sqlite3BtreeEnter(7113,317609
# define sqlite3BtreeEnterAll(7114,317640
# define sqlite3BtreeLeave(7132,318383
# define sqlite3BtreeEnterCursor(7133,318413
# define sqlite3BtreeLeaveCursor(7134,318449
# define sqlite3BtreeLeaveAll(7135,318485
# define sqlite3BtreeMutexArrayEnter(7136,318518
# define sqlite3BtreeMutexArrayLeave(7137,318558
# define sqlite3BtreeMutexArrayInsert(7138,318598
# define sqlite3BtreeHoldsMutex(7140,318642
# define sqlite3BtreeHoldsAllMutexes(7141,318679
#define _SQLITE_VDBE_H_7171,319794
typedef struct Vdbe Vdbe;7178,319982
typedef struct VdbeFunc VdbeFunc;7184,320116
typedef struct Mem Mem;7185,320150
typedef struct SubProgram SubProgram;7186,320174
struct VdbeOp 7193,320389
  u8 opcode;7194,320405
  signed char p4type;7195,320459
  u8 opflags;7196,320522
  u8 p5;7197,320569
  int p1;7198,320638
  int p2;7199,320680
  int p3;7200,320754
    int i;7202,320847
    void *p;p7203,320914
    char *z;z7204,320963
    i64 *pI64;pI647205,321042
    double *pReal;pReal7206,321104
    FuncDef *pFunc;pFunc7207,321165
    VdbeFunc *pVdbeFunc;pVdbeFunc7208,321229
    CollSeq *pColl;pColl7209,321294
    Mem *pMem;pMem7210,321358
    VTable *pVtab;pVtab7211,321418
    KeyInfo *pKeyInfo;pKeyInfo7212,321479
    int *ai;ai7213,321543
    SubProgram *pProgram;pProgram7214,321608
  } p4;7215,321675
  char *zComment;zComment7217,321703
  int cnt;7220,321794
  u64 cycles;7221,321873
typedef struct VdbeOp VdbeOp;7224,321960
struct SubProgram 7230,322052
  VdbeOp *aOp;aOp7231,322072
  int nOp;7232,322143
  int nMem;7233,322199
  int nCsr;7234,322269
  int nRef;7235,322334
  void *token;token7236,322409
struct VdbeOpList 7243,322603
  u8 opcode;7244,322623
  signed char p1;7245,322677
  signed char p2;7246,322719
  signed char p3;7247,322793
typedef struct VdbeOpList VdbeOpList;7249,322840
#define P4_NOTUSED 7254,322920
#define P4_DYNAMIC 7255,322981
#define P4_STATIC 7256,323062
#define P4_COLLSEQ 7257,323121
#define P4_FUNCDEF 7258,323192
#define P4_KEYINFO 7259,323263
#define P4_VDBEFUNC 7260,323334
#define P4_MEM 7261,323406
#define P4_TRANSIENT 7262,323477
#define P4_VTAB 7263,323547
#define P4_MPRINTF 7264,323624
#define P4_REAL 7265,323703
#define P4_INT64 7266,323771
#define P4_INT32 7267,323833
#define P4_INTARRAY 7268,323895
#define P4_SUBPROGRAM 7269,323961
#define P4_KEYINFO_HANDOFF 7278,324461
#define P4_KEYINFO_STATIC 7279,324494
#define COLNAME_NAME 7285,324661
#define COLNAME_DECLTYPE 7286,324688
#define COLNAME_DATABASE 7287,324715
#define COLNAME_TABLE 7288,324742
#define COLNAME_COLUMN 7289,324769
# define COLNAME_N 7291,324833
#   define COLNAME_N 7294,324937
#   define COLNAME_N 7296,325003
#define ADDR(7306,325328
#define OP_VNext 7316,325756
#define OP_Affinity 7317,325806
#define OP_Column 7318,325856
#define OP_SetCookie 7319,325906
#define OP_Seek 7320,325956
#define OP_Real 7321,326006
#define OP_Sequence 7322,326084
#define OP_Savepoint 7323,326134
#define OP_Ge 7324,326184
#define OP_RowKey 7325,326262
#define OP_SCopy 7326,326312
#define OP_Eq 7327,326362
#define OP_OpenWrite 7328,326440
#define OP_NotNull 7329,326490
#define OP_If 7330,326568
#define OP_ToInt 7331,326618
#define OP_String8 7332,326696
#define OP_CollSeq 7333,326774
#define OP_OpenRead 7334,326824
#define OP_Expire 7335,326874
#define OP_AutoCommit 7336,326924
#define OP_Gt 7337,326974
#define OP_Pagecount 7338,327052
#define OP_IntegrityCk 7339,327102
#define OP_Sort 7340,327152
#define OP_Copy 7341,327202
#define OP_Trace 7342,327252
#define OP_Function 7343,327302
#define OP_IfNeg 7344,327352
#define OP_And 7345,327402
#define OP_Subtract 7346,327480
#define OP_Noop 7347,327558
#define OP_Program 7348,327608
#define OP_Return 7349,327658
#define OP_Remainder 7350,327708
#define OP_NewRowid 7351,327786
#define OP_Multiply 7352,327836
#define OP_FkCounter 7353,327914
#define OP_Variable 7354,327964
#define OP_String 7355,328014
#define OP_RealAffinity 7356,328064
#define OP_VRename 7357,328114
#define OP_ParseSchema 7358,328164
#define OP_VOpen 7359,328214
#define OP_Close 7360,328264
#define OP_CreateIndex 7361,328314
#define OP_IsUnique 7362,328364
#define OP_NotFound 7363,328414
#define OP_Int64 7364,328464
#define OP_MustBeInt 7365,328514
#define OP_Halt 7366,328564
#define OP_Rowid 7367,328614
#define OP_IdxLT 7368,328664
#define OP_AddImm 7369,328714
#define OP_RowData 7370,328764
#define OP_MemMax 7371,328814
#define OP_Or 7372,328864
#define OP_NotExists 7373,328942
#define OP_Gosub 7374,328992
#define OP_Divide 7375,329042
#define OP_Integer 7376,329120
#define OP_ToNumeric 7377,329170
#define OP_Prev 7378,329249
#define OP_RowSetRead 7379,329299
#define OP_Concat 7380,329349
#define OP_RowSetAdd 7381,329427
#define OP_BitAnd 7382,329477
#define OP_VColumn 7383,329555
#define OP_CreateTable 7384,329605
#define OP_Last 7385,329655
#define OP_SeekLe 7386,329705
#define OP_IsNull 7387,329755
#define OP_IncrVacuum 7388,329833
#define OP_IdxRowid 7389,329883
#define OP_ShiftRight 7390,329933
#define OP_ResetCount 7391,330011
#define OP_Yield 7392,330061
#define OP_DropTrigger 7393,330111
#define OP_DropIndex 7394,330161
#define OP_Param 7395,330211
#define OP_IdxGE 7396,330261
#define OP_IdxDelete 7397,330311
#define OP_Vacuum 7398,330361
#define OP_IfNot 7399,330411
#define OP_DropTable 7400,330461
#define OP_SeekLt 7401,330511
#define OP_MakeRecord 7402,330561
#define OP_ToBlob 7403,330611
#define OP_ResultRow 7404,330689
#define OP_Delete 7405,330739
#define OP_AggFinal 7406,330789
#define OP_Compare 7407,330839
#define OP_ShiftLeft 7408,330889
#define OP_Goto 7409,330967
#define OP_TableLock 7410,331017
#define OP_Clear 7411,331067
#define OP_Le 7412,331117
#define OP_VerifyCookie 7413,331195
#define OP_AggStep 7414,331245
#define OP_ToText 7415,331295
#define OP_Not 7416,331373
#define OP_ToReal 7417,331451
#define OP_Transaction 7418,331529
#define OP_VFilter 7419,331579
#define OP_Ne 7420,331629
#define OP_VDestroy 7421,331707
#define OP_BitOr 7422,331757
#define OP_Next 7423,331835
#define OP_Count 7424,331885
#define OP_IdxInsert 7425,331935
#define OP_Lt 7426,331985
#define OP_FkIfZero 7427,332063
#define OP_SeekGe 7428,332113
#define OP_Insert 7429,332163
#define OP_Destroy 7430,332213
#define OP_ReadCookie 7431,332263
#define OP_RowSetTest 7432,332313
#define OP_LoadAnalysis 7433,332363
#define OP_Explain 7434,332413
#define OP_HaltIfNull 7435,332463
#define OP_OpenPseudo 7436,332513
#define OP_OpenEphemeral 7437,332563
#define OP_Null 7438,332613
#define OP_Move 7439,332663
#define OP_Blob 7440,332713
#define OP_Add 7441,332763
#define OP_Rewind 7442,332841
#define OP_SeekGt 7443,332891
#define OP_VBegin 7444,332941
#define OP_VUpdate 7445,332991
#define OP_IfZero 7446,333041
#define OP_BitNot 7447,333091
#define OP_VCreate 7448,333169
#define OP_Found 7449,333219
#define OP_IfPos 7450,333269
#define OP_NullRow 7451,333319
#define OP_Jump 7452,333369
#define OP_Permutation 7453,333419
#define OP_NotUsed_134 7456,333519
#define OP_NotUsed_135 7457,333569
#define OP_NotUsed_136 7458,333619
#define OP_NotUsed_137 7459,333669
#define OP_NotUsed_138 7460,333719
#define OP_NotUsed_139 7461,333769
#define OP_NotUsed_140 7462,333819
#define OPFLG_JUMP 7469,334041
#define OPFLG_OUT2_PRERELEASE 7470,334112
#define OPFLG_IN1 7471,334173
#define OPFLG_IN2 7472,334239
#define OPFLG_IN3 7473,334305
#define OPFLG_OUT3 7474,334371
#define OPFLG_INITIALIZER 7475,334438
# define VdbeComment(7550,338340
# define VdbeNoopComment(7552,338457
# define VdbeComment(7554,338517
# define VdbeNoopComment(7555,338541
#define _PAGER_H_7583,339554
  #define SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT 7591,339829
typedef u32 Pgno;7598,340020
typedef struct Pager Pager;7603,340123
typedef struct PgHdr DbPage;7608,340184
#define PAGER_MJ_PGNO(7618,340602
#define PAGER_OMIT_JOURNAL 7625,340822
#define PAGER_NO_READLOCK 7626,340896
#define PAGER_LOCKINGMODE_QUERY 7631,341050
#define PAGER_LOCKINGMODE_NORMAL 7632,341090
#define PAGER_LOCKINGMODE_EXCLUSIVE 7633,341130
#define PAGER_JOURNALMODE_QUERY 7638,341247
#define PAGER_JOURNALMODE_DELETE 7639,341287
#define PAGER_JOURNALMODE_PERSIST 7640,341367
#define PAGER_JOURNALMODE_OFF 7641,341448
#define PAGER_JOURNALMODE_TRUNCATE 7642,341514
#define PAGER_JOURNALMODE_MEMORY 7643,341591
#define sqlite3PagerGet(7677,342934
# define disable_simulated_io_errors(7726,345223
# define enable_simulated_io_errors(7727,345262
typedef struct PgHdr PgHdr;7755,346202
typedef struct PCache PCache;7756,346230
struct PgHdr 7762,346354
  void *pData;pData7763,346369
  void *pExtra;pExtra7764,346429
  PgHdr *pDirty;pDirty7765,346482
  Pgno pgno;7766,346551
  Pager *pPager;pPager7767,346616
  u32 pageHash;7769,346712
  u16 flags;7771,346779
  i16 nRef;7777,347047
  PCache *pCache;pCache7778,347115
  PgHdr *pDirtyNext;pDirtyNext7780,347181
  PgHdr *pDirtyPrev;pDirtyPrev7781,347256
#define PGHDR_DIRTY 7785,347372
#define PGHDR_NEED_SYNC 7786,347434
#define PGHDR_NEED_READ 7788,347589
#define PGHDR_REUSE_UNLIKELY 7789,347652
#define PGHDR_DONT_WRITE 7790,347727
#define _SQLITE_OS_H_7921,352750
#   undef SQLITE_OS_UNIX7932,353139
#   define SQLITE_OS_UNIX 7933,353164
#   undef SQLITE_OS_WIN7934,353192
#   define SQLITE_OS_WIN 7935,353216
#   undef SQLITE_OS_OS27936,353243
#   define SQLITE_OS_OS2 7937,353267
#   undef SQLITE_OS_OTHER7939,353301
# define SQLITE_OS_OTHER 7943,353400
#     define SQLITE_OS_WIN 7946,353563
#     define SQLITE_OS_UNIX 7947,353592
#     define SQLITE_OS_OS2 7948,353622
#     define SQLITE_OS_WIN 7950,353748
#     define SQLITE_OS_UNIX 7951,353777
#     define SQLITE_OS_OS2 7952,353807
#     define SQLITE_OS_WIN 7954,353845
#     define SQLITE_OS_UNIX 7955,353874
#     define SQLITE_OS_OS2 7956,353904
#  define SQLITE_OS_UNIX 7959,353949
#  define SQLITE_OS_OS2 7960,353976
#  define SQLITE_OS_WIN 7964,354039
# define SQLITE_OS_WINCE 7973,354192
# define SQLITE_OS_WINCE 7975,354225
# define SQLITE_TEMPNAME_SIZE 7984,354358
# define INCL_DOSDATETIME7989,354599
# define INCL_DOSFILEMGR7990,354625
# define INCL_DOSERRORS7991,354650
# define INCL_DOSMISC7992,354674
# define INCL_DOSPROCESS7993,354696
# define INCL_DOSMODULEMGR7994,354721
# define INCL_DOSSEMAPHORES7995,354748
# define SQLITE_TEMPNAME_SIZE 7998,354814
# define SQLITE_TEMPNAME_SIZE 8000,354867
# define SET_FULLSYNC(8007,355008
# define SQLITE_DEFAULT_SECTOR_SIZE 8014,355121
# define SQLITE_TEMP_FILE_PREFIX 8039,356425
#define NO_LOCK 8059,357353
#define SHARED_LOCK 8060,357379
#define RESERVED_LOCK 8061,357405
#define PENDING_LOCK 8062,357431
#define EXCLUSIVE_LOCK 8063,357457
#define PENDING_BYTE 8120,360526
#define RESERVED_BYTE 8121,360571
#define SHARED_FIRST 8122,360614
#define SHARED_SIZE 8123,360657
#define SQLITE_FCNTL_DB_UNCHANGED 8143,361497
# define SQLITE_MUTEX_OMIT8221,364837
#    define SQLITE_MUTEX_PTHREADS8225,364945
#    define SQLITE_MUTEX_W328227,365001
#    define SQLITE_MUTEX_OS28229,365052
#    define SQLITE_MUTEX_NOOP8231,365089
#define sqlite3_mutex_alloc(8239,365237
#define sqlite3_mutex_free(8240,365291
#define sqlite3_mutex_enter(8241,365321
#define sqlite3_mutex_try(8242,365352
#define sqlite3_mutex_leave(8243,365396
#define sqlite3_mutex_held(8244,365427
#define sqlite3_mutex_notheld(8245,365463
#define sqlite3MutexAlloc(8246,365499
#define sqlite3MutexInit(8247,365553
#define sqlite3MutexEnd(8248,365597
struct Db 8262,366145
  char *zName;zName8263,366157
  Btree *pBt;pBt8264,366208
  u8 inTrans;8265,366281
  u8 safety_level;8266,366359
  Schema *pSchema;pSchema8267,366427
struct Schema 8281,366996
  int schema_cookie;8282,367012
  Hash tblHash;8283,367086
  Hash idxHash;8284,367142
  Hash trigHash;8285,367207
  Hash fkeyHash;8286,367265
  Table *pSeqTab;pSeqTab8287,367336
  u8 file_format;8288,367413
  u8 enc;8289,367478
  u16 flags;8290,367543
  int cache_size;8291,367606
  sqlite3 *db;db8293,367704
#define DbHasProperty(8301,367871
#define DbHasAnyProperty(8302,367944
#define DbSetProperty(8303,368015
#define DbClearProperty(8304,368080
#define DB_SchemaLoaded 8316,368501
#define DB_UnresetViews 8317,368569
#define DB_Empty 8318,368647
#define SQLITE_N_LIMIT 8324,368833
struct Lookaside 8346,369922
  u16 sz;8347,369941
  u8 bEnabled;8348,370002
  u8 bMalloced;8349,370077
  int nOut;8350,370155
  int mxOut;8351,370227
  LookasideSlot *pFree;pFree8352,370283
  void *pStart;pStart8353,370341
  void *pEnd;pEnd8354,370410
struct LookasideSlot 8356,370484
  LookasideSlot *pNext;pNext8357,370507
struct FuncDefHash 8366,370751
  FuncDef *a[a8367,370772
struct sqlite3 8396,372209
  sqlite3_vfs *pVfs;pVfs8397,372226
  int nDb;8398,372277
  Db *aDb;aDb8399,372351
  int flags;8400,372402
  int openFlags;8401,372471
  int errCode;8402,372545
  int errMask;8403,372617
  u8 autoCommit;8404,372697
  u8 temp_store;8405,372757
  u8 mallocFailed;8406,372824
  u8 dfltLockMode;8407,372900
  u8 dfltJournalMode;8408,372976
  signed char nextAutovac;8409,373052
  int nextPagesize;8410,373126
  int nTable;8411,373192
  CollSeq *pDfltColl;pDfltColl8412,373263
  i64 lastRowid;8413,373341
  u32 magic;8414,373419
  int nChange;8415,373496
  int nTotalChange;8416,373570
  sqlite3_mutex *mutex;mutex8417,373650
  int aLimit[aLimit8418,373705
  struct sqlite3InitInfo 8419,373750
    int iDb;8420,373827
    int newTnum;8421,373896
    u8 busy;8422,373970
    u8 orphanTrigger;8423,374039
  } init;8424,374117
  int nExtension;8425,374127
  void **aExtension;aExtension8426,374193
  struct Vdbe *pVdbe;pVdbe8427,374263
  int activeVdbeCnt;8428,374333
  int writeVdbeCnt;8429,374407
  void (*xTrace)xTrace8430,374485
  void *pTraceArg;pTraceArg8431,374550
  void (*xProfile)xProfile8432,374631
  void *pProfileArg;pProfileArg8433,374700
  void *pCommitArg;pCommitArg8434,374779
  int (*xCommitCallback)xCommitCallback8435,374854
  void *pRollbackArg;pRollbackArg8436,374921
  void (*xRollbackCallback)xRollbackCallback8437,374998
  void *pUpdateArg;pUpdateArg8438,375065
  void (*xUpdateCallback)xUpdateCallback8439,375085
  void(*xCollNeeded)xCollNeeded8440,375161
  void(*xCollNeeded16)xCollNeeded168441,375224
  void *pCollNeededArg;pCollNeededArg8442,375289
  sqlite3_value *pErr;pErr8443,375313
  char *zErrMsg;zErrMsg8444,375377
  char *zErrMsg16;zErrMsg168445,375457
    volatile int isInterrupted;8447,375548
    double notUsed1;8448,375628
  } u1;8449,375673
  Lookaside lookaside;8450,375681
  int (*xAuth)xAuth8452,375784
  void *pAuthArg;pAuthArg8454,375927
  int (*xProgress)xProgress8457,376051
  void *pProgressArg;pProgressArg8458,376111
  int nProgressOps;8459,376183
  Hash aModule;8462,376301
  Table *pVTab;pVTab8463,376376
  VTable **aVTrans;aVTrans8464,376453
  int nVTrans;8465,376529
  VTable *pDisconnect;pDisconnect8466,376593
  FuncDefHash aFunc;8468,376675
  Hash aCollSeq;8469,376748
  BusyHandler busyHandler;8470,376810
  int busyTimeout;8471,376862
  Db aDbStatic[aDbStatic8472,376930
  Savepoint *pSavepoint;pSavepoint8473,377008
  int nSavepoint;8474,377072
  int nStatement;8475,377147
  u8 isTransactionSavepoint;8476,377226
  i64 nDeferredCons;8477,377304
  sqlite3 *pBlockingConnection;pBlockingConnection8490,377848
  sqlite3 *pUnlockConnection;pUnlockConnection8491,377923
  void *pUnlockArg;pUnlockArg8492,378000
  void (*xUnlockNotify)xUnlockNotify8493,378072
  sqlite3 *pNextBlocked;pNextBlocked8494,378141
#define ENC(8501,378287
#define SQLITE_VdbeTrace 8510,378596
#define SQLITE_InTrans 8511,378673
#define SQLITE_InternChanges 8512,378746
#define SQLITE_FullColNames 8513,378825
#define SQLITE_ShortColNames 8514,378906
#define SQLITE_CountRows 8515,378979
#define SQLITE_NullCallback 8518,379214
#define SQLITE_SqlTrace 8520,379364
#define SQLITE_VdbeListing 8521,379443
#define SQLITE_WriteSchema 8522,379523
#define SQLITE_NoReadlock 8523,379598
#define SQLITE_IgnoreChecks 8525,379749
#define SQLITE_ReadUncommitted 8526,379830
#define SQLITE_LegacyFileFmt 8527,379900
#define SQLITE_FullFSync 8528,379981
#define SQLITE_LoadExtension 8529,380059
#define SQLITE_RecoveryMode 8531,380130
#define SQLITE_ReverseOrder 8532,380199
#define SQLITE_RecTriggers 8533,380273
#define SQLITE_ForeignKeys 8534,380347
#define SQLITE_MAGIC_OPEN 8541,380596
#define SQLITE_MAGIC_CLOSED 8542,380661
#define SQLITE_MAGIC_SICK 8543,380728
#define SQLITE_MAGIC_BUSY 8544,380801
#define SQLITE_MAGIC_ERROR 8545,380875
struct FuncDef 8553,381222
  i16 nArg;8554,381239
  u8 iPrefEnc;8555,381309
  u8 flags;8556,381388
  void *pUserData;pUserData8557,381451
  FuncDef *pNext;pNext8558,381500
  void (*xFunc)xFunc8559,381558
  void (*xStep)xStep8560,381636
  void (*xFinalize)xFinalize8561,381712
  char *zName;zName8562,381792
  FuncDef *pHash;pHash8563,381847
#define SQLITE_FUNC_LIKE 8569,381968
#define SQLITE_FUNC_CASE 8570,382044
#define SQLITE_FUNC_EPHEM 8571,382118
#define SQLITE_FUNC_NEEDCOLL 8572,382187
#define SQLITE_FUNC_PRIVATE 8573,382267
#define SQLITE_FUNC_COUNT 8574,382337
#define FUNCTION(8601,383644
#define STR_FUNCTION(8604,383799
#define LIKEFUNC(8607,383939
#define AGGREGATE(8609,384055
struct Savepoint 8619,384459
  char *zName;zName8620,384478
  i64 nDeferredCons;8621,384554
  Savepoint *pNext;pNext8622,384631
#define SAVEPOINT_BEGIN 8629,384843
#define SAVEPOINT_RELEASE 8630,384874
#define SAVEPOINT_ROLLBACK 8631,384905
struct Module 8639,385095
  const sqlite3_module *pModule;pModule8640,385111
  const char *zName;zName8641,385174
  void *pAux;pAux8642,385250
  void (*xDestroy)xDestroy8643,385326
struct Column 8650,385502
  char *zName;zName8651,385518
  Expr *pDflt;pDflt8652,385563
  char *zDflt;zDflt8653,385617
  char *zType;zType8654,385677
  char *zColl;zColl8655,385728
  u8 notNull;8656,385799
  u8 isPrimKey;8657,385863
  char affinity;8658,385935
  u8 isHidden;8660,386026
struct CollSeq 8685,387106
  char *zName;zName8686,387123
  u8 enc;8687,387199
  u8 type;8688,387261
  void *pUser;pUser8689,387331
  int (*xCmp)xCmp8690,387386
  void (*xDel)xDel8691,387443
#define SQLITE_COLL_BINARY 8697,387539
#define SQLITE_COLL_NOCASE 8698,387616
#define SQLITE_COLL_REVERSE 8699,387692
#define SQLITE_COLL_USER 8700,387769
#define SQLITE_SO_ASC 8705,387898
#define SQLITE_SO_DESC 8706,387959
#define SQLITE_AFF_TEXT 8722,388578
#define SQLITE_AFF_NONE 8723,388610
#define SQLITE_AFF_NUMERIC 8724,388642
#define SQLITE_AFF_INTEGER 8725,388674
#define SQLITE_AFF_REAL 8726,388706
#define sqlite3IsNumericAffinity(8728,388739
#define SQLITE_AFF_MASK 8734,388896
#define SQLITE_JUMPIFNULL 8740,389029
#define SQLITE_STOREP2 8741,389101
#define SQLITE_NULLEQ 8742,389182
struct VTable 8786,391682
  sqlite3 *db;db8787,391698
  Module *pMod;pMod8788,391779
  sqlite3_vtab *pVtab;pVtab8789,391846
  int nRef;8790,391905
  VTable *pNext;pNext8791,391976
struct Table 8824,393614
  sqlite3 *dbMem;dbMem8825,393629
  char *zName;zName8826,393704
  int iPKey;8827,393759
  int nCol;8828,393840
  Column *aCol;aCol8829,393901
  Index *pIndex;pIndex8830,393960
  int tnum;8831,394024
  Select *pSelect;pSelect8832,394101
  u16 nRef;8833,394180
  u8 tabFlags;8834,394242
  u8 keyConf;8835,394291
  FKey *pFKey;pFKey8836,394371
  char *zColAff;zColAff8837,394446
  Expr *pCheck;pCheck8839,394545
  int addColOffset;8842,394645
  VTable *pVTable;pVTable8845,394762
  int nModuleArg;8846,394815
  char **azModuleArg;azModuleArg8847,394878
  Trigger *pTrigger;pTrigger8849,394958
  Schema *pSchema;pSchema8850,395022
  Table *pNextZombie;pNextZombie8851,395083
#define TF_Readonly 8857,395193
#define TF_Ephemeral 8858,395257
#define TF_HasPrimaryKey 8859,395317
#define TF_Autoincrement 8860,395382
#define TF_Virtual 8861,395460
#define TF_NeedMetadata 8862,395520
#  define IsVirtual(8872,395817
#  define IsHiddenColumn(8873,395879
#  define IsVirtual(8875,395929
#  define IsHiddenColumn(8876,395959
struct FKey 8898,396757
  Table *pFrom;pFrom8899,396771
  FKey *pNextFrom;pNextFrom8900,396849
  char *zTo;zTo8901,396901
  FKey *pNextTo;pNextTo8902,396978
  FKey *pPrevTo;pPrevTo8903,397040
  int nCol;8904,397106
  u8 isDeferred;8906,397188
  u8 aAction[aAction8907,397266
  Trigger *apTrigger[apTrigger8908,397344
  struct sColMap 8909,397407
    int iFrom;8910,397479
    char *zCol;zCol8911,397533
  } aCol[aCol8912,397607
#define OE_None 8940,399056
#define OE_Rollback 8941,399118
#define OE_Abort 8942,399196
#define OE_Fail 8943,399274
#define OE_Ignore 8944,399351
#define OE_Replace 8945,399430
#define OE_Restrict 8947,399510
#define OE_SetNull 8948,399589
#define OE_SetDflt 8949,399653
#define OE_Cascade 8950,399724
#define OE_Default 8952,399775
struct KeyInfo 8960,400014
  sqlite3 *db;db8961,400031
  u8 enc;8962,400083
  u16 nField;8963,400155
  u8 *aSortOrder;aSortOrder8964,400212
  CollSeq *aColl[aColl8965,400287
struct UnpackedRecord 8982,400917
  KeyInfo *pKeyInfo;pKeyInfo8983,400941
  u16 nField;8984,401006
  u16 flags;8985,401063
  i64 rowid;8986,401129
  Mem *aMem;aMem8987,401188
#define UNPACKED_NEED_FREE 8993,401275
#define UNPACKED_NEED_DESTROY 8994,401351
#define UNPACKED_IGNORE_ROWID 8995,401429
#define UNPACKED_INCRKEY 8996,401504
#define UNPACKED_PREFIX_MATCH 8997,401581
#define UNPACKED_PREFIX_SEARCH 8998,401658
struct Index 9026,402924
  char *zName;zName9027,402939
  int nColumn;9028,402983
  int *aiColumn;aiColumn9029,403058
  unsigned *aiRowEst;aiRowEst9030,403131
  Table *pTable;pTable9031,403212
  int tnum;9032,403265
  u8 onError;9033,403342
  u8 autoIndex;9034,403411
  char *zColAff;zColAff9035,403485
  Index *pNext;pNext9036,403554
  Schema *pSchema;pSchema9037,403625
  u8 *aSortOrder;aSortOrder9038,403679
  char **azColl;azColl9039,403756
  IndexSample *aSample;aSample9040,403825
struct IndexSample 9047,404015
    char *z;z9049,404046
    double r;9050,404117
  } u;9051,404192
  u8 eType;9052,404199
  u8 nByte;9053,404262
struct Token 9064,404628
  const char *z;z9065,404643
  unsigned int n;9066,404711
struct AggInfo 9082,405373
  u8 directMode;9083,405390
  u8 useSortingIdx;9085,405547
  int sortingIdx;9087,405681
  ExprList *pGroupBy;pGroupBy9088,405748
  int nSortingColumn;9089,405800
  struct AggInfo_col 9090,405871
    Table *pTab;pTab9091,405941
    int iTable;9092,405989
    int iColumn;9093,406058
    int iSorterColumn;9094,406131
    int iMem;9095,406201
    Expr *pExpr;pExpr9096,406277
  } *aCol;aCol9097,406336
  int nColumn;9098,406347
  int nColumnAlloc;9099,406412
  int nAccumulator;9100,406481
  struct AggInfo_func 9103,406692
    Expr *pExpr;pExpr9104,406752
    FuncDef *pFunc;pFunc9105,406820
    int iMem;9106,406893
    int iDistinct;9107,406969
  } *aFunc;aFunc9108,407045
  int nFunc;9109,407057
  int nFuncAlloc;9110,407118
struct Expr 9176,410429
  u8 op;9177,410443
  char affinity;9178,410507
  u16 flags;9179,410586
    char *zToken;zToken9181,410658
    int iValue;9182,410733
  } u;9183,410795
  Expr *pLeft;pLeft9190,411077
  Expr *pRight;pRight9191,411121
    ExprList *pList;pList9193,411176
    Select *pSelect;pSelect9194,411257
  } x;9195,411336
  CollSeq *pColl;pColl9196,411343
  int iTable;9203,411684
  i16 iColumn;9206,411880
  i16 iAgg;9207,411950
  i16 iRightJoinTable;9208,412026
  u8 flags2;9209,412101
  u8 op2;9210,412162
  AggInfo *pAggInfo;pAggInfo9211,412241
  Table *pTab;pTab9212,412314
  int nHeight;9214,412406
#define EP_FromJoin 9221,412560
#define EP_Agg 9222,412639
#define EP_Resolved 9223,412716
#define EP_Error 9224,412786
#define EP_Distinct 9225,412861
#define EP_VarSelect 9226,412938
#define EP_DblQuoted 9227,413010
#define EP_InfixFunc 9228,413078
#define EP_ExpCollate 9229,413158
#define EP_AnyAff 9230,413234
#define EP_FixedDest 9231,413311
#define EP_IntValue 9232,413384
#define EP_xIsSelect 9233,413456
#define EP_Reduced 9235,413535
#define EP_TokenOnly 9236,413614
#define EP_Static 9237,413695
#define EP2_MallocedToken 9242,413848
#define EP2_Irreducible 9243,413925
# define ExprSetIrreducible(9252,414290
# define ExprSetIrreducible(9254,414359
#define ExprHasProperty(9261,414489
#define ExprHasAnyProperty(9262,414546
#define ExprSetProperty(9263,414601
#define ExprClearProperty(9264,414650
#define EXPR_FULLSIZE 9271,414901
#define EXPR_REDUCEDSIZE 9272,414972
#define EXPR_TOKENONLYSIZE 9273,415049
#define EXPRDUP_REDUCE 9279,415245
struct ExprList 9289,415694
  int nExpr;9290,415712
  int nAlloc;9291,415777
  int iECursor;9292,415842
  struct ExprList_item 9293,415915
    Expr *pExpr;pExpr9294,415940
    char *zName;zName9295,415997
    char *zSpan;zSpan9296,416068
    u8 sortOrder;9297,416133
    u8 done;9298,416190
    u16 iCol;9299,416270
    u16 iAlias;9300,416345
  } *a;a9301,416414
struct ExprSpan 9309,416640
  Expr *pExpr;pExpr9310,416658
  const char *zStart;zStart9311,416714
  const char *zEnd;zEnd9312,416774
struct IdList 9330,417384
  struct IdList_item 9331,417400
    char *zName;zName9332,417423
    int idx;9333,417474
  } *a;a9334,417553
  int nId;9335,417561
  int nAlloc;9336,417620
typedef u64 Bitmask;9346,417953
#define BMS 9351,418046
struct SrcList 9369,418943
  i16 nSrc;9370,418960
  i16 nAlloc;9371,419035
  struct SrcList_item 9372,419101
    char *zDatabase;zDatabase9373,419125
    char *zName;zName9374,419189
    char *zAlias;zAlias9375,419235
    Table *pTab;pTab9376,419316
    Select *pSelect;pSelect9377,419380
    u8 isPopulated;9378,419457
    u8 jointype;9379,419537
    u8 notIndexed;9380,419613
    int iCursor;9381,419679
    Expr *pOn;pOn9382,419756
    IdList *pUsing;pUsing9383,419808
    Bitmask colUsed;9384,419863
    char *zIndex;zIndex9385,419936
    Index *pIndex;pIndex9386,420009
  } a[a9387,420085
#define JT_INNER 9393,420217
#define JT_CROSS 9394,420286
#define JT_NATURAL 9395,420357
#define JT_LEFT 9396,420420
#define JT_RIGHT 9397,420473
#define JT_OUTER 9398,420527
#define JT_ERROR 9399,420595
struct WherePlan 9416,421267
  u32 wsFlags;9417,421286
  u32 nEq;9418,421366
    Index *pIdx;pIdx9420,421440
    struct WhereTerm *pTerm;pTerm9421,421514
    sqlite3_index_info *pVtabIdx;pVtabIdx9422,421587
  } u;9423,421655
struct WhereLevel 9439,422300
  WherePlan plan;9440,422320
  int iLeftJoin;9441,422397
  int iTabCur;9442,422473
  int iIdxCur;9443,422544
  int addrBrk;9444,422610
  int addrNxt;9445,422675
  int addrCont;9446,422748
  int addrFirst;9447,422825
  u8 iFrom;9448,422897
  u8 op,9449,422958
  u8 op, p5;9449,422958
  int p1,9450,423035
  int p1, p2;9450,423035
      int nIn;9453,423194
      struct InLoop 9454,423259
        int iCur;9455,423281
        int addrInTop;9456,423359
      } *aInLoop;aInLoop9457,423415
    } in;9458,423491
  } u;9459,423560
  sqlite3_index_info *pIdxInfo;pIdxInfo9467,423874
#define WHERE_ORDERBY_NORMAL 9474,424069
#define WHERE_ORDERBY_MIN 9475,424119
#define WHERE_ORDERBY_MAX 9476,424198
#define WHERE_ONEPASS_DESIRED 9477,424277
#define WHERE_DUPLICATES_OK 9478,424355
#define WHERE_OMIT_OPEN 9479,424433
#define WHERE_OMIT_CLOSE 9480,424507
#define WHERE_FORCE_TABLE 9481,424587
struct WhereInfo 9490,424957
  Parse *pParse;pParse9491,424976
  u16 wctrlFlags;9492,425041
  u8 okOnePass;9493,425117
  SrcList *pTabList;pTabList9494,425196
  int iTop;9495,425262
  int iContinue;9496,425338
  int iBreak;9497,425416
  int nLevel;9498,425490
  struct WhereClause *pWC;pWC9499,425551
  WhereLevel a[a9500,425624
struct NameContext 9524,426818
  Parse *pParse;pParse9525,426839
  SrcList *pSrcList;pSrcList9526,426879
  ExprList *pEList;pEList9527,426949
  int nRef;9528,427013
  int nErr;9529,427083
  u8 allowAgg;9530,427163
  u8 hasAgg;9531,427225
  u8 isCheck;9532,427282
  int nDepth;9533,427357
  AggInfo *pAggInfo;pAggInfo9534,427434
  NameContext *pNext;pNext9535,427506
struct Select 9558,428658
  ExprList *pEList;pEList9559,428674
  u8 op;9560,428730
  char affinity;9561,428808
  u16 selFlags;9562,428881
  SrcList *pSrc;pSrc9563,428932
  Expr *pWhere;pWhere9564,428979
  ExprList *pGroupBy;pGroupBy9565,429027
  Expr *pHaving;pHaving9566,429078
  ExprList *pOrderBy;pOrderBy9567,429127
  Select *pPrior;pPrior9568,429178
  Select *pNext;pNext9569,429253
  Select *pRightmost;pRightmost9570,429322
  Expr *pLimit;pLimit9571,429402
  Expr *pOffset;pOffset9572,429472
  int iLimit,9573,429543
  int iLimit, iOffset;9573,429543
  int addrOpenEphm[addrOpenEphm9574,429623
#define SF_Distinct 9581,429793
#define SF_Resolved 9582,429860
#define SF_Aggregate 9583,429932
#define SF_UsesEphemeral 9584,430002
#define SF_Expanded 9585,430073
#define SF_HasTypeInfo 9586,430151
#define SRT_Union 9593,430348
#define SRT_Except 9594,430415
#define SRT_Exists 9595,430482
#define SRT_Discard 9596,430551
#define IgnorableOrderby(9599,430677
#define SRT_Output 9601,430732
#define SRT_Mem 9602,430792
#define SRT_Set 9603,430856
#define SRT_Table 9604,430924
#define SRT_EphemTab 9605,431003
#define SRT_Coroutine 9606,431083
typedef struct SelectDest SelectDest;9612,431273
struct SelectDest 9613,431311
  u8 eDest;9614,431331
  u8 affinity;9615,431387
  int iParm;9616,431447
  int iMem;9617,431519
  int nMem;9618,431585
struct AutoincInfo 9630,432147
  AutoincInfo *pNext;pNext9631,432168
  Table *pTab;pTab9632,432236
  int iDb;9633,432298
  int regCtr;9634,432376
# define SQLITE_N_COLCACHE 9641,432512
struct TriggerPrg 9661,433331
  Trigger *pTrigger;pTrigger9662,433351
  int orconf;9663,433419
  SubProgram *pProgram;pProgram9664,433478
  u32 oldmask;9665,433547
  TriggerPrg *pNext;pNext9666,433610
struct Parse 9685,434436
  sqlite3 *db;db9686,434451
  int rc;9687,434508
  char *zErrMsg;zErrMsg9688,434564
  Vdbe *pVdbe;pVdbe9689,434610
  u8 colNamesSet;9690,434681
  u8 nameClash;9691,434760
  u8 checkSchema;9692,434841
  u8 nested;9693,434912
  u8 parseError;9694,434993
  u8 nTempReg;9695,435064
  u8 nTempInUse;9696,435137
  int aTempReg[aTempReg9697,435209
  int nRangeReg;9698,435275
  int iRangeReg;9699,435341
  int nErr;9700,435413
  int nTab;9701,435464
  int nMem;9702,435537
  int nSet;9703,435601
  int ckBase;9704,435657
  int iCacheLevel;9705,435733
  int iCacheCnt;9706,435814
  u8 nColCache;9707,435891
  u8 iColCache;9708,435958
  struct yColCache 9709,436022
    int iTable;9710,436043
    int iColumn;9711,436095
    u8 affChange;9712,436147
    u8 tempReg;9713,436228
    int iLevel;9714,436307
    int iReg;9715,436353
    int lru;9716,436430
  } aColCache[aColCache9717,436511
  u32 writeMask;9718,436584
  u32 cookieMask;9719,436658
  u8 isMultiWrite;9720,436724
  u8 mayAbort;9721,436803
  int cookieGoto;9722,436879
  int cookieValue[cookieValue9723,436957
  int nTableLock;9725,437067
  TableLock *aTableLock;aTableLock9726,437128
  int regRowid;9728,437209
  int regRoot;9729,437283
  AutoincInfo *pAinc;pAinc9730,437362
  int nMaxArg;9731,437432
  Parse *pToplevel;pToplevel9734,437566
  Table *pTriggerTab;pTriggerTab9735,437638
  u32 oldmask;9736,437702
  u8 eTriggerOp;9737,437764
  u8 eOrconf;9738,437827
  u8 disableTriggers;9739,437901
  int nVar;9744,438056
  int nVarExpr;9745,438132
  int nVarExprAlloc;9746,438197
  Expr **apVarExpr;apVarExpr9747,438267
  int nAlias;9748,438344
  int nAliasAlloc;9749,438410
  int *aAlias;aAlias9750,438478
  u8 explain;9751,438544
  Token sNameToken;9752,438620
  Token sLastToken;9753,438691
  const char *zTail;zTail9754,438742
  Table *pNewTable;pNewTable9755,438815
  Trigger *pNewTrigger;pNewTrigger9756,438886
  const char *zAuthContext;zAuthContext9757,438964
  Token sArg;9759,439072
  u8 declareVtab;9760,439142
  int nVtabLock;9761,439215
  Table **apVtabLock;apVtabLock9762,439283
  int nHeight;9764,439367
  Table *pZombieTab;pZombieTab9765,439444
  TriggerPrg *pTriggerPrg;pTriggerPrg9766,439523
  #define IN_DECLARE_VTAB 9770,439625
  #define IN_DECLARE_VTAB 9772,439659
struct AuthContext 9779,439873
  const char *zAuthContext;zAuthContext9780,439894
  Parse *pParse;pParse9781,439964
#define OPFLAG_NCHANGE 9787,440088
#define OPFLAG_LASTROWID 9788,440157
#define OPFLAG_ISUPDATE 9789,440228
#define OPFLAG_APPEND 9790,440303
#define OPFLAG_USESEEKRESULT 9791,440377
#define OPFLAG_CLEARCACHE 9792,440457
struct Trigger 9809,441250
  char *zName;zName9810,441267
  char *table;table9811,441346
  u8 op;9812,441425
  u8 tr_tm;9813,441504
  Expr *pWhen;pWhen9814,441573
  IdList *pColumns;pColumns9815,441653
  Schema *pSchema;pSchema9817,441794
  Schema *pTabSchema;pTabSchema9818,441856
  TriggerStep *step_list;step_list9819,441916
  Trigger *pNext;pNext9820,441995
#define TRIGGER_BEFORE 9830,442314
#define TRIGGER_AFTER 9831,442340
struct TriggerStep 9871,444181
  u8 op;9872,444202
  u8 orconf;9873,444281
  Trigger *pTrig;pTrig9874,444327
  Select *pSelect;pSelect9875,444396
  Token target;9876,444477
  Expr *pWhere;pWhere9877,444546
  ExprList *pExprList;pExprList9878,444619
  IdList *pIdList;pIdList9879,444697
  TriggerStep *pNext;pNext9880,444750
  TriggerStep *pLast;pLast9881,444801
typedef struct DbFixer DbFixer;9889,445047
struct DbFixer 9890,445079
  Parse *pParse;pParse9891,445096
  const char *zDb;zDb9892,445174
  const char *zType;zType9893,445255
  const Token *pName;pName9894,445331
struct StrAccum 9901,445547
  sqlite3 *db;db9902,445565
  char *zBase;zBase9903,445640
  char *zText;zText9904,445706
  int  nChar;9905,445763
  int  nAlloc;9906,445820
  int  mxAlloc;9907,445884
  u8   mallocFailed;9908,445943
  u8   useMalloc;9909,446016
  u8   tooBig;9910,446088
  sqlite3 *db;db9918,446322
  int iDb;9919,446381
  char **pzErrMsg;pzErrMsg9920,446460
  int rc;9921,446514
} InitData;9922,446566
struct Sqlite3Config 9929,446718
  int bMemstat;9930,446741
  int bCoreMutex;9931,446812
  int bFullMutex;9932,446883
  int mxStrlen;9933,446954
  int szLookaside;9934,447018
  int nLookaside;9935,447090
  sqlite3_mem_methods m;9936,447163
  sqlite3_mutex_methods mutex;9937,447243
  sqlite3_pcache_methods pcache;9938,447311
  void *pHeap;pHeap9939,447384
  int nHeap;9940,447445
  int mnReq,9941,447503
  int mnReq, mxReq;9941,447503
  void *pScratch;pScratch9942,447577
  int szScratch;9943,447634
  int nScratch;9944,447704
  void *pPage;pPage9945,447772
  int szPage;9946,447832
  int nPage;9947,447903
  int mxParserStack;9948,447972
  int sharedCacheEnabled;9949,448048
  int isInit;9952,448239
  int inProgress;9953,448320
  int isMutexInit;9954,448400
  int isMallocInit;9955,448477
  int isPCacheInit;9956,448552
  sqlite3_mutex *pInitMutex;pInitMutex9957,448627
  int nRefInitMutex;9958,448704
struct Walker 9964,448840
  int (*xExprCallback)xExprCallback9965,448856
  int (*xSelectCallback)xSelectCallback9966,448931
  Parse *pParse;pParse9967,449002
    NameContext *pNC;pNC9969,449143
    int i;9970,449211
  } u;9971,449278
#define WRC_Continue 9985,449689
#define WRC_Prune 9986,449751
#define WRC_Abort 9987,449829
#define SQLITE_SKIP_UTF8(9993,450026
# define SQLITE_CORRUPT_BKPT 10007,450580
# define SQLITE_CORRUPT_BKPT 10009,450632
# define sqlite3Toupper(10027,451184
# define sqlite3Isspace(10028,451262
# define sqlite3Isalnum(10029,451334
# define sqlite3Isalpha(10030,451406
# define sqlite3Isdigit(10031,451478
# define sqlite3Isxdigit(10032,451550
# define sqlite3Tolower(10033,451622
# define sqlite3Toupper(10035,451699
# define sqlite3Isspace(10036,451756
# define sqlite3Isalnum(10037,451813
# define sqlite3Isalpha(10038,451870
# define sqlite3Isdigit(10039,451927
# define sqlite3Isxdigit(10040,451984
# define sqlite3Tolower(10041,452042
#define sqlite3StrNICmp 10050,452316
# define sqlite3StackAllocRaw(10083,453864
# define sqlite3StackAllocZero(10084,453911
# define sqlite3StackFree(10085,453972
# define sqlite3StackAllocRaw(10087,454016
# define sqlite3StackAllocZero(10088,454077
# define sqlite3StackFree(10089,454139
# define sqlite3ViewGetColumnNames(10184,458750
# define sqlite3AutoincrementBegin(10193,459080
# define sqlite3AutoincrementEnd(10194,459118
# define sqlite3SafetyOn(10298,465623
# define sqlite3SafetyOff(10299,465653
# define sqlite3ParseToplevel(10330,467506
# define sqlite3TriggersExist(10332,467585
# define sqlite3DeleteTrigger(10333,467628
# define sqlite3DropTriggerPtr(10334,467663
# define sqlite3UnlinkAndDeleteTrigger(10335,467699
# define sqlite3CodeRowTrigger(10336,467745
# define sqlite3CodeRowTriggerDirect(10337,467795
# define sqlite3TriggerList(10338,467845
# define sqlite3ParseToplevel(10339,467881
# define sqlite3TriggerOldmask(10340,467916
# define sqlite3AuthRead(10353,468603
# define sqlite3AuthCheck(10354,468637
# define sqlite3AuthContextPush(10355,468687
# define sqlite3AuthContextPop(10356,468726
#define getVarint32(10405,471065
#define putVarint32(10406,471174
#define getVarint 10407,471290
#define putVarint 10408,471328
SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[sqlite3UpperToLower10443,473264
SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[sqlite3CtypeMap10444,473322
SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;10445,473376
SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;10446,473438
SQLITE_PRIVATE int sqlite3PendingByte;10447,473500
# define sqlite3CloseExtensions(10509,476768
  #define sqlite3TableLock(10515,476927
#  define sqlite3VtabClear(10523,477085
#  define sqlite3VtabSync(10524,477115
#  define sqlite3VtabRollback(10525,477156
#  define sqlite3VtabCommit(10526,477189
#  define sqlite3VtabInSync(10527,477220
#  define sqlite3VtabLock(10528,477254
#  define sqlite3VtabUnlock(10529,477284
#  define sqlite3VtabUnlockList(10530,477315
#  define sqlite3VtabInSync(10539,477734
  #define sqlite3FkActions(10574,479833
  #define sqlite3FkCheck(10575,479869
  #define sqlite3FkDropTable(10576,479903
  #define sqlite3FkOldmask(10577,479939
  #define sqlite3FkRequired(10578,479978
  #define sqlite3FkDelete(10583,480109
#define SQLITE_FAULTINJECTOR_MALLOC 10590,480221
#define SQLITE_FAULTINJECTOR_COUNT 10591,480263
  #define sqlite3BeginBenignMalloc(10602,480615
  #define sqlite3EndBenignMalloc(10603,480652
#define IN_INDEX_ROWID 10606,480695
#define IN_INDEX_EPH 10607,480730
#define IN_INDEX_INDEX 10608,480765
  #define sqlite3JournalSize(10616,481114
  #define sqlite3ExprSetHeight(10628,481556
  #define sqlite3SelectExprHeight(10629,481592
  #define sqlite3ExprCheckHeight(10630,481631
  #define sqlite3ConnectionBlocked(10641,482005
  #define sqlite3ConnectionUnlocked(10642,482045
  #define sqlite3ConnectionClosed(10643,482084
# define IOTRACE(10656,482409
# define IOTRACE(10660,482586
# define sqlite3VdbeIOTraceSql(10661,482606
SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[sqlite3UpperToLower10691,483563
SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[sqlite3CtypeMap10754,487038
SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config 10799,489640
SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;10836,491150
SQLITE_PRIVATE int sqlite3PendingByte 10856,492090
typedef struct sqlite3StatType sqlite3StatType;10881,492881
static SQLITE_WSD struct sqlite3StatType 10882,492929
  int nowValue[nowValue10883,492972
  int mxValue[mxValue10884,493019
} sqlite3Stat 10885,493066
# define wsdStatInit 10895,493460
# define wsdStat 10896,493540
# define wsdStatInit10898,493568
# define wsdStat 10899,493589
SQLITE_PRIVATE int sqlite3StatusValue(10905,493683
SQLITE_PRIVATE void sqlite3StatusAdd(10915,493939
SQLITE_PRIVATE void sqlite3StatusSet(10927,494235
SQLITE_API int sqlite3_status(10943,494708
SQLITE_API int sqlite3_db_status(10959,495122
#define HAVE_LOCALTIME_S 11049,498358
typedef struct DateTime DateTime;11055,498450
struct DateTime 11056,498484
  sqlite3_int64 iJD;11057,498502
  int Y,11058,498566
  int Y, M,11058,498566
  int Y, M, D;11058,498566
  int h,11059,498614
  int h, m;11059,498614
  int tz;11060,498658
  double s;11061,498712
  char validYMD;11062,498747
  char validHMS;11063,498802
  char validJD;11064,498857
  char validTZ;11065,498909
static int getDigits(11082,499464
#define getValue 11122,500245
static int parseTimezone(11140,500639
static int parseHhMmSs(11175,501435
static void computeJD(11217,502346
static int parseYyyyMmDd(11263,503305
static void setDateTimeToCurrent(11298,503965
static int parseDateOrTime(11322,504760
static void computeYMD(11348,505398
static void computeHMS(11374,506008
static void computeYMD_HMS(11392,506321
static void clearYMD_HMS_TZ(11400,506441
static sqlite3_int64 localtimeOffset(11412,506707
static int parseModifier(11498,508529
static int isDate(11699,513947
static void juliandayFunc(11740,514879
static void datetimeFunc(11757,515192
static void timeFunc(11777,515655
static void dateFunc(11796,516059
static void strftimeFunc(11829,516856
static void ctimeFunc(11965,520488
static void cdateFunc(11979,520737
static void ctimestampFunc(11993,520995
static void currentTimeFunc(12015,521754
SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(12064,522905
#define _SQLITE_OS_C_ 12109,524700
#undef _SQLITE_OS_C_12110,524724
  #define DO_OS_MALLOC_TEST(12130,525349
  #define DO_OS_MALLOC_TEST(12136,525646
SQLITE_PRIVATE int sqlite3OsClose(12145,525929
SQLITE_PRIVATE int sqlite3OsRead(12153,526107
SQLITE_PRIVATE int sqlite3OsWrite(12157,526272
SQLITE_PRIVATE int sqlite3OsTruncate(12161,526445
SQLITE_PRIVATE int sqlite3OsSync(12164,526557
SQLITE_PRIVATE int sqlite3OsFileSize(12168,526688
SQLITE_PRIVATE int sqlite3OsLock(12172,526828
SQLITE_PRIVATE int sqlite3OsUnlock(12176,526965
SQLITE_PRIVATE int sqlite3OsCheckReservedLock(12179,527081
SQLITE_PRIVATE int sqlite3OsFileControl(12183,527243
SQLITE_PRIVATE int sqlite3OsSectorSize(12186,527375
SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(12190,527571
SQLITE_PRIVATE int sqlite3OsOpen(12198,527782
SQLITE_PRIVATE int sqlite3OsDelete(12215,528324
SQLITE_PRIVATE int sqlite3OsAccess(12218,528459
SQLITE_PRIVATE int sqlite3OsFullPathname(12227,528650
SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3OsDlOpen12236,528873
SQLITE_PRIVATE void sqlite3OsDlError(12239,528988
SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3OsDlSym12242,529113
SQLITE_PRIVATE void sqlite3OsDlClose(12245,529252
SQLITE_PRIVATE int sqlite3OsRandomness(12249,529399
SQLITE_PRIVATE int sqlite3OsSleep(12252,529536
SQLITE_PRIVATE int sqlite3OsCurrentTime(12255,529641
SQLITE_PRIVATE int sqlite3OsOpenMalloc(12259,529767
SQLITE_PRIVATE int sqlite3OsCloseFree(12279,530203
SQLITE_PRIVATE int sqlite3OsInit(12293,530650
static sqlite3_vfs * SQLITE_WSD vfsList 12303,530863
#define vfsList 12304,530908
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(sqlite3_vfs_find12310,531053
static void vfsUnlink(12334,531610
SQLITE_API int sqlite3_vfs_register(12356,532167
SQLITE_API int sqlite3_vfs_unregister(12380,532749
typedef struct BenignMallocHooks BenignMallocHooks;12428,534370
static SQLITE_WSD struct BenignMallocHooks 12429,534422
  void (*xBenignBegin)xBenignBegin12430,534467
  void (*xBenignEnd)xBenignEnd12431,534497
} sqlite3Hooks 12432,534525
# define wsdHooksInit 12441,534924
# define wsdHooks 12443,535013
# define wsdHooksInit12445,535042
# define wsdHooks 12446,535064
SQLITE_PRIVATE void sqlite3BenignMallocHooks(12454,535226
SQLITE_PRIVATE void sqlite3BeginBenignMalloc(12468,535648
SQLITE_PRIVATE void sqlite3EndBenignMalloc(12474,535782
static void *sqlite3MemMalloc(sqlite3MemMalloc12516,537118
static void sqlite3MemFree(12517,537172
static void *sqlite3MemRealloc(sqlite3MemRealloc12518,537224
static int sqlite3MemSize(12519,537293
static int sqlite3MemRoundup(12520,537346
static int sqlite3MemInit(12521,537395
static void sqlite3MemShutdown(12522,537457
SQLITE_PRIVATE void sqlite3MemSetDefault(12530,537730
static void *sqlite3MemMalloc(sqlite3MemMalloc12585,539462
static void sqlite3MemFree(12605,539933
static void *sqlite3MemRealloc(sqlite3MemRealloc12622,540473
static int sqlite3MemSize(12640,540849
static int sqlite3MemRoundup(12651,541066
static int sqlite3MemInit(12658,541159
static void sqlite3MemShutdown(12666,541288
SQLITE_PRIVATE void sqlite3MemSetDefault(12677,541592
# define backtrace(12732,543324
# define backtrace_symbols_fd(12733,543350
struct MemBlockHdr 12749,543979
  i64 iSize;12750,544000
  struct MemBlockHdr *pNext,pNext12751,544068
  struct MemBlockHdr *pNext, *pPrev;pPrev12751,544068
  char nBacktrace;12752,544146
  char nBacktraceSlots;12753,544225
  short nTitle;12754,544295
  int iForeGuard;12755,544369
#define FOREGUARD 12761,544460
#define REARGUARD 12762,544489
#define NCSIZE 12767,544571
  sqlite3_mutex *mutex;mutex12780,544947
  struct MemBlockHdr *pFirst;pFirst12785,545049
  struct MemBlockHdr *pLast;pLast12786,545079
  int nBacktrace;12791,545188
  void (*xBacktrace)xBacktrace12792,545206
  int nTitle;12797,545307
  char zTitle[zTitle12798,545386
  int disallow;12804,545544
  int nAlloc[nAlloc12812,545827
  int nCurrent[nCurrent12813,545888
  int mxCurrent[mxCurrent12814,545951
} mem;12816,546013
static void adjustStats(12822,546062
static struct MemBlockHdr *sqlite3MemsysGetHeader(sqlite3MemsysGetHeader12845,546596
static int sqlite3MemSize(12869,547262
static int sqlite3MemInit(12881,547470
static void sqlite3MemShutdown(12895,547918
static int sqlite3MemRoundup(12903,548082
static void *sqlite3MemMalloc(sqlite3MemMalloc12910,548183
static void sqlite3MemFree(12967,549616
static void *sqlite3MemRealloc(sqlite3MemRealloc13008,550840
SQLITE_PRIVATE void sqlite3MemSetDefault(13028,551440
SQLITE_PRIVATE void sqlite3MemdebugBacktrace(13047,551941
SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(13054,552115
SQLITE_PRIVATE void sqlite3MemdebugSettitle(13061,552300
SQLITE_PRIVATE void sqlite3MemdebugSync(13071,552620
SQLITE_PRIVATE void sqlite3MemdebugDump(13084,552975
SQLITE_PRIVATE int sqlite3MemdebugMallocCount(13126,554227
#define MX_SMALL 13180,556022
#define N_HASH 13186,556083
typedef struct Mem3Block Mem3Block;13220,557703
struct Mem3Block 13221,557739
      u32 prevSize;13224,557781
      u32 size4x;13225,557854
    } hdr;13226,557933
      u32 next;13228,557957
      u32 prev;13229,558026
    } list;13230,558099
  } u;13231,558111
static SQLITE_WSD struct Mem3Global 13240,558383
  u32 nPool;13245,558549
  Mem3Block *aPool;aPool13246,558562
  int alarmBusy;13251,558651
  sqlite3_mutex *mutex;mutex13256,558746
  u32 mnMaster;13261,558840
  u32 iMaster;13269,559142
  u32 szMaster;13270,559157
  u32 aiSmall[aiSmall13277,559325
  u32 aiHash[aiHash13278,559400
} mem3 13279,559467
#define mem3 13281,559491
static void memsys3UnlinkFromList(13287,559656
static void memsys3Unlink(13307,560138
static void memsys3LinkIntoList(13327,560676
static void memsys3Link(13341,561040
static void memsys3Enter(13362,561665
static void memsys3Leave(13368,561857
static void memsys3OutOfMemory(13375,561998
static void *memsys3Checkout(memsys3Checkout13392,562439
static void *memsys3FromMaster(memsys3FromMaster13410,563055
static void memsys3Merge(13455,564834
static void *memsys3MallocUnsafe(memsys3MallocUnsafe13494,565912
void memsys3FreeUnsafe(13576,568104
static int memsys3Size(13617,569693
static int memsys3Roundup(13628,569956
static void *memsys3Malloc(memsys3Malloc13639,570100
void memsys3Free(13651,570350
void *memsys3Realloc(memsys3Realloc13661,570528
static int memsys3Init(13692,571084
static void memsys3Shutdown(13717,571777
SQLITE_PRIVATE void sqlite3Memsys3Dump(13729,571985
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(sqlite3MemGetMemsys313813,574527
typedef struct Mem5Link Mem5Link;13896,577599
struct Mem5Link 13897,577633
  int next;13898,577651
  int prev;13899,577700
#define LOGMAX 13907,577951
#define CTRL_LOGSIZE 13912,578017
#define CTRL_FREE 13913,578077
static SQLITE_WSD struct Mem5Global 13921,578399
  int szAtom;13925,578484
  int nBlock;13926,578547
  u8 *zPool;zPool13927,578611
  sqlite3_mutex *mutex;mutex13932,578747
  u64 nAlloc;13937,578810
  u64 totalAlloc;13938,578870
  u64 totalExcess;13939,578949
  u32 currentOut;13940,579006
  u32 currentCount;13941,579085
  u32 maxOut;13942,579150
  u32 maxCount;13943,579211
  u32 maxRequest;13944,579274
  int aiFreelist[aiFreelist13951,579521
  u8 *aCtrl;aCtrl13957,579667
} mem5 13959,579681
#define mem5 13964,579770
#define MEM5LINK(13970,579941
static void memsys5Unlink(13976,580137
static void memsys5Link(13998,580633
static void memsys5Enter(14019,581234
static void memsys5Leave(14022,581303
static int memsys5Size(14031,581557
static int memsys5UnlinkFirst(14045,581888
static void *memsys5MallocUnsafe(memsys5MallocUnsafe14070,582534
static void memsys5FreeUnsafe(14128,584368
static void *memsys5Malloc(memsys5Malloc14184,586011
static void memsys5Free(14200,586317
static void *memsys5Realloc(memsys5Realloc14219,586913
static int memsys5Roundup(14251,587669
static int memsys5Log(14268,588095
static int memsys5Init(14280,588380
static void memsys5Shutdown(14337,590008
SQLITE_PRIVATE void sqlite3Memsys5Dump(14348,590233
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(sqlite3MemGetMemsys514391,591610
static SQLITE_WSD int mutexIsInit 14434,592946
SQLITE_PRIVATE int sqlite3MutexInit(14442,593077
SQLITE_PRIVATE int sqlite3MutexEnd(14473,594138
SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(sqlite3_mutex_alloc14489,594453
SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(sqlite3MutexAlloc14496,594638
SQLITE_API void sqlite3_mutex_free(14507,594878
SQLITE_API void sqlite3_mutex_enter(14517,595103
SQLITE_API int sqlite3_mutex_try(14527,595379
SQLITE_API void sqlite3_mutex_leave(14541,595785
SQLITE_API int sqlite3_mutex_held(14552,596041
SQLITE_API int sqlite3_mutex_notheld(14555,596154
static int noopMutexHeld(14601,597666
static int noopMutexNotheld(14602,597722
static int noopMutexInit(14603,597781
static int noopMutexEnd(14604,597833
static sqlite3_mutex *noopMutexAlloc(noopMutexAlloc14605,597884
static void noopMutexFree(14606,597958
static void noopMutexEnter(14607,598013
static int noopMutexTry(14608,598069
static void noopMutexLeave(14609,598132
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex14611,598189
struct sqlite3_mutex 14639,598805
  int id;14640,598828
  int cnt;14641,598863
static int debugMutexHeld(14648,599052
static int debugMutexNotheld(14651,599126
static int debugMutexInit(14658,599263
static int debugMutexEnd(14659,599316
static sqlite3_mutex *debugMutexAlloc(debugMutexAlloc14666,599538
static void debugMutexFree(14693,600123
static void debugMutexEnter(14710,600906
static int debugMutexTry(14714,601034
static void debugMutexLeave(14726,601420
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex14732,601580
struct sqlite3_mutex 14783,603011
  HMTX mutex;14784,603034
  int  id;14785,603087
  int  nRef;14786,603124
  TID  owner;14787,603171
#define OS2_MUTEX_INITIALIZER 14790,603227
static int os2MutexInit(14795,603326
static int os2MutexEnd(14796,603377
static sqlite3_mutex *os2MutexAlloc(os2MutexAlloc14837,605307
static void os2MutexFree(14905,607228
static void os2MutexEnter(14924,608065
static int os2MutexTry(14935,608381
static void os2MutexLeave(14960,609051
static int os2MutexHeld(14978,609513
static int os2MutexNotheld(14991,609816
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex15006,610129
struct sqlite3_mutex 15058,611489
  pthread_mutex_t mutex;15059,611512
  int id;15060,611574
  int nRef;15061,611620
  pthread_t owner;15062,611675
  int trace;15064,611763
#define SQLITE3_MUTEX_INITIALIZER 15068,611850
#define SQLITE3_MUTEX_INITIALIZER 15070,611943
static int pthreadMutexHeld(15090,612901
static int pthreadMutexNotheld(15093,613016
static int pthreadMutexInit(15101,613201
static int pthreadMutexEnd(15102,613256
static sqlite3_mutex *pthreadMutexAlloc(pthreadMutexAlloc15146,615237
static void pthreadMutexFree(15201,616741
static void pthreadMutexEnter(15219,617563
static int pthreadMutexTry(15258,618844
static void pthreadMutexLeave(15313,620558
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex15333,620985
struct sqlite3_mutex 15383,622268
  CRITICAL_SECTION mutex;15384,622291
  int id;15385,622353
  int nRef;15386,622399
  DWORD owner;15387,622455
# define mutexIsNT(15409,623357
  static int mutexIsNT(15411,623389
static int winMutexHeld(15429,623853
static int winMutexNotheld(15432,623953
static sqlite3_mutex winMutex_staticMutexes[winMutex_staticMutexes15441,624123
static int winMutex_isInit 15442,624171
static long winMutex_lock 15448,624394
static int winMutexInit(15450,624426
static int winMutexEnd(15467,624908
static sqlite3_mutex *winMutexAlloc(winMutexAlloc15524,627264
static void winMutexFree(15555,627951
static void winMutexEnter(15574,628784
static int winMutexTry(15580,628980
static void winMutexLeave(15612,630019
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex15620,630239
static void softHeapLimitEnforcer(15666,631405
SQLITE_API void sqlite3_soft_heap_limit(15679,631695
SQLITE_API int sqlite3_release_memory(15706,632340
static SQLITE_WSD struct Mem0Global 15723,632682
  u32 nScratchFree;15725,632783
  u32 nPageFree;15726,632803
  sqlite3_mutex *mutex;mutex15728,632821
  sqlite3_int64 alarmThreshold;15736,633112
  void (*alarmCallback)alarmCallback15737,633144
  void *alarmArg;alarmArg15738,633195
  u32 *aScratchFree;aScratchFree15745,633382
  u32 *aPageFree;aPageFree15746,633403
} mem0 15747,633421
#define mem0 15749,633459
SQLITE_PRIVATE int sqlite3MallocInit(15754,633558
SQLITE_PRIVATE void sqlite3MallocEnd(15796,635172
SQLITE_API sqlite3_int64 sqlite3_memory_used(15806,635427
SQLITE_API sqlite3_int64 sqlite3_memory_highwater(15819,635820
SQLITE_PRIVATE int sqlite3MemoryAlarm(15830,636114
SQLITE_API int sqlite3_memory_alarm(15848,636575
static void sqlite3MallocAlarm(15860,636810
static int mallocWithAlarm(15880,637382
SQLITE_PRIVATE void *sqlite3Malloc(sqlite3Malloc15909,638212
SQLITE_API void *sqlite3_malloc(sqlite3_malloc15933,639061
static int scratchAllocOut 15947,639513
SQLITE_PRIVATE void *sqlite3ScratchMalloc(sqlite3ScratchMalloc15959,639904
SQLITE_PRIVATE void sqlite3ScratchFree(16010,641423
static int isLookaside(16053,642903
#define isLookaside(16057,643026
SQLITE_PRIVATE int sqlite3MallocSize(16064,643174
SQLITE_PRIVATE int sqlite3DbMallocSize(16067,643264
SQLITE_API void sqlite3_free(16079,643557
SQLITE_PRIVATE void sqlite3DbFree(16095,643977
SQLITE_PRIVATE void *sqlite3Realloc(sqlite3Realloc16110,644351
SQLITE_API void *sqlite3_realloc(sqlite3_realloc16155,645662
SQLITE_PRIVATE void *sqlite3MallocZero(sqlite3MallocZero16166,645864
SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3DbMallocZero16178,646110
SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3DbMallocRaw16204,647014
SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3DbRealloc16239,647861
SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3DbReallocOrFree16270,648595
SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3DbStrDup16286,649114
SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3DbStrNDup16300,649399
SQLITE_PRIVATE void sqlite3SetString(16319,649843
SQLITE_PRIVATE int sqlite3ApiExit(16344,650625
#define etRADIX 16419,653741
#define etFLOAT 16420,653812
#define etEXP 16421,653862
#define etGENERIC 16422,653926
#define etSIZE 16423,654007
#define etSTRING 16424,654086
#define etDYNSTRING 16425,654128
#define etPERCENT 16426,654192
#define etCHARX 16427,654241
#define etSQLESCAPE 16429,654348
#define etSQLESCAPE2 16430,654409
#define etTOKEN 16432,654551
#define etSRCLIST 16433,654612
#define etPOINTER 16434,654665
#define etSQLESCAPE3 16435,654713
#define etORDINAL 16436,654775
#define etINVALID 16438,654851
typedef unsigned char etByte;16444,654965
typedef struct et_info 16450,655119
  char fmttype;16451,655188
  etByte base;16452,655250
  etByte flags;16453,655313
  etByte type;16454,655383
  etByte charset;16455,655436
  etByte prefix;16456,655512
} et_info;16457,655588
#define FLAG_SIGNED 16462,655642
#define FLAG_INTERN 16463,655714
#define FLAG_STRING 16464,655777
static const char aDigits[aDigits16471,655961
static const char aPrefix[aPrefix16472,656027
static const et_info fmtinfo[fmtinfo16473,656070
static char et_getdigit(16522,657726
static void appendSpace(16537,658056
#   define SQLITE_PRINT_BUF_SIZE 16554,658547
#   define SQLITE_PRINT_BUF_SIZE 16556,658590
#define etBUFSIZE 16559,658642
SQLITE_PRIVATE void sqlite3VXPrintf(16588,659764
SQLITE_PRIVATE void sqlite3StrAccumAppend(17099,676888
SQLITE_PRIVATE char *sqlite3StrAccumFinish(sqlite3StrAccumFinish17151,678094
SQLITE_PRIVATE void sqlite3StrAccumReset(17169,678517
SQLITE_PRIVATE void sqlite3StrAccumInit(17179,678700
SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3VMPrintf17194,679044
SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3MPrintf17214,679582
SQLITE_PRIVATE char *sqlite3MAppendf(sqlite3MAppendf17231,680045
SQLITE_API char *sqlite3_vmprintf(sqlite3_vmprintf17245,680386
SQLITE_API char *sqlite3_mprintf(sqlite3_mprintf17262,680862
SQLITE_API char *sqlite3_snprintf(sqlite3_snprintf17280,681358
SQLITE_PRIVATE void sqlite3DebugPrintf(17303,681933
static SQLITE_WSD struct sqlite3PrngType 17344,683234
  unsigned char isInit;17345,683277
  unsigned char i,17346,683336
  unsigned char i, j;17346,683336
  unsigned char s[s17347,683391
} sqlite3Prng;17348,683446
static u8 randomByte(17366,684258
# define wsdPrng 17378,684767
# define wsdPrng 17380,684795
SQLITE_API void sqlite3_randomness(17425,685968
static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;17447,686614
SQLITE_PRIVATE void sqlite3PrngSaveState(17448,686673
SQLITE_PRIVATE void sqlite3PrngRestoreState(17455,686867
SQLITE_PRIVATE void sqlite3PrngResetState(17462,687064
#define _VDBEINT_H_17528,689567
typedef struct VdbeOp Op;17535,689751
typedef unsigned char Bool;17540,689802
struct VdbeCursor 17557,690514
  BtCursor *pCursor;pCursor17558,690534
  int iDb;17559,690600
  i64 lastRowid;17560,690676
  Bool zeroed;17561,690750
  Bool rowidIsValid;17562,690819
  Bool atFirst;17563,690876
  Bool useRandomRowid;17564,690938
  Bool nullRow;17565,691010
  Bool deferredMoveto;17566,691079
  Bool isTable;17567,691150
  Bool isIndex;17568,691219
  i64 movetoTarget;17569,691297
  Btree *pBt;pBt17570,691373
  int pseudoTableReg;17571,691441
  KeyInfo *pKeyInfo;pKeyInfo17572,691509
  int nField;17573,691585
  i64 seqCount;17574,691646
  sqlite3_vtab_cursor *pVtabCursor;pVtabCursor17575,691693
  const sqlite3_module *pModule;pModule17576,691767
  int seekResult;17580,691953
  u32 cacheStatus;17591,692384
  int payloadSize;17592,692459
  u32 *aType;aType17593,692525
  u32 *aOffset;aOffset17594,692597
  u8 *aRow;aRow17595,692676
typedef struct VdbeCursor VdbeCursor;17597,692754
typedef struct VdbeFrame VdbeFrame;17612,693426
struct VdbeFrame 17613,693462
  Vdbe *v;v17614,693481
  int pc;17615,693538
  Op *aOp;aOp17616,693586
  int nOp;17617,693639
  Mem *aMem;aMem17618,693689
  int nMem;17619,693743
  VdbeCursor **apCsr;apCsr17620,693801
  u16 nCursor;17621,693857
  void *token;token17622,693916
  int nChildMem;17623,693973
  int nChildCsr;17624,694044
  i64 lastRowid;17625,694110
  int nChange;17626,694180
  VdbeFrame *pParent;pParent17627,694250
#define VdbeFrameMem(17630,694307
#define CACHE_STALE 17635,694462
struct Mem 17648,694969
    i64 i;17650,694992
    int nZero;17651,695037
    FuncDef *pDef;pDef17652,695106
    RowSet *pRowSet;pRowSet17653,695166
    VdbeFrame *pFrame;pFrame17654,695229
  } u;17655,695286
  double r;17656,695293
  sqlite3 *db;db17657,695332
  char *z;z17658,695395
  int n;17659,695444
  u16 flags;17660,695525
  u8  type;17661,695606
  u8  enc;17662,695687
  void (*xDel)xDel17663,695759
  char *zMalloc;zMalloc17664,695838
#define MEM_Null 17682,696597
#define MEM_Str 17683,696648
#define MEM_Int 17684,696703
#define MEM_Real 17685,696760
#define MEM_Blob 17686,696820
#define MEM_RowSet 17687,696873
#define MEM_Frame 17688,696935
#define MEM_TypeMask 17689,697000
#define MEM_Term 17696,697307
#define MEM_Dyn 17697,697373
#define MEM_Static 17698,697445
#define MEM_Ephem 17699,697514
#define MEM_Agg 17700,697587
#define MEM_Zero 17701,697664
  #undef MEM_Zero17704,697774
  #define MEM_Zero 17705,697792
#define MemSetTypeFlag(17712,697901
struct VdbeFunc 17725,698514
  FuncDef *pFunc;pFunc17726,698532
  int nAux;17727,698601
  struct AuxData 17728,698679
    void *pAux;pAux17729,698698
    void (*xDelete)xDelete17730,698769
  } apAux[apAux17731,698837
struct sqlite3_context 17747,699464
  FuncDef *pFunc;pFunc17748,699489
  VdbeFunc *pVdbeFunc;pVdbeFunc17749,699567
  Mem s;17750,699624
  Mem *pMem;pMem17751,699686
  int isError;17752,699760
  CollSeq *pColl;pColl17753,699827
typedef struct Set Set;17762,700063
struct Set 17763,700087
  Hash hash;17764,700100
  HashElem *prev;prev17765,700158
struct Vdbe 17783,700936
  sqlite3 *db;db17784,700950
  Vdbe *pPrev,pPrev17785,701031
  Vdbe *pPrev,*pNext;pNext17785,701031
  int nOp;17786,701106
  int nOpAlloc;17787,701176
  Op *aOp;aOp17788,701244
  int nLabel;17789,701320
  int nLabelAlloc;17790,701374
  int *aLabel;aLabel17791,701444
  Mem **apArg;apArg17792,701501
  Mem *aColName;aColName17793,701580
  Mem *pResultSet;pResultSet17794,701635
  u16 nResColumn;17795,701698
  u16 nCursor;17796,701777
  VdbeCursor **apCsr;apCsr17797,701836
  u8 errorAction;17798,701915
  u8 okVar;17799,701989
  u16 nVar;17800,702058
  Mem *aVar;aVar17801,702118
  char **azVar;azVar17802,702185
  u32 magic;17803,702235
  int nMem;17804,702300
  Mem *aMem;aMem17805,702379
  u32 cacheCtr;17806,702432
  int pc;17807,702504
  int rc;17808,702556
  char *zErrMsg;zErrMsg17809,702604
  u8 explain;17810,702663
  u8 changeCntOn;17811,702734
  u8 expired;17812,702800
  u8 minWriteFileFormat;17813,702870
  u8 inVtabMethod;17814,702950
  u8 usesStmtJournal;17815,703001
  u8 readOnly;17816,703066
  u8 isPrepareV2;17817,703128
  int nChange;17818,703195
  int btreeMask;17819,703270
  i64 startTime;17820,703342
  BtreeMutexArray aMutex;17821,703419
  int aCounter[aCounter17822,703497
  char *zSql;zSql17823,703568
  void *pFree;pFree17824,703646
  i64 nFkConstraint;17825,703711
  i64 nStmtDefCons;17826,703781
  int iStatement;17827,703858
  FILE *trace;trace17829,703957
  VdbeFrame *pFrame;pFrame17831,704039
  int nFrame;17832,704084
#define VDBE_MAGIC_INIT 17838,704209
#define VDBE_MAGIC_RUN 17839,704281
#define VDBE_MAGIC_HALT 17840,704354
#define VDBE_MAGIC_DEAD 17841,704431
# define sqlite3VdbeCheckFk(17902,707436
# define sqlite3VdbeMutexArrayEnter(17908,707575
  #define sqlite3VdbeMemExpandBlob(17921,707970
SQLITE_PRIVATE const int sqlite3one 17934,708356
static const unsigned char sqlite3Utf8Trans1[sqlite3Utf8Trans117941,708531
#define WRITE_UTF8(17953,708987
#define WRITE_UTF16LE(17973,710016
#define WRITE_UTF16BE(17985,710719
#define READ_UTF16LE(17997,711422
#define READ_UTF16BE(18007,712001
#define READ_UTF8(18044,713701
SQLITE_PRIVATE int sqlite3Utf8Read(18055,714315
SQLITE_PRIVATE int sqlite3VdbeMemTranslate(18093,715357
SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(18237,719597
SQLITE_PRIVATE int sqlite3Utf8CharLen(18275,720586
SQLITE_PRIVATE int sqlite3Utf8To8(18305,721367
SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3Utf16to818329,721943
SQLITE_PRIVATE char *sqlite3Utf8to16(sqlite3Utf8to1618355,722878
SQLITE_PRIVATE int sqlite3Utf16ByteLen(18375,723423
SQLITE_PRIVATE void sqlite3UtfSelfTest(18408,724579
SQLITE_PRIVATE void sqlite3Coverage(18484,726474
SQLITE_PRIVATE int sqlite3IsNaN(18496,726791
SQLITE_PRIVATE int sqlite3Strlen30(18543,728578
SQLITE_PRIVATE void sqlite3Error(18571,729486
SQLITE_PRIVATE void sqlite3ErrorMsg(18604,730692
SQLITE_PRIVATE void sqlite3ErrorClear(18618,731044
SQLITE_PRIVATE int sqlite3Dequote(18641,731828
#define UpperToLower 18670,732433
SQLITE_PRIVATE int sqlite3StrICmp(18676,732601
SQLITE_API int sqlite3_strnicmp(18683,732884
SQLITE_PRIVATE int sqlite3IsNumber(18704,733739
SQLITE_PRIVATE int sqlite3AtoF(18742,734887
static int compare2pow63(18883,738634
SQLITE_PRIVATE int sqlite3Atoi64(18903,739184
SQLITE_PRIVATE int sqlite3FitsIn64Bits(18956,740863
SQLITE_PRIVATE int sqlite3GetInt32(18987,741780
SQLITE_PRIVATE int sqlite3PutVarint(19049,743210
SQLITE_PRIVATE int sqlite3PutVarint32(19082,744046
SQLITE_PRIVATE u8 sqlite3GetVarint(19101,744473
SQLITE_PRIVATE u8 sqlite3GetVarint32(19267,747624
SQLITE_PRIVATE int sqlite3VarintLen(19390,750207
SQLITE_PRIVATE u32 sqlite3Get4byte(19403,750402
SQLITE_PRIVATE void sqlite3Put4byte(19406,750506
static u8 hexToInt(19421,750869
SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3HexToBlob19440,751457
SQLITE_PRIVATE int sqlite3SafetyOn(19483,753081
SQLITE_PRIVATE int sqlite3SafetyOff(19502,753590
SQLITE_PRIVATE int sqlite3SafetyCheckOk(19529,754594
SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(19543,754846
SQLITE_PRIVATE void sqlite3HashInit(19576,755904
SQLITE_PRIVATE void sqlite3HashClear(19588,756208
static unsigned int strHash(19608,756600
static void insertElement(19622,756921
static int rehash(19656,757898
static HashElem *findElementGivenHash(findElementGivenHash19692,759186
static void removeElementGivenHash(19721,760060
SQLITE_PRIVATE void *sqlite3HashFind(sqlite3HashFind19756,760941
SQLITE_PRIVATE void *sqlite3HashInsert(sqlite3HashInsert19786,761941
SQLITE_PRIVATE const char *sqlite3OpcodeName(sqlite3OpcodeName19837,763512
# define SQLITE_OS2_THREADS 20041,769515
#define _OS_COMMON_H_20071,770504
SQLITE_PRIVATE int sqlite3OSTrace 20083,770873
#define OSTRACE1(20084,770912
#define OSTRACE2(20085,770983
#define OSTRACE3(20086,771056
#define OSTRACE4(20087,771131
#define OSTRACE5(20088,771208
#define OSTRACE6(20089,771287
#define OSTRACE7(20091,771374
#define OSTRACE1(20094,771471
#define OSTRACE2(20095,771491
#define OSTRACE3(20096,771513
#define OSTRACE4(20097,771537
#define OSTRACE5(20098,771563
#define OSTRACE6(20099,771591
#define OSTRACE7(20100,771621
#define _HWTIME_H_20133,772616
  __inline__ sqlite_uint64 sqlite3Hwtime(20146,773008
  __declspec(20154,773216
  __inline__ sqlite_uint64 sqlite3Hwtime(20165,773431
  __inline__ sqlite_uint64 sqlite3Hwtime(20173,773626
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(20197,774368
static sqlite_uint64 g_start;20206,774654
static sqlite_uint64 g_elapsed;20207,774684
#define TIMER_START 20208,774716
#define TIMER_END 20209,774766
#define TIMER_ELAPSED 20210,774826
#define TIMER_START20212,774868
#define TIMER_END20213,774888
#define TIMER_ELAPSED 20214,774906
SQLITE_API int sqlite3_io_error_hit 20223,775177
SQLITE_API int sqlite3_io_error_hardhit 20224,775262
SQLITE_API int sqlite3_io_error_pending 20225,775348
SQLITE_API int sqlite3_io_error_persist 20226,775436
SQLITE_API int sqlite3_io_error_benign 20227,775521
SQLITE_API int sqlite3_diskfull_pending 20228,775605
SQLITE_API int sqlite3_diskfull 20229,775650
#define SimulateIOErrorBenign(20230,775687
#define SimulateIOError(20231,775748
static void local_ioerr(20235,775926
#define SimulateDiskfullError(20240,776066
#define SimulateIOErrorBenign(20252,776361
#define SimulateIOError(20253,776394
#define SimulateDiskfullError(20254,776421
SQLITE_API int sqlite3_open_file_count 20261,776546
#define OpenCounter(20262,776590
#define OpenCounter(20264,776649
typedef struct os2File os2File;20276,776982
struct os2File 20277,777014
  const sqlite3_io_methods *pMethod;pMethod20278,777031
  HFILE h;20279,777098
  char* pathToDel;20280,777162
  unsigned char locktype;20281,777241
#define LOCK_TIMEOUT 20284,777320
static int os2Close(20294,777666
static int os2Read(20318,778293
static int os2Write(20349,779307
static int os2Truncate(20381,780314
SQLITE_API int sqlite3_sync_count 20395,780795
SQLITE_API int sqlite3_fullsync_count 20396,780834
static int os2Sync(20402,780959
static int os2FileSize(20425,781522
static int getReadLock(20443,782017
static int unlockReadLock(20461,782505
static int os2Lock(20502,783932
static int os2CheckReservedLock(20638,788517
static int os2Unlock(20684,790154
static int os2FileControl(20739,792118
static int os2SectorSize(20760,792835
static int os2DeviceCharacteristics(20767,792971
static UconvObject ucUtf8 20775,793113
static UconvObject uclCp 20776,793185
static void initUconvObjects(20781,793348
static void freeUconvObjects(20791,793643
static char *convertUtf8PathToCp(convertUtf8PathToCp20806,794061
char *convertCpPathToUtf8(convertCpPathToUtf820835,795019
static const sqlite3_io_methods os2IoMethod 20859,795674
static int getTempname(20885,796353
static int os2FullPathname(20940,798226
static int os2Open(20962,798937
static int os2Delete(21077,802415
static int os2Access(21094,802983
static void *os2DlOpen(os2DlOpen21137,804477
static void os2DlError(21150,804926
static void *os2DlSym(os2DlSym21153,805008
static void os2DlClose(21167,805552
  #define os2DlOpen 21171,805701
  #define os2DlError 21172,805723
  #define os2DlSym 21173,805746
  #define os2DlClose 21174,805767
static int os2Randomness(21181,805856
static int os2Sleep(21248,807809
SQLITE_API int sqlite3_current_time 21258,808085
int os2CurrentTime(21266,808334
static int os2GetLastError(21301,809360
SQLITE_API int sqlite3_os_init(21308,809513
SQLITE_API int sqlite3_os_end(21334,810356
#    define SQLITE_ENABLE_LOCKING_STYLE 21409,813361
#    define SQLITE_ENABLE_LOCKING_STYLE 21411,813411
#    define OS_VXWORKS 21421,813636
#    define OS_VXWORKS 21423,813669
# define _LARGE_FILE 21446,814700
#   define _FILE_OFFSET_BITS 21448,814756
# define _LARGEFILE_SOURCE 21450,814796
# define SQLITE_UNIX_THREADS 21480,815375
# define SQLITE_DEFAULT_FILE_PERMISSIONS 21487,815508
# define SQLITE_DEFAULT_PROXYDIR_PERMISSIONS 21494,815666
#define MAX_PATHNAME 21500,815764
#define IS_LOCK_ERROR(21506,815926
typedef struct UnixUnusedFd UnixUnusedFd;21515,816268
struct UnixUnusedFd 21516,816310
  int fd;21517,816332
  int flags;21518,816391
  UnixUnusedFd *pNext;pNext21519,816468
typedef struct unixFile unixFile;21526,816652
struct unixFile 21527,816686
  sqlite3_io_methods const *pMethod;pMethod21528,816704
  struct unixOpenCnt *pOpen;pOpen21529,816771
  struct unixLockInfo *pLock;pLock21530,816851
  int h;21531,816923
  int dirfd;21532,816984
  unsigned char locktype;21533,817059
  int lastErrno;21534,817133
  void *lockingContext;lockingContext21535,817213
  UnixUnusedFd *pUnused;pUnused21536,817283
  int fileFlags;21537,817351
  int openFlags;21539,817443
  pthread_t tid;21542,817565
  int isDelete;21545,817665
  struct vxworksFileId *pId;pId21546,817730
  unsigned char transCntrChng;21556,818203
  unsigned char dbUpdate;21557,818282
  unsigned char inNormalWrite;21558,818363
  char aPadding[aPadding21564,818603
#define SQLITE_WHOLE_FILE_LOCKING 21571,818699
#define _OS_COMMON_H_21600,819724
SQLITE_PRIVATE int sqlite3OSTrace 21612,820093
#define OSTRACE1(21613,820132
#define OSTRACE2(21614,820203
#define OSTRACE3(21615,820276
#define OSTRACE4(21616,820351
#define OSTRACE5(21617,820428
#define OSTRACE6(21618,820507
#define OSTRACE7(21620,820594
#define OSTRACE1(21623,820691
#define OSTRACE2(21624,820711
#define OSTRACE3(21625,820733
#define OSTRACE4(21626,820757
#define OSTRACE5(21627,820783
#define OSTRACE6(21628,820811
#define OSTRACE7(21629,820841
#define _HWTIME_H_21662,821836
  __inline__ sqlite_uint64 sqlite3Hwtime(21675,822228
  __declspec(21683,822436
  __inline__ sqlite_uint64 sqlite3Hwtime(21694,822651
  __inline__ sqlite_uint64 sqlite3Hwtime(21702,822846
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(21726,823588
static sqlite_uint64 g_start;21735,823874
static sqlite_uint64 g_elapsed;21736,823904
#define TIMER_START 21737,823936
#define TIMER_END 21738,823986
#define TIMER_ELAPSED 21739,824046
#define TIMER_START21741,824088
#define TIMER_END21742,824108
#define TIMER_ELAPSED 21743,824126
SQLITE_API int sqlite3_io_error_hit 21752,824397
SQLITE_API int sqlite3_io_error_hardhit 21753,824482
SQLITE_API int sqlite3_io_error_pending 21754,824568
SQLITE_API int sqlite3_io_error_persist 21755,824656
SQLITE_API int sqlite3_io_error_benign 21756,824741
SQLITE_API int sqlite3_diskfull_pending 21757,824825
SQLITE_API int sqlite3_diskfull 21758,824870
#define SimulateIOErrorBenign(21759,824907
#define SimulateIOError(21760,824968
static void local_ioerr(21764,825146
#define SimulateDiskfullError(21769,825286
#define SimulateIOErrorBenign(21781,825581
#define SimulateIOError(21782,825614
#define SimulateDiskfullError(21783,825641
SQLITE_API int sqlite3_open_file_count 21790,825766
#define OpenCounter(21791,825810
#define OpenCounter(21793,825869
# define O_LARGEFILE 21805,826186
# undef O_LARGEFILE21808,826242
# define O_LARGEFILE 21809,826262
# define O_NOFOLLOW 21812,826311
# define O_BINARY 21815,826357
# define fcntl(21825,826663
#define threadid 21833,826821
#define threadid 21835,826859
static void unixEnterMutex(21853,827374
static void unixLeaveMutex(21856,827480
static int unixMutexHeld(21860,827606
static const char *locktypeName(locktypeName21872,827910
static int lockTrace(21893,828510
#define fcntl 21940,829756
static int sqliteErrorFromPosixError(21955,830261
struct vxworksFileId 22029,832542
  struct vxworksFileId *pNext;pNext22030,832565
  int nRef;22031,832630
  int nName;22032,832701
  char *zCanonicalName;zCanonicalName22033,832777
static struct vxworksFileId *vxworksFileList vxworksFileList22041,832938
static int vxworksSimplifyName(22056,833382
static struct vxworksFileId *vxworksFindFileId(vxworksFindFileId22090,834275
static void vxworksReleaseFileId(22132,835673
# define SET_THREADID(22259,842222
# define CHECK_THREADID(22260,842275
# define SET_THREADID(22263,842418
# define CHECK_THREADID(22264,842443
struct unixFileId 22272,842694
  dev_t dev;22273,842714
  struct vxworksFileId *pId;pId22275,842779
  ino_t ino;22277,842849
struct unixLockKey 22291,843358
  struct unixFileId fid;22292,843379
  pthread_t tid;22294,843486
struct unixLockInfo 22307,843969
  struct unixLockKey lockKey;22308,843991
  int cnt;22309,844046
  int locktype;22310,844114
  int nRef;22311,844193
  struct unixLockInfo *pNext;pNext22312,844270
  struct unixLockInfo *pPrev;pPrev22313,844343
struct unixOpenCnt 22328,844980
  struct unixFileId fileId;22329,845001
  int nRef;22330,845052
  int nLock;22331,845125
  UnixUnusedFd *pUnused;pUnused22332,845189
  sem_t *pSem;pSem22334,845273
  char aSemName[aSemName22335,845336
  struct unixOpenCnt *pNext,pNext22337,845407
  struct unixOpenCnt *pNext, *pPrev;pPrev22337,845407
static struct unixLockInfo *lockList lockList22346,845753
static struct unixOpenCnt *openList openList22347,845795
#    define SQLITE_THREAD_OVERRIDE_LOCK 22369,846694
int threadsOverrideEachOthersLocks 22372,846767
static int threadsOverrideEachOthersLocks 22374,846841
struct threadTestData 22382,847056
  int fd;22383,847080
  struct flock lock;22384,847129
  int result;22385,847182
static void *threadLockingTest(threadLockingTest22398,847716
static void testThreadLockingBehavior(22412,848174
static void releaseLockInfo(22447,849027
static void releaseOpenCnt(22474,849729
static int findLockInfo(22516,851085
static int transferOwnership(22646,855195
# define transferOwnership(22679,856259
static int unixCheckReservedLock(22689,856634
static int rangeLock(22756,858998
static int unixLock(22810,860603
static int closePendingFds(23050,868722
static void setPendingFd(23075,869276
static int unixUnlock(23091,869745
static int closeUnixFile(23219,873879
static int unixClose(23258,874715
static int nolockCheckReservedLock(23300,876427
static int nolockLock(23305,876567
static int nolockUnlock(23309,876689
static int nolockClose(23317,876839
#define DOTLOCK_SUFFIX 23350,878227
static int dotlockCheckReservedLock(23362,878767
static int dotlockLock(23413,880462
static int dotlockUnlock(23466,881907
static int dotlockClose(23508,882996
static int flockCheckReservedLock(23544,884444
static int flockLock(23626,886904
static int flockUnlock(23670,888132
static int flockClose(23713,889143
static int semCheckReservedLock(23743,890285
static int semLock(23811,892351
static int semUnlock(23845,893226
static int semClose(23882,894088
typedef struct afpLockingContext afpLockingContext;23918,895159
struct afpLockingContext 23919,895211
  unsigned long long sharedByte;23920,895238
  const char *dbPath;dbPath23921,895271
struct ByteRangeLockPB223924,895337
  unsigned long long offset;23926,895363
  unsigned long long length;23927,895434
  unsigned long long retRangeStart;23928,895497
  unsigned char unLockFlag;23929,895576
  unsigned char startEndFlag;23930,895639
  int fd;23931,895718
#define afpfsByteRangeLock2FSCTL 23934,895798
static int afpSetLock(23942,896032
static int afpCheckReservedLock(23988,897603
static int afpLock(24051,899490
static int afpUnlock(24195,904138
static int afpClose(24254,905881
static int seekAndRead(24309,908022
static int unixRead(24345,908956
static int seekAndWrite(24383,909995
static int unixWrite(24417,910804
SQLITE_API int sqlite3_sync_count 24481,912645
SQLITE_API int sqlite3_fullsync_count 24482,912684
# define fdatasync 24492,913048
# define HAVE_FULLFSYNC 24501,913287
# define HAVE_FULLFSYNC 24503,913319
static int full_fsync(24531,914643
static int unixSync(24609,917110
static int unixTruncate(24668,918988
static int unixFileSize(24684,919350
static int unixFileControl(24720,920290
static int unixSectorSize(24761,921607
static int unixDeviceCharacteristics(24769,921810
#define IOMETHODS(24814,923550
IOMETHODS(24842,925395
IOMETHODS(24931,929027
  static const struct Mapping 24954,929847
    const char *zFilesystem;zFilesystem24955,929879
    const sqlite3_io_methods *pMethods;pMethods24956,929948
static const sqlite3_io_methods *autolockIoFinderImpl(autolockIoFinderImpl25017,931726
typedef const sqlite3_io_methods *(*finder_type)finder_type25050,932677
static int fillInUnixFile(25063,933079
static int openDirectory(25228,938418
static int getTempname(25254,939138
static UnixUnusedFd *findReusableFd(findReusableFd25335,941701
static int unixOpen(25398,943958
static int unixDelete(25603,951231
static int unixAccess(25644,952293
static int unixFullPathname(25681,953348
static void *unixDlOpen(unixDlOpen25719,954499
static void unixDlError(25731,954964
static void (*unixDlSym(unixDlSym25741,955208
static void unixDlClose(25764,956288
  #define unixDlOpen 25769,956455
  #define unixDlError 25770,956479
  #define unixDlSym 25771,956503
  #define unixDlClose 25772,956527
static int unixRandomness(25778,956629
static int unixSleep(25825,958222
SQLITE_API int sqlite3_current_time 25852,958947
static int unixCurrentTime(25860,959243
static int unixGetLastError(25895,960277
SQLITE_API int sqlite3_hostid_num 26071,967938
typedef struct proxyLockingContext proxyLockingContext;26078,968098
struct proxyLockingContext 26079,968154
  unixFile *conchFile;conchFile26080,968183
  char *conchFilePath;conchFilePath26081,968236
  unixFile *lockProxy;lockProxy26082,968296
  char *lockProxyPath;lockProxyPath26083,968354
  char *dbPath;dbPath26084,968419
  int conchHeld;26085,968478
  void *oldLockingContext;oldLockingContext26086,968551
  sqlite3_io_methods const *pOldMethod;pOldMethod26087,968632
#define HOSTIDLEN 26093,968801
#define CONCHLEN 26094,968831
# define HOSTIDPATH 26096,968901
static int proxyGenerateHostID(26101,969064
static void proxyGetHostIDPath(26141,970084
static int proxyGetHostID(26156,970537
static int proxyGetLockPath(26213,972244
static int proxyCreateUnixFile(26266,973732
static int proxyTakeConch(26313,975478
static int proxyReleaseConch(26465,980600
static int proxyCreateConchPathname(26493,981725
static int switchLockProxyPath(26530,982762
static int proxyGetDbPathForUnixFile(26566,983836
static int proxyTransformUnixFile(26596,985044
static int proxyFileControl(26657,986802
static int proxyCheckReservedLock(26727,989120
static int proxyLock(26762,990298
static int proxyUnlock(26782,990939
static int proxyClose(26797,991375
SQLITE_API int sqlite3_os_init(26859,993480
  #define UNIXVFS(26880,994618
SQLITE_API int sqlite3_os_end(26947,997240
# define SQLITE_W32_THREADS 27008,999500
#define _OS_COMMON_H_27038,1000489
SQLITE_PRIVATE int sqlite3OSTrace 27050,1000858
#define OSTRACE1(27051,1000897
#define OSTRACE2(27052,1000968
#define OSTRACE3(27053,1001041
#define OSTRACE4(27054,1001116
#define OSTRACE5(27055,1001193
#define OSTRACE6(27056,1001272
#define OSTRACE7(27058,1001359
#define OSTRACE1(27061,1001456
#define OSTRACE2(27062,1001476
#define OSTRACE3(27063,1001498
#define OSTRACE4(27064,1001522
#define OSTRACE5(27065,1001548
#define OSTRACE6(27066,1001576
#define OSTRACE7(27067,1001606
#define _HWTIME_H_27100,1002601
  __inline__ sqlite_uint64 sqlite3Hwtime(27113,1002993
  __declspec(27121,1003201
  __inline__ sqlite_uint64 sqlite3Hwtime(27132,1003416
  __inline__ sqlite_uint64 sqlite3Hwtime(27140,1003611
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(27164,1004353
static sqlite_uint64 g_start;27173,1004639
static sqlite_uint64 g_elapsed;27174,1004669
#define TIMER_START 27175,1004701
#define TIMER_END 27176,1004751
#define TIMER_ELAPSED 27177,1004811
#define TIMER_START27179,1004853
#define TIMER_END27180,1004873
#define TIMER_ELAPSED 27181,1004891
SQLITE_API int sqlite3_io_error_hit 27190,1005162
SQLITE_API int sqlite3_io_error_hardhit 27191,1005247
SQLITE_API int sqlite3_io_error_pending 27192,1005333
SQLITE_API int sqlite3_io_error_persist 27193,1005421
SQLITE_API int sqlite3_io_error_benign 27194,1005506
SQLITE_API int sqlite3_diskfull_pending 27195,1005590
SQLITE_API int sqlite3_diskfull 27196,1005635
#define SimulateIOErrorBenign(27197,1005672
#define SimulateIOError(27198,1005733
static void local_ioerr(27202,1005911
#define SimulateDiskfullError(27207,1006051
#define SimulateIOErrorBenign(27219,1006346
#define SimulateIOError(27220,1006379
#define SimulateDiskfullError(27221,1006406
SQLITE_API int sqlite3_open_file_count 27228,1006531
#define OpenCounter(27229,1006575
#define OpenCounter(27231,1006634
# define INVALID_FILE_ATTRIBUTES 27243,1006952
# define AreFileApisANSI(27251,1007113
# define GetDiskFreeSpaceW(27252,1007142
typedef struct winceLock 27260,1007306
  int nReaders;27261,1007333
  BOOL bPending;27262,1007393
  BOOL bReserved;27263,1007464
  BOOL bExclusive;27264,1007536
} winceLock;27265,1007610
typedef struct winFile winFile;27272,1007737
struct winFile 27273,1007769
  const sqlite3_io_methods *pMethod;pMethod27274,1007786
  HANDLE h;27275,1007842
  unsigned char locktype;27276,1007904
  short sharedLockByte;27277,1007977
  DWORD lastErrno;27278,1008052
  DWORD sectorSize;27279,1008126
  WCHAR *zDeleteOnClose;zDeleteOnClose27281,1008215
  HANDLE hMutex;27282,1008283
  HANDLE hShared;27283,1008361
  winceLock local;27284,1008432
  winceLock *shared;shared27285,1008507
SQLITE_API int sqlite3_os_type 27310,1009137
static int sqlite3_os_type 27312,1009179
# define isNT(27327,1009756
  static int isNT(27329,1009783
static WCHAR *utf8ToUnicode(utf8ToUnicode27345,1010218
static char *unicodeToUtf8(unicodeToUtf827366,1010766
static WCHAR *mbcsToUnicode(mbcsToUnicode27391,1011383
static char *unicodeToMbcs(unicodeToMbcs27416,1012066
SQLITE_API char *sqlite3_win32_mbcs_to_utf8(sqlite3_win32_mbcs_to_utf827439,1012680
static char *utf8ToMbcs(utf8ToMbcs27456,1013077
struct tm *__cdecl localtime(27477,1013563
#define GetTempPathA(27500,1014185
#define LockFile(27502,1014212
#define UnlockFile(27503,1014276
#define LockFileEx(27504,1014342
#define HANDLE_TO_WINFILE(27506,1014412
static void winceMutexAcquire(27511,1014531
#define winceMutexRelease(27520,1014765
static BOOL winceCreateLock(27526,1014904
static void winceDestroyLock(27601,1017130
static BOOL winceLockFile(27635,1018055
static BOOL winceUnlockFile(27699,1019804
static BOOL winceLockFileEx(27761,1021537
#define MX_CLOSE_ATTEMPT 27801,1022920
static int winClose(27802,1022947
#define WINCE_DELETION_ATTEMPTS 27812,1023218
# define INVALID_SET_FILE_POINTER 27834,1023764
static int winRead(27842,1023965
static int winWrite(27880,1025169
static int winTruncate(27921,1026339
SQLITE_API int sqlite3_sync_count 27949,1027236
SQLITE_API int sqlite3_fullsync_count 27950,1027275
static int winSync(27956,1027400
static int winFileSize(27991,1028108
# define LOCKFILE_FAIL_IMMEDIATELY 28014,1028719
static int getReadLock(28022,1028888
static int unlockReadLock(28050,1029582
static int winLock(28093,1030944
static int winCheckReservedLock(28216,1034531
static int winUnlock(28247,1035449
static int winFileControl(28280,1036399
static int winSectorSize(28304,1037133
static int winDeviceCharacteristics(28312,1037295
static const sqlite3_io_methods winIoMethod 28321,1037484
static void *convertUtf8Filename(convertUtf8Filename28349,1038255
static int getTempname(28368,1038732
static int getLastErrorMsg(28425,1040458
static int winOpen(28453,1041138
#define MX_DELETION_ATTEMPTS 28610,1045905
static int winDelete(28611,1045936
static int winAccess(28656,1047429
static int winFullPathname(28702,1048708
static int getSectorSize(28773,1050662
static void *winDlOpen(winDlOpen28846,1052684
static void winDlError(28867,1053269
void (*winDlSym(winDlSym28871,1053399
void winDlClose(28882,1053861
  #define winDlOpen 28887,1054026
  #define winDlError 28888,1054049
  #define winDlSym 28889,1054072
  #define winDlClose 28890,1054095
static int winRandomness(28897,1054184
static int winSleep(28934,1055009
SQLITE_API int sqlite3_current_time 28945,1055326
int winCurrentTime(28953,1055575
static int winGetLastError(29030,1058655
SQLITE_API int sqlite3_os_init(29038,1058860
SQLITE_API int sqlite3_os_end(29064,1059684
#define BITVEC_SZ 29112,1061723
#define BITVEC_USIZE 29116,1061936
#define BITVEC_TELEM 29122,1062249
#define BITVEC_SZELEM 29124,1062321
#define BITVEC_NELEM 29126,1062392
#define BITVEC_NBIT 29128,1062495
#define BITVEC_NINT 29131,1062592
#define BITVEC_MXHASH 29134,1062730
#define BITVEC_HASH(29139,1062973
#define BITVEC_NPTR 29141,1063021
struct Bitvec 29165,1063997
  u32 iSize;29166,1064013
  u32 nSet;29167,1064085
  u32 iDivisor;29170,1064274
    BITVEC_TELEM aBitmap[aBitmap29175,1064551
    u32 aHash[aHash29176,1064622
    Bitvec *apSub[apSub29177,1064687
  } u;29178,1064751
SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(sqlite3BitvecCreate29186,1064924
SQLITE_PRIVATE int sqlite3BitvecTest(29201,1065287
SQLITE_PRIVATE int sqlite3BitvecSet(29237,1066292
SQLITE_PRIVATE void sqlite3BitvecClear(29308,1068381
SQLITE_PRIVATE void sqlite3BitvecDestroy(29345,1069264
SQLITE_PRIVATE u32 sqlite3BitvecSize(29360,1069578
#define SETBIT(29371,1069910
#define CLEARBIT(29372,1069957
#define TESTBIT(29373,1070005
SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(29405,1071390
struct PCache 29503,1073999
  PgHdr *pDirty,pDirty29504,1074015
  PgHdr *pDirty, *pDirtyTail;pDirtyTail29504,1074015
  PgHdr *pSynced;pSynced29505,1074092
  int nRef;29506,1074172
  int nMax;29507,1074243
  int szPage;29508,1074309
  int szExtra;29509,1074386
  int bPurgeable;29510,1074464
  int (*xStress)xStress29511,1074543
  void *pStress;pStress29512,1074617
  sqlite3_pcache *pCache;pCache29513,1074681
  PgHdr *pPage1;pPage129514,1074748
# define expensive_assert(29524,1075109
# define expensive_assert(29526,1075155
static int pcacheCheckSynced(29539,1075597
static void pcacheRemoveFromDirtyList(29551,1075954
static void pcacheAddToDirtyList(29588,1076922
static void pcacheUnpin(29612,1077586
SQLITE_PRIVATE int sqlite3PcacheInitialize(29627,1077986
SQLITE_PRIVATE void sqlite3PcacheShutdown(29633,1078194
SQLITE_PRIVATE int sqlite3PcacheSize(29642,1078425
SQLITE_PRIVATE void sqlite3PcacheOpen(29650,1078728
SQLITE_PRIVATE void sqlite3PcacheSetPageSize(29671,1079497
SQLITE_PRIVATE int sqlite3PcacheFetch(29683,1079806
SQLITE_PRIVATE void sqlite3PcacheRelease(29771,1082407
SQLITE_PRIVATE void sqlite3PcacheRef(29790,1082837
SQLITE_PRIVATE void sqlite3PcacheDrop(29800,1083109
SQLITE_PRIVATE void sqlite3PcacheMakeDirty(29818,1083508
SQLITE_PRIVATE void sqlite3PcacheMakeClean(29831,1083811
SQLITE_PRIVATE void sqlite3PcacheCleanAll(29844,1084083
SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(29854,1084290
SQLITE_PRIVATE void sqlite3PcacheMove(29865,1084548
SQLITE_PRIVATE void sqlite3PcacheTruncate(29886,1085315
SQLITE_PRIVATE void sqlite3PcacheClose(29908,1085836
SQLITE_PRIVATE void sqlite3PcacheClear(29917,1086025
static PgHdr *pcacheMergeDirtyList(pcacheMergeDirtyList29925,1086240
#define N_SORT_BUCKET 29959,1087112
static PgHdr *pcacheSortDirtyList(pcacheSortDirtyList29960,1087138
SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(sqlite3PcacheDirtyList29994,1087911
SQLITE_PRIVATE int sqlite3PcacheRefCount(30005,1088187
SQLITE_PRIVATE int sqlite3PcachePageRefcount(30012,1088349
SQLITE_PRIVATE int sqlite3PcachePagecount(30019,1088483
SQLITE_PRIVATE int sqlite3PcacheGetCachesize(30031,1088737
SQLITE_PRIVATE void sqlite3PcacheSetCachesize(30039,1088877
SQLITE_PRIVATE void sqlite3PcacheIterateDirty(30052,1089284
typedef struct PCache1 PCache1;30084,1090416
typedef struct PgHdr1 PgHdr1;30085,1090448
typedef struct PgFreeslot PgFreeslot;30086,1090478
struct PCache1 30091,1090619
  int szPage;30097,1090912
  int bPurgeable;30098,1090989
  unsigned int nMin;30099,1091060
  unsigned int nMax;30100,1091137
  unsigned int nRecyclable;30106,1091400
  unsigned int nPage;30107,1091476
  unsigned int nHash;30108,1091552
  PgHdr1 **apHash;apHash30109,1091624
  unsigned int iMaxKey;30111,1091703
struct PgHdr1 30120,1092016
  unsigned int iKey;30121,1092032
  PgHdr1 *pNext;pNext30122,1092095
  PCache1 *pCache;pCache30123,1092159
  PgHdr1 *pLruNext;pLruNext30124,1092234
  PgHdr1 *pLruPrev;pLruPrev30125,1092308
struct PgFreeslot 30132,1092513
  PgFreeslot *pNext;pNext30133,1092533
static SQLITE_WSD struct PCacheGlobal 30139,1092621
  sqlite3_mutex *mutex;mutex30140,1092661
  int nMaxPage;30142,1092736
  int nMinPage;30143,1092817
  int nCurrentPage;30144,1092898
  PgHdr1 *pLruHead,pLruHead30145,1092978
  PgHdr1 *pLruHead, *pLruTail;pLruTail30145,1092978
  int szSlot;30148,1093113
  void *pStart,pStart30149,1093180
  void *pStart, *pEnd;pEnd30149,1093180
  PgFreeslot *pFree;pFree30150,1093257
  int isInit;30151,1093318
} pcache1_g;30152,1093382
#define pcache1 30159,1093600
#define PGHDR1_TO_PAGE(30173,1094274
#define PAGE_TO_PGHDR1(30174,1094343
#define pcache1EnterMutex(30179,1094464
#define pcache1LeaveMutex(30180,1094527
SQLITE_PRIVATE void sqlite3PCacheBufferSetup(30191,1095036
static void *pcache1Alloc(pcache1Alloc30214,1095694
static void pcache1Free(30245,1096698
static PgHdr1 *pcache1AllocPage(pcache1AllocPage30264,1097228
static void pcache1FreePage(30286,1097800
SQLITE_PRIVATE void *sqlite3PageMalloc(sqlite3PageMalloc30300,1098185
SQLITE_PRIVATE void sqlite3PageFree(30311,1098398
static int pcache1ResizeHash(30326,1098847
static void pcache1PinPage(30370,1099976
static void pcache1RemoveFromHash(30398,1100753
static void pcache1EnforceMaxPage(30414,1101164
static void pcache1TruncateUnsafe(30431,1101704
static int pcache1Init(30462,1102559
static void pcache1Shutdown(30478,1102997
static sqlite3_pcache *pcache1Create(pcache1Create30489,1103234
static void pcache1Cachesize(30512,1103812
static int pcache1Pagecount(30526,1104157
static void *pcache1Fetch(pcache1Fetch30583,1106402
static void pcache1Unpin(30665,1108595
static void pcache1Rekey(30704,1109808
static void pcache1Truncate(30752,1111142
static void pcache1Destroy(30767,1111525
SQLITE_PRIVATE void sqlite3PCacheSetDefault(30784,1112036
SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(30811,1113106
SQLITE_PRIVATE void sqlite3PcacheStats(30833,1113666
#define ROWSET_ALLOCATION_SIZE 30922,1117044
#define ROWSET_ENTRY_PER_CHUNK 30927,1117141
struct RowSetEntry 30933,1117327
  i64 v;30934,1117360
  struct RowSetEntry *pRight;pRight30935,1117425
  struct RowSetEntry *pLeft;pLeft30936,1117502
struct RowSetChunk 30945,1117820
  struct RowSetChunk *pNextChunk;pNextChunk30946,1117841
  struct RowSetEntry aEntry[aEntry30947,1117919
struct RowSet 30955,1118120
  struct RowSetChunk *pChunk;pChunk30956,1118136
  sqlite3 *db;db30957,1118205
  struct RowSetEntry *pEntry;pEntry30958,1118268
  struct RowSetEntry *pLast;pLast30959,1118336
  struct RowSetEntry *pFresh;pFresh30960,1118405
  struct RowSetEntry *pTree;pTree30961,1118472
  u16 nFresh;30962,1118534
  u8 isSorted;30963,1118601
  u8 iBatch;30964,1118665
SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3RowSetInit30979,1119190
SQLITE_PRIVATE void sqlite3RowSetClear(31000,1119784
SQLITE_PRIVATE void sqlite3RowSetInsert(31020,1120250
static struct RowSetEntry *rowSetMerge(rowSetMerge31058,1121237
static void rowSetSort(31094,1122162
static void rowSetTreeToList(31126,1122989
static struct RowSetEntry *rowSetNDeepTree(rowSetNDeepTree31161,1124126
static struct RowSetEntry *rowSetListToTree(rowSetListToTree31191,1124822
static void rowSetToList(31215,1125519
SQLITE_PRIVATE int sqlite3RowSetNext(31235,1126041
SQLITE_PRIVATE int sqlite3RowSetTest(31253,1126444
int sqlite3PagerTrace=31307,1128113
#define sqlite3DebugPrintf 31308,1128168
#define PAGERTRACE(31309,1128202
#define PAGERTRACE(31311,1128283
#define PAGERID(31322,1128606
#define FILEHANDLEID(31323,1128640
#define PAGER_UNLOCK 31373,1131244
#define PAGER_SHARED 31374,1131272
#define PAGER_RESERVED 31375,1131328
#define PAGER_EXCLUSIVE 31376,1131386
#define PAGER_SYNCED 31377,1131445
# define CODEC1(31383,1131559
# define CODEC2(31385,1131647
# define CODEC1(31389,1131787
# define CODEC2(31390,1131828
#define MAX_SECTOR_SIZE 31399,1132160
typedef struct PagerSavepoint PagerSavepoint;31414,1132853
struct PagerSavepoint 31415,1132899
  i64 iOffset;31416,1132923
  i64 iHdrOffset;31417,1132992
  Bitvec *pInSavepoint;pInSavepoint31418,1133039
  Pgno nOrig;31419,1133107
  Pgno iSubRec;31420,1133177
struct Pager 31519,1137620
  sqlite3_vfs *pVfs;pVfs31520,1137635
  u8 exclusiveMode;31521,1137698
  u8 journalMode;31522,1137775
  u8 useJournal;31523,1137848
  u8 noReadlock;31524,1137920
  u8 noSync;31525,1137990
  u8 fullSync;31526,1138058
  u8 sync_flags;31527,1138139
  u8 tempFile;31528,1138207
  u8 readOnly;31529,1138273
  u8 memDb;31530,1138339
  u8 state;31543,1138982
  u8 dbModified;31544,1139057
  u8 needSync;31545,1139133
  u8 journalStarted;31546,1139213
  u8 changeCountDone;31547,1139285
  u8 setMaster;31548,1139363
  u8 doNotSync;31549,1139443
  u8 dbSizeValid;31550,1139523
  u8 subjInMemory;31551,1139586
  Pgno dbSize;31552,1139657
  Pgno dbOrigSize;31553,1139725
  Pgno dbFileSize;31554,1139799
  int errCode;31555,1139872
  int nRec;31556,1139939
  u32 cksumInit;31557,1140020
  u32 nSubRec;31558,1140099
  Bitvec *pInJournal;pInJournal31559,1140176
  sqlite3_file *fd;fd31560,1140255
  sqlite3_file *jfd;jfd31561,1140320
  sqlite3_file *sjfd;sjfd31562,1140389
  i64 journalOff;31563,1140457
  i64 journalHdr;31564,1140534
  PagerSavepoint *aSavepoint;aSavepoint31565,1140609
  int nSavepoint;31566,1140672
  char dbFileVers[dbFileVers31567,1140743
  u32 sectorSize;31568,1140818
  u16 nExtra;31570,1140891
  i16 nReserve;31571,1140970
  u32 vfsFlags;31572,1141049
  int pageSize;31573,1141115
  Pgno mxPgno;31574,1141177
  char *zFilename;zFilename31575,1141250
  char *zJournal;zJournal31576,1141312
  int (*xBusyHandler)xBusyHandler31577,1141373
  void *pBusyHandlerArg;pBusyHandlerArg31578,1141436
  int nHit,31580,1141525
  int nHit, nMiss;31580,1141525
  int nRead,31581,1141584
  int nRead, nWrite;31581,1141584
  void (*xReiniter)xReiniter31583,1141655
  void *(*xCodec)xCodec31585,1141754
  void (*xCodecSizeChng)xCodecSizeChng31586,1141830
  void (*xCodecFree)xCodecFree31587,1141905
  void *pCodec;pCodec31588,1141977
  char *pTmpSpace;pTmpSpace31590,1142056
  i64 journalSizeLimit;31591,1142134
  PCache *pPCache;pPCache31592,1142210
  sqlite3_backup *pBackup;pBackup31593,1142275
SQLITE_API int sqlite3_pager_readdb_count 31602,1142562
SQLITE_API int sqlite3_pager_writedb_count 31603,1142652
SQLITE_API int sqlite3_pager_writej_count 31604,1142743
# define PAGER_INCR(31605,1142834
# define PAGER_INCR(31607,1142868
static const unsigned char aJournalMagic[aJournalMagic31635,1144202
#define JOURNAL_PG_SZ(31643,1144399
#define JOURNAL_HDR_SZ(31649,1144590
# define MEMDB 31658,1144935
# define MEMDB 31660,1144958
#define PAGER_MAX_PGNO 31666,1145049
static int assert_pager_state(31674,1145162
static int subjRequiresPage(31695,1145859
static int pageInJournal(31711,1146231
static int read32bits(31722,1146580
#define put32bits(31734,1146876
static int write32bits(31740,1147065
#define isOpen(31758,1147505
static int osUnlock(31763,1147604
static int jrnlBufferSize(31788,1148491
static u32 pager_datahash(31820,1149416
static u32 pager_pagehash(31828,1149583
static void pager_set_pagehash(31831,1149707
#define CHECK_PAGE(31840,1150029
static void checkPage(31841,1150064
#define pager_datahash(31848,1150258
#define pager_pagehash(31849,1150289
#define CHECK_PAGE(31850,1150318
static int readMasterJournal(31878,1151584
static i64 journalHdrOffset(31931,1153376
static int zeroJournalHdr(31964,1154690
static int writeJournalHdr(32013,1156520
static int readJournalHdr(32130,1161794
static int writeMasterJournal(32250,1166644
static PgHdr *pager_lookup(pager_lookup32317,1169180
static void pager_reset(32333,1169712
static void releaseAllSavepoints(32346,1170111
static int addToSavepointBitvecs(32365,1170748
static void pager_unlock(32390,1171606
static int pager_error(32451,1173842
static void pagerUnlockAndRollback(32482,1174960
static int pager_end_transaction(32547,1177790
static u32 pager_cksum(32643,1181223
static int pager_playback_one_page(32691,1183370
static int pager_delmaster(32918,1193730
static int pager_truncate(33030,1197738
static void setSectorSize(33065,1199005
static int pager_playback(33147,1202804
static int pagerPlaybackSavepoint(33362,1211445
SQLITE_PRIVATE void sqlite3PagerSetCachesize(33461,1215149
SQLITE_PRIVATE void sqlite3PagerSetSafetyLevel(33492,1216600
SQLITE_API int sqlite3_opentemp_count 33506,1217128
static int pagerOpentemp(33524,1217643
SQLITE_PRIVATE void sqlite3PagerSetBusyhandler(33563,1219144
static void pagerReportSize(33577,1219611
# define pagerReportSize(33584,1219811
SQLITE_PRIVATE int sqlite3PagerSetPagesize(33617,1221204
SQLITE_PRIVATE void *sqlite3PagerTempSpace(sqlite3PagerTempSpace33655,1222533
SQLITE_PRIVATE int sqlite3PagerMaxPageCount(33666,1222904
static int saved_cnt;33685,1223491
void disable_simulated_io_errors(33686,1223513
void enable_simulated_io_errors(33690,1223628
# define disable_simulated_io_errors(33694,1223715
# define enable_simulated_io_errors(33695,1223754
SQLITE_PRIVATE int sqlite3PagerReadFileheader(33712,1224418
SQLITE_PRIVATE int sqlite3PagerPagecount(33741,1225534
static int pager_wait_on_lock(33803,1227498
static void assertTruncateConstraintCb(33861,1229867
static void assertTruncateConstraint(33865,1230027
# define assertTruncateConstraint(33869,1230162
SQLITE_PRIVATE void sqlite3PagerTruncateImage(33878,1230489
SQLITE_PRIVATE int sqlite3PagerClose(33900,1231344
SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(33941,1232612
SQLITE_PRIVATE void sqlite3PagerRef(33949,1232752
static int syncJournal(33991,1234424
static int pager_write_pagelist(34115,1240030
static int subjournalPage(34215,1244038
static int pagerStress(34260,1245738
SQLITE_PRIVATE int sqlite3PagerOpen(34377,1250208
static int hasHotJournal(34660,1261676
static int readDbPage(34752,1265518
SQLITE_PRIVATE int sqlite3PagerSharedLock(34818,1268310
static void pagerUnlockIfUnused(35004,1275134
SQLITE_PRIVATE int sqlite3PagerAcquire(35062,1277887
SQLITE_PRIVATE DbPage *sqlite3PagerLookup(sqlite3PagerLookup35186,1281838
SQLITE_PRIVATE void sqlite3PagerUnref(35204,1282365
static int openSubJournal(35221,1282857
static int pager_open_journal(35255,1284229
SQLITE_PRIVATE int sqlite3PagerBegin(35353,1287800
static int pager_write(35414,1290249
SQLITE_PRIVATE int sqlite3PagerWrite(35569,1295951
SQLITE_PRIVATE int sqlite3PagerIswriteable(35663,1299068
SQLITE_PRIVATE void sqlite3PagerDontWrite(35682,1299758
static int pager_incr_changecounter(35710,1300877
# define DIRECT_MODE 35724,1301500
# define DIRECT_MODE 35728,1301592
SQLITE_PRIVATE int sqlite3PagerSync(35783,1303454
SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne(35820,1304866
SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(35991,1312097
SQLITE_PRIVATE int sqlite3PagerRollback(36072,1315711
SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(36111,1316835
SQLITE_PRIVATE int sqlite3PagerRefcount(36118,1316977
SQLITE_PRIVATE int sqlite3PagerPageRefcount(36125,1317149
SQLITE_PRIVATE int *sqlite3PagerStats(sqlite3PagerStats36133,1317335
SQLITE_PRIVATE int sqlite3PagerIsMemdb(36153,1317884
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(36167,1318417
SQLITE_PRIVATE int sqlite3PagerSavepoint(36248,1321851
SQLITE_PRIVATE const char *sqlite3PagerFilename(sqlite3PagerFilename36293,1323540
SQLITE_PRIVATE const sqlite3_vfs *sqlite3PagerVfs(sqlite3PagerVfs36300,1323684
SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(sqlite3PagerFile36309,1323924
SQLITE_PRIVATE const char *sqlite3PagerJournalname(sqlite3PagerJournalname36316,1324065
SQLITE_PRIVATE int sqlite3PagerNosync(36324,1324281
static void sqlite3PagerSetCodec(36332,1324437
static void *sqlite3PagerGetCodec(sqlite3PagerGetCodec36346,1324841
SQLITE_PRIVATE int sqlite3PagerMovepage(36377,1326161
SQLITE_PRIVATE void *sqlite3PagerGetData(sqlite3PagerGetData36504,1330792
SQLITE_PRIVATE void *sqlite3PagerGetExtra(sqlite3PagerGetExtra36513,1331032
SQLITE_PRIVATE int sqlite3PagerLockingMode(36527,1331525
SQLITE_PRIVATE int sqlite3PagerJournalMode(36560,1332664
SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(36588,1333588
SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(sqlite3PagerBackupPtr36601,1334005
#define MX_CELL_SIZE(36851,1345390
#define MX_CELL(36858,1345703
typedef struct MemPage MemPage;36861,1345774
typedef struct BtLock BtLock;36862,1345806
#  define SQLITE_FILE_HEADER 36877,1346494
#define PTF_INTKEY 36884,1346677
#define PTF_ZERODATA 36885,1346704
#define PTF_LEAFDATA 36886,1346731
#define PTF_LEAF 36887,1346758
struct MemPage 36902,1347393
  u8 isInit;36903,1347410
  u8 nOverflow;36904,1347486
  u8 intKey;36905,1347557
  u8 leaf;36906,1347613
  u8 hasData;36907,1347667
  u8 hdrOffset;36908,1347726
  u8 childPtrSize;36909,1347784
  u16 maxLocal;36910,1347841
  u16 minLocal;36911,1347916
  u16 cellOffset;36912,1347991
  u16 nFree;36913,1348057
  u16 nCell;36914,1348119
  u16 maskPage;36915,1348193
  struct _OvflCell 36916,1348243
    u8 *pCell;pCell36917,1348307
    u16 idx;36918,1348379
  } aOvfl[aOvfl36919,1348458
  BtShared *pBt;pBt36920,1348472
  u8 *aData;aData36921,1348547
  DbPage *pDbPage;pDbPage36922,1348615
  Pgno pgno;36923,1348662
#define EXTRA_SIZE 36931,1348905
struct BtLock 36940,1349277
  Btree *pBtree;pBtree36941,1349293
  Pgno iTable;36942,1349354
  u8 eLock;36943,1349403
  BtLock *pNext;pNext36944,1349457
#define READ_LOCK 36948,1349559
#define WRITE_LOCK 36949,1349583
struct Btree 36972,1350645
  sqlite3 *db;db36973,1350660
  BtShared *pBt;pBt36974,1350730
  u8 inTrans;36975,1350788
  u8 sharable;36976,1350853
  u8 locked;36977,1350921
  int wantToLock;36978,1350984
  int nBackup;36979,1351057
  Btree *pNext;pNext36980,1351131
  Btree *pPrev;pPrev36981,1351205
  BtLock lock;36983,1351295
#define TRANS_NONE 36994,1351627
#define TRANS_READ 36995,1351649
#define TRANS_WRITE 36996,1351671
struct BtShared 37033,1353173
  Pager *pPager;pPager37034,1353191
  sqlite3 *db;db37035,1353236
  BtCursor *pCursor;pCursor37036,1353313
  MemPage *pPage1;pPage137037,1353370
  u8 readOnly;37038,1353427
  u8 pageSizeFixed;37039,1353497
  u8 autoVacuum;37041,1353605
  u8 incrVacuum;37042,1353666
  u16 pageSize;37044,1353734
  u16 usableSize;37045,1353796
  u16 maxLocal;37046,1353862
  u16 minLocal;37047,1353937
  u16 maxLeaf;37048,1354012
  u16 minLeaf;37049,1354084
  u8 inTransaction;37050,1354156
  int nTransaction;37051,1354204
  void *pSchema;pSchema37052,1354277
  void (*xFreeSchema)xFreeSchema37053,1354358
  sqlite3_mutex *mutex;mutex37054,1354427
  Bitvec *pHasContent;pHasContent37055,1354508
  int nRef;37057,1354620
  BtShared *pNext;pNext37058,1354689
  BtLock *pLock;pLock37059,1354763
  Btree *pWriter;pWriter37060,1354840
  u8 isExclusive;37061,1354914
  u8 isPending;37062,1354992
  u8 *pTmpSpace;pTmpSpace37064,1355064
typedef struct CellInfo CellInfo;37072,1355345
struct CellInfo 37073,1355379
  u8 *pCell;pCell37074,1355397
  i64 nKey;37075,1355457
  u32 nData;37076,1355533
  u32 nPayload;37077,1355580
  u16 nHeader;37078,1355627
  u16 nLocal;37079,1355691
  u16 iOverflow;37080,1355745
  u16 nSize;37081,1355821
#define BTCURSOR_MAX_DEPTH 37093,1356275
struct BtCursor 37109,1356819
  Btree *pBtree;pBtree37110,1356837
  BtShared *pBt;pBt37111,1356910
  BtCursor *pNext,pNext37112,1356979
  BtCursor *pNext, *pPrev;pPrev37112,1356979
  struct KeyInfo *pKeyInfo;pKeyInfo37113,1357048
  Pgno pgnoRoot;37114,1357121
  sqlite3_int64 cachedRowid;37115,1357182
  CellInfo info;37116,1357254
  u8 wrFlag;37117,1357327
  u8 atLast;37118,1357378
  u8 validNKey;37119,1357446
  u8 eState;37120,1357507
  void *pKey;pKey37121,1357585
  i64 nKey;37122,1357658
  int skipNext;37123,1357717
  u8 isIncrblobHandle;37125,1357826
  Pgno *aOverflow;aOverflow37126,1357902
  i16 iPage;37128,1357976
  MemPage *apPage[apPage37129,1358054
  u16 aiIdx[aiIdx37130,1358132
#define CURSOR_INVALID 37158,1359256
#define CURSOR_VALID 37159,1359291
#define CURSOR_REQUIRESEEK 37160,1359326
#define CURSOR_FAULT 37161,1359361
# define PENDING_BYTE_PAGE(37166,1359477
#define PTRMAP_PAGENO(37183,1360199
#define PTRMAP_PTROFFSET(37184,1360256
#define PTRMAP_ISPAGE(37185,1360319
#define PTRMAP_ROOTPAGE 37218,1362015
#define PTRMAP_FREEPAGE 37219,1362041
#define PTRMAP_OVERFLOW1 37220,1362067
#define PTRMAP_OVERFLOW2 37221,1362094
#define PTRMAP_BTREE 37222,1362121
#define btreeIntegrity(37227,1362279
#define ISAUTOVACUUM 37240,1362782
#define ISAUTOVACUUM 37242,1362827
typedef struct IntegrityCk IntegrityCk;37250,1363001
struct IntegrityCk 37251,1363041
  BtShared *pBt;pBt37252,1363062
  Pager *pPager;pPager37253,1363115
  Pgno nPage;37254,1363195
  int *anRef;anRef37255,1363253
  int mxErr;37256,1363319
  int nErr;37257,1363393
  int mallocFailed;37258,1363464
  StrAccum errMsg;37259,1363529
#define get2byte(37265,1363669
#define put2byte(37266,1363712
#define get4byte 37267,1363776
#define put4byte 37268,1363809
static void lockBtreeMutex(37280,1364231
static void unlockBtreeMutex(37294,1364576
SQLITE_PRIVATE void sqlite3BtreeEnter(37320,1365557
SQLITE_PRIVATE void sqlite3BtreeLeave(37382,1367592
SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(37399,1367974
SQLITE_PRIVATE void sqlite3BtreeEnterCursor(37416,1368578
SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(37419,1368676
SQLITE_PRIVATE void sqlite3BtreeEnterAll(37439,1369370
SQLITE_PRIVATE void sqlite3BtreeLeaveAll(37467,1370246
SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(37490,1370773
SQLITE_PRIVATE void sqlite3BtreeMutexArrayInsert(37520,1371607
SQLITE_PRIVATE void sqlite3BtreeMutexArrayEnter(37553,1372519
SQLITE_PRIVATE void sqlite3BtreeMutexArrayLeave(37578,1373203
SQLITE_PRIVATE void sqlite3BtreeEnter(37598,1373715
SQLITE_PRIVATE void sqlite3BtreeEnterAll(37601,1373788
static const char zMagicHeader[zMagicHeader37637,1374934
int sqlite3BtreeTrace=37644,1375079
# define TRACE(37645,1375134
# define TRACE(37647,1375207
SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList 37662,1375590
static BtShared *SQLITE_WSD sqlite3SharedCacheList 37664,1375660
SQLITE_API int sqlite3_enable_shared_cache(37676,1376043
  #define querySharedCacheTableLock(37694,1376678
  #define setSharedCacheTableLock(37695,1376731
  #define clearAllSharedCacheTableLocks(37696,1376782
  #define downgradeAllSharedCacheTableLocks(37697,1376825
  #define hasSharedCacheTableLock(37698,1376872
  #define hasReadConflicts(37699,1376917
static int hasSharedCacheTableLock(37725,1378008
static int hasReadConflicts(37791,1380456
static int querySharedCacheTableLock(37811,1381022
static int setSharedCacheTableLock(37883,1383660
static void clearAllSharedCacheTableLocks(37947,1385810
static void downgradeAllSharedCacheTableLocks(37992,1387184
static int cursorHoldsMutex(38014,1387726
static void invalidateOverflowCache(38024,1387926
static void invalidateAllOverflowCache(38034,1388184
static void invalidateIncrblobCursors(38055,1388964
  #define invalidateOverflowCache(38071,1389449
  #define invalidateAllOverflowCache(38072,1389486
  #define invalidateIncrblobCursors(38073,1389526
static int btreeSetHasContent(38111,1391358
static int btreeGetHasContent(38136,1392202
static void btreeClearHasContent(38145,1392498
static int saveCursorPosition(38157,1392878
static int saveAllCursors(38207,1394282
SQLITE_PRIVATE void sqlite3BtreeClearCursor(38226,1394760
static int btreeMoveto(38238,1395137
static int btreeRestoreCursorPosition(38271,1396387
#define restoreCursorPosition(38288,1396871
SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(38301,1397336
static Pgno ptrmapPageno(38323,1397839
static void ptrmapPut(38346,1398514
static int ptrmapGet(38397,1400070
  #define ptrmapPut(38424,1400886
  #define ptrmapGet(38425,1400918
  #define ptrmapPutOvflPtr(38426,1400957
#define findCell(38436,1401243
static u8 *findOverflowCell(findOverflowCell38443,1401455
static void btreeParseCellPtr(38470,1402252
#define parseCell(38541,1404773
static void btreeParseCell(38543,1404880
static u16 cellSizePtr(38557,1405373
static u16 cellSize(38610,1406881
static void ptrmapPutOvflPtr(38621,1407176
static int defragmentPage(38641,1407798
static int allocateSpace(38731,1411169
static int freeSpace(38822,1414432
static int decodeFlags(38915,1417599
static int btreeInitPage(38949,1418713
static void zeroPage(39059,1422713
static MemPage *btreePageFromDbPage(btreePageFromDbPage39092,1423762
static int btreeGetPage(39113,1424571
static MemPage *btreePageLookup(btreePageLookup39134,1425257
static Pgno pagerPagecount(39148,1425635
static int getAndInitPage(39165,1426152
static void releasePage(39197,1427077
static void pageReinit(39217,1427832
static int btreeInvokeBusyHandler(39239,1428629
SQLITE_PRIVATE int sqlite3BtreeOpen(39261,1429509
static int removeFromSharingList(39499,1437610
static void allocateTempSpace(39537,1438542
static void freeTempSpace(39546,1438721
SQLITE_PRIVATE int sqlite3BtreeClose(39554,1438884
SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(39624,1441084
SQLITE_PRIVATE int sqlite3BtreeSetSafetyLevel(39642,1441823
SQLITE_PRIVATE int sqlite3BtreeSyncDisabled(39656,1442252
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(39688,1443425
SQLITE_PRIVATE int sqlite3BtreeGetPageSize(39718,1444315
SQLITE_PRIVATE int sqlite3BtreeGetReserve(39727,1444577
SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(39740,1444941
SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(39755,1445490
SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(39779,1446047
static int lockBtree(39805,1446734
static void unlockBtreeIfUnused(39915,1450414
static int newDatabase(39932,1450953
SQLITE_PRIVATE int sqlite3BtreeBeginTrans(40008,1453937
static int setChildPtrmaps(40133,1457653
static int modifyPagePointer(40183,1459172
static int relocatePage(40242,1460821
static int incrVacuumStep(40336,1464253
SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(40444,1467442
static int autoVacuumCommit(40469,1468186
# define setChildPtrmaps(40526,1470195
SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(40555,1471603
static void btreeEndTransaction(40579,1472211
SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(40632,1474278
SQLITE_PRIVATE int sqlite3BtreeCommit(40661,1474950
static int countWriteCursors(40683,1475615
SQLITE_PRIVATE void sqlite3BtreeTripAllCursors(40710,1476450
SQLITE_PRIVATE int sqlite3BtreeRollback(40735,1477185
SQLITE_PRIVATE int sqlite3BtreeBeginStmt(40798,1479526
SQLITE_PRIVATE int sqlite3BtreeSavepoint(40833,1480888
static int btreeCursor(40881,1482763
SQLITE_PRIVATE int sqlite3BtreeCursor(40929,1484476
SQLITE_PRIVATE int sqlite3BtreeCursorSize(40951,1485302
SQLITE_PRIVATE void sqlite3BtreeSetCachedRowid(40967,1485968
SQLITE_PRIVATE sqlite3_int64 sqlite3BtreeGetCachedRowid(40981,1486456
SQLITE_PRIVATE int sqlite3BtreeCloseCursor(40989,1486668
  static void assertCellInfo(41031,1488032
  #define assertCellInfo(41039,1488299
  static void getCellInfo(41043,1488424
#define getCellInfo(41054,1488782
SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(41070,1489659
SQLITE_PRIVATE int sqlite3BtreeKeySize(41087,1490229
SQLITE_PRIVATE int sqlite3BtreeDataSize(41111,1491046
static int getOverflowPage(41138,1492211
static int copyPayload(41206,1494209
static int accessPayload(41255,1496124
SQLITE_PRIVATE int sqlite3BtreeKey(41399,1501012
SQLITE_PRIVATE int sqlite3BtreeData(41416,1501682
static const unsigned char *fetchPayload(fetchPayload41455,1503169
SQLITE_PRIVATE const void *sqlite3BtreeKeyFetch(sqlite3BtreeKeyFetch41507,1504786
SQLITE_PRIVATE const void *sqlite3BtreeDataFetch(sqlite3BtreeDataFetch41516,1505088
static int moveToChild(41536,1505755
static void assertParentIndex(41570,1506721
#  define assertParentIndex(41579,1507006
static void moveToParent(41590,1507318
static int moveToRoot(41627,1508801
static int moveToLeftmost(41703,1511225
static int moveToRightmost(41728,1512069
SQLITE_PRIVATE int sqlite3BtreeFirst(41752,1512790
SQLITE_PRIVATE int sqlite3BtreeLast(41776,1513468
SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked(41840,1515646
SQLITE_PRIVATE int sqlite3BtreeEof(42024,1521853
SQLITE_PRIVATE int sqlite3BtreeNext(42038,1522373
SQLITE_PRIVATE int sqlite3BtreePrevious(42107,1523942
static int allocateBtreePage(42182,1526146
static int freePage2(42461,1535091
static void freePage(42585,1539718
static int clearCell(42594,1539919
static int fillInCell(42647,1541658
static void dropCell(42805,1546596
static void insertCell(42860,1548550
static void assemblePage(42942,1551478
#define NN 42990,1553449
#define NB 42991,1553524
static int balance_quick(43018,1554708
static int ptrmapCheckPages(43104,1558139
static void copyNodeContent(43157,1559890
static int balance_nonroot(43233,1563309
static int balance_deeper(43853,1586596
static int balance(43907,1588499
SQLITE_PRIVATE int sqlite3BtreeInsert(44042,1594119
SQLITE_PRIVATE int sqlite3BtreeDelete(44184,1599790
static int btreeCreateTable(44307,1604672
SQLITE_PRIVATE int sqlite3BtreeCreateTable(44429,1608324
static int clearDatabasePage(44441,1608619
SQLITE_PRIVATE int sqlite3BtreeClearTable(44499,1610343
static int btreeDropTable(44538,1611884
SQLITE_PRIVATE int sqlite3BtreeDropTable(44641,1614895
SQLITE_PRIVATE void sqlite3BtreeGetMeta(44663,1615674
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(44687,1616383
SQLITE_PRIVATE int sqlite3BtreeCount(44720,1617384
SQLITE_PRIVATE Pager *sqlite3BtreePager(sqlite3BtreePager44785,1619694
static void checkAppendMsg(44793,1619864
static int checkRef(44827,1620758
static void checkPtrmap(44846,1621328
static void checkList(44876,1622333
static int checkTreePage(44962,1625330
SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck(sqlite3BtreeIntegrityCheck45135,1630710
SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(sqlite3BtreeGetFilename45246,1634049
SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(sqlite3BtreeGetJournalname45259,1634505
SQLITE_PRIVATE int sqlite3BtreeIsInTrans(45267,1634707
SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(45275,1634928
SQLITE_PRIVATE int sqlite3BtreeIsInBackup(45281,1635081
SQLITE_PRIVATE void *sqlite3BtreeSchema(sqlite3BtreeSchema45307,1636216
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(45323,1636701
SQLITE_PRIVATE int sqlite3BtreeLockTable(45340,1637178
SQLITE_PRIVATE int sqlite3BtreePutData(45370,1638184
SQLITE_PRIVATE void sqlite3BtreeCacheOverflow(45413,1639712
# define MIN(45444,1640745
struct sqlite3_backup 45450,1640845
  sqlite3* pDestDb;45451,1640869
  Btree *pDest;pDest45452,1640930
  u32 iDestSchema;45453,1640987
  int bDestLocked;45454,1641058
  Pgno iNext;45456,1641139
  sqlite3* pSrcDb;45457,1641216
  Btree *pSrc;pSrc45458,1641272
  int rc;45460,1641325
  Pgno nRemaining;45465,1641529
  Pgno nPagecount;45466,1641591
  int isAttached;45468,1641655
  sqlite3_backup *pNext;pNext45469,1641736
static Btree *findBtree(findBtree45511,1643639
SQLITE_API sqlite3_backup *sqlite3_backup_init(sqlite3_backup_init45551,1644725
static int isFatalError(45616,1646939
static int backupOnePage(45625,1647212
static int backupTruncateFile(45686,1649444
static void attachBackupObject(45699,1649810
SQLITE_API int sqlite3_backup_step(45711,1650109
SQLITE_API int sqlite3_backup_finish(45897,1656975
SQLITE_API int sqlite3_backup_remaining(45946,1658352
SQLITE_API int sqlite3_backup_pagecount(45954,1658561
SQLITE_PRIVATE void sqlite3BackupUpdate(45970,1659164
SQLITE_PRIVATE void sqlite3BackupRestart(45999,1660328
SQLITE_PRIVATE int sqlite3BtreeCopyFile(46016,1660899
#define expandBlob(46079,1662994
SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(46094,1663623
SQLITE_PRIVATE int sqlite3VdbeMemGrow(46131,1664895
SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(46176,1666265
SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(46199,1666883
SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(46227,1667582
SQLITE_PRIVATE int sqlite3VdbeMemStringify(46254,1668593
SQLITE_PRIVATE int sqlite3VdbeMemFinalize(46298,1669934
SQLITE_PRIVATE void sqlite3VdbeMemReleaseExternal(46323,1670751
SQLITE_PRIVATE void sqlite3VdbeMemRelease(46351,1671661
static i64 doubleToInt64(46371,1672351
SQLITE_PRIVATE i64 sqlite3VdbeIntValue(46406,1673704
SQLITE_PRIVATE double sqlite3VdbeRealValue(46436,1674560
SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(46465,1675460
SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(46494,1676524
SQLITE_PRIVATE int sqlite3VdbeMemRealify(46508,1676920
SQLITE_PRIVATE int sqlite3VdbeMemNumerify(46521,1677288
SQLITE_PRIVATE void sqlite3VdbeMemSetNull(46542,1677841
SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(46557,1678223
SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(46579,1678705
SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(46590,1678978
SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(46605,1679327
SQLITE_PRIVATE int sqlite3VdbeMemTooBig(46626,1679975
#define MEMCELLSIZE 46641,1680298
SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(46649,1680611
SQLITE_PRIVATE int sqlite3VdbeMemCopy(46665,1681144
SQLITE_PRIVATE void sqlite3VdbeMemMove(46689,1681757
SQLITE_PRIVATE int sqlite3VdbeMemSetStr(46716,1682829
SQLITE_PRIVATE int sqlite3MemCompare(46806,1685485
SQLITE_PRIVATE int sqlite3VdbeMemFromBtree(46931,1689355
SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3ValueText46988,1691384
SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3ValueNew47027,1692550
SQLITE_PRIVATE int sqlite3ValueFromExpr(47047,1693260
SQLITE_PRIVATE void sqlite3ValueSetStr(47122,1695465
SQLITE_PRIVATE void sqlite3ValueFree(47135,1695858
SQLITE_PRIVATE int sqlite3ValueBytes(47145,1696114
SQLITE_PRIVATE int sqlite3VdbeAddopTrace 47186,1697499
SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(sqlite3VdbeCreate47193,1697601
SQLITE_PRIVATE void sqlite3VdbeSetSql(47211,1697958
SQLITE_API const char *sqlite3_sql(sqlite3_sql47224,1698298
SQLITE_PRIVATE void sqlite3VdbeSwap(47232,1698481
SQLITE_PRIVATE void sqlite3VdbeTrace(47254,1698893
static int growOpArray(47268,1699336
SQLITE_PRIVATE int sqlite3VdbeAddOp3(47295,1700092
SQLITE_PRIVATE int sqlite3VdbeAddOp0(47327,1700728
SQLITE_PRIVATE int sqlite3VdbeAddOp1(47330,1700829
SQLITE_PRIVATE int sqlite3VdbeAddOp2(47333,1700939
SQLITE_PRIVATE int sqlite3VdbeAddOp4(47341,1701124
SQLITE_PRIVATE int sqlite3VdbeMakeLabel(47369,1702226
SQLITE_PRIVATE void sqlite3VdbeResolveLabel(47390,1702853
typedef struct VdbeOpIter VdbeOpIter;47417,1703606
struct VdbeOpIter 47418,1703644
  Vdbe *v;v47419,1703664
  SubProgram **apSub;apSub47420,1703738
  int nSub;47421,1703794
  int iAddr;47422,1703856
  int iSub;47423,1703929
static Op *opIterNext(opIterNext47425,1704012
SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(47489,1705739
static void resolveP2Values(47531,1707269
SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(47572,1708348
SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(sqlite3VdbeTakeOpArray47588,1708965
SQLITE_PRIVATE int sqlite3VdbeAddOpList(47605,1709413
SQLITE_PRIVATE void sqlite3VdbeChangeP1(47647,1710551
SQLITE_PRIVATE void sqlite3VdbeChangeP2(47659,1710844
SQLITE_PRIVATE void sqlite3VdbeChangeP3(47670,1711079
SQLITE_PRIVATE void sqlite3VdbeChangeP5(47682,1711328
SQLITE_PRIVATE void sqlite3VdbeJumpHere(47694,1711606
static void freeEphemeralFunction(47703,1711831
static void freeP4(47712,1712033
static void vdbeFreeOpArray(47757,1713144
SQLITE_PRIVATE void sqlite3VdbeProgramDelete(47783,1714036
SQLITE_PRIVATE void sqlite3VdbeChangeToNoop(47803,1714429
SQLITE_PRIVATE void sqlite3VdbeChangeP4(47841,1715955
SQLITE_PRIVATE void sqlite3VdbeComment(47915,1718117
SQLITE_PRIVATE void sqlite3VdbeNoopComment(47928,1718525
SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(sqlite3VdbeGetOp47962,1720005
static char *displayP4(displayP447985,1720626
SQLITE_PRIVATE void sqlite3VdbeUsesBtree(48087,1723306
SQLITE_PRIVATE void sqlite3VdbePrintOp(48103,1723752
static void releaseMemArray(48124,1724266
SQLITE_PRIVATE void sqlite3VdbeFrameDelete(48161,1725631
SQLITE_PRIVATE int sqlite3VdbeReleaseBuffers(48174,1725980
SQLITE_PRIVATE int sqlite3VdbeList(48206,1726956
SQLITE_PRIVATE void sqlite3VdbePrintSql(48374,1731620
SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(48391,1732027
static void allocSpace(48433,1733335
SQLITE_PRIVATE void sqlite3VdbeMakeReady(48469,1734793
SQLITE_PRIVATE void sqlite3VdbeFreeCursor(48583,1738331
SQLITE_PRIVATE int sqlite3VdbeFrameRestore(48612,1739169
static void closeAllCursors(48633,1739776
static void Cleanup(48664,1740484
SQLITE_PRIVATE void sqlite3VdbeSetNumCols(48686,1741195
SQLITE_PRIVATE int sqlite3VdbeSetColName(48714,1742105
static int vdbeCommit(48742,1743187
static void checkActiveVdbeCnt(48969,1750829
#define checkActiveVdbeCnt(48985,1751157
static void invalidateCursorsOnModifiedBtrees(49004,1751903
SQLITE_PRIVATE int sqlite3VdbeCloseStatement(49024,1752561
SQLITE_PRIVATE void sqlite3VdbeMutexArrayEnter(49087,1754921
SQLITE_PRIVATE int sqlite3VdbeCheckFk(49107,1755603
SQLITE_PRIVATE int sqlite3VdbeHalt(49132,1756555
SQLITE_PRIVATE void sqlite3VdbeResetStepResult(49314,1762585
SQLITE_PRIVATE int sqlite3VdbeReset(49329,1763052
SQLITE_PRIVATE int sqlite3VdbeFinalize(49406,1765324
SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(49422,1765811
SQLITE_PRIVATE void sqlite3VdbeDelete(49438,1766176
SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(49476,1767372
SQLITE_PRIVATE u32 sqlite3VdbeSerialType(49553,1770068
#   define MAX_6BYTE 49562,1770299
SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(49591,1770967
static u64 floatSwap(49635,1772916
    u64 r;49637,1772956
    u32 i[i49638,1772967
# define swapMixedEndianFloat(49648,1773073
# define swapMixedEndianFloat(49650,1773130
SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(49671,1774040
SQLITE_PRIVATE u32 sqlite3VdbeSerialGet(49721,1775311
SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeRecordUnpack(sqlite3VdbeRecordUnpack49828,1778666
SQLITE_PRIVATE void sqlite3VdbeDeleteUnpackedRecord(49889,1780706
SQLITE_PRIVATE int sqlite3VdbeRecordCompare(49934,1782674
SQLITE_PRIVATE int sqlite3VdbeIdxRowid(50030,1785828
SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare(50110,1788679
SQLITE_PRIVATE void sqlite3VdbeSetChanges(50144,1789836
SQLITE_PRIVATE void sqlite3VdbeCountChanges(50154,1790102
SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(50168,1790600
SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(sqlite3VdbeDb50178,1790796
SQLITE_API int sqlite3_expired(50211,1791950
SQLITE_API int sqlite3_finalize(50226,1792426
SQLITE_API int sqlite3_reset(50252,1793121
SQLITE_API int sqlite3_clear_bindings(50271,1793583
SQLITE_API const void *sqlite3_value_blob(sqlite3_value_blob50292,1794132
SQLITE_API int sqlite3_value_bytes(50303,1794412
SQLITE_API int sqlite3_value_bytes16(50306,1794518
SQLITE_API double sqlite3_value_double(50309,1794633
SQLITE_API int sqlite3_value_int(50312,1794739
SQLITE_API sqlite_int64 sqlite3_value_int64(50315,1794843
SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value_text50318,1794953
SQLITE_API const void *sqlite3_value_text16(sqlite3_value_text1650322,1795123
SQLITE_API const void *sqlite3_value_text16be(sqlite3_value_text16be50325,1795244
SQLITE_API const void *sqlite3_value_text16le(sqlite3_value_text16le50328,1795363
SQLITE_API int sqlite3_value_type(50332,1795513
static void setResultStrOrError(50344,1795965
SQLITE_API void sqlite3_result_blob(50355,1796387
SQLITE_API void sqlite3_result_double(50365,1796619
SQLITE_API void sqlite3_result_error(50369,1796790
SQLITE_API void sqlite3_result_error16(50375,1797055
SQLITE_API void sqlite3_result_int(50381,1797310
SQLITE_API void sqlite3_result_int64(50385,1797479
SQLITE_API void sqlite3_result_null(50389,1797645
SQLITE_API void sqlite3_result_text(50393,1797793
SQLITE_API void sqlite3_result_text16(50403,1798042
SQLITE_API void sqlite3_result_text16be(50412,1798275
SQLITE_API void sqlite3_result_text16le(50421,1798506
SQLITE_API void sqlite3_result_value(50431,1798768
SQLITE_API void sqlite3_result_zeroblob(50435,1798945
SQLITE_API void sqlite3_result_error_code(50439,1799111
SQLITE_API void sqlite3_result_error_toobig(50448,1799412
SQLITE_API void sqlite3_result_error_nomem(50456,1799712
static int sqlite3Step(50472,1800314
SQLITE_API int sqlite3_step(50579,1803305
SQLITE_API void *sqlite3_user_data(sqlite3_user_data50620,1804703
SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context_db_handle50629,1804914
SQLITE_PRIVATE void sqlite3InvalidFunction(50642,1805420
SQLITE_API void *sqlite3_aggregate_context(sqlite3_aggregate_context50661,1806121
SQLITE_API void *sqlite3_get_auxdata(sqlite3_get_auxdata50687,1806801
SQLITE_API void sqlite3_set_auxdata(50703,1807309
SQLITE_API int sqlite3_aggregate_count(50752,1808636
SQLITE_API int sqlite3_column_count(50761,1808865
SQLITE_API int sqlite3_data_count(50770,1809106
static Mem *columnMem(columnMem50783,1809491
static void columnMallocFailure(50839,1811628
SQLITE_API const void *sqlite3_column_blob(sqlite3_column_blob50857,1812247
SQLITE_API int sqlite3_column_bytes(50867,1812591
SQLITE_API int sqlite3_column_bytes16(50872,1812757
SQLITE_API double sqlite3_column_double(50877,1812927
SQLITE_API int sqlite3_column_int(50882,1813101
SQLITE_API sqlite_int64 sqlite3_column_int64(50887,1813263
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_column_text50892,1813447
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_column_value50897,1813645
SQLITE_API const void *sqlite3_column_text16(sqlite3_column_text1650907,1813944
SQLITE_API int sqlite3_column_type(50913,1814159
static const void *columnName(columnName50942,1815258
SQLITE_API const char *sqlite3_column_name(sqlite3_column_name50976,1816025
SQLITE_API const void *sqlite3_column_name16(sqlite3_column_name1650981,1816219
SQLITE_API const char *sqlite3_column_decltype(sqlite3_column_decltype51001,1816834
SQLITE_API const void *sqlite3_column_decltype16(sqlite3_column_decltype1651006,1817036
SQLITE_API const char *sqlite3_column_database_name(sqlite3_column_database_name51019,1817545
SQLITE_API const void *sqlite3_column_database_name16(sqlite3_column_database_name1651024,1817752
SQLITE_API const char *sqlite3_column_table_name(sqlite3_column_table_name51035,1818192
SQLITE_API const void *sqlite3_column_table_name16(sqlite3_column_table_name1651040,1818393
SQLITE_API const char *sqlite3_column_origin_name(sqlite3_column_origin_name51051,1818834
SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_column_origin_name1651056,1819037
static int vdbeUnbind(51079,1819901
static int bindText(51104,1820501
SQLITE_API int sqlite3_bind_blob(51136,1821405
SQLITE_API int sqlite3_bind_double(51145,1821588
SQLITE_API int sqlite3_bind_int(51155,1821862
SQLITE_API int sqlite3_bind_int64(51158,1821981
SQLITE_API int sqlite3_bind_null(51168,1822259
SQLITE_API int sqlite3_bind_text(51177,1822463
SQLITE_API int sqlite3_bind_text16(51187,1822683
SQLITE_API int sqlite3_bind_value(51197,1822916
SQLITE_API int sqlite3_bind_zeroblob(51228,1823737
SQLITE_API int sqlite3_bind_parameter_count(51243,1824128
static void createVarMap(51253,1824390
SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_bind_parameter_name51280,1825186
SQLITE_API int sqlite3_bind_parameter_index(51294,1825543
SQLITE_PRIVATE int sqlite3TransferBindings(51315,1825961
SQLITE_API int sqlite3_transfer_bindings(51342,1826884
SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_db_handle51358,1827425
SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3_next_stmt51368,1827767
SQLITE_API int sqlite3_stmt_status(51383,1828149
SQLITE_API int sqlite3_search_count 51448,1831030
SQLITE_API int sqlite3_interrupt_count 51460,1831431
SQLITE_API int sqlite3_sort_count 51471,1831821
SQLITE_API int sqlite3_max_blobsize 51482,1832228
static void updateMaxBlobsize(51483,1832269
SQLITE_API int sqlite3_found_count 51498,1832749
# define UPDATE_MAX_BLOBSIZE(51506,1832986
# define UPDATE_MAX_BLOBSIZE(51508,1833046
#define Stringify(51515,1833201
#define Deephemeralize(51530,1833835
#define ExpandBlob(51538,1834050
#define storeTypeInfo(51547,1834470
static void _storeTypeInfo(51548,1834515
static const unsigned char opcodeProperty[opcodeProperty51572,1835091
SQLITE_PRIVATE int sqlite3VdbeOpcodeHasProperty(51578,1835249
static VdbeCursor *allocateCursor(allocateCursor51587,1835534
static void applyNumericAffinity(51648,1837792
static void applyAffinity(51684,1838862
SQLITE_API int sqlite3_value_numeric_type(51716,1840066
SQLITE_PRIVATE void sqlite3ValueApplyAffinity(51727,1840348
SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(51740,1840622
static void memTracePrint(51822,1842754
static void registerTrace(51842,1843336
#  define REGISTER_TRACE(51850,1843505
#  define REGISTER_TRACE(51852,1843581
#define _HWTIME_H_51882,1844467
  __inline__ sqlite_uint64 sqlite3Hwtime(51895,1844859
  __declspec(51903,1845067
  __inline__ sqlite_uint64 sqlite3Hwtime(51914,1845282
  __inline__ sqlite_uint64 sqlite3Hwtime(51922,1845477
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(51946,1846219
#define CHECK_FOR_INTERRUPT 51967,1846987
static int fileExists(51971,1847097
static int checkSavepointCount(51998,1847949
SQLITE_PRIVATE int sqlite3VdbeExec(52038,1849425
  union vdbeExecUnion 52068,1850798
    struct OP_Yield_stack_vars 52069,1850822
      int pcDest;52070,1850855
    } aa;52071,1850873
    struct OP_Variable_stack_vars 52072,1850883
      int p1;52073,1850919
      int p2;52074,1850970
      int n;52075,1851019
      Mem *pVar;pVar52076,1851078
    } ab;52077,1851131
    struct OP_Move_stack_vars 52078,1851141
      char *zMalloc;zMalloc52079,1851173
      int n;52080,1851240
      int p1;52081,1851302
      int p2;52082,1851353
    } ac;52083,1851402
    struct OP_ResultRow_stack_vars 52084,1851412
      Mem *pMem;pMem52085,1851449
      int i;52086,1851466
    } ad;52087,1851479
    struct OP_Concat_stack_vars 52088,1851489
      i64 nByte;52089,1851523
    } ae;52090,1851540
    struct OP_Remainder_stack_vars 52091,1851550
      int flags;52092,1851587
      i64 iA;52093,1851653
      i64 iB;52094,1851711
      double rA;52095,1851770
      double rB;52096,1851825
    } af;52097,1851881
    struct OP_Function_stack_vars 52098,1851891
      int i;52099,1851927
      Mem *pArg;pArg52100,1851940
      sqlite3_context ctx;52101,1851957
      sqlite3_value **apVal;apVal52102,1851984
      int n;52103,1852013
    } ag;52104,1852026
    struct OP_ShiftRight_stack_vars 52105,1852036
      i64 a;52106,1852074
      i64 b;52107,1852087
    } ah;52108,1852100
    struct OP_Ge_stack_vars 52109,1852110
      int res;52110,1852140
      char affinity;52111,1852218
    } ai;52112,1852281
    struct OP_Compare_stack_vars 52113,1852291
      int n;52114,1852326
      int i;52115,1852339
      int p1;52116,1852352
      int p2;52117,1852366
      const KeyInfo *pKeyInfo;pKeyInfo52118,1852380
      int idx;52119,1852411
      CollSeq *pColl;pColl52120,1852426
      int bRev;52121,1852496
    } aj;52122,1852558
    struct OP_Or_stack_vars 52123,1852568
      int v1;52124,1852598
      int v2;52125,1852674
    } ak;52126,1852750
    struct OP_IfNot_stack_vars 52127,1852760
      int c;52128,1852793
    } al;52129,1852806
    struct OP_Column_stack_vars 52130,1852816
      u32 payloadSize;52131,1852850
      i64 payloadSize64;52132,1852911
      int p1;52133,1852972
      int p2;52134,1853026
      VdbeCursor *pC;pC52135,1853083
      char *zRec;zRec52136,1853130
      BtCursor *pCrsr;pCrsr52137,1853193
      u32 *aType;aType52138,1853241
      u32 *aOffset;aOffset52139,1853323
      int nField;52140,1853408
      int len;52141,1853470
      int i;52142,1853550
      char *zData;zData52143,1853594
      Mem *pDest;pDest52144,1853658
      Mem sMem;52145,1853724
      u8 *zIdx;zIdx52146,1853792
      u8 *zEndHdr;zEndHdr52147,1853841
      u32 offset;52148,1853911
      u64 offset64;52149,1853963
      int szHdr;52150,1854043
      int avail;52151,1854123
      Mem *pReg;pReg52152,1854188
    } am;52153,1854246
    struct OP_Affinity_stack_vars 52154,1854256
      char *zAffinity;zAffinity52155,1854292
      Mem *pData0;pData052156,1854350
      Mem *pLast;pLast52157,1854423
      Mem *pRec;pRec52158,1854495
    } an;52159,1854543
    struct OP_MakeRecord_stack_vars 52160,1854553
      u8 *zNewRecord;zNewRecord52161,1854591
      Mem *pRec;pRec52162,1854671
      u64 nData;52163,1854721
      int nHdr;52164,1854786
      i64 nByte;52165,1854853
      int nZero;52166,1854924
      int nVarint;52167,1855005
      u32 serial_type;52168,1855068
      Mem *pData0;pData052169,1855114
      Mem *pLast;pLast52170,1855192
      int nField;52171,1855252
      char *zAffinity;zAffinity52172,1855318
      int file_format;52173,1855388
      int i;52174,1855455
      int len;52175,1855517
    } ao;52176,1855570
    struct OP_Count_stack_vars 52177,1855580
      i64 nEntry;52178,1855613
      BtCursor *pCrsr;pCrsr52179,1855631
    } ap;52180,1855654
    struct OP_Savepoint_stack_vars 52181,1855664
      int p1;52182,1855701
      char *zName;zName52183,1855765
      int nName;52184,1855827
      Savepoint *pNew;pNew52185,1855844
      Savepoint *pSavepoint;pSavepoint52186,1855867
      Savepoint *pTmp;pTmp52187,1855896
      int iSavepoint;52188,1855919
      int ii;52189,1855941
    } aq;52190,1855955
    struct OP_AutoCommit_stack_vars 52191,1855965
      int desiredAutoCommit;52192,1856003
      int iRollback;52193,1856032
      int turnOnAC;52194,1856053
    } ar;52195,1856073
    struct OP_Transaction_stack_vars 52196,1856083
      Btree *pBt;pBt52197,1856122
    } as;52198,1856140
    struct OP_ReadCookie_stack_vars 52199,1856150
      int iMeta;52200,1856188
      int iDb;52201,1856205
      int iCookie;52202,1856220
    } at;52203,1856239
    struct OP_SetCookie_stack_vars 52204,1856249
      Db *pDb;pDb52205,1856286
    } au;52206,1856301
    struct OP_VerifyCookie_stack_vars 52207,1856311
      int iMeta;52208,1856351
      Btree *pBt;pBt52209,1856368
    } av;52210,1856386
    struct OP_OpenWrite_stack_vars 52211,1856396
      int nField;52212,1856433
      KeyInfo *pKeyInfo;pKeyInfo52213,1856451
      int p2;52214,1856476
      int iDb;52215,1856490
      int wrFlag;52216,1856505
      Btree *pX;pX52217,1856523
      VdbeCursor *pCur;pCur52218,1856540
      Db *pDb;pDb52219,1856564
    } aw;52220,1856579
    struct OP_OpenEphemeral_stack_vars 52221,1856589
      VdbeCursor *pCx;pCx52222,1856630
    } ax;52223,1856653
    struct OP_OpenPseudo_stack_vars 52224,1856663
      VdbeCursor *pCx;pCx52225,1856701
    } ay;52226,1856724
    struct OP_SeekGt_stack_vars 52227,1856734
      int res;52228,1856768
      int oc;52229,1856783
      VdbeCursor *pC;pC52230,1856797
      UnpackedRecord r;52231,1856819
      int nField;52232,1856843
      i64 iKey;52233,1856861
    } az;52234,1856916
    struct OP_Seek_stack_vars 52235,1856926
      VdbeCursor *pC;pC52236,1856958
    } ba;52237,1856980
    struct OP_Found_stack_vars 52238,1856990
      int alreadyExists;52239,1857023
      VdbeCursor *pC;pC52240,1857048
      int res;52241,1857070
      UnpackedRecord *pIdxKey;pIdxKey52242,1857085
      char aTempRec[aTempRec52243,1857116
    } bb;52244,1857189
    struct OP_IsUnique_stack_vars 52245,1857199
      u16 ii;52246,1857235
      VdbeCursor *pCx;pCx52247,1857249
      BtCursor *pCrsr;pCrsr52248,1857272
      u16 nField;52249,1857295
      Mem *aMem;aMem52250,1857313
      UnpackedRecord r;52251,1857330
      i64 R;52252,1857401
    } bc;52253,1857476
    struct OP_NotExists_stack_vars 52254,1857486
      VdbeCursor *pC;pC52255,1857523
      BtCursor *pCrsr;pCrsr52256,1857545
      int res;52257,1857568
      u64 iKey;52258,1857583
    } bd;52259,1857599
    struct OP_NewRowid_stack_vars 52260,1857609
      i64 v;52261,1857645
      VdbeCursor *pC;pC52262,1857694
      int res;52263,1857766
      int cnt;52264,1857833
      Mem *pMem;pMem52265,1857908
      VdbeFrame *pFrame;pFrame52266,1857992
    } be;52267,1858046
    struct OP_Insert_stack_vars 52268,1858056
      Mem *pData;pData52269,1858090
      Mem *pKey;pKey52270,1858172
      i64 iKey;52271,1858239
      VdbeCursor *pC;pC52272,1858324
      int nZero;52273,1858399
      int seekResult;52274,1858460
      const char *zDb;zDb52275,1858541
      const char *zTbl;zTbl52276,1858611
      int op;52277,1858678
    } bf;52278,1858763
    struct OP_Delete_stack_vars 52279,1858773
      i64 iKey;52280,1858807
      VdbeCursor *pC;pC52281,1858823
    } bg;52282,1858845
    struct OP_RowData_stack_vars 52283,1858855
      VdbeCursor *pC;pC52284,1858890
      BtCursor *pCrsr;pCrsr52285,1858912
      u32 n;52286,1858935
      i64 n64;52287,1858948
    } bh;52288,1858963
    struct OP_Rowid_stack_vars 52289,1858973
      VdbeCursor *pC;pC52290,1859006
      i64 v;52291,1859028
      sqlite3_vtab *pVtab;pVtab52292,1859041
      const sqlite3_module *pModule;pModule52293,1859068
    } bi;52294,1859105
    struct OP_NullRow_stack_vars 52295,1859115
      VdbeCursor *pC;pC52296,1859150
    } bj;52297,1859172
    struct OP_Last_stack_vars 52298,1859182
      VdbeCursor *pC;pC52299,1859214
      BtCursor *pCrsr;pCrsr52300,1859236
      int res;52301,1859259
    } bk;52302,1859274
    struct OP_Rewind_stack_vars 52303,1859284
      VdbeCursor *pC;pC52304,1859318
      BtCursor *pCrsr;pCrsr52305,1859340
      int res;52306,1859363
    } bl;52307,1859378
    struct OP_Next_stack_vars 52308,1859388
      VdbeCursor *pC;pC52309,1859420
      BtCursor *pCrsr;pCrsr52310,1859442
      int res;52311,1859465
    } bm;52312,1859480
    struct OP_IdxInsert_stack_vars 52313,1859490
      VdbeCursor *pC;pC52314,1859527
      BtCursor *pCrsr;pCrsr52315,1859549
      int nKey;52316,1859572
      const char *zKey;zKey52317,1859588
    } bn;52318,1859612
    struct OP_IdxDelete_stack_vars 52319,1859622
      VdbeCursor *pC;pC52320,1859659
      BtCursor *pCrsr;pCrsr52321,1859681
      int res;52322,1859704
      UnpackedRecord r;52323,1859719
    } bo;52324,1859743
    struct OP_IdxRowid_stack_vars 52325,1859753
      BtCursor *pCrsr;pCrsr52326,1859789
      VdbeCursor *pC;pC52327,1859812
      i64 rowid;52328,1859834
    } bp;52329,1859851
    struct OP_IdxGE_stack_vars 52330,1859861
      VdbeCursor *pC;pC52331,1859894
      int res;52332,1859916
      UnpackedRecord r;52333,1859931
    } bq;52334,1859955
    struct OP_Destroy_stack_vars 52335,1859965
      int iMoved;52336,1860000
      int iCnt;52337,1860018
      Vdbe *pVdbe;pVdbe52338,1860034
      int iDb;52339,1860053
    } br;52340,1860068
    struct OP_Clear_stack_vars 52341,1860078
      int nChange;52342,1860111
    } bs;52343,1860130
    struct OP_CreateTable_stack_vars 52344,1860140
      int pgno;52345,1860179
      int flags;52346,1860195
      Db *pDb;pDb52347,1860212
    } bt;52348,1860227
    struct OP_ParseSchema_stack_vars 52349,1860237
      int iDb;52350,1860276
      const char *zMaster;zMaster52351,1860291
      char *zSql;zSql52352,1860318
      InitData initData;52353,1860336
    } bu;52354,1860361
    struct OP_IntegrityCk_stack_vars 52355,1860371
      int nRoot;52356,1860410
      int *aRoot;aRoot52357,1860490
      int j;52358,1860569
      int nErr;52359,1860610
      char *z;z52360,1860664
      Mem *pnErr;pnErr52361,1860717
    } bv;52362,1860788
    struct OP_RowSetAdd_stack_vars 52363,1860798
      Mem *pIdx;pIdx52364,1860835
      Mem *pVal;pVal52365,1860852
    } bw;52366,1860869
    struct OP_RowSetRead_stack_vars 52367,1860879
      Mem *pIdx;pIdx52368,1860917
      i64 val;52369,1860934
    } bx;52370,1860949
    struct OP_RowSetTest_stack_vars 52371,1860959
      int iSet;52372,1860997
      int exists;52373,1861013
    } by;52374,1861031
    struct OP_Program_stack_vars 52375,1861041
      int nMem;52376,1861076
      int nByte;52377,1861155
      Mem *pRt;pRt52378,1861239
      Mem *pMem;pMem52379,1861310
      Mem *pEnd;pEnd52380,1861383
      VdbeFrame *pFrame;pFrame52381,1861449
      SubProgram *pProgram;pProgram52382,1861514
      void *t;t52383,1861573
    } bz;52384,1861635
    struct OP_Param_stack_vars 52385,1861645
      VdbeFrame *pFrame;pFrame52386,1861678
      Mem *pIn;pIn52387,1861703
    } ca;52388,1861719
    struct OP_MemMax_stack_vars 52389,1861729
      Mem *pIn1;pIn152390,1861763
      VdbeFrame *pFrame;pFrame52391,1861780
    } cb;52392,1861805
    struct OP_AggStep_stack_vars 52393,1861815
      int n;52394,1861850
      int i;52395,1861863
      Mem *pMem;pMem52396,1861876
      Mem *pRec;pRec52397,1861893
      sqlite3_context ctx;52398,1861910
      sqlite3_value **apVal;apVal52399,1861937
    } cc;52400,1861966
    struct OP_AggFinal_stack_vars 52401,1861976
      Mem *pMem;pMem52402,1862012
    } cd;52403,1862029
    struct OP_IncrVacuum_stack_vars 52404,1862039
      Btree *pBt;pBt52405,1862077
    } ce;52406,1862095
    struct OP_VBegin_stack_vars 52407,1862105
      VTable *pVTab;pVTab52408,1862139
    } cf;52409,1862160
    struct OP_VOpen_stack_vars 52410,1862170
      VdbeCursor *pCur;pCur52411,1862203
      sqlite3_vtab_cursor *pVtabCursor;pVtabCursor52412,1862227
      sqlite3_vtab *pVtab;pVtab52413,1862267
      sqlite3_module *pModule;pModule52414,1862294
    } cg;52415,1862325
    struct OP_VFilter_stack_vars 52416,1862335
      int nArg;52417,1862370
      int iQuery;52418,1862386
      const sqlite3_module *pModule;pModule52419,1862404
      Mem *pQuery;pQuery52420,1862441
      Mem *pArgc;pArgc52421,1862460
      sqlite3_vtab_cursor *pVtabCursor;pVtabCursor52422,1862478
      sqlite3_vtab *pVtab;pVtab52423,1862518
      VdbeCursor *pCur;pCur52424,1862545
      int res;52425,1862569
      int i;52426,1862584
      Mem **apArg;apArg52427,1862597
    } ch;52428,1862616
    struct OP_VColumn_stack_vars 52429,1862626
      sqlite3_vtab *pVtab;pVtab52430,1862661
      const sqlite3_module *pModule;pModule52431,1862688
      Mem *pDest;pDest52432,1862725
      sqlite3_context sContext;52433,1862743
    } ci;52434,1862775
    struct OP_VNext_stack_vars 52435,1862785
      sqlite3_vtab *pVtab;pVtab52436,1862818
      const sqlite3_module *pModule;pModule52437,1862845
      int res;52438,1862882
      VdbeCursor *pCur;pCur52439,1862897
    } cj;52440,1862921
    struct OP_VRename_stack_vars 52441,1862931
      sqlite3_vtab *pVtab;pVtab52442,1862966
      Mem *pName;pName52443,1862993
    } ck;52444,1863011
    struct OP_VUpdate_stack_vars 52445,1863021
      sqlite3_vtab *pVtab;pVtab52446,1863056
      sqlite3_module *pModule;pModule52447,1863083
      int nArg;52448,1863114
      int i;52449,1863130
      sqlite_int64 rowid;52450,1863143
      Mem **apArg;apArg52451,1863169
      Mem *pX;pX52452,1863188
    } cl;52453,1863203
    struct OP_Pagecount_stack_vars 52454,1863213
      int p1;52455,1863250
      int nPage;52456,1863264
      Pager *pPager;pPager52457,1863281
    } cm;52458,1863302
    struct OP_Trace_stack_vars 52459,1863312
      char *zTrace;zTrace52460,1863345
    } cn;52461,1863365
case OP_Not:OP_Not53858,1909431
case OP_BitNot:OP_BitNot53874,1909870
#   define MAX_ROWID 55574,1973067
#   define MAX_ROWID 55580,1973335
case OP_TableLock:OP_TableLock57180,2027284
case OP_VCreate:OP_VCreate57228,2028740
      u64 elapsed 57656,2042154
  p->rc rc57693,2043259
  rc 57696,2043348
  sqlite3BtreeMutexArrayLeave(&p->aMutex)aMutex57702,2043518
  rc 57710,2043741
  goto vdbe_error_halt;57711,2043763
  db->mallocFailed mallocFailed57716,2043840
  rc 57718,2043918
  goto vdbe_error_halt;57719,2043939
  rc 57724,2044036
  goto vdbe_error_halt;57736,2044404
  rc 57743,2044571
  p->rc rc57744,2044596
  goto vdbe_error_halt;57746,2044672
typedef struct Incrblob Incrblob;57774,2045466
struct Incrblob 57775,2045500
  int flags;57776,2045518
  int nByte;57777,2045596
  int iOffset;57778,2045656
  BtCursor *pCsr;pCsr57779,2045723
  sqlite3_stmt *pStmt;pStmt57780,2045783
  sqlite3 *db;db57781,2045845
SQLITE_API int sqlite3_blob_open(57787,2045934
SQLITE_API int sqlite3_blob_close(58050,2054813
static int blobReadWrite(58070,2055194
SQLITE_API int sqlite3_blob_read(58120,2056411
SQLITE_API int sqlite3_blob_write(58127,2056600
SQLITE_API int sqlite3_blob_bytes(58137,2056936
struct JournalFile 58185,2058487
  sqlite3_io_methods *pMethod;pMethod58186,2058508
  int nBuf;58187,2058577
  char *zBuf;zBuf58188,2058641
  int iSize;58189,2058712
  int flags;58190,2058784
  sqlite3_vfs *pVfs;pVfs58191,2058836
  sqlite3_file *pReal;pReal58192,2058902
  const char *zJournal;zJournal58193,2058980
typedef struct JournalFile JournalFile;58195,2059048
static int createFile(58201,2059189
static int jrnlClose(58220,2059612
static int jrnlRead(58232,2059828
static int jrnlWrite(58253,2060393
static int jrnlTruncate(58280,2061097
static int jrnlSync(58294,2061379
static int jrnlFileSize(58308,2061635
static struct sqlite3_io_methods JournalFileMethods 58322,2061956
SQLITE_PRIVATE int sqlite3JournalOpen(58341,2062482
SQLITE_PRIVATE int sqlite3JournalCreate(58370,2063370
SQLITE_PRIVATE int sqlite3JournalSize(58381,2063669
typedef struct MemJournal MemJournal;58408,2064663
typedef struct FilePoint FilePoint;58409,2064701
typedef struct FileChunk FileChunk;58410,2064737
#define JOURNAL_CHUNKSIZE 58420,2065100
# define MIN(58425,2065227
struct FileChunk 58431,2065351
  FileChunk *pNext;pNext58432,2065370
  u8 zChunk[zChunk58433,2065436
struct FilePoint 58440,2065636
  sqlite3_int64 iOffset;58441,2065655
  FileChunk *pChunk;pChunk58442,2065733
struct MemJournal 58449,2065930
  sqlite3_io_methods *pMethod;pMethod58450,2065950
  FileChunk *pFirst;pFirst58451,2066018
  FilePoint endpoint;58452,2066087
  FilePoint readpoint;58453,2066158
static int memjrnlRead(58460,2066357
static int memjrnlWrite(58505,2067622
static int memjrnlTruncate(58555,2069017
static int memjrnlClose(58573,2069394
static int memjrnlSync(58587,2069788
static int memjrnlFileSize(58596,2070210
static struct sqlite3_io_methods MemJournalMethods 58605,2070449
SQLITE_PRIVATE void sqlite3MemJournalOpen(58624,2071013
SQLITE_PRIVATE int sqlite3IsMemJournal(58635,2071321
SQLITE_PRIVATE int sqlite3MemJournalSize(58643,2071559
SQLITE_PRIVATE int sqlite3WalkExpr(58686,2073065
SQLITE_PRIVATE int sqlite3WalkExprList(58709,2073894
SQLITE_PRIVATE int sqlite3WalkSelectExpr(58726,2074415
SQLITE_PRIVATE int sqlite3WalkSelectFrom(58744,2075249
SQLITE_PRIVATE int sqlite3WalkSelect(58771,2076001
static void resolveAlias(58833,2078317
static int lookupName(58907,2081375
static int resolveExprStep(59191,2091038
static int resolveAsName(59375,2097138
static int resolveOrderByTermToExprList(59414,2098420
static void resolveOutOfRangeError(59456,2099560
static int resolveCompoundOrderBy(59482,2100674
SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy(59572,2103327
static int resolveOrderGroupBy(59622,2105303
static int resolveSelectStep(59672,2107233
SQLITE_PRIVATE int sqlite3ResolveExprNames(59887,2114764
SQLITE_PRIVATE void sqlite3ResolveSelectNames(59938,2116163
SQLITE_PRIVATE char sqlite3ExprAffinity(59986,2117796
SQLITE_PRIVATE Expr *sqlite3ExprSetColl(sqlite3ExprSetColl60018,2118916
SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(sqlite3ExprCollSeq60038,2119505
SQLITE_PRIVATE char sqlite3CompareAffinity(60077,2120597
static char comparisonAffinity(60104,2121461
SQLITE_PRIVATE int sqlite3IndexAffinityOk(60127,2122306
static u8 binaryCompareP5(60143,2122761
SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq(sqlite3BinaryCompareCollSeq60161,2123427
static void codeCompareOperands(60190,2124187
static int codeCompare(60210,2124972
SQLITE_PRIVATE int sqlite3ExprCheckHeight(60241,2126034
static void heightOfExpr(60262,2126735
static void heightOfExprList(60269,2126870
static void heightOfSelect(60277,2127038
static void exprSetHeight(60297,2127722
SQLITE_PRIVATE void sqlite3ExprSetHeight(60314,2128199
SQLITE_PRIVATE int sqlite3SelectExprHeight(60323,2128453
  #define exprSetHeight(60329,2128584
SQLITE_PRIVATE Expr *sqlite3ExprAlloc(sqlite3ExprAlloc60352,2129661
SQLITE_PRIVATE Expr *sqlite3Expr(sqlite3Expr60399,2130942
SQLITE_PRIVATE void sqlite3ExprAttachSubtrees(60416,2131487
SQLITE_PRIVATE Expr *sqlite3PExpr(sqlite3PExpr60452,2132371
SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3ExprAnd60468,2132902
SQLITE_PRIVATE Expr *sqlite3ExprFunction(sqlite3ExprFunction60484,2133285
SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(60515,2134378
SQLITE_PRIVATE void sqlite3ExprClear(60586,2136707
SQLITE_PRIVATE void sqlite3ExprDelete(60605,2137237
static int exprStructSize(60618,2137608
static int dupedExprStructSize(60658,2139467
static int dupedExprNodeSize(60682,2140261
static int dupedExprSize(60703,2141099
static Expr *exprDup(exprDup60722,2141784
SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3ExprDup60823,2145427
SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3ExprListDup60826,2145534
SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3SrcListDup60862,2146759
SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3IdListDup60895,2148046
SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3SelectDup60915,2148635
SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3SelectDup60940,2149592
SQLITE_PRIVATE ExprList *sqlite3ExprListAppend(sqlite3ExprListAppend60955,2150027
SQLITE_PRIVATE void sqlite3ExprListSetName(61001,2151333
SQLITE_PRIVATE void sqlite3ExprListSetSpan(61026,2152216
SQLITE_PRIVATE void sqlite3ExprListCheckLength(61047,2152959
SQLITE_PRIVATE void sqlite3ExprListDelete(61063,2153359
static int exprNodeIsConstant(61091,2154251
static int selectNodeIsConstant(61123,2155333
static int exprIsConst(61128,2155471
SQLITE_PRIVATE int sqlite3ExprIsConstant(61145,2155967
SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(61155,2156284
SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(61168,2156700
SQLITE_PRIVATE int sqlite3ExprIsInteger(61178,2157088
SQLITE_PRIVATE int sqlite3IsRowid(61217,2157931
static int isCandidateForInOpt(61237,2158477
SQLITE_PRIVATE int sqlite3FindInIndex(61322,2162521
SQLITE_PRIVATE void sqlite3CodeSubselect(61454,2167977
static char *dup8bytes(dup8bytes61641,2174976
static void codeReal(61657,2175432
static void codeInteger(61678,2176087
static void cacheEntryClear(61702,2176700
SQLITE_PRIVATE void sqlite3ExprCacheStore(61716,2177053
SQLITE_PRIVATE void sqlite3ExprCacheRemove(61777,2178599
SQLITE_PRIVATE void sqlite3ExprCachePush(61793,2179025
SQLITE_PRIVATE void sqlite3ExprCachePop(61802,2179296
static void sqlite3ExprCachePinRegister(61822,2179880
SQLITE_PRIVATE int sqlite3ExprCodeGetColumn(61847,2180824
SQLITE_PRIVATE void sqlite3ExprCacheClear(61882,2181971
SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(61898,2182318
SQLITE_PRIVATE void sqlite3ExprCodeMove(61914,2182766
SQLITE_PRIVATE void sqlite3ExprCodeCopy(61931,2183246
static int usedAsColumnCache(61943,2183583
SQLITE_PRIVATE void sqlite3ExprHardCopy(61958,2184016
static int codeAlias(61989,2185108
SQLITE_PRIVATE int sqlite3ExprCodeTarget(62031,2186579
SQLITE_PRIVATE int sqlite3ExprCodeTemp(62700,2211215
SQLITE_PRIVATE int sqlite3ExprCode(62717,2211665
SQLITE_PRIVATE int sqlite3ExprCodeAndCache(62741,2212485
static int isAppropriateForFactoring(62779,2214004
static int evalConstExpr(62827,2215367
SQLITE_PRIVATE void sqlite3ExprCodeConstants(62870,2216648
SQLITE_PRIVATE int sqlite3ExprCodeExprList(62885,2217040
SQLITE_PRIVATE void sqlite3ExprIfTrue(62927,2218560
SQLITE_PRIVATE void sqlite3ExprIfFalse(63065,2222911
SQLITE_PRIVATE int sqlite3ExprCompare(63230,2228530
static int addAggInfoColumn(63275,2230021
static int addAggInfoFunc(63293,2230428
static int analyzeAggregate(63312,2230869
static int analyzeAggregatesInSelect(63435,2235541
SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(63455,2236140
SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(63470,2236577
SQLITE_PRIVATE int sqlite3GetTempReg(63483,2236924
SQLITE_PRIVATE void sqlite3ReleaseTempReg(63498,2237343
SQLITE_PRIVATE int sqlite3GetTempRange(63515,2237782
SQLITE_PRIVATE void sqlite3ReleaseTempRange(63528,2238105
static void renameTableFunc(63574,2239678
static void renameParentFunc(63639,2241737
static void renameTriggerFunc(63694,2243585
SQLITE_PRIVATE void sqlite3AlterFunctions(63766,2245819
static char *whereOrName(whereOrName63795,2246987
static char *whereForeignKeys(whereForeignKeys63813,2247581
static char *whereTempTriggers(whereTempTriggers63829,2248083
static void reloadTableSchema(63858,2249198
SQLITE_PRIVATE void sqlite3AlterRenameTable(63903,2250725
SQLITE_PRIVATE void sqlite3MinimumFileFormat(64103,2257431
SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(64132,2258480
SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(64253,2262622
static void openStatTable(64367,2266653
    const char *zName;zName64374,2266961
    const char *zCols;zCols64375,2266984
static void analyzeOneTable(64437,2268978
static void loadAnalysis(64662,2278654
static void analyzeDatabase(64672,2278876
static void analyzeTable(64695,2279522
SQLITE_PRIVATE void sqlite3Analyze(64722,2280443
typedef struct analysisInfo analysisInfo;64780,2282015
struct analysisInfo 64781,2282057
  sqlite3 *db;db64782,2282079
  const char *zDatabase;zDatabase64783,2282094
static int analysisLoader(64793,2282323
SQLITE_PRIVATE void sqlite3DeleteIndexSamples(64827,2283059
SQLITE_PRIVATE int sqlite3AnalysisLoad(64866,2284445
static int resolveAttachExpr(65024,2289426
static void attachFunc(65052,2290184
static void detachFunc(65221,2295228
static void codeAttach(65273,2296575
SQLITE_PRIVATE void sqlite3Detach(65345,2298712
SQLITE_PRIVATE void sqlite3Attach(65366,2299344
SQLITE_PRIVATE int sqlite3FixInit(65390,2300226
SQLITE_PRIVATE int sqlite3FixSrcList(65423,2301548
SQLITE_PRIVATE int sqlite3FixSelect(65450,2302464
SQLITE_PRIVATE int sqlite3FixExpr(65471,2302994
SQLITE_PRIVATE int sqlite3FixExprList(65489,2303532
SQLITE_PRIVATE int sqlite3FixTriggerStep(65506,2303942
SQLITE_API int sqlite3_set_authorizer(65598,2307119
static void sqliteAuthBadReturnCode(65615,2307581
SQLITE_PRIVATE int sqlite3AuthReadCol(65629,2308176
SQLITE_PRIVATE void sqlite3AuthRead(65662,2309465
SQLITE_PRIVATE int sqlite3AuthCheck(65719,2311313
SQLITE_PRIVATE void sqlite3AuthContextPush(65755,2312258
SQLITE_PRIVATE void sqlite3AuthContextPop(65770,2312601
SQLITE_PRIVATE void sqlite3BeginParse(65812,2313902
struct TableLock 65822,2314173
  int iDb;65823,2314192
  int iTab;65824,2314268
  u8 isWriteLock;65825,2314337
  const char *zName;zName65826,2314410
SQLITE_PRIVATE void sqlite3TableLock(65839,2314871
static void codeTableLocks(65879,2316074
  #define codeTableLocks(65894,2316488
SQLITE_PRIVATE void sqlite3FinishCoding(65907,2316885
SQLITE_PRIVATE void sqlite3NestedParse(66009,2320456
# define SAVE_SZ 66014,2320614
SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3FindTable66047,2321738
SQLITE_PRIVATE Table *sqlite3LocateTable(sqlite3LocateTable66072,2322644
SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3FindIndex66111,2323965
static void freeIndex(66129,2324486
static void sqlite3DeleteIndex(66146,2324955
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(66162,2325430
SQLITE_PRIVATE void sqlite3ResetInternalSchema(66198,2326629
SQLITE_PRIVATE void sqlite3CommitInternalChanges(66248,2327982
static void sqliteResetColumnNames(66255,2328140
SQLITE_PRIVATE void sqlite3DeleteTable(66284,2329003
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(66327,2330096
SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3NameFromToken66354,2331007
SQLITE_PRIVATE void sqlite3OpenMasterTable(66369,2331362
SQLITE_PRIVATE int sqlite3FindDbName(66385,2331952
SQLITE_PRIVATE int sqlite3FindDb(66406,2332589
SQLITE_PRIVATE int sqlite3TwoPartName(66431,2333471
SQLITE_PRIVATE int sqlite3CheckObjectName(66468,2334664
SQLITE_PRIVATE void sqlite3StartTable(66494,2335904
#define STRICMP(66698,2342979
SQLITE_PRIVATE void sqlite3AddColumn(66711,2343420
SQLITE_PRIVATE void sqlite3AddNotNull(66760,2344807
SQLITE_PRIVATE char sqlite3AffinityType(66792,2345911
SQLITE_PRIVATE void sqlite3AddColumnType(66837,2347591
SQLITE_PRIVATE void sqlite3AddDefaultValue(66859,2348255
SQLITE_PRIVATE void sqlite3AddPrimaryKey(66902,2349982
SQLITE_PRIVATE void sqlite3AddCheckConstraint(66966,2351858
SQLITE_PRIVATE void sqlite3AddCollateType(66986,2352352
SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(sqlite3LocateCollSeq67037,2354064
SQLITE_PRIVATE void sqlite3ChangeCookie(67071,2355241
static int identLength(67088,2355849
static void identPut(67109,2356638
static char *createTableStmt(createTableStmt67137,2357406
SQLITE_PRIVATE void sqlite3EndTable(67221,2360154
SQLITE_PRIVATE void sqlite3CreateView(67427,2366288
SQLITE_PRIVATE int sqlite3ViewGetColumnNames(67507,2368911
static void sqliteViewResetAll(67601,2372053
# define sqliteViewResetAll(67613,2372421
SQLITE_PRIVATE void sqlite3RootPageMoved(67634,2373397
static void destroyRootPage(67661,2374225
static void destroyTable(67689,2375407
SQLITE_PRIVATE void sqlite3DropTable(67746,2377143
SQLITE_PRIVATE void sqlite3CreateForeignKey(67924,2382833
SQLITE_PRIVATE void sqlite3DeferForeignKey(68044,2386201
static void sqlite3RefillIndex(68065,2387063
SQLITE_PRIVATE Index *sqlite3CreateIndex(sqlite3CreateIndex68149,2390876
SQLITE_PRIVATE void sqlite3DefaultRowEst(68631,2408133
SQLITE_PRIVATE void sqlite3DropIndex(68652,2408543
SQLITE_PRIVATE void *sqlite3ArrayAllocate(sqlite3ArrayAllocate68735,2411171
SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3IdListAppend68770,2412247
SQLITE_PRIVATE void sqlite3IdListDelete(68797,2412792
SQLITE_PRIVATE int sqlite3IdListIndex(68811,2413126
SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge(sqlite3SrcListEnlarge68839,2414091
SQLITE_PRIVATE SrcList *sqlite3SrcListAppend(sqlite3SrcListAppend68921,2416881
SQLITE_PRIVATE void sqlite3SrcListAssignCursors(68956,2417931
SQLITE_PRIVATE void sqlite3SrcListDelete(68974,2418428
SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm(sqlite3SrcListAppendFromTerm69007,2419797
SQLITE_PRIVATE void sqlite3SrcListIndexedBy(69051,2421248
SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(69081,2422374
SQLITE_PRIVATE void sqlite3BeginTransaction(69094,2422610
SQLITE_PRIVATE void sqlite3CommitTransaction(69120,2423200
SQLITE_PRIVATE void sqlite3RollbackTransaction(69140,2423601
SQLITE_PRIVATE void sqlite3Savepoint(69161,2424099
SQLITE_PRIVATE int sqlite3OpenTempDatabase(69181,2424838
SQLITE_PRIVATE void sqlite3CodeVerifySchema(69230,2426856
SQLITE_PRIVATE void sqlite3BeginWriteOperation(69269,2428333
SQLITE_PRIVATE void sqlite3MultiWrite(69283,2428948
SQLITE_PRIVATE void sqlite3MayAbort(69304,2429953
SQLITE_PRIVATE void sqlite3HaltConstraint(69314,2430284
static int collationMatch(69327,2430700
static void reindexTable(69346,2431131
static void reindexDatabases(69365,2431763
SQLITE_PRIVATE void sqlite3Reindex(69396,2432917
SQLITE_PRIVATE KeyInfo *sqlite3IndexKeyinfo(sqlite3IndexKeyinfo69460,2435168
static void callCollNeeded(69512,2436771
static int synthCollSeq(69541,2437808
SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq(sqlite3GetCollSeq69571,2438868
SQLITE_PRIVATE int sqlite3CheckCollSeq(69608,2440206
static CollSeq *findCollSeqEntry(findCollSeqEntry69638,2441226
SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq(sqlite3FindCollSeq69691,2443037
static int matchQuality(69730,2444507
static FuncDef *functionSearch(functionSearch69754,2445129
SQLITE_PRIVATE void sqlite3FuncDefInsert(69772,2445589
SQLITE_PRIVATE FuncDef *sqlite3FindFunction(sqlite3FindFunction69814,2447112
SQLITE_PRIVATE void sqlite3SchemaFree(69892,2449883
SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3SchemaGet69922,2450761
SQLITE_PRIVATE Table *sqlite3SrcListLookup(sqlite3SrcListLookup69965,2452180
SQLITE_PRIVATE int sqlite3IsReadOnly(69986,2452749
SQLITE_PRIVATE void sqlite3MaterializeView(70023,2454027
SQLITE_PRIVATE Expr *sqlite3LimitWhere(sqlite3LimitWhere70065,2455479
SQLITE_PRIVATE void sqlite3DeleteFrom(70157,2459012
# define pTrigger 70204,2461063
# define isView 70205,2461083
# undef isView70208,2461132
# define isView 70209,2461147
 #undef isView70387,2467234
 #undef pTrigger70390,2467272
SQLITE_PRIVATE void sqlite3GenerateRowDelete(70412,2467989
SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete(70518,2472497
SQLITE_PRIVATE int sqlite3GenerateIndexKey(70546,2473562
static CollSeq *sqlite3GetFuncCollSeq(sqlite3GetFuncCollSeq70605,2475580
static void minmaxFunc(70612,2475744
static void typeofFunc(70642,2476462
static void lengthFunc(70663,2476992
static void absFunc(70700,2477715
static void substrFunc(70739,2478798
static void roundFunc(70823,2480513
static void *contextMalloc(contextMalloc70854,2481448
static void upperFunc(70875,2481999
static void lowerFunc(70895,2482609
static void ifnullFunc(70921,2483373
static void randomFunc(70938,2483686
static void randomBlob(70964,2484515
static void last_insert_rowid(70988,2485032
static void changes(71002,2485424
static void total_changes(71016,2485804
struct compareInfo 71029,2486121
  u8 matchAll;71030,2486142
  u8 matchOne;71031,2486157
  u8 matchSet;71032,2486172
  u8 noCase;71033,2486187
# define sqlite3Utf8Read(71043,2486498
# define GlogUpperToLower(71044,2486540
# define GlogUpperToLower(71046,2486606
static const struct compareInfo globInfo 71049,2486691
static const struct compareInfo likeInfoNorm 71052,2486869
static const struct compareInfo likeInfoAlt 71055,2487063
static int patternCompare(71085,2488139
SQLITE_API int sqlite3_like_count 71199,2491567
static void likeFunc(71215,2491995
static void nullifFunc(71268,2493650
static void versionFunc(71284,2494056
static void sourceidFunc(71298,2494434
static const char hexdigits[hexdigits71309,2494724
static void quoteFunc(71325,2495336
static void hexFunc(71390,2497195
static void zeroblobFunc(71418,2497903
static void replaceFunc(71443,2498642
static void trimFunc(71527,2501410
static void soundexFunc(71612,2503854
static void loadExt(71663,2505269
typedef struct SumCtx SumCtx;71686,2505879
struct SumCtx 71687,2505909
  double rSum;71688,2505925
  i64 iSum;71689,2505970
  i64 cnt;71690,2506011
  u8 overflow;71691,2506063
  u8 approx;71692,2506119
static void sumStep(71705,2506633
static void sumFinalize(71731,2507446
static void avgFinalize(71744,2507803
static void totalFinalize(71751,2508001
typedef struct CountCtx CountCtx;71762,2508338
struct CountCtx 71763,2508372
  i64 n;71764,2508390
static void countStep(71770,2508466
static void countFinalize(71786,2509110
static void minmaxStep(71795,2509341
static void minMaxFinalize(71829,2510455
static void groupConcatStep(71843,2510772
static void groupConcatFinalize(71876,2511698
SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(71896,2512290
static void setLikeOptFlag(71912,2512702
SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(71926,2513146
SQLITE_PRIVATE int sqlite3IsLikeFunction(71949,2514103
SQLITE_PRIVATE void sqlite3RegisterGlobalFunctions(71984,2515345
static int locateFkeyIndex(72250,2527549
static void fkLookupParent(72383,2532926
static void fkScanChildren(72526,2539578
SQLITE_PRIVATE FKey *sqlite3FkReferences(sqlite3FkReferences72649,2544659
static void fkTriggerDelete(72662,2545158
SQLITE_PRIVATE void sqlite3FkDropTable(72690,2546237
SQLITE_PRIVATE void sqlite3FkCheck(72751,2548781
#define COLUMN_MASK(72893,2554328
SQLITE_PRIVATE u32 sqlite3FkOldmask(72899,2554503
SQLITE_PRIVATE int sqlite3FkRequired(72935,2555866
static Trigger *fkActionTrigger(fkActionTrigger73010,2558747
SQLITE_PRIVATE void sqlite3FkActions(73199,2565843
SQLITE_PRIVATE void sqlite3FkDelete(73227,2566994
SQLITE_PRIVATE void sqlite3OpenTable(73284,2568926
SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(sqlite3IndexAffinityStr73321,2570328
SQLITE_PRIVATE void sqlite3TableAffinityStr(73363,2571641
static int readsTable(73400,2572832
static int autoIncBegin(73455,2574558
SQLITE_PRIVATE void sqlite3AutoincrementBegin(73487,2575651
static void autoIncStep(73528,2577418
SQLITE_PRIVATE void sqlite3AutoincrementEnd(73541,2577879
# define autoIncBegin(73579,2579146
# define autoIncStep(73580,2579179
SQLITE_PRIVATE void sqlite3Insert(73695,2583435
# define pTrigger 73772,2587026
# define tmask 73773,2587046
# define isView 73774,2587063
# undef isView73777,2587112
# define isView 73778,2587127
 #undef isView74316,2605700
 #undef pTrigger74319,2605738
 #undef tmask74322,2605775
SQLITE_PRIVATE void sqlite3GenerateConstraintChecks(74401,2609527
SQLITE_PRIVATE void sqlite3CompleteInsertion(74672,2619279
SQLITE_PRIVATE int sqlite3OpenTableAndIndices(74732,2621280
SQLITE_API int sqlite3_xferopt_count;74769,2622418
static int xferCompatibleCollation(74777,2622577
static int xferCompatibleIndex(74798,2623154
static int xferOptimization(74855,2625059
SQLITE_API int sqlite3_exec(75113,2635206
  #define SQLITE_CORE 75249,2639443
#define _SQLITE3EXT_H_75273,2640418
typedef struct sqlite3_api_routines sqlite3_api_routines;75275,2640442
struct sqlite3_api_routines 75287,2640874
  void * (*aggregate_context)aggregate_context75288,2640904
  int  (*aggregate_count)aggregate_count75289,2640964
  int  (*bind_blob)bind_blob75290,2641009
  int  (*bind_double)bind_double75291,2641082
  int  (*bind_int)bind_int75292,2641131
  int  (*bind_int64)bind_int6475293,2641174
  int  (*bind_null)bind_null75294,2641228
  int  (*bind_parameter_count)bind_parameter_count75295,2641268
  int  (*bind_parameter_index)bind_parameter_index75296,2641315
  const char * (*bind_parameter_name)bind_parameter_name75297,2641379
  int  (*bind_text)bind_text75298,2641437
  int  (*bind_text16)bind_text1675299,2641510
  int  (*bind_value)bind_value75300,2641583
  int  (*busy_handler)busy_handler75301,2641645
  int  (*busy_timeout)busy_timeout75302,2641703
  int  (*changes)changes75303,2641744
  int  (*close)close75304,2641773
  int  (*collation_needed)collation_needed75305,2641800
  int  (*collation_needed16)collation_needed1675306,2641893
  const void * (*column_blob)column_blob75307,2641988
  int  (*column_bytes)column_bytes75308,2642043
  int  (*column_bytes16)column_bytes1675309,2642091
  int  (*column_count)column_count75310,2642141
  const char * (*column_database_name)column_database_name75311,2642185
  const void * (*column_database_name16)column_database_name1675312,2642244
  const char * (*column_decltype)column_decltype75313,2642305
  const void * (*column_decltype16)column_decltype1675314,2642361
  double  (*column_double)column_double75315,2642417
  int  (*column_int)column_int75316,2642469
  sqlite_int64  (*column_int64)column_int6475317,2642515
  const char * (*column_name)column_name75318,2642572
  const void * (*column_name16)column_name1675319,2642622
  const char * (*column_origin_name)column_origin_name75320,2642674
  const void * (*column_origin_name16)column_origin_name1675321,2642731
  const char * (*column_table_name)column_table_name75322,2642790
  const void * (*column_table_name16)column_table_name1675323,2642846
  const unsigned char * (*column_text)column_text75324,2642904
  const void * (*column_text16)column_text1675325,2642968
  int  (*column_type)column_type75326,2643025
  sqlite3_value* (*column_value)column_value75327,2643072
  void * (*commit_hook)commit_hook75328,2643130
  int  (*complete)complete75329,2643185
  int  (*complete16)complete1675330,2643221
  int  (*create_collation)create_collation75331,2643259
  int  (*create_collation16)create_collation1675332,2643365
  int  (*create_function)create_function75333,2643473
  int  (*create_function16)create_function1675334,2643673
  int (*create_module)create_module75335,2643875
  int  (*data_count)data_count75336,2643949
  sqlite3 * (*db_handle)db_handle75337,2643991
  int (*declare_vtab)declare_vtab75338,2644032
  int  (*enable_shared_cache)enable_shared_cache75339,2644077
  int  (*errcode)errcode75340,2644113
  const char * (*errmsg)errmsg75341,2644144
  const void * (*errmsg16)errmsg1675342,2644180
  int  (*exec)exec75343,2644218
  int  (*expired)expired75344,2644286
  int  (*finalize)finalize75345,2644320
  void  (*free)free75346,2644360
  void  (*free_table)free_table75347,2644384
  int  (*get_autocommit)get_autocommit75348,2644421
  void * (*get_auxdata)get_auxdata75349,2644457
  int  (*get_table)get_table75350,2644504
  int  (*global_recover)global_recover75351,2644572
  void  (*interruptx)interruptx75352,2644604
  sqlite_int64  (*last_insert_rowid)last_insert_rowid75353,2644637
  const char * (*libversion)libversion75354,2644685
  int  (*libversion_number)libversion_number75355,2644721
  void *(*malloc)malloc75356,2644756
  char * (*mprintf)mprintf75357,2644780
  int  (*open)open75358,2644818
  int  (*open16)open1675359,2644857
  int  (*prepare)prepare75360,2644898
  int  (*prepare16)prepare1675361,2644971
  void * (*profile)profile75362,2645046
  void  (*progress_handler)progress_handler75363,2645124
  void *(*realloc)realloc75364,2645187
  int  (*reset)reset75365,2645218
  void  (*result_blob)result_blob75366,2645255
  void  (*result_double)result_double75367,2645328
  void  (*result_error)result_error75368,2645379
  void  (*result_error16)result_error1675369,2645438
  void  (*result_int)result_int75370,2645499
  void  (*result_int64)result_int6475371,2645544
  void  (*result_null)result_null75372,2645600
  void  (*result_text)result_text75373,2645642
  void  (*result_text16)result_text1675374,2645715
  void  (*result_text16be)result_text16be75375,2645790
  void  (*result_text16le)result_text16le75376,2645867
  void  (*result_value)result_value75377,2645944
  void * (*rollback_hook)rollback_hook75378,2646002
  int  (*set_authorizer)set_authorizer75379,2646060
  void  (*set_auxdata)set_auxdata75380,2646168
  char * (*snprintf)snprintf75381,2646236
  int  (*step)step75382,2646285
  int  (*table_column_metadata)table_column_metadata75383,2646316
  void  (*thread_cleanup)thread_cleanup75384,2646436
  int  (*total_changes)total_changes75385,2646469
  void * (*trace)trace75386,2646504
  int  (*transfer_bindings)transfer_bindings75387,2646572
  void * (*update_hook)update_hook75388,2646630
  void * (*user_data)user_data75389,2646728
  const void * (*value_blob)value_blob75390,2646769
  int  (*value_bytes)value_bytes75391,2646815
  int  (*value_bytes16)value_bytes1675392,2646854
  double  (*value_double)value_double75393,2646895
  int  (*value_int)value_int75394,2646938
  sqlite_int64  (*value_int64)value_int6475395,2646975
  int  (*value_numeric_type)value_numeric_type75396,2647023
  const unsigned char * (*value_text)value_text75397,2647069
  const void * (*value_text16)value_text1675398,2647124
  const void * (*value_text16be)value_text16be75399,2647172
  const void * (*value_text16le)value_text16le75400,2647222
  int  (*value_type)value_type75401,2647272
  char *(*vmprintf)vmprintf75402,2647310
  int (*overload_function)overload_function75404,2647370
  int (*prepare_v2)prepare_v275406,2647465
  int (*prepare16_v2)prepare16_v275407,2647540
  int (*clear_bindings)clear_bindings75408,2647617
  int (*create_module_v2)create_module_v275410,2647680
  int (*bind_zeroblob)bind_zeroblob75412,2647805
  int (*blob_bytes)blob_bytes75413,2647852
  int (*blob_close)blob_close75414,2647888
  int (*blob_open)blob_open75415,2647924
  int (*blob_read)blob_read75416,2648023
  int (*blob_write)blob_write75417,2648072
  int (*create_collation_v2)create_collation_v275418,2648128
  int (*file_control)file_control75419,2648251
  sqlite3_int64 (*memory_highwater)memory_highwater75420,2648306
  sqlite3_int64 (*memory_used)memory_used75421,2648348
  sqlite3_mutex *(*mutex_alloc)mutex_alloc75422,2648386
  void (*mutex_enter)mutex_enter75423,2648424
  void (*mutex_free)mutex_free75424,2648463
  void (*mutex_leave)mutex_leave75425,2648501
  int (*mutex_try)mutex_try75426,2648540
  int (*open_v2)open_v275427,2648576
  int (*release_memory)release_memory75428,2648633
  void (*result_error_nomem)result_error_nomem75429,2648663
  void (*result_error_toobig)result_error_toobig75430,2648711
  int (*sleep)sleep75431,2648760
  void (*soft_heap_limit)soft_heap_limit75432,2648781
  sqlite3_vfs *(*vfs_find)vfs_find75433,2648813
  int (*vfs_register)vfs_register75434,2648854
  int (*vfs_unregister)vfs_unregister75435,2648895
  int (*xthreadsafe)xthreadsafe75436,2648934
  void (*result_zeroblob)result_zeroblob75437,2648962
  void (*result_error_code)result_error_code75438,2649011
  int (*test_control)test_control75439,2649062
  void (*randomness)randomness75440,2649095
  sqlite3 *(*context_db_handle)context_db_handle75441,2649128
  int (*extended_result_codes)extended_result_codes75442,2649179
  int (*limit)limit75443,2649225
  sqlite3_stmt *(*next_stmt)next_stmt75444,2649259
  const char *(*sql)sql75445,2649313
  int (*status)status75446,2649350
#define sqlite3_aggregate_context 75461,2649889
#define sqlite3_aggregate_count 75463,2649990
#define sqlite3_bind_blob 75465,2650065
#define sqlite3_bind_double 75466,2650127
#define sqlite3_bind_int 75467,2650191
#define sqlite3_bind_int64 75468,2650252
#define sqlite3_bind_null 75469,2650315
#define sqlite3_bind_parameter_count 75470,2650377
#define sqlite3_bind_parameter_index 75471,2650450
#define sqlite3_bind_parameter_name 75472,2650523
#define sqlite3_bind_text 75473,2650595
#define sqlite3_bind_text16 75474,2650657
#define sqlite3_bind_value 75475,2650721
#define sqlite3_busy_handler 75476,2650784
#define sqlite3_busy_timeout 75477,2650849
#define sqlite3_changes 75478,2650914
#define sqlite3_close 75479,2650974
#define sqlite3_collation_needed 75480,2651032
#define sqlite3_collation_needed16 75481,2651101
#define sqlite3_column_blob 75482,2651172
#define sqlite3_column_bytes 75483,2651236
#define sqlite3_column_bytes16 75484,2651301
#define sqlite3_column_count 75485,2651368
#define sqlite3_column_database_name 75486,2651433
#define sqlite3_column_database_name16 75487,2651506
#define sqlite3_column_decltype 75488,2651581
#define sqlite3_column_decltype16 75489,2651649
#define sqlite3_column_double 75490,2651719
#define sqlite3_column_int 75491,2651785
#define sqlite3_column_int64 75492,2651848
#define sqlite3_column_name 75493,2651913
#define sqlite3_column_name16 75494,2651977
#define sqlite3_column_origin_name 75495,2652043
#define sqlite3_column_origin_name16 75496,2652114
#define sqlite3_column_table_name 75497,2652187
#define sqlite3_column_table_name16 75498,2652257
#define sqlite3_column_text 75499,2652329
#define sqlite3_column_text16 75500,2652393
#define sqlite3_column_type 75501,2652459
#define sqlite3_column_value 75502,2652523
#define sqlite3_commit_hook 75503,2652588
#define sqlite3_complete 75504,2652652
#define sqlite3_complete16 75505,2652713
#define sqlite3_create_collation 75506,2652776
#define sqlite3_create_collation16 75507,2652845
#define sqlite3_create_function 75508,2652916
#define sqlite3_create_function16 75509,2652984
#define sqlite3_create_module 75510,2653054
#define sqlite3_create_module_v2 75511,2653120
#define sqlite3_data_count 75512,2653189
#define sqlite3_db_handle 75513,2653252
#define sqlite3_declare_vtab 75514,2653314
#define sqlite3_enable_shared_cache 75515,2653379
#define sqlite3_errcode 75516,2653451
#define sqlite3_errmsg 75517,2653511
#define sqlite3_errmsg16 75518,2653570
#define sqlite3_exec 75519,2653631
#define sqlite3_expired 75521,2653719
#define sqlite3_finalize 75523,2653786
#define sqlite3_free 75524,2653847
#define sqlite3_free_table 75525,2653904
#define sqlite3_get_autocommit 75526,2653967
#define sqlite3_get_auxdata 75527,2654034
#define sqlite3_get_table 75528,2654098
#define sqlite3_global_recover 75530,2654191
#define sqlite3_interrupt 75532,2654265
#define sqlite3_last_insert_rowid 75533,2654328
#define sqlite3_libversion 75534,2654398
#define sqlite3_libversion_number 75535,2654461
#define sqlite3_malloc 75536,2654531
#define sqlite3_mprintf 75537,2654590
#define sqlite3_open 75538,2654650
#define sqlite3_open16 75539,2654707
#define sqlite3_prepare 75540,2654766
#define sqlite3_prepare16 75541,2654826
#define sqlite3_prepare_v2 75542,2654888
#define sqlite3_prepare16_v2 75543,2654951
#define sqlite3_profile 75544,2655016
#define sqlite3_progress_handler 75545,2655076
#define sqlite3_realloc 75546,2655145
#define sqlite3_reset 75547,2655205
#define sqlite3_result_blob 75548,2655263
#define sqlite3_result_double 75549,2655327
#define sqlite3_result_error 75550,2655393
#define sqlite3_result_error16 75551,2655458
#define sqlite3_result_int 75552,2655525
#define sqlite3_result_int64 75553,2655588
#define sqlite3_result_null 75554,2655653
#define sqlite3_result_text 75555,2655717
#define sqlite3_result_text16 75556,2655781
#define sqlite3_result_text16be 75557,2655847
#define sqlite3_result_text16le 75558,2655915
#define sqlite3_result_value 75559,2655983
#define sqlite3_rollback_hook 75560,2656048
#define sqlite3_set_authorizer 75561,2656114
#define sqlite3_set_auxdata 75562,2656181
#define sqlite3_snprintf 75563,2656245
#define sqlite3_step 75564,2656306
#define sqlite3_table_column_metadata 75565,2656363
#define sqlite3_thread_cleanup 75566,2656437
#define sqlite3_total_changes 75567,2656504
#define sqlite3_trace 75568,2656570
#define sqlite3_transfer_bindings 75570,2656659
#define sqlite3_update_hook 75572,2656736
#define sqlite3_user_data 75573,2656800
#define sqlite3_value_blob 75574,2656862
#define sqlite3_value_bytes 75575,2656925
#define sqlite3_value_bytes16 75576,2656989
#define sqlite3_value_double 75577,2657055
#define sqlite3_value_int 75578,2657120
#define sqlite3_value_int64 75579,2657182
#define sqlite3_value_numeric_type 75580,2657246
#define sqlite3_value_text 75581,2657317
#define sqlite3_value_text16 75582,2657380
#define sqlite3_value_text16be 75583,2657445
#define sqlite3_value_text16le 75584,2657512
#define sqlite3_value_type 75585,2657579
#define sqlite3_vmprintf 75586,2657642
#define sqlite3_overload_function 75587,2657703
#define sqlite3_prepare_v2 75588,2657773
#define sqlite3_prepare16_v2 75589,2657836
#define sqlite3_clear_bindings 75590,2657901
#define sqlite3_bind_zeroblob 75591,2657968
#define sqlite3_blob_bytes 75592,2658034
#define sqlite3_blob_close 75593,2658097
#define sqlite3_blob_open 75594,2658160
#define sqlite3_blob_read 75595,2658222
#define sqlite3_blob_write 75596,2658284
#define sqlite3_create_collation_v2 75597,2658347
#define sqlite3_file_control 75598,2658419
#define sqlite3_memory_highwater 75599,2658484
#define sqlite3_memory_used 75600,2658553
#define sqlite3_mutex_alloc 75601,2658617
#define sqlite3_mutex_enter 75602,2658681
#define sqlite3_mutex_free 75603,2658745
#define sqlite3_mutex_leave 75604,2658808
#define sqlite3_mutex_try 75605,2658872
#define sqlite3_open_v2 75606,2658934
#define sqlite3_release_memory 75607,2658994
#define sqlite3_result_error_nomem 75608,2659061
#define sqlite3_result_error_toobig 75609,2659132
#define sqlite3_sleep 75610,2659204
#define sqlite3_soft_heap_limit 75611,2659262
#define sqlite3_vfs_find 75612,2659330
#define sqlite3_vfs_register 75613,2659391
#define sqlite3_vfs_unregister 75614,2659456
#define sqlite3_threadsafe 75615,2659523
#define sqlite3_result_zeroblob 75616,2659587
#define sqlite3_result_error_code 75617,2659655
#define sqlite3_test_control 75618,2659725
#define sqlite3_randomness 75619,2659790
#define sqlite3_context_db_handle 75620,2659853
#define sqlite3_extended_result_codes 75621,2659923
#define sqlite3_limit 75622,2659997
#define sqlite3_next_stmt 75623,2660055
#define sqlite3_sql 75624,2660117
#define sqlite3_status 75625,2660173
#define SQLITE_EXTENSION_INIT1 75628,2660258
#define SQLITE_EXTENSION_INIT2(75629,2660338
# define sqlite3_column_database_name 75644,2660808
# define sqlite3_column_database_name16 75645,2660850
# define sqlite3_column_table_name 75646,2660892
# define sqlite3_column_table_name16 75647,2660934
# define sqlite3_column_origin_name 75648,2660976
# define sqlite3_column_origin_name16 75649,2661018
# define sqlite3_table_column_metadata 75650,2661060
# define sqlite3_set_authorizer 75654,2661143
# define sqlite3_bind_text16 75658,2661218
# define sqlite3_collation_needed16 75659,2661260
# define sqlite3_column_decltype16 75660,2661302
# define sqlite3_column_name16 75661,2661344
# define sqlite3_column_text16 75662,2661386
# define sqlite3_complete16 75663,2661428
# define sqlite3_create_collation16 75664,2661470
# define sqlite3_create_function16 75665,2661512
# define sqlite3_errmsg16 75666,2661554
# define sqlite3_open16 75667,2661596
# define sqlite3_prepare16 75668,2661638
# define sqlite3_prepare16_v2 75669,2661680
# define sqlite3_result_error16 75670,2661722
# define sqlite3_result_text16 75671,2661764
# define sqlite3_result_text16be 75672,2661806
# define sqlite3_result_text16le 75673,2661848
# define sqlite3_value_text16 75674,2661890
# define sqlite3_value_text16be 75675,2661932
# define sqlite3_value_text16le 75676,2661974
# define sqlite3_column_database_name16 75677,2662016
# define sqlite3_column_table_name16 75678,2662058
# define sqlite3_column_origin_name16 75679,2662100
# define sqlite3_complete 75683,2662178
# define sqlite3_complete16 75684,2662206
# define sqlite3_progress_handler 75688,2662281
# define sqlite3_create_module 75692,2662357
# define sqlite3_create_module_v2 75693,2662390
# define sqlite3_declare_vtab 75694,2662426
# define sqlite3_enable_shared_cache 75698,2662498
# define sqlite3_profile 75702,2662570
# define sqlite3_trace 75703,2662603
# define sqlite3_free_table 75707,2662673
# define sqlite3_get_table 75708,2662706
#define sqlite3_bind_zeroblob 75712,2662775
#define sqlite3_blob_bytes 75713,2662808
#define sqlite3_blob_close 75714,2662841
#define sqlite3_blob_open 75715,2662874
#define sqlite3_blob_read 75716,2662907
#define sqlite3_blob_write 75717,2662940
static const sqlite3_api_routines sqlite3Apis 75735,2663609
static int sqlite3LoadExtension(75957,2668755
SQLITE_API int sqlite3_load_extension(76041,2671496
SQLITE_PRIVATE void sqlite3CloseExtensions(76059,2672126
SQLITE_API int sqlite3_enable_load_extension(76072,2672512
static const sqlite3_api_routines sqlite3Apis 76092,2673091
typedef struct sqlite3AutoExtList sqlite3AutoExtList;76103,2673362
static SQLITE_WSD struct sqlite3AutoExtList 76104,2673416
  int nExt;76105,2673462
  void (**aExt)aExt76106,2673531
} sqlite3Autoext 76107,2673603
# define wsdAutoextInit 76116,2673994
# define wsdAutoext 76118,2674089
# define wsdAutoextInit76120,2674120
# define wsdAutoext 76121,2674144
SQLITE_API int sqlite3_auto_extension(76129,2674302
SQLITE_API void sqlite3_reset_auto_extension(76168,2675245
SQLITE_PRIVATE void sqlite3AutoLoadExtensions(76190,2675767
static u8 getSafetyLevel(76256,2677857
static u8 getBoolean(76278,2678477
static int getLockingMode(76285,2678608
static int getAutoVacuum(76300,2679094
static int getTempStore(76316,2679674
static int invalidateTempStorage(76334,2680132
static int changeTempStorage(76356,2680833
static void returnSingleInt(76371,2681240
static int flagPragma(76390,2681927
  static const struct sPragmaType 76391,2682004
    const char *zName;zName76392,2682040
    int mask;76393,2682089
static const char *actionName(actionName76469,2684855
SQLITE_PRIVATE void sqlite3Pragma(76498,2685773
#    define SQLITE_ENABLE_LOCKING_STYLE 76967,2702569
#    define SQLITE_ENABLE_LOCKING_STYLE 76969,2702619
# define SQLITE_INTEGRITY_CHECK_ERROR_MAX 77251,2713033
static void corruptSchema(77686,2729590
SQLITE_PRIVATE int sqlite3InitCallback(77716,2730682
static int sqlite3InitOne(77795,2733495
  #define temp_master_schema 77831,2734315
SQLITE_PRIVATE int sqlite3Init(78049,2741524
SQLITE_PRIVATE int sqlite3ReadSchema(78090,2742690
static void schemaIsValid(78110,2743164
SQLITE_PRIVATE int sqlite3SchemaToIndex(78157,2744742
static int sqlite3Prepare(78185,2745668
static int sqlite3LockAndPrepare(78356,2751013
SQLITE_PRIVATE int sqlite3Reprepare(78390,2752224
SQLITE_API int sqlite3_prepare(78427,2753397
SQLITE_API int sqlite3_prepare_v2(78439,2753903
static int sqlite3Prepare16(78457,2754520
SQLITE_API int sqlite3_prepare16(78507,2756417
SQLITE_API int sqlite3_prepare16_v2(78519,2756921
static void clearSelect(78558,2758277
SQLITE_PRIVATE void sqlite3SelectDestInit(78573,2758718
SQLITE_PRIVATE Select *sqlite3SelectNew(sqlite3SelectNew78586,2759003
SQLITE_PRIVATE void sqlite3SelectDelete(78635,2760613
SQLITE_PRIVATE int sqlite3JoinType(78659,2761232
    u8 i;78666,2761533
    u8 nChar;78667,2761596
    u8 code;78668,2761655
static int columnIndex(78720,2763256
SQLITE_PRIVATE Expr *sqlite3CreateIdExpr(sqlite3CreateIdExpr78731,2763512
static void addWhereTerm(78739,2763774
static void setJoinExpr(78802,2766338
static int sqliteProcessJoin(78827,2767301
static void pushOntoSorter(78910,2770237
static void codeOffset(78950,2771680
static void codeDistinct(78974,2772554
static int checkForMultiColumnSelectError(78998,2773376
static void selectInnerLoop(79022,2774170
static KeyInfo *keyInfoFromExprList(keyInfoFromExprList79248,2782051
static void generateSortTail(79282,2783036
static const char *columnType(columnType79395,2786814
static void generateColumnTypes(79523,2791265
static void generateColumnNames(79563,2792620
static const char *selectOpName(selectOpName79630,2794782
static int selectColumnsFromExprList(79655,2795609
static void selectAddColumnTypeAndCollation(79746,2799041
SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(sqlite3ResultSetOfSelect79783,2800173
SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(sqlite3GetVdbe79819,2801311
static void computeLimitRegisters(79851,2802521
static CollSeq *multiSelectCollSeq(multiSelectCollSeq79901,2804377
static int multiSelect(79956,2806151
static int generateOutputSubroutine(80302,2818018
static int multiSelectOrderBy(80526,2826231
static Expr *substExpr(substExpr80886,2839576
static void substExprList(80918,2840663
static void substSelect(80930,2841070
static int flattenSubquery(81063,2846429
static u8 minMaxQuery(81442,2860217
static Table *isSimpleCount(isSimpleCount81473,2861330
SQLITE_PRIVATE int sqlite3IndexedByLookup(81503,2862200
static int selectExpander(81545,2863790
static int exprWalkNoop(81773,2872103
static void sqlite3SelectExpand(81791,2872796
static int selectAddSubqueryTypeInfo(81814,2873558
static void sqlite3SelectAddTypeInfo(81847,2874514
SQLITE_PRIVATE void sqlite3SelectPrep(81870,2875288
static void resetAccumulator(81893,2876066
static void finalizeAggFunctions(81925,2877119
static void updateAccumulator(81941,2877651
SQLITE_PRIVATE int sqlite3Select(82052,2881999
SQLITE_PRIVATE void sqlite3PrintExpr(82697,2907160
SQLITE_PRIVATE void sqlite3PrintExprList(82713,2907556
SQLITE_PRIVATE void sqlite3PrintSelect(82722,2907770
typedef struct TabResult 82807,2910526
  char **azResult;azResult82808,2910553
  char *zErrMsg;zErrMsg82809,2910599
  int nAlloc;82810,2910665
  int nRow;82811,2910723
  int nColumn;82812,2910779
  int nData;82813,2910838
  int rc;82814,2910909
} TabResult;82815,2910968
static int sqlite3_get_table_cb(82822,2911157
SQLITE_API int sqlite3_get_table(82896,2913323
SQLITE_API void sqlite3_free_table(82962,2915308
SQLITE_PRIVATE void sqlite3DeleteTriggerStep(82998,2916352
SQLITE_PRIVATE Trigger *sqlite3TriggerList(sqlite3TriggerList83026,2917413
SQLITE_PRIVATE void sqlite3BeginTrigger(83058,2918492
SQLITE_PRIVATE void sqlite3FinishTrigger(83231,2924936
SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3TriggerSelectStep83312,2927775
static TriggerStep *triggerStepAllocate(triggerStepAllocate83330,2928370
SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep(sqlite3TriggerInsertStep83355,2929097
SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep(sqlite3TriggerUpdateStep83388,2930384
SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep(sqlite3TriggerDeleteStep83413,2931375
SQLITE_PRIVATE void sqlite3DeleteTrigger(83432,2931942
SQLITE_PRIVATE void sqlite3DropTrigger(83450,2932621
static Table *tableOfTrigger(tableOfTrigger83489,2933685
SQLITE_PRIVATE void sqlite3DropTriggerPtr(83498,2933918
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(83556,2935820
static int checkColumnOverlap(83581,2936806
SQLITE_PRIVATE Trigger *sqlite3TriggersExist(sqlite3TriggersExist83596,2937331
static SrcList *targetSrcList(targetSrcList83628,2938445
static int codeTriggerProgram(83653,2939202
static const char *onErrorText(onErrorText83730,2941711
static void transferParseError(83748,2942218
static TriggerPrg *codeRowTrigger(codeRowTrigger83763,2942650
static TriggerPrg *getRowTrigger(getRowTrigger83871,2946734
SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect(83905,2947945
SQLITE_PRIVATE void sqlite3CodeRowTrigger(83976,2951401
SQLITE_PRIVATE u32 sqlite3TriggerOldmask(84032,2953807
SQLITE_PRIVATE void sqlite3ColumnDefault(84120,2957399
SQLITE_PRIVATE void sqlite3Update(84148,2958326
# define pTrigger 84212,2961256
# define isView 84213,2961276
# undef isView84216,2961325
# define isView 84217,2961340
 #undef isView84590,2973418
 #undef pTrigger84593,2973456
static void updateVirtualTable(84616,2974159
static int execSql(84715,2978020
static int execExecSql(84733,2978487
SQLITE_PRIVATE void sqlite3Vacuum(84761,2979256
SQLITE_PRIVATE int sqlite3RunVacuum(84772,2979480
static int createModule(85017,2988754
SQLITE_API int sqlite3_create_module(85059,2990019
SQLITE_API int sqlite3_create_module_v2(85071,2990483
SQLITE_PRIVATE void sqlite3VtabLock(85089,2991271
SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3GetVTable85099,2991563
SQLITE_PRIVATE void sqlite3VtabUnlock(85110,2991915
static VTable *vtabDisconnectAll(vtabDisconnectAll85143,2992797
SQLITE_PRIVATE void sqlite3VtabUnlockList(85197,2994714
SQLITE_PRIVATE void sqlite3VtabClear(85228,2995758
static void addModuleArgument(85245,2996199
SQLITE_PRIVATE void sqlite3VtabBeginParse(85270,2996981
static void addArgumentToVtab(85314,2998747
SQLITE_PRIVATE void sqlite3VtabFinishParse(85327,2999145
SQLITE_PRIVATE void sqlite3VtabArgInit(85409,3002121
SQLITE_PRIVATE void sqlite3VtabArgExtend(85419,3002402
static int vtabCallConstructor(85435,3002819
SQLITE_PRIVATE int sqlite3VtabCallConnect(85543,3006067
static int addToVTrans(85577,3006935
SQLITE_PRIVATE int sqlite3VtabCallCreate(85606,3007890
SQLITE_API int sqlite3_declare_vtab(85644,3009172
SQLITE_PRIVATE int sqlite3VtabCallDestroy(85707,3010780
static void callFinaliser(85740,3011775
SQLITE_PRIVATE int sqlite3VtabSync(85767,3012579
SQLITE_PRIVATE int sqlite3VtabRollback(85798,3013321
SQLITE_PRIVATE int sqlite3VtabCommit(85807,3013574
SQLITE_PRIVATE int sqlite3VtabBegin(85820,3014003
SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction(sqlite3VtabOverloadFunction85870,3015461
SQLITE_PRIVATE void sqlite3VtabMakeWritable(85936,3017569
SQLITE_PRIVATE int sqlite3WhereTrace 85984,3019299
# define WHERETRACE(85987,3019398
# define WHERETRACE(85989,3019471
typedef struct WhereClause WhereClause;85994,3019526
typedef struct WhereMaskSet WhereMaskSet;85995,3019566
typedef struct WhereOrInfo WhereOrInfo;85996,3019608
typedef struct WhereAndInfo WhereAndInfo;85997,3019648
typedef struct WhereCost WhereCost;85998,3019690
typedef struct WhereTerm WhereTerm;86051,3022217
struct WhereTerm 86052,3022253
  Expr *pExpr;pExpr86053,3022272
  int iParent;86054,3022351
  int leftCursor;86055,3022431
    int leftColumn;86057,3022511
    WhereOrInfo *pOrInfo;pOrInfo86058,3022583
    WhereAndInfo *pAndInfo;pAndInfo86059,3022655
  } u;86060,3022728
  u16 eOperator;86061,3022735
  u8 wtFlags;86062,3022797
  u8 nChild;86063,3022860
  WhereClause *pWC;pWC86064,3022932
  Bitmask prereqRight;86065,3022996
  Bitmask prereqAll;86066,3023068
#define TERM_DYNAMIC 86072,3023187
#define TERM_VIRTUAL 86073,3023266
#define TERM_CODED 86074,3023340
#define TERM_COPIED 86075,3023404
#define TERM_ORINFO 86076,3023453
#define TERM_ANDINFO 86077,3023534
#define TERM_OR_OK 86078,3023613
struct WhereClause 86084,3023835
  Parse *pParse;pParse86085,3023856
  WhereMaskSet *pMaskSet;pMaskSet86086,3023908
  Bitmask vmask;86087,3023985
  u8 op;86088,3024060
  int nTerm;86089,3024126
  int nSlot;86090,3024175
  WhereTerm *a;a86091,3024233
  WhereTerm aStatic[aStatic86093,3024344
  WhereTerm aStatic[aStatic86095,3024412
struct WhereOrInfo 86103,3024625
  WhereClause wc;86104,3024646
  Bitmask indexable;86105,3024707
struct WhereAndInfo 86112,3024932
  WhereClause wc;86113,3024954
struct WhereMaskSet 86142,3026285
  int n;86143,3026307
  int ix[ix86144,3026378
struct WhereCost 86151,3026555
  WherePlan plan;86152,3026574
  double rCost;86153,3026621
  double nRow;86154,3026694
  Bitmask used;86155,3026753
#define WO_IN 86163,3026993
#define WO_EQ 86164,3027017
#define WO_LT 86165,3027041
#define WO_LE 86166,3027082
#define WO_GT 86167,3027123
#define WO_GE 86168,3027164
#define WO_MATCH 86169,3027205
#define WO_ISNULL 86170,3027229
#define WO_OR 86171,3027253
#define WO_AND 86172,3027320
#define WO_ALL 86174,3027389
#define WO_SINGLE 86175,3027458
#define WHERE_ROWID_EQ 86190,3028176
#define WHERE_ROWID_RANGE 86191,3028250
#define WHERE_COLUMN_EQ 86192,3028324
#define WHERE_COLUMN_RANGE 86193,3028403
#define WHERE_COLUMN_IN 86194,3028469
#define WHERE_COLUMN_NULL 86195,3028525
#define WHERE_INDEXED 86196,3028580
#define WHERE_IN_ABLE 86197,3028653
#define WHERE_TOP_LIMIT 86198,3028729
#define WHERE_BTM_LIMIT 86199,3028803
#define WHERE_IDX_ONLY 86200,3028877
#define WHERE_ORDERBY 86201,3028950
#define WHERE_REVERSE 86202,3029031
#define WHERE_UNIQUE 86203,3029098
#define WHERE_VIRTUALTABLE 86204,3029172
#define WHERE_MULTI_OR 86205,3029246
static void whereClauseInit(86210,3029376
static void whereOrInfoDelete(86229,3029901
static void whereAndInfoDelete(86237,3030086
static void whereClauseClear(86246,3030350
static int whereClauseInsert(86284,3031805
static void whereSplit(86329,3033352
#define initMaskSet(86343,3033683
static Bitmask getMask(86349,3033833
static void createMask(86368,3034349
static Bitmask exprTableUsage(86389,3035277
static Bitmask exprListTableUsage(86405,3035748
static Bitmask exprSelectTableUsage(86415,3035989
static int allowedOp(86433,3036596
#define SWAP(86444,3036882
static void exprCommute(86458,3037469
static u16 operatorMask(86481,3038375
static WhereTerm *findTerm(findTerm86508,3039158
static void exprAnalyzeAll(86563,3040860
static int isLikeOrGlob(86582,3041428
static int isMatchOfColumn(86646,3043444
static void transferJoinMarkings(86672,3043985
static void exprAnalyzeOrTerm(86754,3047369
static void exprAnalyze(87004,3057669
static int referencesOtherTables(87245,3066217
static int isSortingIndex(87280,3067638
static double estLog(87409,3072668
static void TRACE_IDX_INPUTS(87426,3073081
static void TRACE_IDX_OUTPUTS(87444,3073608
#define TRACE_IDX_INPUTS(87459,3074133
#define TRACE_IDX_OUTPUTS(87460,3074161
static void bestOrClauseIndex(87476,3074635
static sqlite3_index_info *allocateIndexInfo(allocateIndexInfo87558,3077800
static int vtabBestIndex(87671,3082175
static void bestVirtualIndex(87722,3083866
static int whereRangeRegion(87866,3089459
static int whereRangeScanEst(87985,3093786
static void bestBtreeIndex(88088,3097151
static void bestIndex(88412,3109595
static void disableTerm(88458,3111470
static void codeApplyAffinity(88481,3112180
static int codeEqualityTerm(88501,3112905
static int codeAllEqualityTerms(88593,3116565
static Bitmask codeOneLoopStart(88663,3119084
SQLITE_API char sqlite3_query_plan[sqlite3_query_plan89253,3143063
static int nQPlan 89254,3143133
static void whereInfoFree(89262,3143271
SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin(sqlite3WhereBegin89369,3147606
SQLITE_PRIVATE void sqlite3WhereEnd(89794,3164638
#define YYNOERRORRECOVERY 89929,3169497
#define yytestcase(89934,3169576
struct LimitVal 89940,3169717
  Expr *pLimit;pLimit89941,3169735
  Expr *pOffset;pOffset89942,3169809
struct LikeOp 89949,3169993
  Token eOperator;89950,3170009
  int not;89951,3170064
struct TrigEvent 89963,3170405
struct TrigEvent { int a;89963,3170405
struct TrigEvent { int a; IdList * b;89963,3170405
struct AttachKey 89968,3170525
struct AttachKey { int type;89968,3170525
struct AttachKey { int type;  Token key;89968,3170525
  static void spanSet(89975,3170785
  static void spanExpr(89984,3171105
  static void spanBinaryExpr(89993,3171463
  static void spanUnaryPostfix(90007,3171985
  static void spanUnaryPrefix(90021,3172564
# define INTERFACE 90045,3173464
#define YYCODETYPE 90081,3175784
#define YYNOCODE 90082,3175817
#define YYACTIONTYPE 90083,3175838
#define YYWILDCARD 90084,3175878
#define sqlite3ParserTOKENTYPE 90085,3175900
  int yyinit;90087,3175953
  sqlite3ParserTOKENTYPE yy0;90088,3175967
  Select* yy3;90089,3175997
  ExprList* yy14;90090,3176012
  SrcList* yy65;90091,3176030
  struct LikeOp yy96;90092,3176047
  Expr* yy132;90093,3176069
  u8 yy186;90094,3176084
  int yy328;90095,3176096
  ExprSpan yy346;90096,3176109
  struct TrigEvent yy378;90097,3176127
  IdList* yy408;90098,3176153
  struct {int value;90099,3176170
  struct {int value; int mask;90099,3176170
  struct {int value; int mask;} yy429;90099,3176170
  TriggerStep* yy473;90100,3176209
  struct LimitVal yy476;90101,3176231
} YYMINORTYPE;90102,3176256
#define YYSTACKDEPTH 90104,3176292
#define sqlite3ParserARG_SDECL 90106,3176324
#define sqlite3ParserARG_PDECL 90107,3176370
#define sqlite3ParserARG_FETCH 90108,3176416
#define sqlite3ParserARG_STORE 90109,3176481
#define YYNSTATE 90110,3176539
#define YYNRULE 90111,3176560
#define YYFALLBACK 90112,3176580
#define YY_NO_ACTION 90113,3176601
#define YY_ACCEPT_ACTION 90114,3176648
#define YY_ERROR_ACTION 90115,3176695
static const YYMINORTYPE yyzerominor 90119,3176839
# define yytestcase(90130,3177233
static const YYACTIONTYPE yy_action[yy_action90181,3179465
static const YYCODETYPE yy_lookahead[yy_lookahead90338,3190926
#define YY_SHIFT_USE_DFLT 90495,3202388
#define YY_SHIFT_MAX 90496,3202421
static const short yy_shift_ofst[yy_shift_ofst90497,3202446
#define YY_REDUCE_USE_DFLT 90541,3205584
#define YY_REDUCE_MAX 90542,3205618
static const short yy_reduce_ofst[yy_reduce_ofst90543,3205644
static const YYACTIONTYPE yy_default[yy_default90577,3208007
#define YY_SZ_ACTTAB 90642,3212709
static const YYCODETYPE yyFallback[yyFallback90655,3213186
struct yyStackEntry 90738,3215899
  YYACTIONTYPE stateno;90739,3215921
  YYCODETYPE major;90740,3215969
  YYMINORTYPE minor;90742,3216110
typedef struct yyStackEntry yyStackEntry;90745,3216242
struct yyParser 90749,3216384
  int yyidx;90750,3216402
  int yyidxMax;90752,3216498
  int yyerrcnt;90754,3216566
  int yystksz;90757,3216738
  yyStackEntry *yystack;yystack90758,3216802
  yyStackEntry yystack[yystack90760,3216865
typedef struct yyParser yyParser;90763,3216939
static FILE *yyTraceFILE yyTraceFILE90766,3216989
static char *yyTracePrompt yyTracePrompt90767,3217019
SQLITE_PRIVATE void sqlite3ParserTrace(90788,3217563
static const char *const yyTokenName[yyTokenName90799,3217955
static const char *const yyRuleName[yyRuleName90870,3222522
static void yyGrowStack(91208,3236343
SQLITE_PRIVATE void *sqlite3ParserAlloc(sqlite3ParserAlloc91239,3237054
static void yy_destructor(91261,3237655
      break;91283,3238479
      break;91290,3238629
      break;91306,3239058
      break;91314,3239243
      break;91326,3239550
      break;91333,3239715
      break;91339,3239858
      break;91344,3239963
    default:  break;91345,3239976
static int yy_pop_parser_stack(91357,3240269
SQLITE_PRIVATE void sqlite3ParserFree(91389,3241176
SQLITE_PRIVATE int sqlite3ParserStackPeak(91408,3241760
static int yy_find_shift_action(91422,3242163
static int yy_find_reduce_action(91480,3244010
static void yyStackOverflow(91510,3244723
static void yy_shift(91531,3245379
  YYCODETYPE lhs;91578,3246795
  unsigned char nrhs;91579,3246868
} yyRuleInfo[yyRuleInfo91580,3246946
static void yy_reduce(91918,3251731
        break;92000,3255024
        break;92005,3255165
        break;92010,3255321
        break;92015,3255537
        break;92021,3255675
{yygotominor.yy328 yy32892034,3256510
        break;92035,3256535
{yygotominor.yy328 yy32892044,3257108
        break;92045,3257133
        break;92050,3257295
        break;92056,3257472
        break;92062,3257687
        break;92068,3257831
{yygotominor.yy0 yy092091,3259271
        break;92092,3259311
        break;92095,3259418
        break;92101,3259637
        break;92107,3259869
        break;92110,3260064
        break;92114,3260254
        break;92117,3260376
        break;92126,3260649
        break;92133,3260817
        break;92136,3260930
        break;92139,3261112
        break;92142,3261239
        break;92145,3261367
        break;92148,3261547
        break;92151,3261664
        break;92154,3261776
        break;92157,3261868
        break;92160,3262038
        break;92163,3262166
        break;92166,3262321
        break;92169,3262476
        break;92172,3262568
        break;92175,3262663
        break;92178,3262754
        break;92181,3262847
        break;92184,3262937
{yygotominor.yy328 yy32892189,3263273
        break;92190,3263317
        break;92193,3263418
        break;92196,3263527
        break;92199,3263712
        break;92202,3263872
        break;92205,3264007
        break;92211,3264321
        break;92214,3264402
        break;92217,3264484
        break;92220,3264595
        break;92223,3264688
        break;92226,3264783
        break;92231,3264936
        break;92236,3265195
        break;92241,3265347
      case 92242,3265362
        break;92248,3265556
        break;92251,3265654
        break;92262,3265987
        break;92265,3266083
        break;92270,3266478
{yygotominor.yy14 yy1492273,3266620
        break;92274,3266663
{yygotominor.yy14 yy1492280,3266966
        break;92281,3266990
        break;92288,3267344
      case 92289,3267359
        break;92294,3267535
      case 92295,3267550
        break;92302,3267897
        break;92305,3267966
        break;92308,3268093
        break;92314,3268250
        break;92320,3268513
        break;92323,3268589
        break;92329,3268959
        break;92334,3269231
        break;92346,3269844
{yygotominor.yy0.z=z92349,3269955
{yygotominor.yy0.z=0; yygotominor.yy0.n=n92349,3269955
        break;92350,3269999
        break;92353,3270155
        break;92356,3270248
        break;92359,3270383
        break;92362,3270540
        break;92365,3270719
{yygotominor.yy132 yy13292372,3271136
        break;92373,3271186
{yygotominor.yy132 yy13292379,3271490
        break;92380,3271515
        break;92383,3271624
{yygotominor.yy408 yy40892386,3271783
        break;92387,3271828
{yygotominor.yy408 yy40892390,3271947
        break;92391,3271972
{yygotominor.yy14 yy1492395,3272199
        break;92396,3272241
        break;92402,3272534
        break;92408,3272800
{yygotominor.yy328 yy32892411,3272918
        break;92412,3272955
        break;92415,3273049
        break;92418,3273163
        break;92421,3273313
        break;92424,3273501
        break;92427,3273688
        break;92433,3273930
        break;92440,3274296
        break;92446,3274553
        break;92452,3274777
        break;92455,3275002
        break;92458,3275210
        break;92461,3275409
        break;92464,3275519
        break;92467,3275613
{yygotominor.yy14 yy1492470,3275767
        break;92471,3275867
{yygotominor.yy14 yy1492474,3275990
        break;92475,3276071
        break;92478,3276240
        break;92481,3276372
{yygotominor.yy346 yy34692484,3276495
        break;92485,3276539
        break;92488,3276723
{spanExpr(&yygotominor.yy346, pParse, yymsp[0].major, &yymsp[0].minor.yy0)yy092492,3276916
        break;92493,3276993
{spanExpr(&yygotominor.yy346, pParse, TK_ID, &yymsp[0].minor.yy0)yy092496,3277108
        break;92497,3277176
      case 92498,3277191
        break;92505,3277528
      case 92506,3277543
        break;92515,3278023
        break;92530,3278709
        break;92537,3278978
        break;92544,3279282
        break;92550,3279546
        break;92562,3280108
        break;92568,3280326
        break;92579,3280747
{spanBinaryExpr(&yygotominor.yy346,pParse,yymsp[-1].major,&yymsp[-2].minor.yy346,&yymsp[0].minor.yy346)yy34692588,3281364
        break;92589,3281470
{yygotominor.yy96.eOperator eOperator92592,3281592
{yygotominor.yy96.eOperator = yymsp[0].minor.yy0; yygotominor.yy96.not not92592,3281592
        break;92593,3281669
{yygotominor.yy96.eOperator eOperator92596,3281799
{yygotominor.yy96.eOperator = yymsp[0].minor.yy0; yygotominor.yy96.not not92596,3281799
        break;92597,3281876
        break;92600,3281982
        break;92615,3282751
        break;92618,3282922
        break;92621,3283083
        break;92629,3283372
        break;92637,3283669
{spanUnaryPrefix(&yygotominor.yy346,pParse,yymsp[-1].major,&yymsp[0].minor.yy346,&yymsp[-1].minor.yy0)yy092640,3283794
        break;92641,3283899
        break;92644,3284055
        break;92647,3284209
      case 92648,3284224
        break;92662,3284912
        break;92676,3285577
        break;92690,3286141
        break;92705,3286864
      case 92706,3286879
        break;92721,3287764
      case 92722,3287779
        break;92735,3288257
        break;92748,3288812
        break;92754,3289104
        break;92760,3289363
        break;92767,3289782
{yygotominor.yy328 yy32892770,3289910
        break;92771,3289942
        break;92774,3290025
      case 92775,3290040
        break;92787,3290594
      case 92788,3290609
        break;92800,3291136
        break;92803,3291233
        break;92806,3291379
        break;92810,3291523
        break;92813,3291653
        break;92816,3291811
        break;92819,3291973
        break;92822,3292135
        break;92825,3292301
        break;92833,3292592
        break;92839,3293076
{ yygotominor.yy328 yy32892842,3293203
        break;92843,3293238
        break;92846,3293333
        break;92849,3293433
{yygotominor.yy378.a a92852,3293576
{yygotominor.yy378.a = yymsp[0].major; yygotominor.yy378.b b92852,3293576
        break;92853,3293641
        break;92856,3293796
{ yygotominor.yy132 yy13292859,3293910
        break;92860,3293937
{ yygotominor.yy132 yy13292863,3294070
        break;92864,3294122
        break;92872,3294420
        break;92879,3294639
        break;92887,3294884
        break;92894,3295084
        break;92901,3295283
        break;92904,3295536
        break;92907,3295800
        break;92910,3296047
        break;92913,3296239
        break;92916,3296380
        break;92926,3296731
        break;92936,3297132
        break;92939,3297227
        break;92942,3297314
        break;92947,3297466
        break;92952,3297664
        break;92957,3297794
        break;92960,3297879
        break;92963,3298009
        break;92966,3298094
        break;92969,3298224
        break;92974,3298383
        break;92979,3298548
        break;92985,3298719
        break;92988,3298812
        break;92991,3298941
        break;92996,3299138
        break;92999,3299217
        break;93004,3299466
        break;93046,3302168
  yygoto 93048,3302188
  yysize 93049,3302225
  yyact 93051,3302293
static void yy_parse_failed(93079,3303123
static void yy_syntax_error(93098,3303668
#define TOKEN 93104,3303922
static void yy_accept(93116,3304326
SQLITE_PRIVATE void sqlite3Parser(93150,3305392
# define charMap(93331,3311588
# define charMap(93334,3311674
const unsigned char ebcdicToAscii[ebcdicToAscii93335,3311726
static int keywordCode(93383,3314409
SQLITE_PRIVATE int sqlite3KeywordCode(93635,3327331
SQLITE_PRIVATE const char sqlite3IsAsciiIdChar[sqlite3IsAsciiIdChar93660,3328185
#define IdChar(93669,3328667
SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[sqlite3IsEbcdicIdChar93672,3328776
#define IdChar(93687,3329631
SQLITE_PRIVATE int sqlite3GetToken(93695,3329826
SQLITE_PRIVATE int sqlite3RunParser(93970,3336499
SQLITE_PRIVATE const char sqlite3IsAsciiIdChar[sqlite3IsAsciiIdChar94139,3341887
#define IdChar(94140,3341937
SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[sqlite3IsEbcdicIdChar94143,3342046
#define IdChar(94144,3342097
#define tkSEMI 94153,3342342
#define tkWS 94154,3342362
#define tkOTHER 94155,3342382
#define tkEXPLAIN 94156,3342402
#define tkCREATE 94157,3342422
#define tkTEMP 94158,3342442
#define tkTRIGGER 94159,3342462
#define tkEND 94160,3342482
SQLITE_API int sqlite3_complete(94212,3344576
SQLITE_API int sqlite3_complete16(94366,3349400
SQLITE_API const char sqlite3_version[sqlite3_version94510,3353890
SQLITE_API const char *sqlite3_libversion(sqlite3_libversion94512,3353955
SQLITE_API const char *sqlite3_sourceid(sqlite3_sourceid94513,3354030
SQLITE_API int sqlite3_libversion_number(94514,3354104
SQLITE_API int sqlite3_threadsafe(94515,3354184
SQLITE_API char *sqlite3_temp_directory sqlite3_temp_directory94534,3354843
SQLITE_API int sqlite3_initialize(94567,3356225
SQLITE_API int sqlite3_shutdown(94700,3361021
SQLITE_API int sqlite3_config(94731,3361892
static int setupLookaside(94879,3366619
SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3_db_mutex94935,3368074
SQLITE_API int sqlite3_db_config(94942,3368224
static int allSpaces(94967,3368710
static int binCollFunc(94979,3369039
static int nocaseCollatingFunc(95009,3369779
SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(95026,3370132
SQLITE_API int sqlite3_changes(95033,3370304
SQLITE_API int sqlite3_total_changes(95040,3370450
SQLITE_PRIVATE void sqlite3CloseSavepoints(95049,3370719
SQLITE_API int sqlite3_close(95063,3371032
SQLITE_PRIVATE void sqlite3RollbackAll(95189,3374629
SQLITE_PRIVATE const char *sqlite3ErrStr(sqlite3ErrStr95224,3375555
static int sqliteDefaultBusyCallback(95268,3377500
# define NDELAY 95277,3377894
SQLITE_PRIVATE int sqlite3InvokeBusyHandler(95314,3378808
SQLITE_API int sqlite3_busy_handler(95330,3379181
SQLITE_API void sqlite3_progress_handler(95349,3379690
SQLITE_API int sqlite3_busy_timeout(95374,3380205
SQLITE_API void sqlite3_interrupt(95387,3380517
SQLITE_PRIVATE int sqlite3CreateFunc(95398,3380872
SQLITE_API int sqlite3_create_function(95482,3383309
SQLITE_API int sqlite3_create_function16(95501,3383809
SQLITE_API int sqlite3_overload_function(95537,3384915
SQLITE_API void *sqlite3_trace(sqlite3_trace95563,3385654
SQLITE_API void *sqlite3_profile(sqlite3_profile95580,3386220
SQLITE_API void *sqlite3_commit_hook(sqlite3_commit_hook95601,3386726
SQLITE_API void *sqlite3_update_hook(sqlite3_update_hook95619,3387272
SQLITE_API void *sqlite3_rollback_hook(sqlite3_rollback_hook95637,3387809
SQLITE_PRIVATE int sqlite3TempInMemory(95670,3389305
SQLITE_PRIVATE int sqlite3BtreeFactory(95698,3390272
SQLITE_API const char *sqlite3_errmsg(sqlite3_errmsg95743,3391805
SQLITE_API const void *sqlite3_errmsg16(sqlite3_errmsg1695770,3392429
SQLITE_API int sqlite3_errcode(95816,3393872
SQLITE_API int sqlite3_extended_errcode(95825,3394094
static int createCollation(95839,3394419
static const int aHardLimit[aHardLimit95920,3396806
SQLITE_API int sqlite3_limit(95982,3398605
static int openDatabase(96002,3399125
SQLITE_API int sqlite3_open(96233,3405875
SQLITE_API int sqlite3_open_v2(96240,3406062
SQLITE_API int sqlite3_open16(96253,3406423
SQLITE_API int sqlite3_create_collation(96290,3407400
SQLITE_API int sqlite3_create_collation_v2(96309,3407873
SQLITE_API int sqlite3_create_collation16(96330,3408400
SQLITE_API int sqlite3_collation_needed(96356,3409107
SQLITE_API int sqlite3_collation_needed16(96374,3409617
SQLITE_API int sqlite3_global_recover(96394,3410198
SQLITE_API int sqlite3_get_autocommit(96408,3410609
SQLITE_PRIVATE int sqlite3Corrupt(96418,3410889
SQLITE_API void sqlite3_thread_cleanup(96431,3411252
SQLITE_API int sqlite3_table_column_metadata(96440,3411478
SQLITE_API int sqlite3_sleep(96553,3414847
SQLITE_API int sqlite3_extended_result_codes(96569,3415211
SQLITE_API int sqlite3_file_control(96579,3415481
SQLITE_API int sqlite3_test_control(96613,3416292
      typedef void (*void_function)void_function96670,3417924
#define assertMutexHeld(96802,3422497
static sqlite3 *SQLITE_WSD sqlite3BlockedList 96811,3422849
static void checkListProperties(96828,3423487
# define checkListProperties(96847,3424059
static void removeFromBlockedList(96854,3424247
static void addToBlockedList(96869,3424593
static void enterMutex(96884,3424877
static void leaveMutex(96892,3425048
SQLITE_API int sqlite3_unlock_notify(96919,3425978
SQLITE_PRIVATE void sqlite3ConnectionBlocked(96968,3427339
SQLITE_PRIVATE void sqlite3ConnectionUnlocked(96996,3428307
SQLITE_PRIVATE void sqlite3ConnectionClosed(97095,3432156
# define SQLITE_CORE 97383,3444322
#define _FTS3_TOKENIZER_H_97425,3445739
typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;97451,3446925
typedef struct sqlite3_tokenizer sqlite3_tokenizer;97452,3446991
typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;97453,3447043
struct sqlite3_tokenizer_module 97455,3447110
  int iVersion;97460,3447206
  int (*xCreate)xCreate97479,3447989
  int (*xDestroy)xDestroy97489,3448357
  int (*xOpen)xOpen97496,3448620
  int (*xClose)xClose97506,3448986
  int (*xNext)xNext97532,3450272
struct sqlite3_tokenizer 97541,3450670
  const sqlite3_tokenizer_module *pModule;pModule97542,3450697
struct sqlite3_tokenizer_cursor 97546,3450852
  sqlite3_tokenizer *pTokenizer;pTokenizer97547,3450886
typedef struct Fts3Expr Fts3Expr;97579,3451832
typedef struct Fts3Phrase Fts3Phrase;97580,3451866
struct Fts3Phrase 97588,3452154
  int nToken;97589,3452174
  int iColumn;97590,3452234
  int isNot;97591,3452302
  struct PhraseToken 97592,3452373
    char *z;z97593,3452396
    int n;97594,3452446
    int isPrefix;97595,3452520
  } aToken[aToken97596,3452595
struct Fts3Expr 97602,3452735
  int eType;97603,3452753
  int nNear;97604,3452833
  Fts3Expr *pParent;pParent97605,3452898
  Fts3Expr *pLeft;pLeft97606,3452979
  Fts3Expr *pRight;pRight97607,3453027
  Fts3Phrase *pPhrase;pPhrase97608,3453076
#define FTSQUERY_NEAR 97626,3453621
#define FTSQUERY_NOT 97627,3453647
#define FTSQUERY_AND 97628,3453673
#define FTSQUERY_OR 97629,3453699
#define FTSQUERY_PHRASE 97630,3453725
#define _FTS3_HASH_H_97657,3454773
typedef struct fts3Hash fts3Hash;97660,3454838
typedef struct fts3HashElem fts3HashElem;97661,3454872
struct fts3Hash 97671,3455371
  char keyClass;97672,3455389
  char copyKey;97673,3455458
  int count;97674,3455525
  fts3HashElem *first;first97675,3455589
  int htsize;97676,3455652
  struct _fts3ht 97677,3455720
    int count;97678,3455767
    fts3HashElem *chain;chain97679,3455835
  } *ht;ht97680,3455908
struct fts3HashElem 97689,3456179
  fts3HashElem *next,next97690,3456201
  fts3HashElem *next, *prev;prev97690,3456201
  void *data;data97691,3456276
  void *pKey;pKey97692,3456345
  void *pKey; int nKey;97692,3456345
#define FTS3_HASH_STRING 97707,3456920
#define FTS3_HASH_BINARY 97708,3456950
#define fts3HashInit 97721,3457400
#define fts3HashInsert 97722,3457443
#define fts3HashFind 97723,3457488
#define fts3HashClear 97724,3457531
#define fts3HashFirst(97738,3457859
#define fts3HashNext(97739,3457898
#define fts3HashData(97740,3457936
#define fts3HashKey(97741,3457974
#define fts3HashKeysize(97742,3458012
#define fts3HashCount(97747,3458095
# define FTSTRACE(97772,3458782
# define FTSTRACE(97774,3458835
static int safe_isspace(97786,3459223
static int safe_tolower(97789,3459297
static int safe_isalnum(97792,3459371
typedef enum DocListType 97796,3459446
  DL_DOCIDS,97797,3459473
  DL_POSITIONS,97798,3459517
  DL_POSITIONS_OFFSETS 97799,3459568
} DocListType;97800,3459629
# define DL_DEFAULT 97812,3459962
  POS_END 97816,3460010
  POS_COLUMN,97817,3460064
  POS_BASE97818,3460122
#define MERGE_COUNT 97824,3460225
#define CLEAR(97836,3460539
#  define SCRAMBLE(97839,3460602
#  define SCRAMBLE(97841,3460660
#define VARINT_MAX 97845,3460767
static int fts3PutVarint(97850,3460977
static int fts3GetVarint(97865,3461487
static int fts3GetVarint32(97881,3461899
typedef struct DataBuffer 97903,3462745
  char *pData;pData97904,3462773
  int nCapacity;97905,3462832
  int nData;97906,3462884
} DataBuffer;97907,3462945
static void dataBufferInit(97909,3462960
static void dataBufferReset(97915,3463176
static void dataBufferDestroy(97918,3463250
static void dataBufferSwap(97922,3463384
static void dataBufferExpand(97927,3463532
static void dataBufferAppend(97938,3463982
static void dataBufferAppend2(97945,3464264
static void dataBufferReplace(97955,3464752
typedef struct StringBuffer 97962,3465009
  DataBuffer b;97963,3465039
} StringBuffer;97964,3465098
static void initStringBuffer(97966,3465115
static int stringBufferLength(97970,3465232
static char *stringBufferData(stringBufferData97973,3465307
static void stringBufferDestroy(97976,3465380
static void nappend(97980,3465463
static void append(97987,3465653
static void appendList(97992,3465802
static int endsInWhiteSpace(98000,3465979
static void appendWhiteSpace(98008,3466240
static void trimWhiteSpace(98014,3466434
typedef struct DLReader 98046,3467539
  DocListType iType;98047,3467565
  const char *pData;pData98048,3467586
  int nData;98049,3467607
  sqlite_int64 iDocid;98051,3467621
  int nElement;98052,3467644
} DLReader;98053,3467660
static int dlrAtEnd(98055,3467673
static sqlite_int64 dlrDocid(98059,3467774
static const char *dlrDocData(dlrDocData98063,3467883
static int dlrDocDataBytes(98067,3467992
static int dlrAllDataBytes(98071,3468101
static const char *dlrPosData(dlrPosData98079,3468366
static int dlrPosDataLen(98085,3468550
static void dlrStep(98091,3468732
static void dlrInit(98124,3469868
static void dlrDestroy(98136,3470234
static void docListValidate(98145,3470470
#define ASSERT_VALID_DOCLIST(98175,3471368
#define ASSERT_VALID_DOCLIST(98177,3471443
typedef struct DLWriter 98191,3472067
  DocListType iType;98192,3472093
  DataBuffer *b;b98193,3472114
  sqlite_int64 iPrevDocid;98194,3472131
  int has_iPrevDocid;98196,3472173
} DLWriter;98198,3472202
static void dlwInit(98200,3472215
static void dlwDestroy(98208,3472415
static void dlwAppend(98224,3473064
static void dlwCopy(98257,3474345
static void dlwAdd(98261,3474525
typedef struct PLReader 98286,3475395
  const char *pData;pData98291,3475585
  int nData;98292,3475606
  DocListType iType;98294,3475620
  int iColumn;98295,3475641
  int iPosition;98296,3475691
  int iStartOffset;98297,3475743
  int iEndOffset;98298,3475799
} PLReader;98299,3475853
static int plrAtEnd(98301,3475866
static int plrColumn(98304,3475939
static int plrPosition(98308,3476041
static int plrStartOffset(98312,3476147
static int plrEndOffset(98316,3476259
static void plrStep(98320,3476367
static void plrInit(98358,3477275
static void plrDestroy(98368,3477588
typedef struct PLWriter 98396,3478616
  DLWriter *dlw;dlw98397,3478642
  int iColumn;98399,3478660
  int iPos;98400,3478708
  int iOffset;98401,3478758
} PLWriter;98402,3478812
static void plwAdd(98408,3478994
static void plwCopy(98440,3480029
static void plwInit(98444,3480208
static void plwTerminate(98471,3481164
static void plwDestroy(98482,3481457
typedef struct DLCollector 98496,3482015
  DataBuffer b;98497,3482044
  DLWriter dlw;98498,3482060
  PLWriter plw;98499,3482076
} DLCollector;98500,3482092
static void dlcAddDoclist(98510,3482535
static void dlcNext(98519,3482862
static void dlcAddPos(98524,3483052
static DLCollector *dlcNew(dlcNew98529,3483251
static void dlcDelete(98536,3483551
static void docListTrim(98555,3484255
typedef struct OrderedDLReader 98598,3485413
  DLReader *pReader;pReader98599,3485446
  int idx;98605,3485626
} OrderedDLReader;98606,3485637
static int orderedDLReaderCmp(98609,3485710
static void orderedDLReaderReorder(98631,3486532
static void docListMerge(98649,3487062
static int posListCmp(98726,3489421
static void posListUnion(98754,3490421
static void docListUnion(98791,3491394
static void posListPhraseMerge(98858,3493344
static int plrCompare(98922,3495062
static void docListPhraseMerge(98960,3496408
static void docListAndMerge(99054,3499334
static void docListOrMerge(99089,3500204
static void docListExceptMerge(99139,3501509
static char *string_dup_n(string_dup_n99172,3502276
static char *string_dup(string_dup99182,3502601
static char *string_format(string_format99190,3502924
static int sql_exec(99223,3503652
static int sql_prepare(99233,3503962
typedef struct fulltext_vtab fulltext_vtab;99246,3504367
typedef struct Snippet 99252,3504535
  int nMatch;99253,3504560
  int nAlloc;99254,3504608
  struct snippetMatch 99255,3504661
    char snStatus;99256,3504724
    short int iCol;99257,3504803
    short int iTerm;99258,3504869
    int iToken;99259,3504949
    short int nByte;99260,3505021
    int iStart;99261,3505080
  } *aMatch;aMatch99262,3505157
  char *zOffset;zOffset99263,3505218
  int nOffset;99264,3505269
  char *zSnippet;zSnippet99265,3505309
  int nSnippet;99266,3505346
} Snippet;99267,3505387
typedef enum QueryType 99270,3505400
  QUERY_GENERIC,99271,3505425
  QUERY_DOCID,99272,3505461
  QUERY_FULLTEXT 99273,3505502
} QueryType;99274,3505582
typedef enum fulltext_statement 99276,3505596
  CONTENT_INSERT_STMT,99277,3505630
  CONTENT_SELECT_STMT,99278,3505653
  CONTENT_UPDATE_STMT,99279,3505676
  CONTENT_DELETE_STMT,99280,3505699
  CONTENT_EXISTS_STMT,99281,3505722
  BLOCK_INSERT_STMT,99283,3505746
  BLOCK_SELECT_STMT,99284,3505767
  BLOCK_DELETE_STMT,99285,3505788
  BLOCK_DELETE_ALL_STMT,99286,3505809
  SEGDIR_MAX_INDEX_STMT,99288,3505835
  SEGDIR_SET_STMT,99289,3505860
  SEGDIR_SELECT_LEVEL_STMT,99290,3505879
  SEGDIR_SPAN_STMT,99291,3505907
  SEGDIR_DELETE_STMT,99292,3505927
  SEGDIR_SELECT_SEGMENT_STMT,99293,3505949
  SEGDIR_SELECT_ALL_STMT,99294,3505979
  SEGDIR_DELETE_ALL_STMT,99295,3506005
  SEGDIR_COUNT_STMT,99296,3506031
  MAX_STMT 99298,3506053
} fulltext_statement;99299,3506105
static const char *const fulltext_zStatement[fulltext_zStatement99306,3506388
struct fulltext_vtab 99349,3508304
  sqlite3_vtab base;99350,3508327
  sqlite3 *db;db99351,3508399
  const char *zDb;zDb99352,3508464
  const char *zName;zName99353,3508527
  int nColumn;99354,3508587
  char **azColumn;azColumn99355,3508663
  char **azContentColumn;azContentColumn99356,3508728
  sqlite3_tokenizer *pTokenizer;pTokenizer99357,3508809
  sqlite3_stmt *pFulltextStatements[pFulltextStatements99362,3508967
  sqlite3_stmt *pLeafSelectStmts[pLeafSelectStmts99367,3509153
#define LEAF_SELECT 99369,3509256
  int nPendingData;99382,3509928
#define kPendingThreshold 99383,3509948
  sqlite_int64 iPrevDocid;99384,3509988
  fts3Hash pendingTerms;99385,3510015
typedef struct fulltext_cursor 99393,3510208
  sqlite3_vtab_cursor base;99394,3510241
  QueryType iCursorType;99395,3510313
  sqlite3_stmt *pStmt;pStmt99396,3510388
  int eof;99397,3510469
  Fts3Expr *pExpr;pExpr99398,3510536
  Snippet snippet;99399,3510603
  int iColumn;99400,3510679
  DataBuffer result;99401,3510742
  DLReader reader;99402,3510818
} fulltext_cursor;99403,3510893
static fulltext_vtab *cursor_vtab(cursor_vtab99405,3510913
static const sqlite3_module fts3Module;99409,3511013
static const char *contentInsertStatement(contentInsertStatement99414,3511198
static const char *contentSelectStatement(contentSelectStatement99431,3511673
static const char *contentUpdateStatement(contentUpdateStatement99444,3512094
static int sql_get_statement(99465,3512662
static int sql_single_step(99498,3513791
static int sql_get_leaf_statement(99510,3514225
static int content_insert(99532,3514978
static int content_update(99552,3515554
static void freeStringArray(99570,3516029
static int content_select(99585,3516539
static int content_delete(99625,3517577
static int content_exists(99639,3517985
static int block_insert(99658,3518561
static int block_delete(99682,3519296
static int segdir_max_index(99701,3519896
static int segdir_set(99737,3520963
static int segdir_span(99771,3522054
static int segdir_delete(99808,3523349
static int segdir_delete_all(99832,3524026
static int segdir_count(99850,3524579
static void fulltext_vtab_destroy(99888,3525784
#define TOKEN_EOF 99924,3526639
#define TOKEN_SPACE 99925,3526688
#define TOKEN_ID 99926,3526748
#define TOKEN_STRING 99927,3526799
#define TOKEN_PUNCT 99928,3526853
static const char isFtsIdChar[isFtsIdChar99943,3527407
#define ftsIdChar(99952,3527872
static int ftsGetToken(99959,3528067
typedef struct FtsToken 100009,3529087
  const char *z;z100010,3529113
  short int n;100011,3529188
} FtsToken;100012,3529252
static char **tokenizeString(tokenizeString100027,3529844
static void dequoteString(100074,3530973
static void tokenListToIdList(100116,3531924
static char *firstToken(firstToken100138,3532385
static int startsWith(100168,3533024
typedef struct TableSpec 100181,3533408
  const char *zDb;zDb100182,3533435
  const char *zName;zName100183,3533490
  int nColumn;100184,3533551
  char **azColumn;azColumn100185,3533616
  char **azContentColumn;azContentColumn100186,3533689
  char **azTokenizer;azTokenizer100187,3533749
} TableSpec;100188,3533818
static void clearTableSpec(100193,3533887
static int parseSpec(100207,3534263
static char *fulltextSchema(fulltextSchema100305,3537130
static int constructVtab(100332,3537908
static int fulltextConnect(100411,3540173
static int fulltextCreate(100433,3540774
static int fulltextBestIndex(100481,3542256
static int fulltextDisconnect(100516,3543528
static int fulltextDestroy(100522,3543697
static int fulltextOpen(100538,3544160
static void snippetClear(100556,3544634
static void snippetAppendMatch(100566,3544826
#define FTS3_ROTOR_SZ 100595,3545645
#define FTS3_ROTOR_MASK 100596,3545674
static int fts3NextExprToken(100606,3546039
static int fts3ExprBeneathNot(100647,3546959
static void snippetOffsetsOfColumn(100663,3547337
static int trimSnippetOffsets(100758,3551361
static void snippetAllOffsets(100865,3555167
static void snippetOffsetText(100904,3556237
static int wordBoundary(100939,3557392
#define SNIPPET_IGNORE 100980,3558456
#define SNIPPET_DESIRED 100981,3558535
static void snippetText(100986,3558656
static int fulltextClose(101101,3561928
static int fulltextNext(101115,3562299
static int docListOfPhrase(101172,3563927
static int evalFts3Expr(101219,3565255
static int fulltextQuery(101299,3567884
static int fulltextFilter(101356,3569804
static int fulltextEof(101439,3572540
static int fulltextColumn(101450,3572959
static int fulltextRowid(101476,3574001
static int buildTerms(101487,3574361
static int insertTerms(101545,3576462
static int deleteTerms(101559,3576869
static int index_insert(101584,3577605
static int index_delete(101602,3578178
static int index_update(101616,3578624
#define INTERIOR_MAX 101640,3579440
#define INTERIOR_MIN_TERMS 101647,3579715
#define ROOT_MAX 101660,3580143
typedef struct InteriorBlock 101668,3580358
  DataBuffer term;101669,3580389
  DataBuffer data;101670,3580458
  struct InteriorBlock *next;next101671,3580525
} InteriorBlock;101672,3580555
static InteriorBlock *interiorBlockNew(interiorBlockNew101674,3580573
static void interiorBlockValidate(101695,3581236
#define ASSERT_VALID_INTERIOR_BLOCK(101752,3582620
#define ASSERT_VALID_INTERIOR_BLOCK(101754,3582690
typedef struct InteriorWriter 101757,3582749
  int iHeight;101758,3582781
  InteriorBlock *first,first101759,3582838
  InteriorBlock *first, *last;last101759,3582838
  struct InteriorWriter *parentWriter;parentWriter101760,3582869
  DataBuffer term;101762,3582909
  sqlite_int64 iOpeningChildBlock;101763,3582983
  sqlite_int64 iLastChildBlock;101765,3583074
} InteriorWriter;101767,3583144
static void interiorWriterInit(101773,3583333
static void interiorWriterAppend(101794,3584058
static int interiorWriterDestroy(101846,3585878
static int interiorWriterRootInfo(101870,3586610
typedef struct InteriorReader 101919,3588415
  const char *pData;pData101920,3588447
  int nData;101921,3588468
  DataBuffer term;101923,3588482
  sqlite_int64 iBlockid;101925,3588557
} InteriorReader;101926,3588582
static void interiorReaderDestroy(101928,3588601
static void interiorReaderInit(101936,3588855
static int interiorReaderAtEnd(101968,3589825
static sqlite_int64 interiorReaderCurrentBlockid(101972,3589918
static int interiorReaderTermBytes(101976,3590024
static const char *interiorReaderTerm(interiorReaderTerm101980,3590160
static void interiorReaderStep(101986,3590349
static int interiorReaderTermCmp(102014,3591185
#define STANDALONE_MIN 102058,3592664
#define LEAF_MAX 102061,3592733
typedef struct LeafWriter 102063,3592756
  int iLevel;102064,3592784
  int idx;102065,3592798
  sqlite_int64 iStartBlockid;102066,3592809
  sqlite_int64 iEndBlockid;102067,3592880
  DataBuffer term;102069,3592946
  DataBuffer data;102070,3593008
  int nTermDistinct;102075,3593191
  InteriorWriter parentWriter;102077,3593213
  int has_parent;102078,3593268
} LeafWriter;102079,3593286
static void leafWriterInit(102081,3593301
static void leafNodeValidate(102094,3593665
#define ASSERT_VALID_LEAF_NODE(102155,3595196
#define ASSERT_VALID_LEAF_NODE(102157,3595262
static int leafWriterInternalFlush(102164,3595473
static int leafWriterFlush(102211,3597025
static int leafWriterRootInfo(102228,3597640
static int leafWriterFinalize(102263,3598901
static void leafWriterDestroy(102279,3599444
static int leafWriterEncodeTerm(102290,3599883
static int leafWriterInlineFlush(102332,3601159
static int leafWriterStepMerge(102356,3602024
static int leafWriterStep(102484,3606594
typedef struct LeafReader 102500,3607088
  DataBuffer term;102501,3607116
  const char *pData;pData102503,3607173
  int nData;102504,3607230
} LeafReader;102505,3607243
static void leafReaderDestroy(102507,3607258
static int leafReaderAtEnd(102512,3607371
static int leafReaderTermBytes(102517,3607482
static const char *leafReaderTerm(leafReaderTerm102520,3607567
static int leafReaderDataBytes(102526,3607743
static const char *leafReaderData(leafReaderData102532,3607905
static void leafReaderInit(102539,3608089
static void leafReaderStep(102560,3608664
static int leafReaderTermCmp(102588,3609566
typedef struct LeavesReader 102608,3610177
  int idx;102609,3610207
  sqlite3_stmt *pStmt;pStmt102611,3610268
  int eof;102612,3610341
  LeafReader leafReader;102614,3610411
  DataBuffer rootData;102615,3610474
} LeavesReader;102616,3610530
static int leavesReaderTermBytes(102619,3610578
static const char *leavesReaderTerm(leavesReaderTerm102623,3610716
static int leavesReaderDataBytes(102629,3610905
static const char *leavesReaderData(leavesReaderData102633,3611043
static int leavesReaderAtEnd(102638,3611180
static int leavesReaderReset(102655,3611868
static void leavesReaderDestroy(102659,3611964
static int leavesReaderInit(102675,3612559
static int leavesReaderStep(102719,3613977
static int leavesReaderTermCmp(102745,3614750
static int leavesReaderCmp(102760,3615239
static void leavesReaderReorder(102769,3615491
static int leavesReadersInit(102783,3615854
static int leavesReadersMerge(102827,3617117
static int segdirNextIndex(102852,3617978
static int segmentMerge(102874,3618572
static void docListAccumulateUnion(102939,3620391
static int loadSegmentLeavesInt(102962,3621393
static int loadSegmentLeaf(103078,3625227
static int loadSegmentLeaves(103099,3625893
static void getChildrenContaining(103127,3627009
static int loadAndGetChildrenContaining(103164,3628347
static int loadSegmentInt(103206,3629634
static int loadSegment(103266,3632138
static int termSelect(103307,3633338
typedef struct TermData 103358,3635062
  const char *pTerm;pTerm103359,3635088
  int nTerm;103360,3635109
  DLCollector *pCollector;pCollector103361,3635122
} TermData;103362,3635149
static int termDataCmp(103367,3635269
static int writeZeroSegment(103379,3635646
static int clearPendingTerms(103428,3637068
static int flushPendingTerms(103443,3637443
static int initPendingTerms(103455,3637799
static int fulltextUpdate(103476,3638634
static int fulltextSync(103551,3641305
static int fulltextBegin(103556,3641438
static int fulltextCommit(103567,3641720
static int fulltextRollback(103576,3641983
static void snippetFunc(103584,3642183
static void snippetOffsetsFunc(103618,3643236
typedef struct OptLeavesReader 103656,3644859
  int segment;103658,3644941
  LeavesReader reader;103659,3644956
} OptLeavesReader;103660,3644979
static int optLeavesReaderAtEnd(103662,3644999
static int optLeavesReaderTermBytes(103665,3645106
static const char *optLeavesReaderData(optLeavesReaderData103668,3645221
static int optLeavesReaderDataBytes(103671,3645334
static const char *optLeavesReaderTerm(optLeavesReaderTerm103674,3645449
static int optLeavesReaderStep(103677,3645562
static int optLeavesReaderTermCmp(103680,3645688
static int optLeavesReaderCmp(103686,3645934
static void optLeavesReaderReorder(103694,3646223
static int optimizeInternal(103709,3646671
static void optimizeFunc(103816,3650132
static void generateError(103921,3653318
static int collectSegmentTerms(103935,3653922
static int generateTermsResult(103967,3655150
static void dumpTermsFunc(104024,3657069
static void createDoclistResult(104101,3659478
static void dumpDoclistFunc(104188,3662886
static int fulltextFindFunction(104301,3666518
static int fulltextRename(104338,3667477
static const sqlite3_module fts3Module 104359,3668029
static void hashDestroy(104382,3668828
SQLITE_PRIVATE int sqlite3Fts3Init(104411,3670137
SQLITE_API int sqlite3_extension_init(104475,3672135
SQLITE_API int sqlite3_fts3_enable_parentheses 104533,3674403
#  define sqlite3_fts3_enable_parentheses 104536,3674501
#  define sqlite3_fts3_enable_parentheses 104538,3674552
#define SQLITE_FTS3_DEFAULT_NEAR_PARAM 104545,3674654
typedef struct ParseContext ParseContext;104548,3674698
struct ParseContext 104549,3674740
  sqlite3_tokenizer *pTokenizer;pTokenizer104550,3674762
  const char **azCol;azCol104551,3674823
  int nCol;104552,3674904
  int iDefaultCol;104553,3674977
  sqlite3_context *pCtx;pCtx104554,3675045
  int nNest;104555,3675114
static int fts3isspace(104569,3675735
static int getNextToken(104585,3676403
void *fts3ReallocOrFree(fts3ReallocOrFree104647,3678375
static int getNextString(104667,3679103
static int getNextNode(104770,3682180
  static const struct Fts3Keyword 104776,3682483
    char z[z104777,3682519
    unsigned char n;104778,3682580
    unsigned char parenOnly;104779,3682650
    unsigned char eType;104780,3682723
static int opPrecedence(104939,3687685
static void insertBinaryOperator(104960,3688439
static int fts3ExprParse(104991,3689567
SQLITE_PRIVATE int sqlite3Fts3ExprParse(105156,3695014
SQLITE_PRIVATE void sqlite3Fts3ExprFree(105194,3696082
static int queryTestTokenizer(105213,3696558
static void exprToString(105244,3697396
static void fts3ExprTest(105296,3699014
SQLITE_PRIVATE void sqlite3Fts3ExprInitTestInterface(105375,3701025
static void *fts3HashMalloc(fts3HashMalloc105418,3702379
static void fts3HashFree(105425,3702496
SQLITE_PRIVATE void sqlite3Fts3HashInit(105439,3703021
SQLITE_PRIVATE void sqlite3Fts3HashClear(105454,3703486
static int fts3StrHash(105477,3704011
static int fts3StrCompare(105487,3704246
static int fts3BinHash(105495,3704488
static int fts3BinCompare(105503,3704674
static int (*ftsHashFunction(ftsHashFunction105520,3705389
static int (*ftsCompareFunction(ftsCompareFunction105535,3705804
static void fts3HashInsertElement(105546,3706077
static void fts3Rehash(105574,3706927
static fts3HashElem *fts3FindElementByHash(fts3FindElementByHash105597,3707836
static void fts3RemoveElementByHash(105625,3708724
SQLITE_PRIVATE void *sqlite3Fts3HashFind(sqlite3Fts3HashFind105663,3709679
SQLITE_PRIVATE void *sqlite3Fts3HashInsert(sqlite3Fts3HashInsert105692,3710855
typedef struct porter_tokenizer 105789,3713725
  sqlite3_tokenizer base;105790,3713759
} porter_tokenizer;105791,3713807
typedef struct porter_tokenizer_cursor 105796,3713880
  sqlite3_tokenizer_cursor base;105797,3713921
  const char *zInput;zInput105798,3713954
  int nInput;105799,3714015
  int iOffset;105800,3714070
  int iToken;105801,3714134
  char *zToken;zToken105802,3714206
  int nAllocated;105803,3714269
} porter_tokenizer_cursor;105804,3714339
static const sqlite3_tokenizer_module porterTokenizerModule;105808,3714394
static int porterCreate(105814,3714499
static int porterDestroy(105829,3714821
static int porterOpen(105840,3715134
static int porterClose(105871,3715968
static const char cType[cType105880,3716191
static int isConsonant(105899,3716816
static int isVowel(105908,3717012
static int m_gt_0(105937,3717927
static int m_eq_1(105947,3718151
static int m_gt_1(105961,3718485
static int hasVowel(105975,3718805
static int doubleConsonant(105986,3719052
static int star_oh(105998,3719436
static int stem(106018,3720024
static void copy_stemmer(106043,3720904
static void porter_stemmer(106090,3722399
static const char porterIdChar[porterIdChar106313,3727504
#define isDelim(106321,3727908
static int porterNext(106327,3728116
static const sqlite3_tokenizer_module porterTokenizerModule 106373,3729617
SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule(106386,3729863
static void scalarFunc(106448,3732049
static void testFunc(106520,3734204
int registerTokenizer(106609,3736307
int queryTokenizer(106631,3736769
static void intTestFunc(106676,3738110
SQLITE_PRIVATE int sqlite3Fts3InitHashTable(106725,3739762
typedef struct simple_tokenizer 106793,3741713
  sqlite3_tokenizer base;106794,3741747
  char delim[delim106795,3741773
} simple_tokenizer;106796,3741832
typedef struct simple_tokenizer_cursor 106798,3741853
  sqlite3_tokenizer_cursor base;106799,3741894
  const char *pInput;pInput106800,3741927
  int nBytes;106801,3741988
  int iOffset;106802,3742043
  int iToken;106803,3742107
  char *pToken;pToken106804,3742179
  int nTokenAllocated;106805,3742242
} simple_tokenizer_cursor;106806,3742312
static const sqlite3_tokenizer_module simpleTokenizerModule;106810,3742367
static int simpleDelim(106812,3742429
static int simpleCreate(106819,3742568
static int simpleDestroy(106860,3743590
static int simpleOpen(106871,3743903
static int simpleClose(106902,3744742
static int simpleNext(106913,3745068
static const sqlite3_tokenizer_module simpleTokenizerModule 106968,3746866
SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule(106981,3747112
#define VARIANT_RSTARTREE_CHOOSESUBTREE 107021,3748553
#define VARIANT_RSTARTREE_REINSERT 107022,3748595
#define VARIANT_GUTTMAN_QUADRATIC_SPLIT 107027,3748695
#define VARIANT_GUTTMAN_LINEAR_SPLIT 107028,3748737
#define VARIANT_RSTARTREE_SPLIT 107029,3748779
#define VARIANT_GUTTMAN_SPLIT 107031,3748822
  #define PickNext 107035,3748963
  #define PickSeeds 107036,3749000
  #define AssignCells 107037,3749039
  #define PickNext 107040,3749118
  #define PickSeeds 107041,3749152
  #define AssignCells 107042,3749188
  #define AssignCells 107045,3749262
typedef sqlite3_int64 i64;107056,3749399
typedef unsigned char u8;107057,3749426
typedef unsigned int u32;107058,3749452
typedef struct Rtree Rtree;107061,3749486
typedef struct RtreeCursor RtreeCursor;107062,3749514
typedef struct RtreeNode RtreeNode;107063,3749554
typedef struct RtreeCell RtreeCell;107064,3749590
typedef struct RtreeConstraint RtreeConstraint;107065,3749626
typedef union RtreeCoord RtreeCoord;107066,3749674
#define RTREE_MAX_DIMENSIONS 107069,3749784
#define HASHSIZE 107075,3749966
struct Rtree 107080,3750029
  sqlite3_vtab base;107081,3750044
  sqlite3 *db;db107082,3750065
  int iNodeSize;107083,3750126
  int nDim;107084,3750207
  int nBytesPerCell;107085,3750264
  int iDepth;107086,3750324
  char *zDb;zDb107087,3750398
  char *zName;zName107088,3750475
  RtreeNode *aHash[aHash107089,3750533
  int nBusy;107090,3750601
  RtreeNode *pDeleted;pDeleted107097,3750956
  int iReinsertHeight;107098,3750979
  sqlite3_stmt *pReadNode;pReadNode107101,3751121
  sqlite3_stmt *pWriteNode;pWriteNode107102,3751148
  sqlite3_stmt *pDeleteNode;pDeleteNode107103,3751176
  sqlite3_stmt *pReadRowid;pReadRowid107106,3751270
  sqlite3_stmt *pWriteRowid;pWriteRowid107107,3751298
  sqlite3_stmt *pDeleteRowid;pDeleteRowid107108,3751327
  sqlite3_stmt *pReadParent;pReadParent107111,3751423
  sqlite3_stmt *pWriteParent;pWriteParent107112,3751452
  sqlite3_stmt *pDeleteParent;pDeleteParent107113,3751482
  int eCoordType;107115,3751514
#define RTREE_COORD_REAL32 107119,3751574
#define RTREE_COORD_INT32 107120,3751603
#define RTREE_MINCELLS(107131,3751907
#define RTREE_REINSERT(107132,3751977
#define RTREE_MAXCELLS 107133,3752021
struct RtreeCursor 107138,3752082
  sqlite3_vtab_cursor base;107139,3752103
  RtreeNode *pNode;pNode107140,3752131
  int iCell;107141,3752210
  int iStrategy;107142,3752283
  int nConstraint;107143,3752357
  RtreeConstraint *aConstraint;aConstraint107144,3752432
union RtreeCoord 107147,3752498
  float f;107148,3752517
  int i;107149,3752528
#define DCOORD(107157,3752764
struct RtreeConstraint 107166,3753005
  int iCoord;107167,3753030
  int op;107168,3753104
  double rValue;107169,3753169
#define RTREE_EQ 107173,3753278
#define RTREE_LE 107174,3753300
#define RTREE_LT 107175,3753322
#define RTREE_GE 107176,3753344
#define RTREE_GT 107177,3753366
struct RtreeNode 107197,3754066
  RtreeNode *pParent;pParent107198,3754085
  i64 iNode;107199,3754139
  int nRef;107200,3754152
  int isDirty;107201,3754164
  u8 *zData;zData107202,3754179
  RtreeNode *pNext;pNext107203,3754192
#define NCELL(107205,3754266
struct RtreeCell 107210,3754376
  i64 iRowid;107211,3754395
  RtreeCoord aCoord[aCoord107212,3754409
# define MAX(107216,3754470
# define MIN(107219,3754531
static int readInt16(107226,3754711
static void readCoord(107229,3754769
static i64 readInt64(107238,3754965
static int writeInt16(107256,3755428
static int writeCoord(107261,3755525
static int writeInt64(107272,3755775
static void nodeReference(107287,3756061
static void nodeZero(107296,3756197
static int nodeHash(107307,3756437
static RtreeNode *nodeHashLookup(nodeHashLookup107318,3756728
static void nodeHashInsert(107328,3756964
static void nodeHashDelete(107341,3757257
static RtreeNode *nodeNew(nodeNew107357,3757778
nodeAcquire(107375,3758253
static void nodeOverwriteCell(107437,3759883
static void nodeDeleteCell(107455,3760272
nodeInsertCell(107471,3760808
nodeWrite(107497,3761392
nodeRelease(107523,3762114
static i64 nodeGetRowid(107550,3762793
static void nodeGetCoord(107562,3763040
static void nodeGetCell(107576,3763392
static int rtreeCreate(107600,3763947
static int rtreeConnect(107613,3764196
static void rtreeReference(107626,3764439
static void rtreeRelease(107634,3764618
static int rtreeDisconnect(107653,3765181
static int rtreeDestroy(107661,3765339
static int rtreeOpen(107688,3765923
static int rtreeClose(107706,3766328
static int rtreeEof(107722,3766767
static int testRtreeCell(107733,3767114
static int testRtreeEntry(107767,3768174
static int descendToCell(107799,3769190
static int nodeRowidIndex(107859,3770522
static int nodeParentIndex(107871,3770848
static int rtreeNext(107882,3771094
static int rtreeRowid(107920,3772124
static int rtreeColumn(107933,3772461
static int findLeafNode(107961,3773382
static int rtreeFilter(107979,3773861
static int rtreeBestIndex(108088,3777227
static float cellArea(108178,3780414
static float cellMargin(108191,3780744
static void cellUnion(108203,3781011
static int cellContains(108222,3781633
static float cellGrowth(108240,3782128
static float cellOverlap(108250,3782447
static float cellOverlapEnlargement(108285,3783124
static int ChooseLeaf(108307,3783603
static void AdjustTree(108391,3785840
static int rowidWrite(108415,3786501
static int parentWrite(108425,3786840
static RtreeCell *LinearPickNext(LinearPickNext108439,3787310
static void LinearPickSeeds(108457,3787639
static RtreeCell *QuadraticPickNext(QuadraticPickNext108519,3789108
  #define FABS(108527,3789262
static void QuadraticPickSeeds(108551,3789812
static void SortByDistance(108601,3791022
static void SortByDimension(108667,3792677
static int splitNodeStartree(108727,3794296
static int splitNodeGuttman(108829,3796955
static int updateMapping(108881,3798278
static int SplitNode(108900,3798752
static int fixLeafParent(109025,3801851
static int removeNode(109045,3802459
static void fixBoundingBox(109088,3803636
static int deleteCell(109111,3804349
static int Reinsert(109142,3805199
static int rtreeInsertCell(109245,3808035
static int reinsertNodeContent(109282,3808965
static int newRowid(109311,3809713
static int hashIsEmpty(109322,3810026
static int rtreeUpdate(109334,3810228
static int rtreeRename(109496,3815164
static sqlite3_module rtreeModule 109514,3815737
static int rtreeSqlInit(109537,3817024
  #define N_STATEMENT 109546,3817168
static int getPageSize(109615,3819421
static int rtreeInit(109646,3820152
static void rtreenode(109762,3824096
static void rtreedepth(109800,3825103
SQLITE_PRIVATE int sqlite3RtreeInit(109816,3825631
SQLITE_API int sqlite3_extension_init(109840,3826286
# define SQLITE_MAX_LIKE_PATTERN_LENGTH 109903,3828068
static void xFree(109909,3828199
static int icuLikeCompare(109918,3828425
static void icuLikeFunc(110009,3831131
static void icuFunctionError(110055,3832461
static void icuRegexpDelete(110070,3832983
static void icuRegexpFunc(110094,3833742
static void icuCaseFunc16(110175,3836242
static void icuCollationDel(110219,3837282
static int icuCollationColl(110228,3837521
static void icuLoadCollation(110260,3838435
SQLITE_PRIVATE int sqlite3IcuInit(110299,3839548
  struct IcuScalar 110300,3839596
    const char *zName;zName110301,3839617
    int nArg;110302,3839683
    int enc;110303,3839755
    void *pContext;pContext110304,3839829
    void (*xFunc)xFunc110305,3839909
SQLITE_API int sqlite3_extension_init(110339,3840999
typedef struct IcuTokenizer IcuTokenizer;110376,3841999
typedef struct IcuCursor IcuCursor;110377,3842041
struct IcuTokenizer 110379,3842078
  sqlite3_tokenizer base;110380,3842100
  char *zLocale;zLocale110381,3842126
struct IcuCursor 110384,3842147
  sqlite3_tokenizer_cursor base;110385,3842166
  UBreakIterator *pIter;pIter110387,3842200
  int nChar;110388,3842262
  UChar *aChar;aChar110389,3842333
  int *aOffset;aOffset110390,3842405
  int nBuffer;110392,3842483
  char *zBuffer;zBuffer110393,3842498
  int iToken;110395,3842516
static int icuCreate(110401,3842576
static int icuDestroy(110431,3843216
static int icuOpen(110443,3843565
static int icuClose(110512,3845312
static int icuNext(110523,3845573
static const sqlite3_tokenizer_module icuTokenizerModule 110588,3847300
SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule(110600,3847717

/Users/seth/src/r-dbi-git/SQLite/RSQLite/src/sqlite/sqlite3.h,14731
#define _SQLITE3_H_34,1511
# define SQLITE_EXTERN 49,1760
# define SQLITE_API53,1817
#define SQLITE_DEPRECATED70,2483
#define SQLITE_EXPERIMENTAL71,2509
# undef SQLITE_VERSION77,2637
# undef SQLITE_VERSION_NUMBER80,2696
#define SQLITE_VERSION 122,4340
#define SQLITE_VERSION_NUMBER 123,4379
#define SQLITE_SOURCE_ID 124,4417
SQLITE_API SQLITE_EXTERN const char sqlite3_version[sqlite3_version155,5823
typedef struct sqlite3 sqlite3;207,8181
  typedef SQLITE_INT64_TYPE sqlite_int64;223,8695
  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;224,8737
  typedef __int64 sqlite_int64;226,8838
  typedef unsigned __int64 sqlite_uint64;227,8870
  typedef long long int sqlite_int64;229,8918
  typedef unsigned long long int sqlite_uint64;230,8956
typedef sqlite_int64 sqlite3_int64;232,9011
typedef sqlite_uint64 sqlite3_uint64;233,9047
# define double 240,9235
typedef int (*sqlite3_callback)sqlite3_callback280,10573
#define SQLITE_OK 346,13477
#define SQLITE_ERROR 348,13564
#define SQLITE_INTERNAL 349,13632
#define SQLITE_PERM 350,13701
#define SQLITE_ABORT 351,13764
#define SQLITE_BUSY 352,13838
#define SQLITE_LOCKED 353,13904
#define SQLITE_NOMEM 354,13976
#define SQLITE_READONLY 355,14032
#define SQLITE_INTERRUPT 356,14107
#define SQLITE_IOERR 357,14188
#define SQLITE_CORRUPT 358,14263
#define SQLITE_NOTFOUND 359,14338
#define SQLITE_FULL 360,14412
#define SQLITE_CANTOPEN 361,14492
#define SQLITE_PROTOCOL 362,14563
#define SQLITE_EMPTY 363,14640
#define SQLITE_SCHEMA 364,14696
#define SQLITE_TOOBIG 365,14762
#define SQLITE_CONSTRAINT 366,14834
#define SQLITE_MISMATCH 367,14906
#define SQLITE_MISUSE 368,14963
#define SQLITE_NOLFS 369,15026
#define SQLITE_AUTH 370,15103
#define SQLITE_FORMAT 371,15162
#define SQLITE_RANGE 372,15232
#define SQLITE_NOTADB 373,15313
#define SQLITE_ROW 374,15391
#define SQLITE_DONE 375,15466
#define SQLITE_IOERR_READ 401,16716
#define SQLITE_IOERR_SHORT_READ 402,16779
#define SQLITE_IOERR_WRITE 403,16842
#define SQLITE_IOERR_FSYNC 404,16905
#define SQLITE_IOERR_DIR_FSYNC 405,16968
#define SQLITE_IOERR_TRUNCATE 406,17031
#define SQLITE_IOERR_FSTAT 407,17094
#define SQLITE_IOERR_UNLOCK 408,17157
#define SQLITE_IOERR_RDLOCK 409,17220
#define SQLITE_IOERR_DELETE 410,17283
#define SQLITE_IOERR_BLOCKED 411,17347
#define SQLITE_IOERR_NOMEM 412,17411
#define SQLITE_IOERR_ACCESS 413,17475
#define SQLITE_IOERR_CHECKRESERVEDLOCK 414,17539
#define SQLITE_IOERR_LOCK 415,17603
#define SQLITE_IOERR_CLOSE 416,17667
#define SQLITE_IOERR_DIR_CLOSE 417,17731
#define SQLITE_LOCKED_SHAREDCACHE 418,17795
#define SQLITE_OPEN_READONLY 428,18123
#define SQLITE_OPEN_READWRITE 429,18203
#define SQLITE_OPEN_CREATE 430,18283
#define SQLITE_OPEN_DELETEONCLOSE 431,18363
#define SQLITE_OPEN_EXCLUSIVE 432,18427
#define SQLITE_OPEN_MAIN_DB 433,18491
#define SQLITE_OPEN_TEMP_DB 434,18555
#define SQLITE_OPEN_TRANSIENT_DB 435,18619
#define SQLITE_OPEN_MAIN_JOURNAL 436,18683
#define SQLITE_OPEN_TEMP_JOURNAL 437,18747
#define SQLITE_OPEN_SUBJOURNAL 438,18811
#define SQLITE_OPEN_MASTER_JOURNAL 439,18875
#define SQLITE_OPEN_NOMUTEX 440,18939
#define SQLITE_OPEN_FULLMUTEX 441,19019
#define SQLITE_OPEN_SHAREDCACHE 442,19099
#define SQLITE_OPEN_PRIVATECACHE 443,19179
#define SQLITE_IOCAP_ATOMIC 465,20157
#define SQLITE_IOCAP_ATOMIC512 466,20205
#define SQLITE_IOCAP_ATOMIC1K 467,20253
#define SQLITE_IOCAP_ATOMIC2K 468,20301
#define SQLITE_IOCAP_ATOMIC4K 469,20349
#define SQLITE_IOCAP_ATOMIC8K 470,20397
#define SQLITE_IOCAP_ATOMIC16K 471,20445
#define SQLITE_IOCAP_ATOMIC32K 472,20493
#define SQLITE_IOCAP_ATOMIC64K 473,20541
#define SQLITE_IOCAP_SAFE_APPEND 474,20589
#define SQLITE_IOCAP_SEQUENTIAL 475,20637
#define SQLITE_LOCK_NONE 484,20917
#define SQLITE_LOCK_SHARED 485,20953
#define SQLITE_LOCK_RESERVED 486,20989
#define SQLITE_LOCK_PENDING 487,21025
#define SQLITE_LOCK_EXCLUSIVE 488,21061
#define SQLITE_SYNC_NORMAL 504,21711
#define SQLITE_SYNC_FULL 505,21753
#define SQLITE_SYNC_DATAONLY 506,21795
typedef struct sqlite3_file sqlite3_file;519,22283
struct sqlite3_file 520,22325
  const struct sqlite3_io_methods *pMethods;pMethods521,22347
typedef struct sqlite3_io_methods sqlite3_io_methods;611,26485
struct sqlite3_io_methods 612,26539
  int iVersion;613,26567
  int (*xClose)xClose614,26583
  int (*xRead)xRead615,26615
  int (*xWrite)xWrite616,26684
  int (*xTruncate)xTruncate617,26760
  int (*xSync)xSync618,26815
  int (*xFileSize)xFileSize619,26857
  int (*xLock)xLock620,26914
  int (*xUnlock)xUnlock621,26950
  int (*xCheckReservedLock)xCheckReservedLock622,26988
  int (*xFileControl)xFileControl623,27046
  int (*xSectorSize)xSectorSize624,27104
  int (*xDeviceCharacteristics)xDeviceCharacteristics625,27141
#define SQLITE_FCNTL_LOCKSTATE 644,27918
#define SQLITE_GET_LOCKPROXYFILE 645,27958
#define SQLITE_SET_LOCKPROXYFILE 646,27998
#define SQLITE_LAST_ERRNO 647,28038
typedef struct sqlite3_mutex sqlite3_mutex;659,28442
typedef struct sqlite3_vfs sqlite3_vfs;790,34689
struct sqlite3_vfs 791,34729
  int iVersion;792,34750
  int szOsFile;793,34808
  int mxPathname;794,34873
  sqlite3_vfs *pNext;pNext795,34935
  const char *zName;zName796,34988
  void *pAppData;pAppData797,35054
  int (*xOpen)xOpen798,35124
  int (*xDelete)xDelete800,35230
  int (*xAccess)xAccess801,35294
  int (*xFullPathname)xFullPathname802,35370
  void *(*xDlOpen)xDlOpen803,35449
  void (*xDlError)xDlError804,35506
  void (*(*xDlSym)xDlSym805,35566
  void (*xDlClose)xDlClose806,35634
  int (*xRandomness)xRandomness807,35675
  int (*xSleep)xSleep808,35734
  int (*xCurrentTime)xCurrentTime809,35783
  int (*xGetLastError)xGetLastError810,35829
#define SQLITE_ACCESS_EXISTS 828,36563
#define SQLITE_ACCESS_READWRITE 829,36597
#define SQLITE_ACCESS_READ 830,36631
typedef struct sqlite3_mem_methods sqlite3_mem_methods;1032,46842
struct sqlite3_mem_methods 1033,46898
  void *(*xMalloc)xMalloc1034,46927
  void (*xFree)xFree1035,46993
  void *(*xRealloc)xRealloc1036,47056
  int (*xSize)xSize1037,47116
  int (*xRoundup)xRoundup1038,47188
  int (*xInit)xInit1039,47268
  void (*xShutdown)xShutdown1040,47339
  void *pAppData;pAppData1041,47412
#define SQLITE_CONFIG_SINGLETHREAD 1204,55998
#define SQLITE_CONFIG_MULTITHREAD 1205,56047
#define SQLITE_CONFIG_SERIALIZED 1206,56096
#define SQLITE_CONFIG_MALLOC 1207,56145
#define SQLITE_CONFIG_GETMALLOC 1208,56211
#define SQLITE_CONFIG_SCRATCH 1209,56277
#define SQLITE_CONFIG_PAGECACHE 1210,56343
#define SQLITE_CONFIG_HEAP 1211,56409
#define SQLITE_CONFIG_MEMSTATUS 1212,56480
#define SQLITE_CONFIG_MUTEX 1213,56533
#define SQLITE_CONFIG_GETMUTEX 1214,56601
#define SQLITE_CONFIG_LOOKASIDE 1216,56736
#define SQLITE_CONFIG_PCACHE 1217,56789
#define SQLITE_CONFIG_GETPCACHE 1218,56858
#define SQLITE_DBCONFIG_LOOKASIDE 1251,58475
#define SQLITE_DENY 1968,91505
#define SQLITE_IGNORE 1969,91575
#define SQLITE_CREATE_INDEX 1994,92772
#define SQLITE_CREATE_TABLE 1995,92851
#define SQLITE_CREATE_TEMP_INDEX 1996,92930
#define SQLITE_CREATE_TEMP_TABLE 1997,93009
#define SQLITE_CREATE_TEMP_TRIGGER 1998,93088
#define SQLITE_CREATE_TEMP_VIEW 1999,93167
#define SQLITE_CREATE_TRIGGER 2000,93246
#define SQLITE_CREATE_VIEW 2001,93325
#define SQLITE_DELETE 2002,93404
#define SQLITE_DROP_INDEX 2003,93483
#define SQLITE_DROP_TABLE 2004,93562
#define SQLITE_DROP_TEMP_INDEX 2005,93641
#define SQLITE_DROP_TEMP_TABLE 2006,93720
#define SQLITE_DROP_TEMP_TRIGGER 2007,93799
#define SQLITE_DROP_TEMP_VIEW 2008,93878
#define SQLITE_DROP_TRIGGER 2009,93957
#define SQLITE_DROP_VIEW 2010,94036
#define SQLITE_INSERT 2011,94115
#define SQLITE_PRAGMA 2012,94194
#define SQLITE_READ 2013,94273
#define SQLITE_SELECT 2014,94352
#define SQLITE_TRANSACTION 2015,94431
#define SQLITE_UPDATE 2016,94510
#define SQLITE_ATTACH 2017,94589
#define SQLITE_DETACH 2018,94668
#define SQLITE_ALTER_TABLE 2019,94747
#define SQLITE_REINDEX 2020,94826
#define SQLITE_ANALYZE 2021,94905
#define SQLITE_CREATE_VTABLE 2022,94984
#define SQLITE_DROP_VTABLE 2023,95063
#define SQLITE_FUNCTION 2024,95142
#define SQLITE_SAVEPOINT 2025,95221
#define SQLITE_COPY 2026,95300
typedef struct sqlite3_stmt sqlite3_stmt;2250,105872
#define SQLITE_LIMIT_LENGTH 2340,109509
#define SQLITE_LIMIT_SQL_LENGTH 2341,109558
#define SQLITE_LIMIT_COLUMN 2342,109607
#define SQLITE_LIMIT_EXPR_DEPTH 2343,109656
#define SQLITE_LIMIT_COMPOUND_SELECT 2344,109705
#define SQLITE_LIMIT_VDBE_OP 2345,109754
#define SQLITE_LIMIT_FUNCTION_ARG 2346,109803
#define SQLITE_LIMIT_ATTACHED 2347,109852
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH 2348,109901
#define SQLITE_LIMIT_VARIABLE_NUMBER 2349,109950
#define SQLITE_LIMIT_TRIGGER_DEPTH 2350,109999
typedef struct Mem sqlite3_value;2505,117468
typedef struct sqlite3_context sqlite3_context;2519,118067
#define SQLITE_INTEGER 2930,135960
#define SQLITE_FLOAT 2931,135986
#define SQLITE_BLOB 2932,136012
#define SQLITE_NULL 2933,136038
# undef SQLITE_TEXT2935,136083
# define SQLITE_TEXT 2937,136109
#define SQLITE3_TEXT 2939,136143
#define SQLITE_UTF8 3266,152329
#define SQLITE_UTF16LE 3267,152361
#define SQLITE_UTF16BE 3268,152393
#define SQLITE_UTF16 3269,152425
#define SQLITE_ANY 3270,152488
#define SQLITE_UTF16_ALIGNED 3271,152558
typedef void (*sqlite3_destructor_type)sqlite3_destructor_type3476,161868
#define SQLITE_STATIC 3477,161916
#define SQLITE_TRANSIENT 3478,161972
SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;sqlite3_temp_directory3791,176611
typedef struct sqlite3_vtab sqlite3_vtab;4217,195208
typedef struct sqlite3_index_info sqlite3_index_info;4218,195250
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;4219,195304
typedef struct sqlite3_module sqlite3_module;4220,195360
struct sqlite3_module 4239,196146
  int iVersion;4240,196170
  int (*xCreate)xCreate4241,196186
  int (*xConnect)xConnect4244,196321
  int (*xBestIndex)xBestIndex4247,196457
  int (*xDisconnect)xDisconnect4248,196520
  int (*xDestroy)xDestroy4249,196563
  int (*xOpen)xOpen4250,196603
  int (*xClose)xClose4251,196672
  int (*xFilter)xFilter4252,196711
  int (*xNext)xNext4254,196831
  int (*xEof)xEof4255,196869
  int (*xColumn)xColumn4256,196906
  int (*xRowid)xRowid4257,196969
  int (*xUpdate)xUpdate4258,197031
  int (*xBegin)xBegin4259,197105
  int (*xSync)xSync4260,197143
  int (*xCommit)xCommit4261,197180
  int (*xRollback)xRollback4262,197219
  int (*xFindFunction)xFindFunction4263,197260
  int (*xRename)xRename4266,197449
struct sqlite3_index_info 4320,199897
  int nConstraint;4322,199940
  struct sqlite3_index_constraint 4323,200008
     int iColumn;4324,200044
     unsigned char op;4325,200120
     unsigned char usable;4326,200177
     int iTermOffset;4327,200248
  } *aConstraint;aConstraint4328,200328
  int nOrderBy;4329,200397
  struct sqlite3_index_orderby 4330,200471
     int iColumn;4331,200504
     unsigned char desc;4332,200555
  } *aOrderBy;aOrderBy4333,200623
  struct sqlite3_index_constraint_usage 4335,200694
    int argvIndex;4336,200736
    unsigned char omit;4337,200816
  } *aConstraintUsage;aConstraintUsage4338,200890
  int idxNum;4339,200913
  char *idxStr;idxStr4340,200982
  int needToFreeIdxStr;4341,201063
  int orderByConsumed;4342,201139
  double estimatedCost;4343,201208
#define SQLITE_INDEX_CONSTRAINT_EQ 4345,201281
#define SQLITE_INDEX_CONSTRAINT_GT 4346,201321
#define SQLITE_INDEX_CONSTRAINT_LE 4347,201361
#define SQLITE_INDEX_CONSTRAINT_LT 4348,201401
#define SQLITE_INDEX_CONSTRAINT_GE 4349,201442
#define SQLITE_INDEX_CONSTRAINT_MATCH 4350,201483
struct sqlite3_vtab 4416,204457
  const sqlite3_module *pModule;pModule4417,204479
  int nRef;4418,204553
  char *zErrMsg;zErrMsg4419,204608
struct sqlite3_vtab_cursor 4441,205581
  sqlite3_vtab *pVtab;pVtab4442,205610
typedef struct sqlite3_blob sqlite3_blob;4500,208058
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;4909,226502
struct sqlite3_mutex_methods 4910,226562
  int (*xMutexInit)xMutexInit4911,226593
  int (*xMutexEnd)xMutexEnd4912,226620
  sqlite3_mutex *(*xMutexAlloc)xMutexAlloc4913,226646
  void (*xMutexFree)xMutexFree4914,226684
  void (*xMutexEnter)xMutexEnter4915,226723
  int (*xMutexTry)xMutexTry4916,226763
  void (*xMutexLeave)xMutexLeave4917,226800
  int (*xMutexHeld)xMutexHeld4918,226840
  int (*xMutexNotheld)xMutexNotheld4919,226878
#define SQLITE_MUTEX_FAST 4964,228989
#define SQLITE_MUTEX_RECURSIVE 4965,229029
#define SQLITE_MUTEX_STATIC_MASTER 4966,229069
#define SQLITE_MUTEX_STATIC_MEM 4967,229109
#define SQLITE_MUTEX_STATIC_MEM2 4968,229173
#define SQLITE_MUTEX_STATIC_OPEN 4969,229229
#define SQLITE_MUTEX_STATIC_PRNG 4970,229295
#define SQLITE_MUTEX_STATIC_LRU 4971,229359
#define SQLITE_MUTEX_STATIC_LRU2 4972,229420
#define SQLITE_TESTCTRL_PRNG_SAVE 5041,232600
#define SQLITE_TESTCTRL_PRNG_RESTORE 5042,232651
#define SQLITE_TESTCTRL_PRNG_RESET 5043,232702
#define SQLITE_TESTCTRL_BITVEC_TEST 5044,232753
#define SQLITE_TESTCTRL_FAULT_INSTALL 5045,232804
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS 5046,232855
#define SQLITE_TESTCTRL_PENDING_BYTE 5047,232906
#define SQLITE_TESTCTRL_ASSERT 5048,232957
#define SQLITE_TESTCTRL_ALWAYS 5049,233008
#define SQLITE_TESTCTRL_RESERVE 5050,233059
#define SQLITE_STATUS_MEMORY_USED 5162,238423
#define SQLITE_STATUS_PAGECACHE_USED 5163,238468
#define SQLITE_STATUS_PAGECACHE_OVERFLOW 5164,238513
#define SQLITE_STATUS_SCRATCH_USED 5165,238558
#define SQLITE_STATUS_SCRATCH_OVERFLOW 5166,238603
#define SQLITE_STATUS_MALLOC_SIZE 5167,238648
#define SQLITE_STATUS_PARSER_STACK 5168,238693
#define SQLITE_STATUS_PAGECACHE_SIZE 5169,238738
#define SQLITE_STATUS_SCRATCH_SIZE 5170,238783
#define SQLITE_DBSTATUS_LOOKASIDE_USED 5211,240477
#define SQLITE_STMTSTATUS_FULLSCAN_STEP 5262,242524
#define SQLITE_STMTSTATUS_SORT 5263,242570
typedef struct sqlite3_pcache sqlite3_pcache;5277,243006
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;5407,249954
struct sqlite3_pcache_methods 5408,250016
  void *pArg;pArg5409,250048
  int (*xInit)xInit5410,250062
  void (*xShutdown)xShutdown5411,250085
  sqlite3_pcache *(*xCreate)xCreate5412,250113
  void (*xCachesize)xCachesize5413,250171
  int (*xPagecount)xPagecount5414,250226
  void *(*xFetch)xFetch5415,250264
  void (*xUnpin)xUnpin5416,250330
  void (*xRekey)xRekey5417,250385
  void (*xTruncate)xTruncate5418,250461
  void (*xDestroy)xDestroy5419,250516
typedef struct sqlite3_backup sqlite3_backup;5433,250907
# undef double5756,268251

/Users/seth/src/r-dbi-git/SQLite/RSQLite/src/sqlite/sqlite3ext.h,13681
#define _SQLITE3EXT_H_21,732
typedef struct sqlite3_api_routines sqlite3_api_routines;24,777
struct sqlite3_api_routines 36,1209
  void * (*aggregate_context)aggregate_context37,1239
  int  (*aggregate_count)aggregate_count38,1299
  int  (*bind_blob)bind_blob39,1344
  int  (*bind_double)bind_double40,1417
  int  (*bind_int)bind_int41,1466
  int  (*bind_int64)bind_int6442,1509
  int  (*bind_null)bind_null43,1563
  int  (*bind_parameter_count)bind_parameter_count44,1603
  int  (*bind_parameter_index)bind_parameter_index45,1650
  const char * (*bind_parameter_name)bind_parameter_name46,1714
  int  (*bind_text)bind_text47,1772
  int  (*bind_text16)bind_text1648,1845
  int  (*bind_value)bind_value49,1918
  int  (*busy_handler)busy_handler50,1980
  int  (*busy_timeout)busy_timeout51,2038
  int  (*changes)changes52,2079
  int  (*close)close53,2108
  int  (*collation_needed)collation_needed54,2135
  int  (*collation_needed16)collation_needed1655,2228
  const void * (*column_blob)column_blob56,2323
  int  (*column_bytes)column_bytes57,2378
  int  (*column_bytes16)column_bytes1658,2426
  int  (*column_count)column_count59,2476
  const char * (*column_database_name)column_database_name60,2520
  const void * (*column_database_name16)column_database_name1661,2579
  const char * (*column_decltype)column_decltype62,2640
  const void * (*column_decltype16)column_decltype1663,2696
  double  (*column_double)column_double64,2752
  int  (*column_int)column_int65,2804
  sqlite_int64  (*column_int64)column_int6466,2850
  const char * (*column_name)column_name67,2907
  const void * (*column_name16)column_name1668,2957
  const char * (*column_origin_name)column_origin_name69,3009
  const void * (*column_origin_name16)column_origin_name1670,3066
  const char * (*column_table_name)column_table_name71,3125
  const void * (*column_table_name16)column_table_name1672,3181
  const unsigned char * (*column_text)column_text73,3239
  const void * (*column_text16)column_text1674,3303
  int  (*column_type)column_type75,3360
  sqlite3_value* (*column_value)column_value76,3407
  void * (*commit_hook)commit_hook77,3465
  int  (*complete)complete78,3520
  int  (*complete16)complete1679,3556
  int  (*create_collation)create_collation80,3594
  int  (*create_collation16)create_collation1681,3700
  int  (*create_function)create_function82,3808
  int  (*create_function16)create_function1683,4008
  int (*create_module)create_module84,4210
  int  (*data_count)data_count85,4284
  sqlite3 * (*db_handle)db_handle86,4326
  int (*declare_vtab)declare_vtab87,4367
  int  (*enable_shared_cache)enable_shared_cache88,4412
  int  (*errcode)errcode89,4448
  const char * (*errmsg)errmsg90,4479
  const void * (*errmsg16)errmsg1691,4515
  int  (*exec)exec92,4553
  int  (*expired)expired93,4621
  int  (*finalize)finalize94,4655
  void  (*free)free95,4695
  void  (*free_table)free_table96,4719
  int  (*get_autocommit)get_autocommit97,4756
  void * (*get_auxdata)get_auxdata98,4792
  int  (*get_table)get_table99,4839
  int  (*global_recover)global_recover100,4907
  void  (*interruptx)interruptx101,4939
  sqlite_int64  (*last_insert_rowid)last_insert_rowid102,4972
  const char * (*libversion)libversion103,5020
  int  (*libversion_number)libversion_number104,5056
  void *(*malloc)malloc105,5091
  char * (*mprintf)mprintf106,5115
  int  (*open)open107,5153
  int  (*open16)open16108,5192
  int  (*prepare)prepare109,5233
  int  (*prepare16)prepare16110,5306
  void * (*profile)profile111,5381
  void  (*progress_handler)progress_handler112,5459
  void *(*realloc)realloc113,5522
  int  (*reset)reset114,5553
  void  (*result_blob)result_blob115,5590
  void  (*result_double)result_double116,5663
  void  (*result_error)result_error117,5714
  void  (*result_error16)result_error16118,5773
  void  (*result_int)result_int119,5834
  void  (*result_int64)result_int64120,5879
  void  (*result_null)result_null121,5935
  void  (*result_text)result_text122,5977
  void  (*result_text16)result_text16123,6050
  void  (*result_text16be)result_text16be124,6125
  void  (*result_text16le)result_text16le125,6202
  void  (*result_value)result_value126,6279
  void * (*rollback_hook)rollback_hook127,6337
  int  (*set_authorizer)set_authorizer128,6395
  void  (*set_auxdata)set_auxdata129,6503
  char * (*snprintf)snprintf130,6571
  int  (*step)step131,6620
  int  (*table_column_metadata)table_column_metadata132,6651
  void  (*thread_cleanup)thread_cleanup133,6771
  int  (*total_changes)total_changes134,6804
  void * (*trace)trace135,6839
  int  (*transfer_bindings)transfer_bindings136,6907
  void * (*update_hook)update_hook137,6965
  void * (*user_data)user_data138,7063
  const void * (*value_blob)value_blob139,7104
  int  (*value_bytes)value_bytes140,7150
  int  (*value_bytes16)value_bytes16141,7189
  double  (*value_double)value_double142,7230
  int  (*value_int)value_int143,7273
  sqlite_int64  (*value_int64)value_int64144,7310
  int  (*value_numeric_type)value_numeric_type145,7358
  const unsigned char * (*value_text)value_text146,7404
  const void * (*value_text16)value_text16147,7459
  const void * (*value_text16be)value_text16be148,7507
  const void * (*value_text16le)value_text16le149,7557
  int  (*value_type)value_type150,7607
  char *(*vmprintf)vmprintf151,7645
  int (*overload_function)overload_function153,7705
  int (*prepare_v2)prepare_v2155,7800
  int (*prepare16_v2)prepare16_v2156,7875
  int (*clear_bindings)clear_bindings157,7952
  int (*create_module_v2)create_module_v2159,8015
  int (*bind_zeroblob)bind_zeroblob161,8140
  int (*blob_bytes)blob_bytes162,8187
  int (*blob_close)blob_close163,8223
  int (*blob_open)blob_open164,8259
  int (*blob_read)blob_read165,8358
  int (*blob_write)blob_write166,8407
  int (*create_collation_v2)create_collation_v2167,8463
  int (*file_control)file_control168,8586
  sqlite3_int64 (*memory_highwater)memory_highwater169,8641
  sqlite3_int64 (*memory_used)memory_used170,8683
  sqlite3_mutex *(*mutex_alloc)mutex_alloc171,8721
  void (*mutex_enter)mutex_enter172,8759
  void (*mutex_free)mutex_free173,8798
  void (*mutex_leave)mutex_leave174,8836
  int (*mutex_try)mutex_try175,8875
  int (*open_v2)open_v2176,8911
  int (*release_memory)release_memory177,8968
  void (*result_error_nomem)result_error_nomem178,8998
  void (*result_error_toobig)result_error_toobig179,9046
  int (*sleep)sleep180,9095
  void (*soft_heap_limit)soft_heap_limit181,9116
  sqlite3_vfs *(*vfs_find)vfs_find182,9148
  int (*vfs_register)vfs_register183,9189
  int (*vfs_unregister)vfs_unregister184,9230
  int (*xthreadsafe)xthreadsafe185,9269
  void (*result_zeroblob)result_zeroblob186,9297
  void (*result_error_code)result_error_code187,9346
  int (*test_control)test_control188,9397
  void (*randomness)randomness189,9430
  sqlite3 *(*context_db_handle)context_db_handle190,9463
  int (*extended_result_codes)extended_result_codes191,9514
  int (*limit)limit192,9560
  sqlite3_stmt *(*next_stmt)next_stmt193,9594
  const char *(*sql)sql194,9648
  int (*status)status195,9685
#define sqlite3_aggregate_context 210,10224
#define sqlite3_aggregate_count 212,10325
#define sqlite3_bind_blob 214,10400
#define sqlite3_bind_double 215,10462
#define sqlite3_bind_int 216,10526
#define sqlite3_bind_int64 217,10587
#define sqlite3_bind_null 218,10650
#define sqlite3_bind_parameter_count 219,10712
#define sqlite3_bind_parameter_index 220,10785
#define sqlite3_bind_parameter_name 221,10858
#define sqlite3_bind_text 222,10930
#define sqlite3_bind_text16 223,10992
#define sqlite3_bind_value 224,11056
#define sqlite3_busy_handler 225,11119
#define sqlite3_busy_timeout 226,11184
#define sqlite3_changes 227,11249
#define sqlite3_close 228,11309
#define sqlite3_collation_needed 229,11367
#define sqlite3_collation_needed16 230,11436
#define sqlite3_column_blob 231,11507
#define sqlite3_column_bytes 232,11571
#define sqlite3_column_bytes16 233,11636
#define sqlite3_column_count 234,11703
#define sqlite3_column_database_name 235,11768
#define sqlite3_column_database_name16 236,11841
#define sqlite3_column_decltype 237,11916
#define sqlite3_column_decltype16 238,11984
#define sqlite3_column_double 239,12054
#define sqlite3_column_int 240,12120
#define sqlite3_column_int64 241,12183
#define sqlite3_column_name 242,12248
#define sqlite3_column_name16 243,12312
#define sqlite3_column_origin_name 244,12378
#define sqlite3_column_origin_name16 245,12449
#define sqlite3_column_table_name 246,12522
#define sqlite3_column_table_name16 247,12592
#define sqlite3_column_text 248,12664
#define sqlite3_column_text16 249,12728
#define sqlite3_column_type 250,12794
#define sqlite3_column_value 251,12858
#define sqlite3_commit_hook 252,12923
#define sqlite3_complete 253,12987
#define sqlite3_complete16 254,13048
#define sqlite3_create_collation 255,13111
#define sqlite3_create_collation16 256,13180
#define sqlite3_create_function 257,13251
#define sqlite3_create_function16 258,13319
#define sqlite3_create_module 259,13389
#define sqlite3_create_module_v2 260,13455
#define sqlite3_data_count 261,13524
#define sqlite3_db_handle 262,13587
#define sqlite3_declare_vtab 263,13649
#define sqlite3_enable_shared_cache 264,13714
#define sqlite3_errcode 265,13786
#define sqlite3_errmsg 266,13846
#define sqlite3_errmsg16 267,13905
#define sqlite3_exec 268,13966
#define sqlite3_expired 270,14054
#define sqlite3_finalize 272,14121
#define sqlite3_free 273,14182
#define sqlite3_free_table 274,14239
#define sqlite3_get_autocommit 275,14302
#define sqlite3_get_auxdata 276,14369
#define sqlite3_get_table 277,14433
#define sqlite3_global_recover 279,14526
#define sqlite3_interrupt 281,14600
#define sqlite3_last_insert_rowid 282,14663
#define sqlite3_libversion 283,14733
#define sqlite3_libversion_number 284,14796
#define sqlite3_malloc 285,14866
#define sqlite3_mprintf 286,14925
#define sqlite3_open 287,14985
#define sqlite3_open16 288,15042
#define sqlite3_prepare 289,15101
#define sqlite3_prepare16 290,15161
#define sqlite3_prepare_v2 291,15223
#define sqlite3_prepare16_v2 292,15286
#define sqlite3_profile 293,15351
#define sqlite3_progress_handler 294,15411
#define sqlite3_realloc 295,15480
#define sqlite3_reset 296,15540
#define sqlite3_result_blob 297,15598
#define sqlite3_result_double 298,15662
#define sqlite3_result_error 299,15728
#define sqlite3_result_error16 300,15793
#define sqlite3_result_int 301,15860
#define sqlite3_result_int64 302,15923
#define sqlite3_result_null 303,15988
#define sqlite3_result_text 304,16052
#define sqlite3_result_text16 305,16116
#define sqlite3_result_text16be 306,16182
#define sqlite3_result_text16le 307,16250
#define sqlite3_result_value 308,16318
#define sqlite3_rollback_hook 309,16383
#define sqlite3_set_authorizer 310,16449
#define sqlite3_set_auxdata 311,16516
#define sqlite3_snprintf 312,16580
#define sqlite3_step 313,16641
#define sqlite3_table_column_metadata 314,16698
#define sqlite3_thread_cleanup 315,16772
#define sqlite3_total_changes 316,16839
#define sqlite3_trace 317,16905
#define sqlite3_transfer_bindings 319,16994
#define sqlite3_update_hook 321,17071
#define sqlite3_user_data 322,17135
#define sqlite3_value_blob 323,17197
#define sqlite3_value_bytes 324,17260
#define sqlite3_value_bytes16 325,17324
#define sqlite3_value_double 326,17390
#define sqlite3_value_int 327,17455
#define sqlite3_value_int64 328,17517
#define sqlite3_value_numeric_type 329,17581
#define sqlite3_value_text 330,17652
#define sqlite3_value_text16 331,17715
#define sqlite3_value_text16be 332,17780
#define sqlite3_value_text16le 333,17847
#define sqlite3_value_type 334,17914
#define sqlite3_vmprintf 335,17977
#define sqlite3_overload_function 336,18038
#define sqlite3_prepare_v2 337,18108
#define sqlite3_prepare16_v2 338,18171
#define sqlite3_clear_bindings 339,18236
#define sqlite3_bind_zeroblob 340,18303
#define sqlite3_blob_bytes 341,18369
#define sqlite3_blob_close 342,18432
#define sqlite3_blob_open 343,18495
#define sqlite3_blob_read 344,18557
#define sqlite3_blob_write 345,18619
#define sqlite3_create_collation_v2 346,18682
#define sqlite3_file_control 347,18754
#define sqlite3_memory_highwater 348,18819
#define sqlite3_memory_used 349,18888
#define sqlite3_mutex_alloc 350,18952
#define sqlite3_mutex_enter 351,19016
#define sqlite3_mutex_free 352,19080
#define sqlite3_mutex_leave 353,19143
#define sqlite3_mutex_try 354,19207
#define sqlite3_open_v2 355,19269
#define sqlite3_release_memory 356,19329
#define sqlite3_result_error_nomem 357,19396
#define sqlite3_result_error_toobig 358,19467
#define sqlite3_sleep 359,19539
#define sqlite3_soft_heap_limit 360,19597
#define sqlite3_vfs_find 361,19665
#define sqlite3_vfs_register 362,19726
#define sqlite3_vfs_unregister 363,19791
#define sqlite3_threadsafe 364,19858
#define sqlite3_result_zeroblob 365,19922
#define sqlite3_result_error_code 366,19990
#define sqlite3_test_control 367,20060
#define sqlite3_randomness 368,20125
#define sqlite3_context_db_handle 369,20188
#define sqlite3_extended_result_codes 370,20258
#define sqlite3_limit 371,20332
#define sqlite3_next_stmt 372,20390
#define sqlite3_sql 373,20452
#define sqlite3_status 374,20508
#define SQLITE_EXTENSION_INIT1 377,20593
#define SQLITE_EXTENSION_INIT2(378,20673

/Users/seth/src/r-dbi-git/SQLite/RSQLite/src/sqlite-all.c,0
