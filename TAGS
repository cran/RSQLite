
/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/R/dbObjectId.R,69
sdbObjectId35,1596
sshow,dbObjectId37,1667
"isIdCurrent47,1995

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/R/S4R.R,14
uusingR6,44

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/R/SQLite.R,2045
SSQLITE_RWC25,900
SSQLITE_RW26,917
SSQLITE_RO27,933
..SQLitePkgName29,950
..SQLitePkgRCS30,978
..SQLite.NA.string31,1002
sdbSendPreparedQuery41,1338
sdbGetPreparedQuery46,1506
sdbBeginTransaction50,1643
sSQLiteObject64,1911
sSQLiteDriver65,1990
"SQLite67,2061
sdbUnloadDriver,SQLiteDriver74,2255
sdbGetInfo,SQLiteDriver78,2391
sdbListConnections,SQLiteDriver82,2522
ssummary,SQLiteDriver89,2737
sSQLiteConnection97,2883
sdbConnect,SQLiteDriver102,3064
sdbConnect,character106,3206
sdbConnect,SQLiteConnection113,3370
sdbDisconnect,SQLiteConnection120,3620
sdbGetInfo,SQLiteConnection124,3764
sdbGetException,SQLiteConnection128,3903
sdbSendQuery,SQLiteConnection,character134,4137
sdbSendPreparedQuery,SQLiteConnection,character,data.frame141,4375
sdbGetQuery,SQLiteConnection,character149,4689
sdbGetPreparedQuery,SQLiteConnection,character,data.frame155,4890
ssummary,SQLiteConnection163,5198
sdbCallProc,SQLiteConnection167,5318
sdbCommit,SQLiteConnection171,5422
sdbRollback,SQLiteConnection175,5546
sdbBeginTransaction,SQLiteConnection184,5788
sdbExistsTable,SQLiteConnection,character192,5951
sdbReadTable,SQLiteConnection,character200,6218
sdbWriteTable,SQLiteConnection,character,data.frame205,6423
sdbWriteTable,SQLiteConnection,character,character215,6811
sdbRemoveTable,SQLiteConnection,character222,7073
sdbListResults,SQLiteConnection230,7343
sSQLiteResult242,7569
sfetch,SQLiteResult247,7746
sdbClearResult,SQLiteResult251,7884
sdbGetInfo,SQLiteResult255,8019
sdbGetStatement,SQLiteResult259,8150
sdbColumnInfo,SQLiteResult263,8293
sdbGetRowsAffected,SQLiteResult270,8500
sdbGetRowCount,SQLiteResult274,8647
sdbHasCompleted,SQLiteResult278,8786
sdbListTables,SQLiteConnection288,8996
sdbListFields,SQLiteConnection,character301,9365
ssummary,SQLiteResult307,9573
sdbDataType,SQLiteObject315,9705
smake.db.names,SQLiteObject,character321,9845
sSQLKeywords,SQLiteObject329,10117
sisSQLKeyword,SQLiteObject,character334,10242

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/R/SQLiteSupport.R,745
"sqliteInitDriver21,827
"sqliteCloseDriver33,1225
"sqliteDescribeDriver39,1340
"sqliteDriverInfo68,2219
"sqliteNewConnection88,2837
"sqliteDescribeConnection137,4604
"sqliteCloseConnection162,5266
"sqliteConnectionInfo172,5483
"sqliteQuickColumn194,6057
ssqliteTransactionStatement201,6231
"sqliteExecStatement221,6810
"sqliteQuickSQL250,7765
"sqliteFetch267,8165
"sqliteFetchOneColumn296,9267
"sqliteResultInfo309,9604
"sqliteDescribeResult332,10324
"sqliteCloseResult355,10917
"sqliteTableFields365,11125
"sqliteReadTable384,11560
"dbBuildTableDefinition420,12922
"sqliteImportFile445,13921
ssqliteWriteTable530,16322
"safe.write639,19716
"sqliteDataType670,20515
ssqliteCopyDatabase688,20970

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/R/zzz.R,29
..onUnload1,0
..test5,81

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/src/param_binding.c,212
init_bindParams(8,104
static int first_not_used(21,392
void add_data_to_param_binding(33,627
static int find_by_name(64,1521
RS_SQLite_createParameterBinding(79,1938
RS_SQLite_freeParameterBinding(161,4539

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/src/param_binding.h,226
#define PARAM_BINDING_H_2,25
typedef struct st_sqlite_bindparams 7,96
    int count;8,134
    int row_count;9,149
    int rows_used;10,168
    int row_complete;11,187
    SEXP data;12,209
} RS_SQLite_bindParams;13,224

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/src/Rhelpers.h,1365
#define RHELPERS_H6,67
#  define singl 20,317
#  define Sint 21,340
#  define charPtr 22,360
#  define C_S_CPY(23,385
#  define COPY(29,603
#  define COPY_ALL(30,652
#  define EVAL_IN_FRAME(31,702
#  define GET_FROM_FRAME(32,753
#  define ASSIGN_IN_FRAME(33,811
#  define Stype 38,925
#  define LOGICAL_TYPE	39,959
#  define INTEGER_TYPE	40,990
#  define NUMERIC_TYPE	41,1021
#  define SINGLE_TYPE 42,1053
#  define REAL_TYPE 43,1086
#  define CHARACTER_TYPE 44,1119
#  define STRING_TYPE 45,1151
#  define COMPLEX_TYPE	46,1183
#  define LIST_TYPE	47,1215
#  define S_NULL_ENTRY 49,1244
#define LGL_EL(68,1921
#define INT_EL(69,1967
#define SGL_EL(70,2013
#define FLT_EL(71,2058
#define NUM_EL(72,2094
#define DBL_EL(73,2140
#define RAW_EL(74,2176
#  define LST_EL(76,2275
#  define CHR_EL(77,2317
#  define SET_CHR_EL(78,2365
#define LST_CHR_EL(82,2503
#define LST_LGL_EL(83,2558
#define LST_INT_EL(84,2613
#define LST_SGL_EL(85,2668
#define LST_FLT_EL(86,2723
#define LST_NUM_EL(87,2773
#define LST_DBL_EL(88,2828
#define LST_RAW_EL(89,2878
#define LST_LST_EL(90,2933
#  define SET_LST_CHR_EL(94,3110
#  define SET_LST_CHR_EL(96,3191
#  define NA_SET(103,3396
#  define NA_CHR_SET(104,3439
#  define IS_NA(105,3491
#  define SET_ROWNAMES(110,3597
#  define GET_CLASS_NAME(111,3662
#  define SET_CLASS_NAME(112,3705

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/src/RS-DBI.c,1534
static RS_DBI_manager *dbManager dbManager32,1229
static int HANDLE_LENGTH(34,1271
RS_DBI_allocManager(42,1446
RS_DBI_freeManager(114,3934
RS_DBI_allocConnection(143,4645
RS_DBI_freeConnection(198,6377
RS_DBI_allocResultSet(243,7762
void RS_DBI_freeResultSet0(288,9287
RS_DBI_freeResultSet(318,10304
RS_DBI_allocFields(325,10479
RS_DBI_freeFields(350,11242
RS_DBI_makeDataFrame(370,11858
RS_DBI_allocOutput(394,12449
RS_DBI_validHandle(450,13829
RS_DBI_setException(478,14585
RS_DBI_errorMessage(507,15445
void DBI_MSG(528,16025
RS_DBI_copyString(549,16555
RS_DBI_nCopyString(563,16914
RS_DBI_copyfields(596,17646
RS_DBI_createNamedList(628,18693
RS_DBI_SclassNames(666,19643
RS_DBI_asMgrHandle(698,20393
DBI_newConnectionHandle(711,20708
static void _finalize_con_handle(721,20978
RS_DBI_asConHandle(730,21140
DBI_newResultHandle(746,21574
RS_DBI_asResHandle(753,21747
RS_DBI_getManager(776,22422
RS_DBI_getConnection(791,22779
RS_DBI_getResultSet(797,22902
RS_DBI_newEntry(815,23508
RS_DBI_lookup(828,23730
RS_DBI_listEntries(847,24103
RS_DBI_freeEntry(859,24289
is_validHandle(867,24434
RS_DBI_managerInfo(913,26089
RS_DBI_connectionInfo(949,27220
RS_DBI_resultSetInfo(984,28423
RS_DBI_getFieldDescriptions(1013,29317
RS_DBI_getTypeName(1047,30421
#define RS_DBI_MAX_IDENTIFIER_LENGTH 1077,31691
RS_DBI_makeSQLNames(1079,31761
void RS_na_set(1126,33117
int RS_is_na(1151,33512
const struct data_types RS_dataTypeTable[RS_dataTypeTable1176,33990
SEXP DBI_handle_to_string(1202,34773

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/src/RS-DBI.h,2576
#define _RS_DBI_H 2,18
# define pid_t 37,1196
# define getpid 41,1305
# define pid_t 42,1329
typedef enum enum_dbi_exception 58,1818
  RS_DBI_MESSAGE,59,1852
  RS_DBI_WARNING,60,1870
  RS_DBI_ERROR,61,1888
  RS_DBI_TERMINATE62,1904
} DBI_EXCEPTION;63,1923
#define Mgr_Handle 69,2071
#define Con_Handle 70,2095
#define Res_Handle 71,2119
#define Db_Handle 72,2143
typedef enum enum_handle_type 76,2323
  MGR_HANDLE_TYPE 77,2355
  CON_HANDLE_TYPE 78,2405
  RES_HANDLE_TYPE 79,2458
} HANDLE_TYPE;80,2507
static int MGR_ID(82,2524
static int CON_ID(89,2682
#define RES_ID(96,2840
typedef struct st_sdbi_fields 108,3441
  int num_fields;109,3473
  char  **name;name110,3491
  Sint  *type;type111,3538
  Sint  *length;length112,3588
  Sint  *precision;precision113,3640
  Sint  *scale;scale114,3707
  Sint  *nullOk;nullOk115,3776
  Sint  *isVarLength;isVarLength116,3842
  Stype *Sclass;Sclass117,3903
} RS_DBI_fields;119,4027
typedef struct st_sdbi_exception 121,4045
  DBI_EXCEPTION  exceptionType;122,4080
  int  errorNum;123,4156
  char *errorMsg;errorMsg124,4233
} RS_DBI_exception;125,4285
typedef struct st_sdbi_resultset 131,4486
  void  *drvResultSet;drvResultSet132,4521
  void  *drvData;drvData133,4592
  Sint  managerId;134,4657
  Sint  connectionId;135,4715
  Sint  resultSetId;136,4777
  Sint  isSelect;137,4800
  char  *statement;statement138,4859
  Sint  rowsAffected;139,4904
  Sint  rowCount;140,4965
  Sint  completed;141,5030
  RS_DBI_fields *fields;fields142,5087
} RS_DBI_resultSet;143,5112
typedef struct st_sdbi_connection 152,5456
  void  *conParams;conParams153,5492
  void  *drvConnection;drvConnection154,5569
  void  *drvData;drvData155,5644
  RS_DBI_resultSet  **resultSets;resultSets156,5716
  Sint   *resultSetIds;resultSetIds157,5786
  Sint   length;158,5810
  Sint   num_res;159,5886
  Sint   counter;160,5952
  Sint   managerId;161,6019
  Sint   connectionId;162,6039
  RS_DBI_exception *exception;exception163,6063
} RS_DBI_connection;164,6094
typedef struct st_sdbi_manager 167,6132
  char *drvName;drvName168,6165
  void *drvData;drvData169,6239
  RS_DBI_connection **connections;connections170,6317
  Sint *connectionIds;connectionIds171,6381
  Sint length;172,6446
  Sint num_con;173,6522
  Sint counter;174,6590
  Sint fetch_default_rec;175,6665
  Sint managerId;176,6740
  RS_DBI_exception *exception;exception177,6804
} RS_DBI_manager;178,6839
struct data_types 263,10497
    char *typeName;typeName264,10517
    Sint typeId;265,10537

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/src/RS-SQLite.c,1254
char *compiledVarsion compiledVarsion25,925
#define RS_NA_STRING 33,1258
RS_SQLite_init(59,2249
RS_SQLite_closeManager(109,3938
RS_SQLite_cloneConnection(137,4632
RS_SQLite_allocConParams(164,5561
RS_SQLite_freeConParams(185,6233
RS_SQLite_setException(197,6601
RS_SQLite_freeException(222,7296
RS_SQLite_newConnection(233,7510
RS_SQLite_closeConnection(305,10189
int SQLite_decltype_to_type(355,12006
int RS_SQLite_get_row_count(397,13584
SEXP RS_SQLite_quick_column(425,14402
static void RSQLite_freeResultSet0(507,17131
exec_error(525,17733
select_prepared_query(549,18447
bind_params_to_stmt(571,19207
non_select_prepared_query(614,20609
Res_Handle RS_SQLite_exec(660,22282
RS_SQLite_createDataMappings(748,25405
static void fill_one_row(826,28180
static int do_select_step(862,29377
SEXP RS_SQLite_fetch(912,31321
RS_SQLite_mget(1007,34598
RS_SQLite_getException(1182,40886
void RSQLite_closeResultSet0(1204,41564
RS_SQLite_closeResultSet(1213,41854
RS_SQLite_managerInfo(1221,42057
RSQLite_connectionInfo(1281,44155
RS_SQLite_resultSetInfo(1321,45458
RS_SQLite_typeNames(1352,46496
RS_SQLite_importFile(1372,46943
RS_sqlite_import(1439,48599
RS_sqlite_getline(1576,53258
SEXP RS_SQLite_copy_database(1627,54579

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/src/RS-SQLite.h,1128
#define _RS_SQLite_H 2,21
#define RSQLITE_RWC 37,1152
#define RSQLITE_RW 38,1174
#define RSQLITE_RO 39,1196
typedef struct st_sdbi_conParams 45,1414
  char *dbname;dbname46,1449
  int  loadable_extensions;47,1465
  int  flags;48,1493
  char *vfs;vfs49,1507
} RS_SQLite_conParams;50,1520
typedef struct st_sqlite_err 52,1544
   int  errorNum;53,1575
   char *errorMsg;errorMsg54,1593
} RS_SQLite_exception;55,1612
#define RSQLITE_MSG(58,1637
enum SQL92_field_types 139,5091
     SQL92_TYPE_NULL,140,5116
     SQL92_TYPE_BIT,141,5138
     SQL92_TYPE_BIT_VAR,142,5159
     SQL92_TYPE_CHAR,143,5184
     SQL92_TYPE_CHAR_VAR,144,5206
     SQL92_TYPE_NCHAR,145,5232
     SQL92_TYPE_NCHAR_VAR,146,5255
     SQL92_TYPE_SMALLINT,147,5282
     SQL92_TYPE_INTEGER,148,5308
     SQL92_TYPE_DECIMAL,149,5333
     SQL92_TYPE_FLOAT,150,5358
     SQL92_TYPE_REAL,151,5381
     SQL92_TYPE_DOUBLE,152,5403
     SQL92_TYPE_TIMESTAMP,153,5427
     SQL92_TYPE_DATE,154,5454
     SQL92_TYPE_TIME,155,5476
     SQL92_TYPE_DATETIME156,5498
const struct data_types RS_SQLite_fieldTypes[RS_SQLite_fieldTypes159,5527

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/src/sqlite/sqlite3.c,281509
#define SQLITE_CORE 20,1243
#define SQLITE_AMALGAMATION 21,1265
# define SQLITE_PRIVATE 23,1318
# define SQLITE_API26,1375
#define _SQLITEINT_H_44,1931
# define _LARGE_FILE 66,2922
#   define _FILE_OFFSET_BITS 68,2978
# define _LARGEFILE_SOURCE 70,3018
# define SQLITE_MAX_LENGTH 106,4069
# define SQLITE_MAX_COLUMN 127,4835
# define SQLITE_MAX_SQL_LENGTH 138,5131
# define SQLITE_MAX_EXPR_DEPTH 152,5571
# define SQLITE_MAX_COMPOUND_SELECT 164,6034
# define SQLITE_MAX_VDBE_OP 172,6194
# define SQLITE_MAX_FUNCTION_ARG 179,6329
# define SQLITE_DEFAULT_CACHE_SIZE 187,6550
# define SQLITE_DEFAULT_TEMP_CACHE_SIZE 190,6637
# define SQLITE_MAX_ATTACHED 199,6913
# define SQLITE_MAX_VARIABLE_NUMBER 207,7064
# define SQLITE_MAX_PAGE_SIZE 222,7756
# define SQLITE_DEFAULT_PAGE_SIZE 230,7880
# undef SQLITE_DEFAULT_PAGE_SIZE233,7976
# define SQLITE_DEFAULT_PAGE_SIZE 234,8009
# define SQLITE_MAX_DEFAULT_PAGE_SIZE 245,8435
# undef SQLITE_MAX_DEFAULT_PAGE_SIZE248,8539
# define SQLITE_MAX_DEFAULT_PAGE_SIZE 249,8576
# define SQLITE_MAX_PAGE_COUNT 261,8897
# define SQLITE_MAX_LIKE_PATTERN_LENGTH 269,9067
# define SQLITE_MAX_TRIGGER_DEPTH 280,9373
# define _GNU_SOURCE297,9988
#define SQLITE_INDEX_SAMPLES 315,10343
# define SQLITE_INT_TO_PTR(334,11200
# define SQLITE_PTR_TO_INT(335,11262
# define SQLITE_INT_TO_PTR(337,11395
# define SQLITE_PTR_TO_INT(338,11450
# define SQLITE_INT_TO_PTR(340,11585
# define SQLITE_PTR_TO_INT(341,11639
# define SQLITE_INT_TO_PTR(343,11770
# define SQLITE_PTR_TO_INT(344,11814
# define SQLITE_THREADSAFE 354,12084
# define SQLITE_THREADSAFE 356,12128
# define SQLITE_DEFAULT_MEMSTATUS 367,12481
# define SQLITE_SYSTEM_MALLOC 388,13254
# define SQLITE_MALLOC_SOFT_LIMIT 396,13468
#  define _XOPEN_SOURCE 413,14139
# define NDEBUG 431,14723
# define testcase(450,15520
# define testcase(452,15586
# define TESTONLY(461,15846
# define TESTONLY(463,15876
# define VVA_ONLY(475,16356
# define VVA_ONLY(477,16386
# define ALWAYS(496,17133
# define NEVER(497,17161
# define ALWAYS(499,17212
# define NEVER(500,17258
# define ALWAYS(502,17310
# define NEVER(503,17338
# define likely(513,17646
# define unlikely(514,17692
# define likely(516,17744
# define unlikely(517,17772
#define _SQLITE3_H_555,19479
# define SQLITE_EXTERN 570,19715
# define SQLITE_API574,19772
#define SQLITE_DEPRECATED591,20438
#define SQLITE_EXPERIMENTAL592,20464
# undef SQLITE_VERSION598,20592
# undef SQLITE_VERSION_NUMBER601,20651
#define SQLITE_VERSION 631,22050
#define SQLITE_VERSION_NUMBER 632,22091
#define SQLITE_SOURCE_ID 633,22129
SQLITE_API const char sqlite3_version[sqlite3_version665,23708
typedef struct sqlite3 sqlite3;748,27562
  typedef SQLITE_INT64_TYPE sqlite_int64;767,28285
  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;768,28327
  typedef __int64 sqlite_int64;770,28428
  typedef unsigned __int64 sqlite_uint64;771,28460
  typedef long long int sqlite_int64;773,28508
  typedef unsigned long long int sqlite_uint64;774,28546
typedef sqlite_int64 sqlite3_int64;776,28601
typedef sqlite_uint64 sqlite3_uint64;777,28637
# define double 784,28825
typedef int (*sqlite3_callback)sqlite3_callback818,30123
#define SQLITE_OK 901,34117
#define SQLITE_ERROR 903,34204
#define SQLITE_INTERNAL 904,34272
#define SQLITE_PERM 905,34341
#define SQLITE_ABORT 906,34404
#define SQLITE_BUSY 907,34478
#define SQLITE_LOCKED 908,34544
#define SQLITE_NOMEM 909,34616
#define SQLITE_READONLY 910,34672
#define SQLITE_INTERRUPT 911,34747
#define SQLITE_IOERR 912,34828
#define SQLITE_CORRUPT 913,34903
#define SQLITE_NOTFOUND 914,34978
#define SQLITE_FULL 915,35052
#define SQLITE_CANTOPEN 916,35132
#define SQLITE_PROTOCOL 917,35203
#define SQLITE_EMPTY 918,35280
#define SQLITE_SCHEMA 919,35336
#define SQLITE_TOOBIG 920,35402
#define SQLITE_CONSTRAINT 921,35474
#define SQLITE_MISMATCH 922,35546
#define SQLITE_MISUSE 923,35603
#define SQLITE_NOLFS 924,35666
#define SQLITE_AUTH 925,35743
#define SQLITE_FORMAT 926,35802
#define SQLITE_RANGE 927,35872
#define SQLITE_NOTADB 928,35953
#define SQLITE_ROW 929,36031
#define SQLITE_DONE 930,36106
#define SQLITE_IOERR_READ 956,37338
#define SQLITE_IOERR_SHORT_READ 957,37401
#define SQLITE_IOERR_WRITE 958,37464
#define SQLITE_IOERR_FSYNC 959,37527
#define SQLITE_IOERR_DIR_FSYNC 960,37590
#define SQLITE_IOERR_TRUNCATE 961,37653
#define SQLITE_IOERR_FSTAT 962,37716
#define SQLITE_IOERR_UNLOCK 963,37779
#define SQLITE_IOERR_RDLOCK 964,37842
#define SQLITE_IOERR_DELETE 965,37905
#define SQLITE_IOERR_BLOCKED 966,37969
#define SQLITE_IOERR_NOMEM 967,38033
#define SQLITE_IOERR_ACCESS 968,38097
#define SQLITE_IOERR_CHECKRESERVEDLOCK 969,38161
#define SQLITE_IOERR_LOCK 970,38225
#define SQLITE_IOERR_CLOSE 971,38289
#define SQLITE_IOERR_DIR_CLOSE 972,38353
#define SQLITE_LOCKED_SHAREDCACHE 973,38417
#define SQLITE_OPEN_READONLY 983,38718
#define SQLITE_OPEN_READWRITE 984,38798
#define SQLITE_OPEN_CREATE 985,38878
#define SQLITE_OPEN_DELETEONCLOSE 986,38958
#define SQLITE_OPEN_EXCLUSIVE 987,39022
#define SQLITE_OPEN_AUTOPROXY 988,39086
#define SQLITE_OPEN_MAIN_DB 989,39150
#define SQLITE_OPEN_TEMP_DB 990,39214
#define SQLITE_OPEN_TRANSIENT_DB 991,39278
#define SQLITE_OPEN_MAIN_JOURNAL 992,39342
#define SQLITE_OPEN_TEMP_JOURNAL 993,39406
#define SQLITE_OPEN_SUBJOURNAL 994,39470
#define SQLITE_OPEN_MASTER_JOURNAL 995,39534
#define SQLITE_OPEN_NOMUTEX 996,39598
#define SQLITE_OPEN_FULLMUTEX 997,39678
#define SQLITE_OPEN_SHAREDCACHE 998,39758
#define SQLITE_OPEN_PRIVATECACHE 999,39838
#define SQLITE_IOCAP_ATOMIC 1021,40798
#define SQLITE_IOCAP_ATOMIC512 1022,40846
#define SQLITE_IOCAP_ATOMIC1K 1023,40894
#define SQLITE_IOCAP_ATOMIC2K 1024,40942
#define SQLITE_IOCAP_ATOMIC4K 1025,40990
#define SQLITE_IOCAP_ATOMIC8K 1026,41038
#define SQLITE_IOCAP_ATOMIC16K 1027,41086
#define SQLITE_IOCAP_ATOMIC32K 1028,41134
#define SQLITE_IOCAP_ATOMIC64K 1029,41182
#define SQLITE_IOCAP_SAFE_APPEND 1030,41230
#define SQLITE_IOCAP_SEQUENTIAL 1031,41278
#define SQLITE_LOCK_NONE 1040,41531
#define SQLITE_LOCK_SHARED 1041,41567
#define SQLITE_LOCK_RESERVED 1042,41603
#define SQLITE_LOCK_PENDING 1043,41639
#define SQLITE_LOCK_EXCLUSIVE 1044,41675
#define SQLITE_SYNC_NORMAL 1060,42307
#define SQLITE_SYNC_FULL 1061,42349
#define SQLITE_SYNC_DATAONLY 1062,42391
typedef struct sqlite3_file sqlite3_file;1075,42861
struct sqlite3_file 1076,42903
  const struct sqlite3_io_methods *pMethods;pMethods1077,42925
typedef struct sqlite3_io_methods sqlite3_io_methods;1167,47045
struct sqlite3_io_methods 1168,47099
  int iVersion;1169,47127
  int (*xClose)xClose1170,47143
  int (*xRead)xRead1171,47175
  int (*xWrite)xWrite1172,47244
  int (*xTruncate)xTruncate1173,47320
  int (*xSync)xSync1174,47375
  int (*xFileSize)xFileSize1175,47417
  int (*xLock)xLock1176,47474
  int (*xUnlock)xUnlock1177,47510
  int (*xCheckReservedLock)xCheckReservedLock1178,47548
  int (*xFileControl)xFileControl1179,47606
  int (*xSectorSize)xSectorSize1180,47664
  int (*xDeviceCharacteristics)xDeviceCharacteristics1181,47701
#define SQLITE_FCNTL_LOCKSTATE 1200,48460
#define SQLITE_GET_LOCKPROXYFILE 1201,48500
#define SQLITE_SET_LOCKPROXYFILE 1202,48540
#define SQLITE_LAST_ERRNO 1203,48580
typedef struct sqlite3_mutex sqlite3_mutex;1215,48966
typedef struct sqlite3_vfs sqlite3_vfs;1346,55195
struct sqlite3_vfs 1347,55235
  int iVersion;1348,55256
  int szOsFile;1349,55314
  int mxPathname;1350,55379
  sqlite3_vfs *pNext;pNext1351,55441
  const char *zName;zName1352,55494
  void *pAppData;pAppData1353,55560
  int (*xOpen)xOpen1354,55630
  int (*xDelete)xDelete1356,55736
  int (*xAccess)xAccess1357,55800
  int (*xFullPathname)xFullPathname1358,55876
  void *(*xDlOpen)xDlOpen1359,55955
  void (*xDlError)xDlError1360,56012
  void (*(*xDlSym)xDlSym1361,56072
  void (*xDlClose)xDlClose1362,56140
  int (*xRandomness)xRandomness1363,56181
  int (*xSleep)xSleep1364,56240
  int (*xCurrentTime)xCurrentTime1365,56289
  int (*xGetLastError)xGetLastError1366,56335
#define SQLITE_ACCESS_EXISTS 1384,57045
#define SQLITE_ACCESS_READWRITE 1385,57079
#define SQLITE_ACCESS_READ 1386,57113
typedef struct sqlite3_mem_methods sqlite3_mem_methods;1593,67728
struct sqlite3_mem_methods 1594,67784
  void *(*xMalloc)xMalloc1595,67813
  void (*xFree)xFree1596,67879
  void *(*xRealloc)xRealloc1597,67942
  int (*xSize)xSize1598,68002
  int (*xRoundup)xRoundup1599,68074
  int (*xInit)xInit1600,68154
  void (*xShutdown)xShutdown1601,68225
  void *pAppData;pAppData1602,68298
#define SQLITE_CONFIG_SINGLETHREAD 1795,78919
#define SQLITE_CONFIG_MULTITHREAD 1796,78968
#define SQLITE_CONFIG_SERIALIZED 1797,79017
#define SQLITE_CONFIG_MALLOC 1798,79066
#define SQLITE_CONFIG_GETMALLOC 1799,79132
#define SQLITE_CONFIG_SCRATCH 1800,79198
#define SQLITE_CONFIG_PAGECACHE 1801,79264
#define SQLITE_CONFIG_HEAP 1802,79330
#define SQLITE_CONFIG_MEMSTATUS 1803,79401
#define SQLITE_CONFIG_MUTEX 1804,79454
#define SQLITE_CONFIG_GETMUTEX 1805,79522
#define SQLITE_CONFIG_LOOKASIDE 1807,79657
#define SQLITE_CONFIG_PCACHE 1808,79710
#define SQLITE_CONFIG_GETPCACHE 1809,79779
#define SQLITE_CONFIG_LOG 1810,79848
#define SQLITE_DBCONFIG_LOOKASIDE 1845,81517
#define SQLITE_DENY 2531,114092
#define SQLITE_IGNORE 2532,114162
#define SQLITE_CREATE_INDEX 2554,115287
#define SQLITE_CREATE_TABLE 2555,115366
#define SQLITE_CREATE_TEMP_INDEX 2556,115445
#define SQLITE_CREATE_TEMP_TABLE 2557,115524
#define SQLITE_CREATE_TEMP_TRIGGER 2558,115603
#define SQLITE_CREATE_TEMP_VIEW 2559,115682
#define SQLITE_CREATE_TRIGGER 2560,115761
#define SQLITE_CREATE_VIEW 2561,115840
#define SQLITE_DELETE 2562,115919
#define SQLITE_DROP_INDEX 2563,115998
#define SQLITE_DROP_TABLE 2564,116077
#define SQLITE_DROP_TEMP_INDEX 2565,116156
#define SQLITE_DROP_TEMP_TABLE 2566,116235
#define SQLITE_DROP_TEMP_TRIGGER 2567,116314
#define SQLITE_DROP_TEMP_VIEW 2568,116393
#define SQLITE_DROP_TRIGGER 2569,116472
#define SQLITE_DROP_VIEW 2570,116551
#define SQLITE_INSERT 2571,116630
#define SQLITE_PRAGMA 2572,116709
#define SQLITE_READ 2573,116788
#define SQLITE_SELECT 2574,116867
#define SQLITE_TRANSACTION 2575,116946
#define SQLITE_UPDATE 2576,117025
#define SQLITE_ATTACH 2577,117104
#define SQLITE_DETACH 2578,117183
#define SQLITE_ALTER_TABLE 2579,117262
#define SQLITE_REINDEX 2580,117341
#define SQLITE_ANALYZE 2581,117420
#define SQLITE_CREATE_VTABLE 2582,117499
#define SQLITE_DROP_VTABLE 2583,117578
#define SQLITE_FUNCTION 2584,117657
#define SQLITE_SAVEPOINT 2585,117736
#define SQLITE_COPY 2586,117815
typedef struct sqlite3_stmt sqlite3_stmt;2799,128044
#define SQLITE_LIMIT_LENGTH 2886,131660
#define SQLITE_LIMIT_SQL_LENGTH 2887,131709
#define SQLITE_LIMIT_COLUMN 2888,131758
#define SQLITE_LIMIT_EXPR_DEPTH 2889,131807
#define SQLITE_LIMIT_COMPOUND_SELECT 2890,131856
#define SQLITE_LIMIT_VDBE_OP 2891,131905
#define SQLITE_LIMIT_FUNCTION_ARG 2892,131954
#define SQLITE_LIMIT_ATTACHED 2893,132003
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH 2894,132052
#define SQLITE_LIMIT_VARIABLE_NUMBER 2895,132101
#define SQLITE_LIMIT_TRIGGER_DEPTH 2896,132150
typedef struct Mem sqlite3_value;3053,139841
typedef struct sqlite3_context sqlite3_context;3067,140423
#define SQLITE_INTEGER 3444,157536
#define SQLITE_FLOAT 3445,157562
#define SQLITE_BLOB 3446,157588
#define SQLITE_NULL 3447,157614
# undef SQLITE_TEXT3449,157659
# define SQLITE_TEXT 3451,157685
#define SQLITE3_TEXT 3453,157719
#define SQLITE_UTF8 3771,173570
#define SQLITE_UTF16LE 3772,173602
#define SQLITE_UTF16BE 3773,173634
#define SQLITE_UTF16 3774,173666
#define SQLITE_ANY 3775,173729
#define SQLITE_UTF16_ALIGNED 3776,173799
typedef void (*sqlite3_destructor_type)sqlite3_destructor_type3981,183538
#define SQLITE_STATIC 3982,183586
#define SQLITE_TRANSIENT 3983,183642
SQLITE_API char *sqlite3_temp_directory;sqlite3_temp_directory4303,198362
typedef struct sqlite3_vtab sqlite3_vtab;4696,215671
typedef struct sqlite3_index_info sqlite3_index_info;4697,215713
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;4698,215767
typedef struct sqlite3_module sqlite3_module;4699,215823
struct sqlite3_module 4718,216593
  int iVersion;4719,216617
  int (*xCreate)xCreate4720,216633
  int (*xConnect)xConnect4723,216768
  int (*xBestIndex)xBestIndex4726,216904
  int (*xDisconnect)xDisconnect4727,216967
  int (*xDestroy)xDestroy4728,217010
  int (*xOpen)xOpen4729,217050
  int (*xClose)xClose4730,217119
  int (*xFilter)xFilter4731,217158
  int (*xNext)xNext4733,217278
  int (*xEof)xEof4734,217316
  int (*xColumn)xColumn4735,217353
  int (*xRowid)xRowid4736,217416
  int (*xUpdate)xUpdate4737,217478
  int (*xBegin)xBegin4738,217552
  int (*xSync)xSync4739,217590
  int (*xCommit)xCommit4740,217627
  int (*xRollback)xRollback4741,217666
  int (*xFindFunction)xFindFunction4742,217707
  int (*xRename)xRename4745,217896
struct sqlite3_index_info 4799,220341
  int nConstraint;4801,220384
  struct sqlite3_index_constraint 4802,220452
     int iColumn;4803,220488
     unsigned char op;4804,220564
     unsigned char usable;4805,220621
     int iTermOffset;4806,220692
  } *aConstraint;aConstraint4807,220772
  int nOrderBy;4808,220841
  struct sqlite3_index_orderby 4809,220915
     int iColumn;4810,220948
     unsigned char desc;4811,220999
  } *aOrderBy;aOrderBy4812,221067
  struct sqlite3_index_constraint_usage 4814,221138
    int argvIndex;4815,221180
    unsigned char omit;4816,221260
  } *aConstraintUsage;aConstraintUsage4817,221334
  int idxNum;4818,221357
  char *idxStr;idxStr4819,221426
  int needToFreeIdxStr;4820,221507
  int orderByConsumed;4821,221583
  double estimatedCost;4822,221652
#define SQLITE_INDEX_CONSTRAINT_EQ 4824,221725
#define SQLITE_INDEX_CONSTRAINT_GT 4825,221765
#define SQLITE_INDEX_CONSTRAINT_LE 4826,221805
#define SQLITE_INDEX_CONSTRAINT_LT 4827,221845
#define SQLITE_INDEX_CONSTRAINT_GE 4828,221886
#define SQLITE_INDEX_CONSTRAINT_MATCH 4829,221927
struct sqlite3_vtab 4888,224704
  const sqlite3_module *pModule;pModule4889,224726
  int nRef;4890,224800
  char *zErrMsg;zErrMsg4891,224855
struct sqlite3_vtab_cursor 4913,225809
  sqlite3_vtab *pVtab;pVtab4914,225838
typedef struct sqlite3_blob sqlite3_blob;4972,228245
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;5364,246169
struct sqlite3_mutex_methods 5365,246229
  int (*xMutexInit)xMutexInit5366,246260
  int (*xMutexEnd)xMutexEnd5367,246287
  sqlite3_mutex *(*xMutexAlloc)xMutexAlloc5368,246313
  void (*xMutexFree)xMutexFree5369,246351
  void (*xMutexEnter)xMutexEnter5370,246390
  int (*xMutexTry)xMutexTry5371,246430
  void (*xMutexLeave)xMutexLeave5372,246467
  int (*xMutexHeld)xMutexHeld5373,246507
  int (*xMutexNotheld)xMutexNotheld5374,246545
#define SQLITE_MUTEX_FAST 5421,248580
#define SQLITE_MUTEX_RECURSIVE 5422,248620
#define SQLITE_MUTEX_STATIC_MASTER 5423,248660
#define SQLITE_MUTEX_STATIC_MEM 5424,248700
#define SQLITE_MUTEX_STATIC_MEM2 5425,248764
#define SQLITE_MUTEX_STATIC_OPEN 5426,248820
#define SQLITE_MUTEX_STATIC_PRNG 5427,248886
#define SQLITE_MUTEX_STATIC_LRU 5428,248950
#define SQLITE_MUTEX_STATIC_LRU2 5429,249011
#define SQLITE_TESTCTRL_FIRST 5500,252108
#define SQLITE_TESTCTRL_PRNG_SAVE 5501,252159
#define SQLITE_TESTCTRL_PRNG_RESTORE 5502,252210
#define SQLITE_TESTCTRL_PRNG_RESET 5503,252261
#define SQLITE_TESTCTRL_BITVEC_TEST 5504,252312
#define SQLITE_TESTCTRL_FAULT_INSTALL 5505,252363
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS 5506,252414
#define SQLITE_TESTCTRL_PENDING_BYTE 5507,252465
#define SQLITE_TESTCTRL_ASSERT 5508,252516
#define SQLITE_TESTCTRL_ALWAYS 5509,252567
#define SQLITE_TESTCTRL_RESERVE 5510,252618
#define SQLITE_TESTCTRL_OPTIMIZATIONS 5511,252669
#define SQLITE_TESTCTRL_ISKEYWORD 5512,252720
#define SQLITE_TESTCTRL_LAST 5513,252771
#define SQLITE_STATUS_MEMORY_USED 5625,258173
#define SQLITE_STATUS_PAGECACHE_USED 5626,258218
#define SQLITE_STATUS_PAGECACHE_OVERFLOW 5627,258263
#define SQLITE_STATUS_SCRATCH_USED 5628,258308
#define SQLITE_STATUS_SCRATCH_OVERFLOW 5629,258353
#define SQLITE_STATUS_MALLOC_SIZE 5630,258398
#define SQLITE_STATUS_PARSER_STACK 5631,258443
#define SQLITE_STATUS_PAGECACHE_SIZE 5632,258488
#define SQLITE_STATUS_SCRATCH_SIZE 5633,258533
#define SQLITE_DBSTATUS_LOOKASIDE_USED 5674,260201
#define SQLITE_STMTSTATUS_FULLSCAN_STEP 5725,262223
#define SQLITE_STMTSTATUS_SORT 5726,262269
typedef struct sqlite3_pcache sqlite3_pcache;5740,262705
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;5870,269745
struct sqlite3_pcache_methods 5871,269807
  void *pArg;pArg5872,269839
  int (*xInit)xInit5873,269853
  void (*xShutdown)xShutdown5874,269876
  sqlite3_pcache *(*xCreate)xCreate5875,269904
  void (*xCachesize)xCachesize5876,269962
  int (*xPagecount)xPagecount5877,270017
  void *(*xFetch)xFetch5878,270055
  void (*xUnpin)xUnpin5879,270121
  void (*xRekey)xRekey5880,270176
  void (*xTruncate)xTruncate5881,270252
  void (*xDestroy)xDestroy5882,270307
typedef struct sqlite3_backup sqlite3_backup;5896,270699
# undef double6248,289077
#define _SQLITE_HASH_H_6276,289970
typedef struct Hash Hash;6279,290037
typedef struct HashElem HashElem;6280,290063
struct Hash 6303,291178
  unsigned int htsize;6304,291192
  unsigned int count;6305,291262
  HashElem *first;first6306,291328
  struct _ht 6307,291393
    int count;6308,291442
    HashElem *chain;chain6309,291512
  } *ht;ht6310,291587
struct HashElem 6319,291858
  HashElem *next,next6320,291876
  HashElem *next, *prev;prev6320,291876
  void *data;data6321,291953
  const char *pKey;pKey6322,292024
  const char *pKey; int nKey;6322,292024
#define sqliteHashFirst(6345,292697
#define sqliteHashNext(6346,292738
#define sqliteHashData(6347,292778
#define TK_SEMI 6362,293390
#define TK_EXPLAIN 6363,293435
#define TK_QUERY 6364,293480
#define TK_PLAN 6365,293525
#define TK_BEGIN 6366,293570
#define TK_TRANSACTION 6367,293615
#define TK_DEFERRED 6368,293660
#define TK_IMMEDIATE 6369,293705
#define TK_EXCLUSIVE 6370,293750
#define TK_COMMIT 6371,293795
#define TK_END 6372,293840
#define TK_ROLLBACK 6373,293885
#define TK_SAVEPOINT 6374,293930
#define TK_RELEASE 6375,293975
#define TK_TO 6376,294020
#define TK_TABLE 6377,294065
#define TK_CREATE 6378,294110
#define TK_IF 6379,294155
#define TK_NOT 6380,294200
#define TK_EXISTS 6381,294245
#define TK_TEMP 6382,294290
#define TK_LP 6383,294335
#define TK_RP 6384,294380
#define TK_AS 6385,294425
#define TK_COMMA 6386,294470
#define TK_ID 6387,294515
#define TK_INDEXED 6388,294560
#define TK_ABORT 6389,294605
#define TK_ACTION 6390,294650
#define TK_AFTER 6391,294695
#define TK_ANALYZE 6392,294740
#define TK_ASC 6393,294785
#define TK_ATTACH 6394,294830
#define TK_BEFORE 6395,294875
#define TK_BY 6396,294920
#define TK_CASCADE 6397,294965
#define TK_CAST 6398,295010
#define TK_COLUMNKW 6399,295055
#define TK_CONFLICT 6400,295100
#define TK_DATABASE 6401,295145
#define TK_DESC 6402,295190
#define TK_DETACH 6403,295235
#define TK_EACH 6404,295280
#define TK_FAIL 6405,295325
#define TK_FOR 6406,295370
#define TK_IGNORE 6407,295415
#define TK_INITIALLY 6408,295460
#define TK_INSTEAD 6409,295505
#define TK_LIKE_KW 6410,295550
#define TK_MATCH 6411,295595
#define TK_NO 6412,295640
#define TK_KEY 6413,295685
#define TK_OF 6414,295730
#define TK_OFFSET 6415,295775
#define TK_PRAGMA 6416,295820
#define TK_RAISE 6417,295865
#define TK_REPLACE 6418,295910
#define TK_RESTRICT 6419,295955
#define TK_ROW 6420,296000
#define TK_TRIGGER 6421,296045
#define TK_VACUUM 6422,296090
#define TK_VIEW 6423,296135
#define TK_VIRTUAL 6424,296180
#define TK_REINDEX 6425,296225
#define TK_RENAME 6426,296270
#define TK_CTIME_KW 6427,296315
#define TK_ANY 6428,296360
#define TK_OR 6429,296405
#define TK_AND 6430,296450
#define TK_IS 6431,296495
#define TK_BETWEEN 6432,296540
#define TK_IN 6433,296585
#define TK_ISNULL 6434,296630
#define TK_NOTNULL 6435,296675
#define TK_NE 6436,296720
#define TK_EQ 6437,296765
#define TK_GT 6438,296810
#define TK_LE 6439,296855
#define TK_LT 6440,296900
#define TK_GE 6441,296945
#define TK_ESCAPE 6442,296990
#define TK_BITAND 6443,297035
#define TK_BITOR 6444,297080
#define TK_LSHIFT 6445,297125
#define TK_RSHIFT 6446,297170
#define TK_PLUS 6447,297215
#define TK_MINUS 6448,297260
#define TK_STAR 6449,297305
#define TK_SLASH 6450,297350
#define TK_REM 6451,297395
#define TK_CONCAT 6452,297440
#define TK_COLLATE 6453,297485
#define TK_BITNOT 6454,297530
#define TK_STRING 6455,297575
#define TK_JOIN_KW 6456,297620
#define TK_CONSTRAINT 6457,297665
#define TK_DEFAULT 6458,297710
#define TK_NULL 6459,297755
#define TK_PRIMARY 6460,297800
#define TK_UNIQUE 6461,297845
#define TK_CHECK 6462,297891
#define TK_REFERENCES 6463,297937
#define TK_AUTOINCR 6464,297983
#define TK_ON 6465,298029
#define TK_INSERT 6466,298075
#define TK_DELETE 6467,298121
#define TK_UPDATE 6468,298167
#define TK_SET 6469,298213
#define TK_DEFERRABLE 6470,298259
#define TK_FOREIGN 6471,298305
#define TK_DROP 6472,298351
#define TK_UNION 6473,298397
#define TK_ALL 6474,298443
#define TK_EXCEPT 6475,298489
#define TK_INTERSECT 6476,298535
#define TK_SELECT 6477,298581
#define TK_DISTINCT 6478,298627
#define TK_DOT 6479,298673
#define TK_FROM 6480,298719
#define TK_JOIN 6481,298765
#define TK_USING 6482,298811
#define TK_ORDER 6483,298857
#define TK_GROUP 6484,298903
#define TK_HAVING 6485,298949
#define TK_LIMIT 6486,298995
#define TK_WHERE 6487,299041
#define TK_INTO 6488,299087
#define TK_VALUES 6489,299133
#define TK_INTEGER 6490,299179
#define TK_FLOAT 6491,299225
#define TK_BLOB 6492,299271
#define TK_REGISTER 6493,299317
#define TK_VARIABLE 6494,299363
#define TK_CASE 6495,299409
#define TK_WHEN 6496,299455
#define TK_THEN 6497,299501
#define TK_ELSE 6498,299547
#define TK_INDEX 6499,299593
#define TK_ALTER 6500,299639
#define TK_ADD 6501,299685
#define TK_TO_TEXT 6502,299731
#define TK_TO_BLOB 6503,299777
#define TK_TO_NUMERIC 6504,299823
#define TK_TO_INT 6505,299869
#define TK_TO_REAL 6506,299915
#define TK_ISNOT 6507,299961
#define TK_END_OF_FILE 6508,300007
#define TK_ILLEGAL 6509,300053
#define TK_SPACE 6510,300099
#define TK_UNCLOSED_STRING 6511,300145
#define TK_FUNCTION 6512,300191
#define TK_COLUMN 6513,300237
#define TK_AGG_FUNCTION 6514,300283
#define TK_AGG_COLUMN 6515,300329
#define TK_CONST_FUNC 6516,300375
#define TK_UMINUS 6517,300421
#define TK_UPLUS 6518,300467
# define double 6533,300922
# define LONGDOUBLE_TYPE 6534,300951
#   define SQLITE_BIG_DBL 6536,301013
# define SQLITE_OMIT_DATETIME_FUNCS 6538,301072
# define SQLITE_OMIT_TRACE 6539,301110
# undef SQLITE_MIXED_ENDIAN_64BIT_FLOAT6540,301139
# undef SQLITE_HAVE_ISNAN6541,301179
# define SQLITE_BIG_DBL 6544,301235
#define OMIT_TEMPDB 6553,301509
#define OMIT_TEMPDB 6555,301537
#define SQLITE_MAX_FILE_FORMAT 6564,301819
# define SQLITE_DEFAULT_FILE_FORMAT 6566,301887
# define SQLITE_DEFAULT_RECURSIVE_TRIGGERS 6574,302089
# define SQLITE_TEMP_STORE 6582,302274
#define offsetof(6590,302415
# define SQLITE_EBCDIC 6598,302648
# define SQLITE_ASCII 6600,302679
#  define UINT32_TYPE 6612,303026
#  define UINT32_TYPE 6614,303064
#  define UINT16_TYPE 6619,303156
#  define UINT16_TYPE 6621,303194
#  define INT16_TYPE 6626,303290
#  define INT16_TYPE 6628,303326
#  define UINT8_TYPE 6633,303412
#  define UINT8_TYPE 6635,303448
#  define INT8_TYPE 6640,303536
#  define INT8_TYPE 6642,303570
# define LONGDOUBLE_TYPE 6646,303641
typedef sqlite_int64 i64;6648,303685
typedef sqlite_uint64 u64;6649,303748
typedef UINT32_TYPE u32;6650,303813
typedef UINT16_TYPE u16;6651,303878
typedef INT16_TYPE i16;6652,303943
typedef UINT8_TYPE u8;6653,304006
typedef INT8_TYPE i8;6654,304071
#define SQLITE_MAX_U32 6662,304407
SQLITE_PRIVATE const int sqlite3one 6669,304577
SQLITE_PRIVATE const int sqlite3one;6671,304624
# define SQLITE_BIGENDIAN 6675,304801
# define SQLITE_LITTLEENDIAN 6676,304832
# define SQLITE_UTF16NATIVE 6677,304863
# define SQLITE_BIGENDIAN 6679,304913
# define SQLITE_LITTLEENDIAN 6680,304970
# define SQLITE_UTF16NATIVE 6681,305027
#define LARGEST_INT64 6689,305280
#define SMALLEST_INT64 6690,305340
#define ROUND8(6696,305522
#define ROUNDDOWN8(6701,305607
# define EIGHT_BYTE_ALIGNMENT(6713,306048
# define EIGHT_BYTE_ALIGNMENT(6715,306122
typedef struct BusyHandler BusyHandler;6728,306595
struct BusyHandler 6729,306635
  int (*xFunc)xFunc6730,306656
  void *pArg;pArg6731,306709
  int nBusy;6732,306771
#define MASTER_NAME 6740,307006
#define TEMP_MASTER_NAME 6741,307048
#define MASTER_ROOT 6746,307149
#define SCHEMA_TABLE(6751,307217
#define ArraySize(6757,307378
#define SQLITE_DYNAMIC 6763,307582
  #define SQLITE_WSD 6780,308454
  #define GLOBAL(6781,308481
  #define sqlite3GlobalConfig 6782,308551
  #define SQLITE_WSD 6786,308733
  #define GLOBAL(6787,308755
  #define sqlite3GlobalConfig 6788,308779
#define UNUSED_PARAMETER(6807,309759
#define UNUSED_PARAMETER2(6808,309797
typedef struct AggInfo AggInfo;6813,309911
typedef struct AuthContext AuthContext;6814,309943
typedef struct AutoincInfo AutoincInfo;6815,309983
typedef struct Bitvec Bitvec;6816,310023
typedef struct CollSeq CollSeq;6817,310053
typedef struct Column Column;6818,310085
typedef struct Db Db;6819,310115
typedef struct Schema Schema;6820,310137
typedef struct Expr Expr;6821,310167
typedef struct ExprList ExprList;6822,310193
typedef struct ExprSpan ExprSpan;6823,310227
typedef struct FKey FKey;6824,310261
typedef struct FuncDef FuncDef;6825,310287
typedef struct FuncDefHash FuncDefHash;6826,310319
typedef struct IdList IdList;6827,310359
typedef struct Index Index;6828,310389
typedef struct IndexSample IndexSample;6829,310417
typedef struct KeyClass KeyClass;6830,310457
typedef struct KeyInfo KeyInfo;6831,310491
typedef struct Lookaside Lookaside;6832,310523
typedef struct LookasideSlot LookasideSlot;6833,310559
typedef struct Module Module;6834,310603
typedef struct NameContext NameContext;6835,310633
typedef struct Parse Parse;6836,310673
typedef struct RowSet RowSet;6837,310701
typedef struct Savepoint Savepoint;6838,310731
typedef struct Select Select;6839,310767
typedef struct SrcList SrcList;6840,310797
typedef struct StrAccum StrAccum;6841,310829
typedef struct Table Table;6842,310863
typedef struct TableLock TableLock;6843,310891
typedef struct Token Token;6844,310927
typedef struct Trigger Trigger;6845,310955
typedef struct TriggerPrg TriggerPrg;6846,310987
typedef struct TriggerStep TriggerStep;6847,311025
typedef struct UnpackedRecord UnpackedRecord;6848,311065
typedef struct VTable VTable;6849,311111
typedef struct Walker Walker;6850,311141
typedef struct WherePlan WherePlan;6851,311171
typedef struct WhereInfo WhereInfo;6852,311207
typedef struct WhereLevel WhereLevel;6853,311243
#define _BTREE_H_6878,312206
#define SQLITE_N_BTREE_META 6883,312325
  #define SQLITE_DEFAULT_AUTOVACUUM 6890,312543
#define BTREE_AUTOVACUUM_NONE 6893,312589
#define BTREE_AUTOVACUUM_FULL 6894,312656
#define BTREE_AUTOVACUUM_INCR 6895,312721
typedef struct Btree Btree;6900,312829
typedef struct BtCursor BtCursor;6901,312857
typedef struct BtShared BtShared;6902,312891
typedef struct BtreeMutexArray BtreeMutexArray;6903,312925
struct BtreeMutexArray 6911,313219
  int nMutex;6912,313244
  Btree *aBtree[aBtree6913,313258
#define BTREE_OMIT_JOURNAL 6931,313813
#define BTREE_NO_READLOCK 6932,313883
#define BTREE_MEMORY 6933,313953
#define BTREE_READONLY 6934,314017
#define BTREE_READWRITE 6935,314090
#define BTREE_CREATE 6936,314161
#define BTREE_INTKEY 6973,316061
#define BTREE_ZERODATA 6974,316139
#define BTREE_LEAFDATA 6975,316205
#define BTREE_FREE_PAGE_COUNT 6996,317121
#define BTREE_SCHEMA_VERSION 6997,317157
#define BTREE_FILE_FORMAT 6998,317193
#define BTREE_DEFAULT_CACHE_SIZE 6999,317229
#define BTREE_LARGEST_ROOT_PAGE 7000,317265
#define BTREE_TEXT_ENCODING 7001,317301
#define BTREE_USER_VERSION 7002,317337
#define BTREE_INCR_VACUUM 7003,317373
# define sqlite3BtreeEnter(7071,320267
# define sqlite3BtreeEnterAll(7072,320298
# define sqlite3BtreeLeave(7090,321041
# define sqlite3BtreeEnterCursor(7091,321071
# define sqlite3BtreeLeaveCursor(7092,321107
# define sqlite3BtreeLeaveAll(7093,321143
# define sqlite3BtreeMutexArrayEnter(7094,321176
# define sqlite3BtreeMutexArrayLeave(7095,321216
# define sqlite3BtreeMutexArrayInsert(7096,321256
# define sqlite3BtreeHoldsMutex(7098,321300
# define sqlite3BtreeHoldsAllMutexes(7099,321337
#define _SQLITE_VDBE_H_7127,322388
typedef struct Vdbe Vdbe;7134,322576
typedef struct VdbeFunc VdbeFunc;7140,322710
typedef struct Mem Mem;7141,322744
typedef struct SubProgram SubProgram;7142,322768
struct VdbeOp 7149,322983
  u8 opcode;7150,322999
  signed char p4type;7151,323053
  u8 opflags;7152,323116
  u8 p5;7153,323183
  int p1;7154,323252
  int p2;7155,323294
  int p3;7156,323368
    int i;7158,323461
    void *p;p7159,323528
    char *z;z7160,323577
    i64 *pI64;pI647161,323656
    double *pReal;pReal7162,323718
    FuncDef *pFunc;pFunc7163,323779
    VdbeFunc *pVdbeFunc;pVdbeFunc7164,323843
    CollSeq *pColl;pColl7165,323908
    Mem *pMem;pMem7166,323972
    VTable *pVtab;pVtab7167,324032
    KeyInfo *pKeyInfo;pKeyInfo7168,324093
    int *ai;ai7169,324157
    SubProgram *pProgram;pProgram7170,324222
  } p4;7171,324289
  char *zComment;zComment7173,324317
  int cnt;7176,324408
  u64 cycles;7177,324487
typedef struct VdbeOp VdbeOp;7180,324574
struct SubProgram 7186,324666
  VdbeOp *aOp;aOp7187,324686
  int nOp;7188,324757
  int nMem;7189,324813
  int nCsr;7190,324883
  int nRef;7191,324948
  void *token;token7192,325023
struct VdbeOpList 7199,325217
  u8 opcode;7200,325237
  signed char p1;7201,325291
  signed char p2;7202,325333
  signed char p3;7203,325407
typedef struct VdbeOpList VdbeOpList;7205,325454
#define P4_NOTUSED 7210,325534
#define P4_DYNAMIC 7211,325595
#define P4_STATIC 7212,325676
#define P4_COLLSEQ 7213,325735
#define P4_FUNCDEF 7214,325806
#define P4_KEYINFO 7215,325877
#define P4_VDBEFUNC 7216,325948
#define P4_MEM 7217,326020
#define P4_TRANSIENT 7218,326091
#define P4_VTAB 7219,326161
#define P4_MPRINTF 7220,326238
#define P4_REAL 7221,326317
#define P4_INT64 7222,326385
#define P4_INT32 7223,326447
#define P4_INTARRAY 7224,326509
#define P4_SUBPROGRAM 7225,326575
#define P4_KEYINFO_HANDOFF 7234,327075
#define P4_KEYINFO_STATIC 7235,327108
#define COLNAME_NAME 7241,327275
#define COLNAME_DECLTYPE 7242,327302
#define COLNAME_DATABASE 7243,327329
#define COLNAME_TABLE 7244,327356
#define COLNAME_COLUMN 7245,327383
# define COLNAME_N 7247,327447
#   define COLNAME_N 7250,327551
#   define COLNAME_N 7252,327617
#define ADDR(7262,327942
#define OP_Goto 7272,328370
#define OP_Gosub 7273,328420
#define OP_Return 7274,328470
#define OP_Yield 7275,328520
#define OP_HaltIfNull 7276,328570
#define OP_Halt 7277,328620
#define OP_Integer 7278,328670
#define OP_Int64 7279,328720
#define OP_Real 7280,328770
#define OP_String8 7281,328848
#define OP_String 7282,328926
#define OP_Null 7283,328976
#define OP_Blob 7284,329026
#define OP_Variable 7285,329076
#define OP_Move 7286,329126
#define OP_Copy 7287,329176
#define OP_SCopy 7288,329226
#define OP_ResultRow 7289,329276
#define OP_Concat 7290,329326
#define OP_Add 7291,329404
#define OP_Subtract 7292,329482
#define OP_Multiply 7293,329560
#define OP_Divide 7294,329638
#define OP_Remainder 7295,329716
#define OP_CollSeq 7296,329794
#define OP_Function 7297,329844
#define OP_BitAnd 7298,329894
#define OP_BitOr 7299,329972
#define OP_ShiftLeft 7300,330050
#define OP_ShiftRight 7301,330128
#define OP_AddImm 7302,330206
#define OP_MustBeInt 7303,330256
#define OP_RealAffinity 7304,330306
#define OP_ToText 7305,330356
#define OP_ToBlob 7306,330434
#define OP_ToNumeric 7307,330512
#define OP_ToInt 7308,330591
#define OP_ToReal 7309,330669
#define OP_Eq 7310,330747
#define OP_Ne 7311,330825
#define OP_Lt 7312,330903
#define OP_Le 7313,330981
#define OP_Gt 7314,331059
#define OP_Ge 7315,331137
#define OP_Permutation 7316,331215
#define OP_Compare 7317,331265
#define OP_Jump 7318,331315
#define OP_And 7319,331365
#define OP_Or 7320,331443
#define OP_Not 7321,331521
#define OP_BitNot 7322,331599
#define OP_If 7323,331677
#define OP_IfNot 7324,331727
#define OP_IsNull 7325,331777
#define OP_NotNull 7326,331855
#define OP_Column 7327,331933
#define OP_Affinity 7328,331983
#define OP_MakeRecord 7329,332033
#define OP_Count 7330,332083
#define OP_Savepoint 7331,332133
#define OP_AutoCommit 7332,332183
#define OP_Transaction 7333,332233
#define OP_ReadCookie 7334,332283
#define OP_SetCookie 7335,332333
#define OP_VerifyCookie 7336,332383
#define OP_OpenRead 7337,332433
#define OP_OpenWrite 7338,332483
#define OP_OpenEphemeral 7339,332533
#define OP_OpenPseudo 7340,332583
#define OP_Close 7341,332633
#define OP_SeekLt 7342,332683
#define OP_SeekLe 7343,332733
#define OP_SeekGe 7344,332783
#define OP_SeekGt 7345,332833
#define OP_Seek 7346,332883
#define OP_NotFound 7347,332933
#define OP_Found 7348,332983
#define OP_IsUnique 7349,333033
#define OP_NotExists 7350,333083
#define OP_Sequence 7351,333133
#define OP_NewRowid 7352,333183
#define OP_Insert 7353,333233
#define OP_InsertInt 7354,333283
#define OP_Delete 7355,333333
#define OP_ResetCount 7356,333383
#define OP_RowKey 7357,333433
#define OP_RowData 7358,333483
#define OP_Rowid 7359,333533
#define OP_NullRow 7360,333583
#define OP_Last 7361,333633
#define OP_Sort 7362,333683
#define OP_Rewind 7363,333733
#define OP_Prev 7364,333783
#define OP_Next 7365,333833
#define OP_IdxInsert 7366,333883
#define OP_IdxDelete 7367,333933
#define OP_IdxRowid 7368,333983
#define OP_IdxLT 7369,334033
#define OP_IdxGE 7370,334083
#define OP_Destroy 7371,334133
#define OP_Clear 7372,334183
#define OP_CreateIndex 7373,334233
#define OP_CreateTable 7374,334283
#define OP_ParseSchema 7375,334333
#define OP_LoadAnalysis 7376,334383
#define OP_DropTable 7377,334433
#define OP_DropIndex 7378,334483
#define OP_DropTrigger 7379,334533
#define OP_IntegrityCk 7380,334583
#define OP_RowSetAdd 7381,334633
#define OP_RowSetRead 7382,334683
#define OP_RowSetTest 7383,334733
#define OP_Program 7384,334783
#define OP_Param 7385,334833
#define OP_FkCounter 7386,334883
#define OP_FkIfZero 7387,334933
#define OP_MemMax 7388,334983
#define OP_IfPos 7389,335033
#define OP_IfNeg 7390,335083
#define OP_IfZero 7391,335133
#define OP_AggStep 7392,335183
#define OP_AggFinal 7393,335233
#define OP_Vacuum 7394,335283
#define OP_IncrVacuum 7395,335333
#define OP_Expire 7396,335383
#define OP_TableLock 7397,335433
#define OP_VBegin 7398,335483
#define OP_VCreate 7399,335533
#define OP_VDestroy 7400,335583
#define OP_VOpen 7401,335633
#define OP_VFilter 7402,335683
#define OP_VColumn 7403,335733
#define OP_VNext 7404,335783
#define OP_VRename 7405,335833
#define OP_VUpdate 7406,335883
#define OP_Pagecount 7407,335933
#define OP_Trace 7408,335983
#define OP_Noop 7409,336033
#define OP_Explain 7410,336083
#define OP_NotUsed_135 7413,336183
#define OP_NotUsed_136 7414,336233
#define OP_NotUsed_137 7415,336283
#define OP_NotUsed_138 7416,336333
#define OP_NotUsed_139 7417,336383
#define OP_NotUsed_140 7418,336433
#define OPFLG_JUMP 7425,336655
#define OPFLG_OUT2_PRERELEASE 7426,336726
#define OPFLG_IN1 7427,336787
#define OPFLG_IN2 7428,336853
#define OPFLG_IN3 7429,336919
#define OPFLG_OUT2 7430,336985
#define OPFLG_OUT3 7431,337052
#define OPFLG_INITIALIZER 7432,337119
# define VdbeComment(7511,341264
# define VdbeNoopComment(7513,341381
# define VdbeComment(7515,341441
# define VdbeNoopComment(7516,341465
#define _PAGER_H_7542,342416
  #define SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT 7550,342691
typedef u32 Pgno;7557,342882
typedef struct Pager Pager;7562,342985
typedef struct PgHdr DbPage;7567,343046
#define PAGER_MJ_PGNO(7577,343464
#define PAGER_OMIT_JOURNAL 7584,343684
#define PAGER_NO_READLOCK 7585,343758
#define PAGER_LOCKINGMODE_QUERY 7590,343912
#define PAGER_LOCKINGMODE_NORMAL 7591,343952
#define PAGER_LOCKINGMODE_EXCLUSIVE 7592,343992
#define PAGER_JOURNALMODE_QUERY 7597,344109
#define PAGER_JOURNALMODE_DELETE 7598,344149
#define PAGER_JOURNALMODE_PERSIST 7599,344229
#define PAGER_JOURNALMODE_OFF 7600,344310
#define PAGER_JOURNALMODE_TRUNCATE 7601,344376
#define PAGER_JOURNALMODE_MEMORY 7602,344453
#define sqlite3PagerGet(7636,345796
# define disable_simulated_io_errors(7685,348085
# define enable_simulated_io_errors(7686,348124
typedef struct PgHdr PgHdr;7712,348994
typedef struct PCache PCache;7713,349022
struct PgHdr 7719,349146
  void *pData;pData7720,349161
  void *pExtra;pExtra7721,349221
  PgHdr *pDirty;pDirty7722,349274
  Pgno pgno;7723,349343
  Pager *pPager;pPager7724,349408
  u32 pageHash;7726,349504
  u16 flags;7728,349571
  i16 nRef;7734,349839
  PCache *pCache;pCache7735,349907
  PgHdr *pDirtyNext;pDirtyNext7737,349973
  PgHdr *pDirtyPrev;pDirtyPrev7738,350048
#define PGHDR_DIRTY 7742,350164
#define PGHDR_NEED_SYNC 7743,350226
#define PGHDR_NEED_READ 7745,350381
#define PGHDR_REUSE_UNLIKELY 7746,350444
#define PGHDR_DONT_WRITE 7747,350519
#define _SQLITE_OS_H_7876,355488
#   undef SQLITE_OS_UNIX7887,355877
#   define SQLITE_OS_UNIX 7888,355902
#   undef SQLITE_OS_WIN7889,355930
#   define SQLITE_OS_WIN 7890,355954
#   undef SQLITE_OS_OS27891,355981
#   define SQLITE_OS_OS2 7892,356005
#   undef SQLITE_OS_OTHER7894,356039
# define SQLITE_OS_OTHER 7898,356138
#     define SQLITE_OS_WIN 7901,356301
#     define SQLITE_OS_UNIX 7902,356330
#     define SQLITE_OS_OS2 7903,356360
#     define SQLITE_OS_WIN 7905,356486
#     define SQLITE_OS_UNIX 7906,356515
#     define SQLITE_OS_OS2 7907,356545
#     define SQLITE_OS_WIN 7909,356583
#     define SQLITE_OS_UNIX 7910,356612
#     define SQLITE_OS_OS2 7911,356642
#  define SQLITE_OS_UNIX 7914,356687
#  define SQLITE_OS_OS2 7915,356714
#  define SQLITE_OS_WIN 7919,356777
# define SQLITE_OS_WINCE 7928,356930
# define SQLITE_OS_WINCE 7930,356963
# define SQLITE_TEMPNAME_SIZE 7939,357096
# define INCL_DOSDATETIME7944,357337
# define INCL_DOSFILEMGR7945,357363
# define INCL_DOSERRORS7946,357388
# define INCL_DOSMISC7947,357412
# define INCL_DOSPROCESS7948,357434
# define INCL_DOSMODULEMGR7949,357459
# define INCL_DOSSEMAPHORES7950,357486
# define SQLITE_TEMPNAME_SIZE 7953,357552
# define SQLITE_TEMPNAME_SIZE 7955,357605
# define SET_FULLSYNC(7962,357746
# define SQLITE_DEFAULT_SECTOR_SIZE 7969,357859
# define SQLITE_TEMP_FILE_PREFIX 7994,359163
#define NO_LOCK 8014,360091
#define SHARED_LOCK 8015,360117
#define RESERVED_LOCK 8016,360143
#define PENDING_LOCK 8017,360169
#define EXCLUSIVE_LOCK 8018,360195
#define PENDING_BYTE 8075,363264
#define RESERVED_BYTE 8076,363309
#define SHARED_FIRST 8077,363352
#define SHARED_SIZE 8078,363395
#define SQLITE_FCNTL_DB_UNCHANGED 8098,364235
# define SQLITE_MUTEX_OMIT8174,367520
#    define SQLITE_MUTEX_PTHREADS8178,367628
#    define SQLITE_MUTEX_W328180,367684
#    define SQLITE_MUTEX_OS28182,367735
#    define SQLITE_MUTEX_NOOP8184,367772
#define sqlite3_mutex_alloc(8192,367920
#define sqlite3_mutex_free(8193,367974
#define sqlite3_mutex_enter(8194,368004
#define sqlite3_mutex_try(8195,368035
#define sqlite3_mutex_leave(8196,368079
#define sqlite3_mutex_held(8197,368110
#define sqlite3_mutex_notheld(8198,368146
#define sqlite3MutexAlloc(8199,368182
#define sqlite3MutexInit(8200,368236
#define sqlite3MutexEnd(8201,368280
struct Db 8215,368828
  char *zName;zName8216,368840
  Btree *pBt;pBt8217,368891
  u8 inTrans;8218,368964
  u8 safety_level;8219,369042
  Schema *pSchema;pSchema8220,369110
struct Schema 8234,369679
  int schema_cookie;8235,369695
  Hash tblHash;8236,369769
  Hash idxHash;8237,369825
  Hash trigHash;8238,369890
  Hash fkeyHash;8239,369948
  Table *pSeqTab;pSeqTab8240,370019
  u8 file_format;8241,370096
  u8 enc;8242,370161
  u16 flags;8243,370226
  int cache_size;8244,370289
  sqlite3 *db;db8246,370387
#define DbHasProperty(8254,370563
#define DbHasAnyProperty(8255,370636
#define DbSetProperty(8256,370707
#define DbClearProperty(8257,370772
#define DB_SchemaLoaded 8269,371202
#define DB_UnresetViews 8270,371270
#define DB_Empty 8271,371348
#define SQLITE_N_LIMIT 8277,371534
struct Lookaside 8299,372623
  u16 sz;8300,372642
  u8 bEnabled;8301,372703
  u8 bMalloced;8302,372778
  int nOut;8303,372856
  int mxOut;8304,372928
  LookasideSlot *pFree;pFree8305,372984
  void *pStart;pStart8306,373042
  void *pEnd;pEnd8307,373111
struct LookasideSlot 8309,373185
  LookasideSlot *pNext;pNext8310,373208
struct FuncDefHash 8319,373452
  FuncDef *a[a8320,373473
struct sqlite3 8349,374921
  sqlite3_vfs *pVfs;pVfs8350,374938
  int nDb;8351,374989
  Db *aDb;aDb8352,375063
  int flags;8353,375114
  int openFlags;8354,375183
  int errCode;8355,375257
  int errMask;8356,375329
  u8 autoCommit;8357,375409
  u8 temp_store;8358,375469
  u8 mallocFailed;8359,375536
  u8 dfltLockMode;8360,375612
  u8 dfltJournalMode;8361,375688
  signed char nextAutovac;8362,375764
  u8 suppressErr;8363,375838
  int nextPagesize;8364,375912
  int nTable;8365,375978
  CollSeq *pDfltColl;pDfltColl8366,376049
  i64 lastRowid;8367,376127
  u32 magic;8368,376205
  int nChange;8369,376282
  int nTotalChange;8370,376356
  sqlite3_mutex *mutex;mutex8371,376436
  int aLimit[aLimit8372,376491
  struct sqlite3InitInfo 8373,376536
    int iDb;8374,376613
    int newTnum;8375,376682
    u8 busy;8376,376756
    u8 orphanTrigger;8377,376825
  } init;8378,376903
  int nExtension;8379,376913
  void **aExtension;aExtension8380,376979
  struct Vdbe *pVdbe;pVdbe8381,377049
  int activeVdbeCnt;8382,377119
  int writeVdbeCnt;8383,377193
  void (*xTrace)xTrace8384,377271
  void *pTraceArg;pTraceArg8385,377336
  void (*xProfile)xProfile8386,377417
  void *pProfileArg;pProfileArg8387,377486
  void *pCommitArg;pCommitArg8388,377565
  int (*xCommitCallback)xCommitCallback8389,377640
  void *pRollbackArg;pRollbackArg8390,377707
  void (*xRollbackCallback)xRollbackCallback8391,377784
  void *pUpdateArg;pUpdateArg8392,377851
  void (*xUpdateCallback)xUpdateCallback8393,377871
  void(*xCollNeeded)xCollNeeded8394,377947
  void(*xCollNeeded16)xCollNeeded168395,378010
  void *pCollNeededArg;pCollNeededArg8396,378075
  sqlite3_value *pErr;pErr8397,378099
  char *zErrMsg;zErrMsg8398,378163
  char *zErrMsg16;zErrMsg168399,378243
    volatile int isInterrupted;8401,378334
    double notUsed1;8402,378414
  } u1;8403,378459
  Lookaside lookaside;8404,378467
  int (*xAuth)xAuth8406,378570
  void *pAuthArg;pAuthArg8408,378713
  int (*xProgress)xProgress8411,378837
  void *pProgressArg;pProgressArg8412,378897
  int nProgressOps;8413,378969
  Hash aModule;8416,379087
  Table *pVTab;pVTab8417,379162
  VTable **aVTrans;aVTrans8418,379239
  int nVTrans;8419,379315
  VTable *pDisconnect;pDisconnect8420,379379
  FuncDefHash aFunc;8422,379461
  Hash aCollSeq;8423,379534
  BusyHandler busyHandler;8424,379596
  int busyTimeout;8425,379648
  Db aDbStatic[aDbStatic8426,379716
  Savepoint *pSavepoint;pSavepoint8427,379794
  int nSavepoint;8428,379858
  int nStatement;8429,379933
  u8 isTransactionSavepoint;8430,380012
  i64 nDeferredCons;8431,380090
  sqlite3 *pBlockingConnection;pBlockingConnection8444,380634
  sqlite3 *pUnlockConnection;pUnlockConnection8445,380709
  void *pUnlockArg;pUnlockArg8446,380786
  void (*xUnlockNotify)xUnlockNotify8447,380858
  sqlite3 *pNextBlocked;pNextBlocked8448,380927
#define ENC(8455,381073
#define SQLITE_VdbeTrace 8460,381166
#define SQLITE_InternChanges 8461,381243
#define SQLITE_FullColNames 8462,381322
#define SQLITE_ShortColNames 8463,381403
#define SQLITE_CountRows 8464,381476
#define SQLITE_NullCallback 8467,381711
#define SQLITE_SqlTrace 8469,381861
#define SQLITE_VdbeListing 8470,381940
#define SQLITE_WriteSchema 8471,382020
#define SQLITE_NoReadlock 8472,382095
#define SQLITE_IgnoreChecks 8474,382246
#define SQLITE_ReadUncommitted 8475,382327
#define SQLITE_LegacyFileFmt 8476,382397
#define SQLITE_FullFSync 8477,382478
#define SQLITE_LoadExtension 8478,382556
#define SQLITE_RecoveryMode 8479,382626
#define SQLITE_ReverseOrder 8480,382695
#define SQLITE_RecTriggers 8481,382769
#define SQLITE_ForeignKeys 8482,382843
#define SQLITE_QueryFlattener 8489,383113
#define SQLITE_ColumnCache 8490,383186
#define SQLITE_IndexSort 8491,383259
#define SQLITE_IndexSearch 8492,383335
#define SQLITE_IndexCover 8493,383413
#define SQLITE_OptMask 8494,383490
#define SQLITE_MAGIC_OPEN 8501,383734
#define SQLITE_MAGIC_CLOSED 8502,383799
#define SQLITE_MAGIC_SICK 8503,383866
#define SQLITE_MAGIC_BUSY 8504,383939
#define SQLITE_MAGIC_ERROR 8505,384013
struct FuncDef 8513,384360
  i16 nArg;8514,384377
  u8 iPrefEnc;8515,384447
  u8 flags;8516,384526
  void *pUserData;pUserData8517,384589
  FuncDef *pNext;pNext8518,384638
  void (*xFunc)xFunc8519,384696
  void (*xStep)xStep8520,384774
  void (*xFinalize)xFinalize8521,384850
  char *zName;zName8522,384930
  FuncDef *pHash;pHash8523,384985
#define SQLITE_FUNC_LIKE 8529,385106
#define SQLITE_FUNC_CASE 8530,385182
#define SQLITE_FUNC_EPHEM 8531,385256
#define SQLITE_FUNC_NEEDCOLL 8532,385325
#define SQLITE_FUNC_PRIVATE 8533,385405
#define SQLITE_FUNC_COUNT 8534,385475
#define SQLITE_FUNC_COALESCE 8535,385543
#define FUNCTION(8562,386863
#define STR_FUNCTION(8565,387018
#define LIKEFUNC(8568,387158
#define AGGREGATE(8570,387274
struct Savepoint 8580,387678
  char *zName;zName8581,387697
  i64 nDeferredCons;8582,387773
  Savepoint *pNext;pNext8583,387850
#define SAVEPOINT_BEGIN 8590,388062
#define SAVEPOINT_RELEASE 8591,388093
#define SAVEPOINT_ROLLBACK 8592,388124
struct Module 8600,388314
  const sqlite3_module *pModule;pModule8601,388330
  const char *zName;zName8602,388393
  void *pAux;pAux8603,388469
  void (*xDestroy)xDestroy8604,388545
struct Column 8611,388721
  char *zName;zName8612,388737
  Expr *pDflt;pDflt8613,388782
  char *zDflt;zDflt8614,388836
  char *zType;zType8615,388896
  char *zColl;zColl8616,388947
  u8 notNull;8617,389018
  u8 isPrimKey;8618,389082
  char affinity;8619,389154
  u8 isHidden;8621,389245
struct CollSeq 8646,390325
  char *zName;zName8647,390342
  u8 enc;8648,390418
  u8 type;8649,390480
  void *pUser;pUser8650,390550
  int (*xCmp)xCmp8651,390605
  void (*xDel)xDel8652,390662
#define SQLITE_COLL_BINARY 8658,390758
#define SQLITE_COLL_NOCASE 8659,390835
#define SQLITE_COLL_REVERSE 8660,390911
#define SQLITE_COLL_USER 8661,390988
#define SQLITE_SO_ASC 8666,391117
#define SQLITE_SO_DESC 8667,391178
#define SQLITE_AFF_TEXT 8683,391797
#define SQLITE_AFF_NONE 8684,391829
#define SQLITE_AFF_NUMERIC 8685,391861
#define SQLITE_AFF_INTEGER 8686,391893
#define SQLITE_AFF_REAL 8687,391925
#define sqlite3IsNumericAffinity(8689,391958
#define SQLITE_AFF_MASK 8695,392115
#define SQLITE_JUMPIFNULL 8701,392248
#define SQLITE_STOREP2 8702,392320
#define SQLITE_NULLEQ 8703,392401
struct VTable 8747,394901
  sqlite3 *db;db8748,394917
  Module *pMod;pMod8749,394998
  sqlite3_vtab *pVtab;pVtab8750,395065
  int nRef;8751,395124
  VTable *pNext;pNext8752,395195
struct Table 8785,396833
  sqlite3 *dbMem;dbMem8786,396848
  char *zName;zName8787,396923
  int iPKey;8788,396978
  int nCol;8789,397059
  Column *aCol;aCol8790,397120
  Index *pIndex;pIndex8791,397179
  int tnum;8792,397243
  Select *pSelect;pSelect8793,397320
  u16 nRef;8794,397399
  u8 tabFlags;8795,397461
  u8 keyConf;8796,397510
  FKey *pFKey;pFKey8797,397590
  char *zColAff;zColAff8798,397665
  Expr *pCheck;pCheck8800,397764
  int addColOffset;8803,397864
  VTable *pVTable;pVTable8806,397981
  int nModuleArg;8807,398034
  char **azModuleArg;azModuleArg8808,398097
  Trigger *pTrigger;pTrigger8810,398177
  Schema *pSchema;pSchema8811,398241
  Table *pNextZombie;pNextZombie8812,398302
#define TF_Readonly 8818,398412
#define TF_Ephemeral 8819,398476
#define TF_HasPrimaryKey 8820,398536
#define TF_Autoincrement 8821,398601
#define TF_Virtual 8822,398679
#define TF_NeedMetadata 8823,398739
#  define IsVirtual(8833,399036
#  define IsHiddenColumn(8834,399098
#  define IsVirtual(8836,399148
#  define IsHiddenColumn(8837,399178
struct FKey 8859,399976
  Table *pFrom;pFrom8860,399990
  FKey *pNextFrom;pNextFrom8861,400068
  char *zTo;zTo8862,400120
  FKey *pNextTo;pNextTo8863,400197
  FKey *pPrevTo;pPrevTo8864,400259
  int nCol;8865,400325
  u8 isDeferred;8867,400407
  u8 aAction[aAction8868,400485
  Trigger *apTrigger[apTrigger8869,400563
  struct sColMap 8870,400626
    int iFrom;8871,400698
    char *zCol;zCol8872,400752
  } aCol[aCol8873,400826
#define OE_None 8901,402275
#define OE_Rollback 8902,402337
#define OE_Abort 8903,402415
#define OE_Fail 8904,402493
#define OE_Ignore 8905,402570
#define OE_Replace 8906,402649
#define OE_Restrict 8908,402729
#define OE_SetNull 8909,402808
#define OE_SetDflt 8910,402872
#define OE_Cascade 8911,402943
#define OE_Default 8913,402994
struct KeyInfo 8921,403233
  sqlite3 *db;db8922,403250
  u8 enc;8923,403302
  u16 nField;8924,403374
  u8 *aSortOrder;aSortOrder8925,403431
  CollSeq *aColl[aColl8926,403506
struct UnpackedRecord 8943,404136
  KeyInfo *pKeyInfo;pKeyInfo8944,404160
  u16 nField;8945,404225
  u16 flags;8946,404282
  i64 rowid;8947,404348
  Mem *aMem;aMem8948,404407
#define UNPACKED_NEED_FREE 8954,404494
#define UNPACKED_NEED_DESTROY 8955,404570
#define UNPACKED_IGNORE_ROWID 8956,404648
#define UNPACKED_INCRKEY 8957,404723
#define UNPACKED_PREFIX_MATCH 8958,404800
#define UNPACKED_PREFIX_SEARCH 8959,404877
struct Index 8987,406143
  char *zName;zName8988,406158
  int nColumn;8989,406202
  int *aiColumn;aiColumn8990,406277
  unsigned *aiRowEst;aiRowEst8991,406350
  Table *pTable;pTable8992,406431
  int tnum;8993,406484
  u8 onError;8994,406561
  u8 autoIndex;8995,406630
  char *zColAff;zColAff8996,406704
  Index *pNext;pNext8997,406773
  Schema *pSchema;pSchema8998,406844
  u8 *aSortOrder;aSortOrder8999,406898
  char **azColl;azColl9000,406975
  IndexSample *aSample;aSample9001,407044
struct IndexSample 9008,407234
    char *z;z9010,407265
    double r;9011,407336
  } u;9012,407411
  u8 eType;9013,407418
  u8 nByte;9014,407481
struct Token 9025,407847
  const char *z;z9026,407862
  unsigned int n;9027,407930
struct AggInfo 9043,408592
  u8 directMode;9044,408609
  u8 useSortingIdx;9046,408766
  int sortingIdx;9048,408900
  ExprList *pGroupBy;pGroupBy9049,408967
  int nSortingColumn;9050,409019
  struct AggInfo_col 9051,409090
    Table *pTab;pTab9052,409160
    int iTable;9053,409208
    int iColumn;9054,409277
    int iSorterColumn;9055,409350
    int iMem;9056,409420
    Expr *pExpr;pExpr9057,409496
  } *aCol;aCol9058,409555
  int nColumn;9059,409566
  int nColumnAlloc;9060,409631
  int nAccumulator;9061,409700
  struct AggInfo_func 9064,409911
    Expr *pExpr;pExpr9065,409971
    FuncDef *pFunc;pFunc9066,410039
    int iMem;9067,410112
    int iDistinct;9068,410188
  } *aFunc;aFunc9069,410264
  int nFunc;9070,410276
  int nFuncAlloc;9071,410337
typedef i16 ynVar;9085,410995
typedef int ynVar;9087,411020
struct Expr 9153,414284
  u8 op;9154,414298
  char affinity;9155,414362
  u16 flags;9156,414441
    char *zToken;zToken9158,414513
    int iValue;9159,414588
  } u;9160,414650
  Expr *pLeft;pLeft9167,414932
  Expr *pRight;pRight9168,414976
    ExprList *pList;pList9170,415031
    Select *pSelect;pSelect9171,415112
  } x;9172,415191
  CollSeq *pColl;pColl9173,415198
  int iTable;9180,415539
  ynVar iColumn;9183,415735
  i16 iAgg;9185,415878
  i16 iRightJoinTable;9186,415954
  u8 flags2;9187,416029
  u8 op2;9188,416090
  AggInfo *pAggInfo;pAggInfo9189,416169
  Table *pTab;pTab9190,416242
  int nHeight;9192,416334
#define EP_FromJoin 9199,416488
#define EP_Agg 9200,416567
#define EP_Resolved 9201,416644
#define EP_Error 9202,416714
#define EP_Distinct 9203,416789
#define EP_VarSelect 9204,416866
#define EP_DblQuoted 9205,416938
#define EP_InfixFunc 9206,417006
#define EP_ExpCollate 9207,417086
#define EP_FixedDest 9208,417162
#define EP_IntValue 9209,417235
#define EP_xIsSelect 9210,417307
#define EP_Reduced 9212,417386
#define EP_TokenOnly 9213,417465
#define EP_Static 9214,417546
#define EP2_MallocedToken 9219,417699
#define EP2_Irreducible 9220,417776
# define ExprSetIrreducible(9229,418141
# define ExprSetIrreducible(9231,418210
#define ExprHasProperty(9238,418340
#define ExprHasAnyProperty(9239,418397
#define ExprSetProperty(9240,418452
#define ExprClearProperty(9241,418501
#define EXPR_FULLSIZE 9248,418752
#define EXPR_REDUCEDSIZE 9249,418823
#define EXPR_TOKENONLYSIZE 9250,418900
#define EXPRDUP_REDUCE 9256,419096
struct ExprList 9266,419545
  int nExpr;9267,419563
  int nAlloc;9268,419628
  int iECursor;9269,419693
  struct ExprList_item 9270,419766
    Expr *pExpr;pExpr9271,419791
    char *zName;zName9272,419848
    char *zSpan;zSpan9273,419919
    u8 sortOrder;9274,419984
    u8 done;9275,420041
    u16 iCol;9276,420121
    u16 iAlias;9277,420196
  } *a;a9278,420265
struct ExprSpan 9286,420491
  Expr *pExpr;pExpr9287,420509
  const char *zStart;zStart9288,420565
  const char *zEnd;zEnd9289,420625
struct IdList 9307,421235
  struct IdList_item 9308,421251
    char *zName;zName9309,421274
    int idx;9310,421325
  } *a;a9311,421404
  int nId;9312,421412
  int nAlloc;9313,421471
typedef u64 Bitmask;9323,421804
#define BMS 9328,421897
struct SrcList 9346,422794
  i16 nSrc;9347,422811
  i16 nAlloc;9348,422886
  struct SrcList_item 9349,422952
    char *zDatabase;zDatabase9350,422976
    char *zName;zName9351,423040
    char *zAlias;zAlias9352,423086
    Table *pTab;pTab9353,423167
    Select *pSelect;pSelect9354,423231
    u8 isPopulated;9355,423308
    u8 jointype;9356,423388
    u8 notIndexed;9357,423464
    int iCursor;9358,423530
    Expr *pOn;pOn9359,423607
    IdList *pUsing;pUsing9360,423659
    Bitmask colUsed;9361,423714
    char *zIndex;zIndex9362,423787
    Index *pIndex;pIndex9363,423860
  } a[a9364,423936
#define JT_INNER 9370,424068
#define JT_CROSS 9371,424137
#define JT_NATURAL 9372,424208
#define JT_LEFT 9373,424271
#define JT_RIGHT 9374,424324
#define JT_OUTER 9375,424378
#define JT_ERROR 9376,424446
struct WherePlan 9393,425118
  u32 wsFlags;9394,425137
  u32 nEq;9395,425217
    Index *pIdx;pIdx9397,425291
    struct WhereTerm *pTerm;pTerm9398,425365
    sqlite3_index_info *pVtabIdx;pVtabIdx9399,425438
  } u;9400,425506
struct WhereLevel 9416,426151
  WherePlan plan;9417,426171
  int iLeftJoin;9418,426248
  int iTabCur;9419,426324
  int iIdxCur;9420,426395
  int addrBrk;9421,426461
  int addrNxt;9422,426526
  int addrCont;9423,426599
  int addrFirst;9424,426676
  u8 iFrom;9425,426748
  u8 op,9426,426809
  u8 op, p5;9426,426809
  int p1,9427,426886
  int p1, p2;9427,426886
      int nIn;9430,427045
      struct InLoop 9431,427110
        int iCur;9432,427132
        int addrInTop;9433,427210
      } *aInLoop;aInLoop9434,427266
    } in;9435,427342
  } u;9436,427411
  sqlite3_index_info *pIdxInfo;pIdxInfo9444,427725
#define WHERE_ORDERBY_NORMAL 9451,427920
#define WHERE_ORDERBY_MIN 9452,427970
#define WHERE_ORDERBY_MAX 9453,428049
#define WHERE_ONEPASS_DESIRED 9454,428128
#define WHERE_DUPLICATES_OK 9455,428206
#define WHERE_OMIT_OPEN 9456,428284
#define WHERE_OMIT_CLOSE 9457,428358
#define WHERE_FORCE_TABLE 9458,428438
#define WHERE_ONETABLE_ONLY 9459,428514
struct WhereInfo 9468,428888
  Parse *pParse;pParse9469,428907
  u16 wctrlFlags;9470,428972
  u8 okOnePass;9471,429048
  u8 untestedTerms;9472,429127
  SrcList *pTabList;pTabList9473,429199
  int iTop;9474,429265
  int iContinue;9475,429341
  int iBreak;9476,429419
  int nLevel;9477,429493
  struct WhereClause *pWC;pWC9478,429554
  WhereLevel a[a9479,429627
struct NameContext 9503,430821
  Parse *pParse;pParse9504,430842
  SrcList *pSrcList;pSrcList9505,430882
  ExprList *pEList;pEList9506,430952
  int nRef;9507,431016
  int nErr;9508,431086
  u8 allowAgg;9509,431166
  u8 hasAgg;9510,431228
  u8 isCheck;9511,431285
  int nDepth;9512,431360
  AggInfo *pAggInfo;pAggInfo9513,431437
  NameContext *pNext;pNext9514,431509
struct Select 9537,432661
  ExprList *pEList;pEList9538,432677
  u8 op;9539,432733
  char affinity;9540,432811
  u16 selFlags;9541,432884
  SrcList *pSrc;pSrc9542,432935
  Expr *pWhere;pWhere9543,432982
  ExprList *pGroupBy;pGroupBy9544,433030
  Expr *pHaving;pHaving9545,433081
  ExprList *pOrderBy;pOrderBy9546,433130
  Select *pPrior;pPrior9547,433181
  Select *pNext;pNext9548,433256
  Select *pRightmost;pRightmost9549,433325
  Expr *pLimit;pLimit9550,433405
  Expr *pOffset;pOffset9551,433475
  int iLimit,9552,433546
  int iLimit, iOffset;9552,433546
  int addrOpenEphm[addrOpenEphm9553,433626
#define SF_Distinct 9560,433796
#define SF_Resolved 9561,433863
#define SF_Aggregate 9562,433935
#define SF_UsesEphemeral 9563,434005
#define SF_Expanded 9564,434076
#define SF_HasTypeInfo 9565,434154
#define SRT_Union 9572,434351
#define SRT_Except 9573,434418
#define SRT_Exists 9574,434485
#define SRT_Discard 9575,434554
#define IgnorableOrderby(9578,434680
#define SRT_Output 9580,434735
#define SRT_Mem 9581,434795
#define SRT_Set 9582,434859
#define SRT_Table 9583,434927
#define SRT_EphemTab 9584,435006
#define SRT_Coroutine 9585,435086
typedef struct SelectDest SelectDest;9591,435276
struct SelectDest 9592,435314
  u8 eDest;9593,435334
  u8 affinity;9594,435390
  int iParm;9595,435450
  int iMem;9596,435522
  int nMem;9597,435588
struct AutoincInfo 9609,436150
  AutoincInfo *pNext;pNext9610,436171
  Table *pTab;pTab9611,436239
  int iDb;9612,436301
  int regCtr;9613,436379
# define SQLITE_N_COLCACHE 9620,436515
struct TriggerPrg 9641,437443
  Trigger *pTrigger;pTrigger9642,437463
  int orconf;9643,437531
  SubProgram *pProgram;pProgram9644,437590
  u32 aColmask[aColmask9645,437659
  TriggerPrg *pNext;pNext9646,437730
struct Parse 9665,438556
  sqlite3 *db;db9666,438571
  int rc;9667,438628
  char *zErrMsg;zErrMsg9668,438684
  Vdbe *pVdbe;pVdbe9669,438730
  u8 colNamesSet;9670,438801
  u8 nameClash;9671,438880
  u8 checkSchema;9672,438961
  u8 nested;9673,439032
  u8 parseError;9674,439113
  u8 nTempReg;9675,439184
  u8 nTempInUse;9676,439257
  int aTempReg[aTempReg9677,439329
  int nRangeReg;9678,439395
  int iRangeReg;9679,439461
  int nErr;9680,439533
  int nTab;9681,439584
  int nMem;9682,439657
  int nSet;9683,439721
  int ckBase;9684,439777
  int iCacheLevel;9685,439853
  int iCacheCnt;9686,439934
  u8 nColCache;9687,440011
  u8 iColCache;9688,440078
  struct yColCache 9689,440142
    int iTable;9690,440163
    int iColumn;9691,440215
    u8 tempReg;9692,440267
    int iLevel;9693,440346
    int iReg;9694,440392
    int lru;9695,440469
  } aColCache[aColCache9696,440550
  u32 writeMask;9697,440623
  u32 cookieMask;9698,440697
  u8 isMultiWrite;9699,440763
  u8 mayAbort;9700,440842
  int cookieGoto;9701,440918
  int cookieValue[cookieValue9702,440996
  int nTableLock;9704,441106
  TableLock *aTableLock;aTableLock9705,441167
  int regRowid;9707,441248
  int regRoot;9708,441322
  AutoincInfo *pAinc;pAinc9709,441401
  int nMaxArg;9710,441471
  Parse *pToplevel;pToplevel9713,441605
  Table *pTriggerTab;pTriggerTab9714,441677
  u32 oldmask;9715,441741
  u32 newmask;9716,441803
  u8 eTriggerOp;9717,441865
  u8 eOrconf;9718,441928
  u8 disableTriggers;9719,442002
  int nVar;9724,442157
  int nVarExpr;9725,442233
  int nVarExprAlloc;9726,442298
  Expr **apVarExpr;apVarExpr9727,442368
  Vdbe *pReprepare;pReprepare9728,442445
  int nAlias;9729,442515
  int nAliasAlloc;9730,442581
  int *aAlias;aAlias9731,442649
  u8 explain;9732,442715
  Token sNameToken;9733,442791
  Token sLastToken;9734,442862
  const char *zTail;zTail9735,442913
  Table *pNewTable;pNewTable9736,442986
  Trigger *pNewTrigger;pNewTrigger9737,443057
  const char *zAuthContext;zAuthContext9738,443135
  Token sArg;9740,443243
  u8 declareVtab;9741,443313
  int nVtabLock;9742,443386
  Table **apVtabLock;apVtabLock9743,443454
  int nHeight;9745,443538
  Table *pZombieTab;pZombieTab9746,443615
  TriggerPrg *pTriggerPrg;pTriggerPrg9747,443694
  #define IN_DECLARE_VTAB 9751,443796
  #define IN_DECLARE_VTAB 9753,443830
struct AuthContext 9760,444044
  const char *zAuthContext;zAuthContext9761,444065
  Parse *pParse;pParse9762,444135
#define OPFLAG_NCHANGE 9768,444259
#define OPFLAG_LASTROWID 9769,444328
#define OPFLAG_ISUPDATE 9770,444399
#define OPFLAG_APPEND 9771,444474
#define OPFLAG_USESEEKRESULT 9772,444548
#define OPFLAG_CLEARCACHE 9773,444628
struct Trigger 9790,445421
  char *zName;zName9791,445438
  char *table;table9792,445517
  u8 op;9793,445596
  u8 tr_tm;9794,445675
  Expr *pWhen;pWhen9795,445744
  IdList *pColumns;pColumns9796,445824
  Schema *pSchema;pSchema9798,445965
  Schema *pTabSchema;pTabSchema9799,446027
  TriggerStep *step_list;step_list9800,446087
  Trigger *pNext;pNext9801,446166
#define TRIGGER_BEFORE 9811,446485
#define TRIGGER_AFTER 9812,446511
struct TriggerStep 9852,448352
  u8 op;9853,448373
  u8 orconf;9854,448452
  Trigger *pTrig;pTrig9855,448498
  Select *pSelect;pSelect9856,448567
  Token target;9857,448648
  Expr *pWhere;pWhere9858,448717
  ExprList *pExprList;pExprList9859,448790
  IdList *pIdList;pIdList9860,448868
  TriggerStep *pNext;pNext9861,448921
  TriggerStep *pLast;pLast9862,448972
typedef struct DbFixer DbFixer;9870,449218
struct DbFixer 9871,449250
  Parse *pParse;pParse9872,449267
  const char *zDb;zDb9873,449345
  const char *zType;zType9874,449426
  const Token *pName;pName9875,449502
struct StrAccum 9882,449718
  sqlite3 *db;db9883,449736
  char *zBase;zBase9884,449811
  char *zText;zText9885,449877
  int  nChar;9886,449934
  int  nAlloc;9887,449991
  int  mxAlloc;9888,450055
  u8   mallocFailed;9889,450114
  u8   useMalloc;9890,450187
  u8   tooBig;9891,450259
  sqlite3 *db;db9899,450493
  int iDb;9900,450552
  char **pzErrMsg;pzErrMsg9901,450631
  int rc;9902,450685
} InitData;9903,450737
struct Sqlite3Config 9910,450889
  int bMemstat;9911,450912
  int bCoreMutex;9912,450983
  int bFullMutex;9913,451054
  int mxStrlen;9914,451125
  int szLookaside;9915,451189
  int nLookaside;9916,451261
  sqlite3_mem_methods m;9917,451334
  sqlite3_mutex_methods mutex;9918,451414
  sqlite3_pcache_methods pcache;9919,451482
  void *pHeap;pHeap9920,451555
  int nHeap;9921,451616
  int mnReq,9922,451674
  int mnReq, mxReq;9922,451674
  void *pScratch;pScratch9923,451748
  int szScratch;9924,451805
  int nScratch;9925,451875
  void *pPage;pPage9926,451943
  int szPage;9927,452003
  int nPage;9928,452074
  int mxParserStack;9929,452143
  int sharedCacheEnabled;9930,452219
  int isInit;9933,452410
  int inProgress;9934,452491
  int isMutexInit;9935,452571
  int isMallocInit;9936,452648
  int isPCacheInit;9937,452723
  sqlite3_mutex *pInitMutex;pInitMutex9938,452798
  int nRefInitMutex;9939,452875
  void (*xLog)xLog9940,452947
  void *pLogArg;pLogArg9941,453013
struct Walker 9947,453147
  int (*xExprCallback)xExprCallback9948,453163
  int (*xSelectCallback)xSelectCallback9949,453238
  Parse *pParse;pParse9950,453309
    NameContext *pNC;pNC9952,453450
    int i;9953,453518
  } u;9954,453585
#define WRC_Continue 9968,453996
#define WRC_Prune 9969,454058
#define WRC_Abort 9970,454136
#define SQLITE_SKIP_UTF8(9976,454333
#define SQLITE_CORRUPT_BKPT 9992,455015
#define SQLITE_MISUSE_BKPT 9993,455073
#define SQLITE_CANTOPEN_BKPT 9994,455129
# define SQLITE_ENABLE_FTS310003,455470
# define sqlite3Toupper(10021,456006
# define sqlite3Isspace(10022,456084
# define sqlite3Isalnum(10023,456156
# define sqlite3Isalpha(10024,456228
# define sqlite3Isdigit(10025,456300
# define sqlite3Isxdigit(10026,456372
# define sqlite3Tolower(10027,456444
# define sqlite3Toupper(10029,456521
# define sqlite3Isspace(10030,456578
# define sqlite3Isalnum(10031,456635
# define sqlite3Isalpha(10032,456692
# define sqlite3Isdigit(10033,456749
# define sqlite3Isxdigit(10034,456806
# define sqlite3Tolower(10035,456864
#define sqlite3StrNICmp 10044,457138
# define sqlite3StackAllocRaw(10077,458686
# define sqlite3StackAllocZero(10078,458733
# define sqlite3StackFree(10079,458794
# define sqlite3StackAllocRaw(10081,458838
# define sqlite3StackAllocZero(10082,458899
# define sqlite3StackFree(10083,458961
# define sqlite3IsNaN(10108,459710
# define sqlite3ViewGetColumnNames(10183,463646
# define sqlite3AutoincrementBegin(10192,463976
# define sqlite3AutoincrementEnd(10193,464014
# define sqlite3ParseToplevel(10324,472358
# define sqlite3TriggersExist(10326,472437
# define sqlite3DeleteTrigger(10327,472480
# define sqlite3DropTriggerPtr(10328,472515
# define sqlite3UnlinkAndDeleteTrigger(10329,472551
# define sqlite3CodeRowTrigger(10330,472597
# define sqlite3CodeRowTriggerDirect(10331,472647
# define sqlite3TriggerList(10332,472697
# define sqlite3ParseToplevel(10333,472733
# define sqlite3TriggerColmask(10334,472768
# define sqlite3AuthRead(10347,473459
# define sqlite3AuthCheck(10348,473493
# define sqlite3AuthContextPush(10349,473543
# define sqlite3AuthContextPop(10350,473582
#define getVarint32(10399,475915
#define putVarint32(10400,476024
#define getVarint 10401,476140
#define putVarint 10402,476178
SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[sqlite3OpcodeProperty10437,478118
SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[sqlite3UpperToLower10438,478178
SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[sqlite3CtypeMap10439,478236
SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;10440,478290
SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;10441,478352
SQLITE_PRIVATE int sqlite3PendingByte;10442,478414
# define sqlite3CloseExtensions(10505,481759
  #define sqlite3TableLock(10511,481918
#  define sqlite3VtabClear(10519,482076
#  define sqlite3VtabSync(10520,482106
#  define sqlite3VtabRollback(10521,482147
#  define sqlite3VtabCommit(10522,482180
#  define sqlite3VtabInSync(10523,482211
#  define sqlite3VtabLock(10524,482245
#  define sqlite3VtabUnlock(10525,482275
#  define sqlite3VtabUnlockList(10526,482306
#  define sqlite3VtabInSync(10535,482725
  #define sqlite3FkActions(10571,484895
  #define sqlite3FkCheck(10572,484931
  #define sqlite3FkDropTable(10573,484965
  #define sqlite3FkOldmask(10574,485001
  #define sqlite3FkRequired(10575,485040
  #define sqlite3FkDelete(10580,485171
#define SQLITE_FAULTINJECTOR_MALLOC 10587,485283
#define SQLITE_FAULTINJECTOR_COUNT 10588,485325
  #define sqlite3BeginBenignMalloc(10599,485677
  #define sqlite3EndBenignMalloc(10600,485714
#define IN_INDEX_ROWID 10603,485757
#define IN_INDEX_EPH 10604,485792
#define IN_INDEX_INDEX 10605,485827
  #define sqlite3JournalSize(10613,486176
  #define sqlite3ExprSetHeight(10625,486618
  #define sqlite3SelectExprHeight(10626,486654
  #define sqlite3ExprCheckHeight(10627,486693
  #define sqlite3ConnectionBlocked(10638,487067
  #define sqlite3ConnectionUnlocked(10639,487107
  #define sqlite3ConnectionClosed(10640,487146
# define IOTRACE(10653,487471
# define IOTRACE(10657,487648
# define sqlite3VdbeIOTraceSql(10658,487668
SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[sqlite3UpperToLower10687,488624
SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[sqlite3CtypeMap10756,492404
SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config 10801,495006
SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;10840,496601
SQLITE_PRIVATE int sqlite3PendingByte 10860,497541
SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[sqlite3OpcodeProperty10868,497811
static const char * const azCompileOpt[azCompileOpt10899,498868
#define CTIMEOPT_VAL_(10903,499040
#define CTIMEOPT_VAL(10904,499072
SQLITE_API int sqlite3_compileoption_used(11230,505586
SQLITE_API const char *sqlite3_compileoption_get(sqlite3_compileoption_get11248,506200
typedef struct sqlite3StatType sqlite3StatType;11278,507075
static SQLITE_WSD struct sqlite3StatType 11279,507123
  int nowValue[nowValue11280,507166
  int mxValue[mxValue11281,507213
} sqlite3Stat 11282,507260
# define wsdStatInit 11292,507654
# define wsdStat 11293,507734
# define wsdStatInit11295,507762
# define wsdStat 11296,507783
SQLITE_PRIVATE int sqlite3StatusValue(11302,507877
SQLITE_PRIVATE void sqlite3StatusAdd(11312,508133
SQLITE_PRIVATE void sqlite3StatusSet(11324,508429
SQLITE_API int sqlite3_status(11340,508902
SQLITE_API int sqlite3_db_status(11356,509321
#define HAVE_LOCALTIME_S 11444,512501
typedef struct DateTime DateTime;11450,512593
struct DateTime 11451,512627
  sqlite3_int64 iJD;11452,512645
  int Y,11453,512709
  int Y, M,11453,512709
  int Y, M, D;11453,512709
  int h,11454,512757
  int h, m;11454,512757
  int tz;11455,512801
  double s;11456,512855
  char validYMD;11457,512890
  char validHMS;11458,512945
  char validJD;11459,513000
  char validTZ;11460,513052
static int getDigits(11477,513607
#define getValue 11517,514388
static int parseTimezone(11535,514782
static int parseHhMmSs(11570,515578
static void computeJD(11612,516489
static int parseYyyyMmDd(11658,517448
static void setDateTimeToCurrent(11693,518108
static int parseDateOrTime(11717,518903
static void computeYMD(11743,519541
static void computeHMS(11769,520151
static void computeYMD_HMS(11787,520464
static void clearYMD_HMS_TZ(11795,520584
static sqlite3_int64 localtimeOffset(11807,520850
static int parseModifier(11893,522672
static int isDate(12094,528090
static void juliandayFunc(12135,529022
static void datetimeFunc(12152,529335
static void timeFunc(12172,529798
static void dateFunc(12191,530202
static void strftimeFunc(12224,530999
static void ctimeFunc(12360,534631
static void cdateFunc(12374,534880
static void ctimestampFunc(12388,535138
static void currentTimeFunc(12410,535897
SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(12459,537048
#define _SQLITE_OS_C_ 12502,538781
#undef _SQLITE_OS_C_12503,538805
  #define DO_OS_MALLOC_TEST(12523,539430
  #define DO_OS_MALLOC_TEST(12529,539727
SQLITE_PRIVATE int sqlite3OsClose(12538,540010
SQLITE_PRIVATE int sqlite3OsRead(12546,540188
SQLITE_PRIVATE int sqlite3OsWrite(12550,540353
SQLITE_PRIVATE int sqlite3OsTruncate(12554,540526
SQLITE_PRIVATE int sqlite3OsSync(12557,540638
SQLITE_PRIVATE int sqlite3OsFileSize(12561,540769
SQLITE_PRIVATE int sqlite3OsLock(12565,540909
SQLITE_PRIVATE int sqlite3OsUnlock(12569,541046
SQLITE_PRIVATE int sqlite3OsCheckReservedLock(12572,541162
SQLITE_PRIVATE int sqlite3OsFileControl(12576,541324
SQLITE_PRIVATE int sqlite3OsSectorSize(12579,541456
SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(12583,541652
SQLITE_PRIVATE int sqlite3OsOpen(12591,541863
SQLITE_PRIVATE int sqlite3OsDelete(12608,542405
SQLITE_PRIVATE int sqlite3OsAccess(12611,542540
SQLITE_PRIVATE int sqlite3OsFullPathname(12620,542731
SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3OsDlOpen12630,542973
SQLITE_PRIVATE void sqlite3OsDlError(12633,543088
SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3OsDlSym12636,543213
SQLITE_PRIVATE void sqlite3OsDlClose(12639,543352
SQLITE_PRIVATE int sqlite3OsRandomness(12643,543499
SQLITE_PRIVATE int sqlite3OsSleep(12646,543636
SQLITE_PRIVATE int sqlite3OsCurrentTime(12649,543741
SQLITE_PRIVATE int sqlite3OsOpenMalloc(12653,543867
SQLITE_PRIVATE int sqlite3OsCloseFree(12673,544303
SQLITE_PRIVATE int sqlite3OsInit(12687,544750
static sqlite3_vfs * SQLITE_WSD vfsList 12697,544963
#define vfsList 12698,545008
SQLITE_API sqlite3_vfs *sqlite3_vfs_find(sqlite3_vfs_find12704,545153
static void vfsUnlink(12728,545710
SQLITE_API int sqlite3_vfs_register(12750,546267
SQLITE_API int sqlite3_vfs_unregister(12774,546849
typedef struct BenignMallocHooks BenignMallocHooks;12818,548410
static SQLITE_WSD struct BenignMallocHooks 12819,548462
  void (*xBenignBegin)xBenignBegin12820,548507
  void (*xBenignEnd)xBenignEnd12821,548537
} sqlite3Hooks 12822,548565
# define wsdHooksInit 12831,548964
# define wsdHooks 12833,549053
# define wsdHooksInit12835,549082
# define wsdHooks 12836,549104
SQLITE_PRIVATE void sqlite3BenignMallocHooks(12844,549266
SQLITE_PRIVATE void sqlite3BeginBenignMalloc(12858,549688
SQLITE_PRIVATE void sqlite3EndBenignMalloc(12864,549822
static void *sqlite3MemMalloc(sqlite3MemMalloc12904,551104
static void sqlite3MemFree(12905,551158
static void *sqlite3MemRealloc(sqlite3MemRealloc12906,551210
static int sqlite3MemSize(12907,551279
static int sqlite3MemRoundup(12908,551332
static int sqlite3MemInit(12909,551381
static void sqlite3MemShutdown(12910,551443
SQLITE_PRIVATE void sqlite3MemSetDefault(12918,551716
static void *sqlite3MemMalloc(sqlite3MemMalloc12971,553385
static void sqlite3MemFree(12994,553989
static int sqlite3MemSize(13005,554206
static void *sqlite3MemRealloc(sqlite3MemRealloc13023,554764
static int sqlite3MemRoundup(13044,555259
static int sqlite3MemInit(13051,555352
static void sqlite3MemShutdown(13059,555481
SQLITE_PRIVATE void sqlite3MemSetDefault(13070,555785
# define backtrace(13123,557454
# define backtrace_symbols_fd(13124,557480
struct MemBlockHdr 13140,558109
  i64 iSize;13141,558130
  struct MemBlockHdr *pNext,pNext13142,558198
  struct MemBlockHdr *pNext, *pPrev;pPrev13142,558198
  char nBacktrace;13143,558276
  char nBacktraceSlots;13144,558355
  short nTitle;13145,558425
  int iForeGuard;13146,558499
#define FOREGUARD 13152,558590
#define REARGUARD 13153,558619
#define NCSIZE 13158,558701
  sqlite3_mutex *mutex;mutex13171,559077
  struct MemBlockHdr *pFirst;pFirst13176,559179
  struct MemBlockHdr *pLast;pLast13177,559209
  int nBacktrace;13182,559318
  void (*xBacktrace)xBacktrace13183,559336
  int nTitle;13188,559437
  char zTitle[zTitle13189,559516
  int disallow;13195,559674
  int nAlloc[nAlloc13203,559957
  int nCurrent[nCurrent13204,560018
  int mxCurrent[mxCurrent13205,560081
} mem;13207,560143
static void adjustStats(13213,560192
static struct MemBlockHdr *sqlite3MemsysGetHeader(sqlite3MemsysGetHeader13236,560726
static int sqlite3MemSize(13260,561392
static int sqlite3MemInit(13272,561600
static void sqlite3MemShutdown(13286,562048
static int sqlite3MemRoundup(13294,562212
static void randomFill(13303,562486
static void *sqlite3MemMalloc(sqlite3MemMalloc13326,562952
static void sqlite3MemFree(13384,564442
static void *sqlite3MemRealloc(sqlite3MemRealloc13426,565707
SQLITE_PRIVATE void sqlite3MemSetDefault(13446,566305
SQLITE_PRIVATE void sqlite3MemdebugBacktrace(13465,566806
SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(13472,566980
SQLITE_PRIVATE void sqlite3MemdebugSettitle(13479,567165
SQLITE_PRIVATE void sqlite3MemdebugSync(13489,567485
SQLITE_PRIVATE void sqlite3MemdebugDump(13502,567840
SQLITE_PRIVATE int sqlite3MemdebugMallocCount(13544,569092
#define MX_SMALL 13596,570824
#define N_HASH 13602,570885
typedef struct Mem3Block Mem3Block;13636,572505
struct Mem3Block 13637,572541
      u32 prevSize;13640,572583
      u32 size4x;13641,572656
    } hdr;13642,572735
      u32 next;13644,572759
      u32 prev;13645,572828
    } list;13646,572901
  } u;13647,572913
static SQLITE_WSD struct Mem3Global 13656,573185
  u32 nPool;13661,573351
  Mem3Block *aPool;aPool13662,573364
  int alarmBusy;13667,573453
  sqlite3_mutex *mutex;mutex13672,573548
  u32 mnMaster;13677,573642
  u32 iMaster;13685,573944
  u32 szMaster;13686,573959
  u32 aiSmall[aiSmall13693,574127
  u32 aiHash[aiHash13694,574202
} mem3 13695,574269
#define mem3 13697,574293
static void memsys3UnlinkFromList(13703,574458
static void memsys3Unlink(13723,574940
static void memsys3LinkIntoList(13743,575478
static void memsys3Link(13757,575842
static void memsys3Enter(13778,576467
static void memsys3Leave(13784,576659
static void memsys3OutOfMemory(13791,576800
static void *memsys3Checkout(memsys3Checkout13808,577241
static void *memsys3FromMaster(memsys3FromMaster13826,577857
static void memsys3Merge(13871,579636
static void *memsys3MallocUnsafe(memsys3MallocUnsafe13910,580714
void memsys3FreeUnsafe(13992,582906
static int memsys3Size(14033,584495
static int memsys3Roundup(14044,584758
static void *memsys3Malloc(memsys3Malloc14055,584902
void memsys3Free(14067,585152
void *memsys3Realloc(memsys3Realloc14077,585330
static int memsys3Init(14108,585886
static void memsys3Shutdown(14133,586579
SQLITE_PRIVATE void sqlite3Memsys3Dump(14145,586787
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(sqlite3MemGetMemsys314229,589329
typedef struct Mem5Link Mem5Link;14312,592401
struct Mem5Link 14313,592435
  int next;14314,592453
  int prev;14315,592502
#define LOGMAX 14323,592753
#define CTRL_LOGSIZE 14328,592819
#define CTRL_FREE 14329,592879
static SQLITE_WSD struct Mem5Global 14337,593201
  int szAtom;14341,593286
  int nBlock;14342,593349
  u8 *zPool;zPool14343,593413
  sqlite3_mutex *mutex;mutex14348,593549
  u64 nAlloc;14353,593612
  u64 totalAlloc;14354,593672
  u64 totalExcess;14355,593751
  u32 currentOut;14356,593808
  u32 currentCount;14357,593887
  u32 maxOut;14358,593952
  u32 maxCount;14359,594013
  u32 maxRequest;14360,594076
  int aiFreelist[aiFreelist14367,594323
  u8 *aCtrl;aCtrl14373,594469
} mem5 14375,594483
#define mem5 14380,594572
#define MEM5LINK(14386,594743
static void memsys5Unlink(14392,594939
static void memsys5Link(14414,595435
static void memsys5Enter(14435,596036
static void memsys5Leave(14438,596105
static int memsys5Size(14447,596359
static int memsys5UnlinkFirst(14461,596690
static void *memsys5MallocUnsafe(memsys5MallocUnsafe14486,597336
static void memsys5FreeUnsafe(14548,599293
static void *memsys5Malloc(memsys5Malloc14604,600936
static void memsys5Free(14620,601242
static void *memsys5Realloc(memsys5Realloc14639,601838
static int memsys5Roundup(14671,602594
static int memsys5Log(14688,603020
static int memsys5Init(14700,603305
static void memsys5Shutdown(14757,604933
SQLITE_PRIVATE void sqlite3Memsys5Dump(14768,605158
SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(sqlite3MemGetMemsys514811,606535
static SQLITE_WSD int mutexIsInit 14851,607814
SQLITE_PRIVATE int sqlite3MutexInit(14859,607945
SQLITE_PRIVATE int sqlite3MutexEnd(14890,609006
SQLITE_API sqlite3_mutex *sqlite3_mutex_alloc(sqlite3_mutex_alloc14906,609321
SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(sqlite3MutexAlloc14913,609506
SQLITE_API void sqlite3_mutex_free(14924,609746
SQLITE_API void sqlite3_mutex_enter(14934,609971
SQLITE_API int sqlite3_mutex_try(14944,610247
SQLITE_API void sqlite3_mutex_leave(14958,610653
SQLITE_API int sqlite3_mutex_held(14969,610909
SQLITE_API int sqlite3_mutex_notheld(14972,611022
static int noopMutexHeld(15016,612474
static int noopMutexNotheld(15017,612530
static int noopMutexInit(15018,612589
static int noopMutexEnd(15019,612641
static sqlite3_mutex *noopMutexAlloc(noopMutexAlloc15020,612692
static void noopMutexFree(15021,612766
static void noopMutexEnter(15022,612821
static int noopMutexTry(15023,612877
static void noopMutexLeave(15024,612940
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex15026,612997
struct sqlite3_mutex 15054,613613
  int id;15055,613636
  int cnt;15056,613671
static int debugMutexHeld(15063,613860
static int debugMutexNotheld(15066,613934
static int debugMutexInit(15073,614071
static int debugMutexEnd(15074,614124
static sqlite3_mutex *debugMutexAlloc(debugMutexAlloc15081,614346
static void debugMutexFree(15108,614931
static void debugMutexEnter(15125,615714
static int debugMutexTry(15129,615842
static void debugMutexLeave(15141,616228
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex15147,616388
struct sqlite3_mutex 15196,617751
  HMTX mutex;15197,617774
  int  id;15198,617827
  int  nRef;15199,617864
  TID  owner;15200,617911
#define OS2_MUTEX_INITIALIZER 15203,617967
static int os2MutexInit(15208,618066
static int os2MutexEnd(15209,618117
static sqlite3_mutex *os2MutexAlloc(os2MutexAlloc15250,620047
static void os2MutexFree(15318,621968
static int os2MutexHeld(15331,622326
static int os2MutexNotheld(15344,622629
static void os2MutexEnter(15370,623563
static int os2MutexTry(15381,623879
static void os2MutexLeave(15406,624549
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex15419,624869
struct sqlite3_mutex 15469,626168
  pthread_mutex_t mutex;15470,626191
  int id;15471,626253
  int nRef;15472,626299
  pthread_t owner;15473,626354
  int trace;15475,626442
#define SQLITE3_MUTEX_INITIALIZER 15479,626529
#define SQLITE3_MUTEX_INITIALIZER 15481,626622
static int pthreadMutexHeld(15501,627580
static int pthreadMutexNotheld(15504,627695
static int pthreadMutexInit(15512,627880
static int pthreadMutexEnd(15513,627935
static sqlite3_mutex *pthreadMutexAlloc(pthreadMutexAlloc15557,629916
static void pthreadMutexFree(15612,631420
static void pthreadMutexEnter(15630,632242
static int pthreadMutexTry(15669,633523
static void pthreadMutexLeave(15724,635237
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex15744,635664
struct sqlite3_mutex 15792,636885
  CRITICAL_SECTION mutex;15793,636908
  int id;15794,636970
  int nRef;15795,637016
  DWORD owner;15796,637072
  int trace;15798,637153
#define SQLITE_W32_MUTEX_INITIALIZER 15801,637220
#define SQLITE3_MUTEX_INITIALIZER 15803,637283
#define SQLITE3_MUTEX_INITIALIZER 15805,637376
# define mutexIsNT(15827,638305
  static int mutexIsNT(15829,638337
static int winMutexHeld(15847,638801
static int winMutexNotheld2(15850,638901
static int winMutexNotheld(15853,638999
static sqlite3_mutex winMutex_staticMutexes[winMutex_staticMutexes15863,639186
static int winMutex_isInit 15871,639413
static long winMutex_lock 15877,639636
static int winMutexInit(15879,639668
static int winMutexEnd(15896,640150
static sqlite3_mutex *winMutexAlloc(winMutexAlloc15953,642506
static void winMutexFree(15984,643193
static void winMutexEnter(16003,644026
static int winMutexTry(16015,644369
static void winMutexLeave(16055,645594
SQLITE_PRIVATE sqlite3_mutex_methods *sqlite3DefaultMutex(sqlite3DefaultMutex16071,645976
static void softHeapLimitEnforcer(16115,647085
SQLITE_API void sqlite3_soft_heap_limit(16128,647375
SQLITE_API int sqlite3_release_memory(16155,648020
static SQLITE_WSD struct Mem0Global 16169,648310
  u32 nScratchFree;16171,648411
  u32 nPageFree;16172,648431
  sqlite3_mutex *mutex;mutex16174,648449
  sqlite3_int64 alarmThreshold;16182,648740
  void (*alarmCallback)alarmCallback16183,648772
  void *alarmArg;alarmArg16184,648823
  u32 *aScratchFree;aScratchFree16191,649010
  u32 *aPageFree;aPageFree16192,649031
} mem0 16193,649049
#define mem0 16195,649087
SQLITE_PRIVATE int sqlite3MallocInit(16200,649186
SQLITE_PRIVATE void sqlite3MallocEnd(16242,650800
SQLITE_API sqlite3_int64 sqlite3_memory_used(16252,651055
SQLITE_API sqlite3_int64 sqlite3_memory_highwater(16265,651448
SQLITE_PRIVATE int sqlite3MemoryAlarm(16276,651742
SQLITE_API int sqlite3_memory_alarm(16294,652203
static void sqlite3MallocAlarm(16306,652438
static int mallocWithAlarm(16326,653010
SQLITE_PRIVATE void *sqlite3Malloc(sqlite3Malloc16355,653840
SQLITE_API void *sqlite3_malloc(sqlite3_malloc16379,654689
static int scratchAllocOut 16393,655141
SQLITE_PRIVATE void *sqlite3ScratchMalloc(sqlite3ScratchMalloc16405,655532
SQLITE_PRIVATE void sqlite3ScratchFree(16456,657051
static int isLookaside(16499,658531
#define isLookaside(16503,658654
SQLITE_PRIVATE int sqlite3MallocSize(16510,658802
SQLITE_PRIVATE int sqlite3DbMallocSize(16513,658892
SQLITE_API void sqlite3_free(16525,659185
SQLITE_PRIVATE void sqlite3DbFree(16541,659605
SQLITE_PRIVATE void *sqlite3Realloc(sqlite3Realloc16556,659979
SQLITE_API void *sqlite3_realloc(sqlite3_realloc16601,661290
SQLITE_PRIVATE void *sqlite3MallocZero(sqlite3MallocZero16612,661492
SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3DbMallocZero16624,661738
SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3DbMallocRaw16650,662642
SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3DbRealloc16685,663489
SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3DbReallocOrFree16716,664223
SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3DbStrDup16732,664742
SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3DbStrNDup16746,665027
SQLITE_PRIVATE void sqlite3SetString(16765,665471
SQLITE_PRIVATE int sqlite3ApiExit(16790,666253
#define etRADIX 16863,669311
#define etFLOAT 16864,669382
#define etEXP 16865,669432
#define etGENERIC 16866,669496
#define etSIZE 16867,669577
#define etSTRING 16868,669656
#define etDYNSTRING 16869,669698
#define etPERCENT 16870,669762
#define etCHARX 16871,669811
#define etSQLESCAPE 16873,669918
#define etSQLESCAPE2 16874,669979
#define etTOKEN 16876,670121
#define etSRCLIST 16877,670182
#define etPOINTER 16878,670235
#define etSQLESCAPE3 16879,670283
#define etORDINAL 16880,670345
#define etINVALID 16882,670421
typedef unsigned char etByte;16888,670535
typedef struct et_info 16894,670689
  char fmttype;16895,670758
  etByte base;16896,670820
  etByte flags;16897,670883
  etByte type;16898,670953
  etByte charset;16899,671006
  etByte prefix;16900,671082
} et_info;16901,671158
#define FLAG_SIGNED 16906,671212
#define FLAG_INTERN 16907,671284
#define FLAG_STRING 16908,671347
static const char aDigits[aDigits16915,671531
static const char aPrefix[aPrefix16916,671597
static const et_info fmtinfo[fmtinfo16917,671640
static char et_getdigit(16966,673296
static void appendSpace(16981,673626
#   define SQLITE_PRINT_BUF_SIZE 16998,674117
#   define SQLITE_PRINT_BUF_SIZE 17000,674160
#define etBUFSIZE 17003,674212
SQLITE_PRIVATE void sqlite3VXPrintf(17032,675334
SQLITE_PRIVATE void sqlite3StrAccumAppend(17548,692651
SQLITE_PRIVATE char *sqlite3StrAccumFinish(sqlite3StrAccumFinish17600,693857
SQLITE_PRIVATE void sqlite3StrAccumReset(17618,694280
SQLITE_PRIVATE void sqlite3StrAccumInit(17628,694463
SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3VMPrintf17643,694807
SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3MPrintf17663,695345
SQLITE_PRIVATE char *sqlite3MAppendf(sqlite3MAppendf17680,695808
SQLITE_API char *sqlite3_vmprintf(sqlite3_vmprintf17694,696149
SQLITE_API char *sqlite3_mprintf(sqlite3_mprintf17711,696625
SQLITE_API char *sqlite3_snprintf(sqlite3_snprintf17729,697121
static void renderLogMsg(17755,697850
SQLITE_API void sqlite3_log(17769,698368
SQLITE_PRIVATE void sqlite3DebugPrintf(17784,698849
SQLITE_PRIVATE void sqlite3XPrintf(17803,699291
static SQLITE_WSD struct sqlite3PrngType 17835,700355
  unsigned char isInit;17836,700398
  unsigned char i,17837,700457
  unsigned char i, j;17837,700457
  unsigned char s[s17838,700512
} sqlite3Prng;17839,700567
static u8 randomByte(17857,701379
# define wsdPrng 17869,701888
# define wsdPrng 17871,701916
SQLITE_API void sqlite3_randomness(17916,703089
static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;17938,703735
SQLITE_PRIVATE void sqlite3PrngSaveState(17939,703794
SQLITE_PRIVATE void sqlite3PrngRestoreState(17946,703988
SQLITE_PRIVATE void sqlite3PrngResetState(17953,704185
#define _VDBEINT_H_18015,706575
typedef struct VdbeOp Op;18022,706759
typedef unsigned char Bool;18027,706810
struct VdbeCursor 18044,707522
  BtCursor *pCursor;pCursor18045,707542
  int iDb;18046,707608
  i64 lastRowid;18047,707684
  Bool zeroed;18048,707758
  Bool rowidIsValid;18049,707827
  Bool atFirst;18050,707884
  Bool useRandomRowid;18051,707946
  Bool nullRow;18052,708018
  Bool deferredMoveto;18053,708087
  Bool isTable;18054,708158
  Bool isIndex;18055,708227
  i64 movetoTarget;18056,708305
  Btree *pBt;pBt18057,708381
  int pseudoTableReg;18058,708449
  KeyInfo *pKeyInfo;pKeyInfo18059,708517
  int nField;18060,708593
  i64 seqCount;18061,708654
  sqlite3_vtab_cursor *pVtabCursor;pVtabCursor18062,708701
  const sqlite3_module *pModule;pModule18063,708775
  int seekResult;18067,708961
  u32 cacheStatus;18078,709392
  int payloadSize;18079,709467
  u32 *aType;aType18080,709533
  u32 *aOffset;aOffset18081,709605
  u8 *aRow;aRow18082,709684
typedef struct VdbeCursor VdbeCursor;18084,709762
typedef struct VdbeFrame VdbeFrame;18099,710434
struct VdbeFrame 18100,710470
  Vdbe *v;v18101,710489
  int pc;18102,710546
  Op *aOp;aOp18103,710594
  int nOp;18104,710647
  Mem *aMem;aMem18105,710697
  int nMem;18106,710751
  VdbeCursor **apCsr;apCsr18107,710809
  u16 nCursor;18108,710865
  void *token;token18109,710924
  int nChildMem;18110,710981
  int nChildCsr;18111,711052
  i64 lastRowid;18112,711118
  int nChange;18113,711188
  VdbeFrame *pParent;pParent18114,711258
#define VdbeFrameMem(18117,711315
#define CACHE_STALE 18122,711470
struct Mem 18135,711977
    i64 i;18137,712000
    int nZero;18138,712045
    FuncDef *pDef;pDef18139,712114
    RowSet *pRowSet;pRowSet18140,712174
    VdbeFrame *pFrame;pFrame18141,712237
  } u;18142,712294
  double r;18143,712301
  sqlite3 *db;db18144,712340
  char *z;z18145,712403
  int n;18146,712452
  u16 flags;18147,712533
  u8  type;18148,712614
  u8  enc;18149,712695
  void (*xDel)xDel18150,712767
  char *zMalloc;zMalloc18151,712846
#define MEM_Null 18169,713605
#define MEM_Str 18170,713656
#define MEM_Int 18171,713711
#define MEM_Real 18172,713768
#define MEM_Blob 18173,713828
#define MEM_RowSet 18174,713881
#define MEM_Frame 18175,713943
#define MEM_TypeMask 18176,714008
#define MEM_Term 18183,714315
#define MEM_Dyn 18184,714381
#define MEM_Static 18185,714453
#define MEM_Ephem 18186,714522
#define MEM_Agg 18187,714595
#define MEM_Zero 18188,714672
  #undef MEM_Zero18191,714782
  #define MEM_Zero 18192,714800
#define MemSetTypeFlag(18199,714909
struct VdbeFunc 18212,715522
  FuncDef *pFunc;pFunc18213,715540
  int nAux;18214,715609
  struct AuxData 18215,715687
    void *pAux;pAux18216,715706
    void (*xDelete)xDelete18217,715777
  } apAux[apAux18218,715845
struct sqlite3_context 18234,716472
  FuncDef *pFunc;pFunc18235,716497
  VdbeFunc *pVdbeFunc;pVdbeFunc18236,716575
  Mem s;18237,716632
  Mem *pMem;pMem18238,716694
  int isError;18239,716768
  CollSeq *pColl;pColl18240,716835
typedef struct Set Set;18249,717071
struct Set 18250,717095
  Hash hash;18251,717108
  HashElem *prev;prev18252,717166
struct Vdbe 18270,717944
  sqlite3 *db;db18271,717958
  Vdbe *pPrev,pPrev18272,718039
  Vdbe *pPrev,*pNext;pNext18272,718039
  int nOp;18273,718114
  int nOpAlloc;18274,718184
  Op *aOp;aOp18275,718252
  int nLabel;18276,718328
  int nLabelAlloc;18277,718382
  int *aLabel;aLabel18278,718452
  Mem **apArg;apArg18279,718509
  Mem *aColName;aColName18280,718588
  Mem *pResultSet;pResultSet18281,718643
  u16 nResColumn;18282,718706
  u16 nCursor;18283,718785
  VdbeCursor **apCsr;apCsr18284,718844
  u8 errorAction;18285,718923
  u8 okVar;18286,718997
  ynVar nVar;18287,719066
  Mem *aVar;aVar18288,719126
  char **azVar;azVar18289,719193
  u32 magic;18290,719243
  int nMem;18291,719308
  Mem *aMem;aMem18292,719387
  u32 cacheCtr;18293,719440
  int pc;18294,719512
  int rc;18295,719564
  char *zErrMsg;zErrMsg18296,719612
  u8 explain;18297,719671
  u8 changeCntOn;18298,719742
  u8 expired;18299,719808
  u8 runOnlyOnce;18300,719878
  u8 minWriteFileFormat;18301,719940
  u8 inVtabMethod;18302,720020
  u8 usesStmtJournal;18303,720071
  u8 readOnly;18304,720136
  u8 isPrepareV2;18305,720198
  int nChange;18306,720265
  int btreeMask;18307,720340
  i64 startTime;18308,720412
  BtreeMutexArray aMutex;18309,720489
  int aCounter[aCounter18310,720567
  char *zSql;zSql18311,720638
  void *pFree;pFree18312,720716
  i64 nFkConstraint;18313,720781
  i64 nStmtDefCons;18314,720851
  int iStatement;18315,720928
  FILE *trace;trace18317,721027
  VdbeFrame *pFrame;pFrame18319,721109
  int nFrame;18320,721154
  u32 expmask;18321,721218
#define VDBE_MAGIC_INIT 18327,721348
#define VDBE_MAGIC_RUN 18328,721420
#define VDBE_MAGIC_HALT 18329,721493
#define VDBE_MAGIC_DEAD 18330,721570
# define sqlite3VdbeMemSetDouble 18363,723200
# define sqlite3VdbeCheckFk(18392,724576
# define sqlite3VdbeMutexArrayEnter(18398,724715
  #define sqlite3VdbeMemExpandBlob(18411,725110
SQLITE_PRIVATE const int sqlite3one 18424,725496
static const unsigned char sqlite3Utf8Trans1[sqlite3Utf8Trans118431,725671
#define WRITE_UTF8(18443,726127
#define WRITE_UTF16LE(18463,727156
#define WRITE_UTF16BE(18475,727859
#define READ_UTF16LE(18487,728562
#define READ_UTF16BE(18497,729141
#define READ_UTF8(18534,730841
SQLITE_PRIVATE int sqlite3Utf8Read(18545,731455
SQLITE_PRIVATE int sqlite3VdbeMemTranslate(18583,732497
SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(18727,736759
SQLITE_PRIVATE int sqlite3Utf8CharLen(18765,737748
SQLITE_PRIVATE int sqlite3Utf8To8(18795,738529
SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3Utf16to818819,739105
SQLITE_PRIVATE char *sqlite3Utf8to16(sqlite3Utf8to1618847,740074
SQLITE_PRIVATE int sqlite3Utf16ByteLen(18867,740620
SQLITE_PRIVATE void sqlite3UtfSelfTest(18892,741219
SQLITE_PRIVATE void sqlite3Coverage(18968,743120
SQLITE_PRIVATE int sqlite3IsNaN(18981,743472
SQLITE_PRIVATE int sqlite3Strlen30(19029,745299
SQLITE_PRIVATE void sqlite3Error(19057,746207
SQLITE_PRIVATE void sqlite3ErrorMsg(19090,747413
SQLITE_PRIVATE int sqlite3Dequote(19124,748456
#define UpperToLower 19153,749061
SQLITE_PRIVATE int sqlite3StrICmp(19159,749229
SQLITE_API int sqlite3_strnicmp(19166,749512
SQLITE_PRIVATE int sqlite3IsNumber(19187,750367
SQLITE_PRIVATE int sqlite3AtoF(19227,751557
static int compare2pow63(19368,755304
SQLITE_PRIVATE int sqlite3Atoi64(19391,755926
SQLITE_PRIVATE int sqlite3FitsIn64Bits(19447,757668
SQLITE_PRIVATE int sqlite3GetInt32(19481,758648
SQLITE_PRIVATE int sqlite3PutVarint(19545,760132
SQLITE_PRIVATE int sqlite3PutVarint32(19578,760968
#define SLOT_2_0 19602,761563
#define SLOT_4_2_0 19603,761595
SQLITE_PRIVATE u8 sqlite3GetVarint(19610,761770
SQLITE_PRIVATE u8 sqlite3GetVarint32(19780,764979
SQLITE_PRIVATE int sqlite3VarintLen(19903,767526
SQLITE_PRIVATE u32 sqlite3Get4byte(19916,767721
SQLITE_PRIVATE void sqlite3Put4byte(19919,767825
static u8 hexToInt(19934,768188
SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3HexToBlob19953,768776
static void logBadConnection(19974,769363
SQLITE_PRIVATE int sqlite3SafetyCheckOk(19995,770233
SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(20012,770592
SQLITE_PRIVATE void sqlite3HashInit(20048,771693
SQLITE_PRIVATE void sqlite3HashClear(20060,771997
static unsigned int strHash(20080,772389
static void insertElement(20094,772710
static int rehash(20128,773687
static HashElem *findElementGivenHash(findElementGivenHash20164,774975
static void removeElementGivenHash(20193,775849
SQLITE_PRIVATE void *sqlite3HashFind(sqlite3HashFind20228,776730
SQLITE_PRIVATE void *sqlite3HashInsert(sqlite3HashInsert20258,777730
SQLITE_PRIVATE const char *sqlite3OpcodeName(sqlite3OpcodeName20309,779301
# define SQLITE_OS2_THREADS 20511,785245
#define _OS_COMMON_H_20539,786166
SQLITE_PRIVATE int sqlite3OSTrace 20551,786535
#define OSTRACE1(20552,786574
#define OSTRACE2(20553,786645
#define OSTRACE3(20554,786718
#define OSTRACE4(20555,786793
#define OSTRACE5(20556,786870
#define OSTRACE6(20557,786949
#define OSTRACE7(20559,787036
#define OSTRACE1(20562,787133
#define OSTRACE2(20563,787153
#define OSTRACE3(20564,787175
#define OSTRACE4(20565,787199
#define OSTRACE5(20566,787225
#define OSTRACE6(20567,787253
#define OSTRACE7(20568,787283
#define _HWTIME_H_20599,788220
  __inline__ sqlite_uint64 sqlite3Hwtime(20612,788612
  __declspec(20620,788820
  __inline__ sqlite_uint64 sqlite3Hwtime(20631,789035
  __inline__ sqlite_uint64 sqlite3Hwtime(20639,789230
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(20663,789972
static sqlite_uint64 g_start;20672,790258
static sqlite_uint64 g_elapsed;20673,790288
#define TIMER_START 20674,790320
#define TIMER_END 20675,790370
#define TIMER_ELAPSED 20676,790430
#define TIMER_START20678,790472
#define TIMER_END20679,790492
#define TIMER_ELAPSED 20680,790510
SQLITE_API int sqlite3_io_error_hit 20689,790781
SQLITE_API int sqlite3_io_error_hardhit 20690,790866
SQLITE_API int sqlite3_io_error_pending 20691,790952
SQLITE_API int sqlite3_io_error_persist 20692,791040
SQLITE_API int sqlite3_io_error_benign 20693,791125
SQLITE_API int sqlite3_diskfull_pending 20694,791209
SQLITE_API int sqlite3_diskfull 20695,791254
#define SimulateIOErrorBenign(20696,791291
#define SimulateIOError(20697,791352
static void local_ioerr(20701,791530
#define SimulateDiskfullError(20706,791670
#define SimulateIOErrorBenign(20718,791965
#define SimulateIOError(20719,791998
#define SimulateDiskfullError(20720,792025
SQLITE_API int sqlite3_open_file_count 20727,792150
#define OpenCounter(20728,792194
#define OpenCounter(20730,792253
typedef struct os2File os2File;20742,792586
struct os2File 20743,792618
  const sqlite3_io_methods *pMethod;pMethod20744,792635
  HFILE h;20745,792702
  char* pathToDel;20746,792766
  unsigned char locktype;20747,792845
#define LOCK_TIMEOUT 20750,792924
static int os2Close(20760,793270
static int os2Read(20784,793897
static int os2Write(20815,794911
static int os2Truncate(20847,795918
SQLITE_API int sqlite3_sync_count 20861,796399
SQLITE_API int sqlite3_fullsync_count 20862,796438
static int os2Sync(20868,796563
static int os2FileSize(20891,797126
static int getReadLock(20909,797621
static int unlockReadLock(20927,798109
static int os2Lock(20968,799536
static int os2CheckReservedLock(21104,804121
static int os2Unlock(21150,805758
static int os2FileControl(21205,807722
static int os2SectorSize(21226,808439
static int os2DeviceCharacteristics(21233,808575
static UconvObject ucUtf8 21241,808717
static UconvObject uclCp 21242,808789
static void initUconvObjects(21247,808952
static void freeUconvObjects(21257,809247
static char *convertUtf8PathToCp(convertUtf8PathToCp21272,809665
char *convertCpPathToUtf8(convertCpPathToUtf821301,810623
static const sqlite3_io_methods os2IoMethod 21325,811278
static int getTempname(21351,811957
static int os2FullPathname(21406,813830
static int os2Open(21428,814541
static int os2Delete(21543,818019
static int os2Access(21560,818587
static void *os2DlOpen(os2DlOpen21603,820081
static void os2DlError(21616,820530
static void *os2DlSym(os2DlSym21619,820612
static void os2DlClose(21633,821156
  #define os2DlOpen 21637,821305
  #define os2DlError 21638,821327
  #define os2DlSym 21639,821350
  #define os2DlClose 21640,821371
static int os2Randomness(21647,821460
static int os2Sleep(21714,823413
SQLITE_API int sqlite3_current_time 21724,823689
int os2CurrentTime(21732,823938
static int os2GetLastError(21767,824964
SQLITE_API int sqlite3_os_init(21774,825117
SQLITE_API int sqlite3_os_end(21800,825960
#    define SQLITE_ENABLE_LOCKING_STYLE 21875,828965
#    define SQLITE_ENABLE_LOCKING_STYLE 21877,829015
#    define OS_VXWORKS 21887,829240
#    define OS_VXWORKS 21889,829273
# define _LARGE_FILE 21912,830304
#   define _FILE_OFFSET_BITS 21914,830360
# define _LARGEFILE_SOURCE 21916,830400
#define SQLITE_FSFLAGS_IS_MSDOS 21947,830968
# define SQLITE_UNIX_THREADS 21954,831142
# define SQLITE_DEFAULT_FILE_PERMISSIONS 21961,831275
# define SQLITE_DEFAULT_PROXYDIR_PERMISSIONS 21968,831433
#define MAX_PATHNAME 21974,831531
#define IS_LOCK_ERROR(21980,831693
typedef struct UnixUnusedFd UnixUnusedFd;21989,832035
struct UnixUnusedFd 21990,832077
  int fd;21991,832099
  int flags;21992,832158
  UnixUnusedFd *pNext;pNext21993,832235
typedef struct unixFile unixFile;22000,832419
struct unixFile 22001,832453
  sqlite3_io_methods const *pMethod;pMethod22002,832471
  struct unixOpenCnt *pOpen;pOpen22003,832538
  struct unixLockInfo *pLock;pLock22004,832618
  int h;22005,832690
  int dirfd;22006,832751
  unsigned char locktype;22007,832826
  int lastErrno;22008,832900
  void *lockingContext;lockingContext22009,832980
  UnixUnusedFd *pUnused;pUnused22010,833050
  int fileFlags;22011,833118
  int openFlags;22013,833210
  unsigned fsFlags;22016,833342
  pthread_t tid;22019,833464
  int isDelete;22022,833564
  struct vxworksFileId *pId;pId22023,833629
  unsigned char transCntrChng;22033,834102
  unsigned char dbUpdate;22034,834181
  unsigned char inNormalWrite;22035,834262
  char aPadding[aPadding22041,834502
#define SQLITE_WHOLE_FILE_LOCKING 22048,834598
#define _OS_COMMON_H_22075,835555
SQLITE_PRIVATE int sqlite3OSTrace 22087,835924
#define OSTRACE1(22088,835963
#define OSTRACE2(22089,836034
#define OSTRACE3(22090,836107
#define OSTRACE4(22091,836182
#define OSTRACE5(22092,836259
#define OSTRACE6(22093,836338
#define OSTRACE7(22095,836425
#define OSTRACE1(22098,836522
#define OSTRACE2(22099,836542
#define OSTRACE3(22100,836564
#define OSTRACE4(22101,836588
#define OSTRACE5(22102,836614
#define OSTRACE6(22103,836642
#define OSTRACE7(22104,836672
#define _HWTIME_H_22135,837609
  __inline__ sqlite_uint64 sqlite3Hwtime(22148,838001
  __declspec(22156,838209
  __inline__ sqlite_uint64 sqlite3Hwtime(22167,838424
  __inline__ sqlite_uint64 sqlite3Hwtime(22175,838619
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(22199,839361
static sqlite_uint64 g_start;22208,839647
static sqlite_uint64 g_elapsed;22209,839677
#define TIMER_START 22210,839709
#define TIMER_END 22211,839759
#define TIMER_ELAPSED 22212,839819
#define TIMER_START22214,839861
#define TIMER_END22215,839881
#define TIMER_ELAPSED 22216,839899
SQLITE_API int sqlite3_io_error_hit 22225,840170
SQLITE_API int sqlite3_io_error_hardhit 22226,840255
SQLITE_API int sqlite3_io_error_pending 22227,840341
SQLITE_API int sqlite3_io_error_persist 22228,840429
SQLITE_API int sqlite3_io_error_benign 22229,840514
SQLITE_API int sqlite3_diskfull_pending 22230,840598
SQLITE_API int sqlite3_diskfull 22231,840643
#define SimulateIOErrorBenign(22232,840680
#define SimulateIOError(22233,840741
static void local_ioerr(22237,840919
#define SimulateDiskfullError(22242,841059
#define SimulateIOErrorBenign(22254,841354
#define SimulateIOError(22255,841387
#define SimulateDiskfullError(22256,841414
SQLITE_API int sqlite3_open_file_count 22263,841539
#define OpenCounter(22264,841583
#define OpenCounter(22266,841642
# define O_LARGEFILE 22278,841959
# undef O_LARGEFILE22281,842015
# define O_LARGEFILE 22282,842035
# define O_NOFOLLOW 22285,842084
# define O_BINARY 22288,842130
# define fcntl(22298,842436
#define threadid 22306,842594
#define threadid 22308,842632
static void unixEnterMutex(22326,843147
static void unixLeaveMutex(22329,843253
static int unixMutexHeld(22333,843379
static const char *locktypeName(locktypeName22345,843683
static int lockTrace(22366,844283
#define fcntl 22413,845529
static int sqliteErrorFromPosixError(22428,846034
struct vxworksFileId 22502,848315
  struct vxworksFileId *pNext;pNext22503,848338
  int nRef;22504,848403
  int nName;22505,848474
  char *zCanonicalName;zCanonicalName22506,848550
static struct vxworksFileId *vxworksFileList vxworksFileList22514,848711
static int vxworksSimplifyName(22529,849155
static struct vxworksFileId *vxworksFindFileId(vxworksFindFileId22563,850048
static void vxworksReleaseFileId(22605,851446
# define SET_THREADID(22732,857995
# define CHECK_THREADID(22733,858048
# define SET_THREADID(22736,858191
# define CHECK_THREADID(22737,858216
struct unixFileId 22745,858467
  dev_t dev;22746,858487
  struct vxworksFileId *pId;pId22748,858552
  ino_t ino;22750,858622
struct unixLockKey 22764,859131
  struct unixFileId fid;22765,859152
  pthread_t tid;22767,859259
struct unixLockInfo 22780,859742
  struct unixLockKey lockKey;22781,859764
  int cnt;22782,859819
  int locktype;22783,859887
  int nRef;22784,859966
  unsigned long long sharedByte;22786,860084
  struct unixLockInfo *pNext;pNext22788,860161
  struct unixLockInfo *pPrev;pPrev22789,860234
struct unixOpenCnt 22804,860871
  struct unixFileId fileId;22805,860892
  int nRef;22806,860943
  int nLock;22807,861016
  UnixUnusedFd *pUnused;pUnused22808,861080
  sem_t *pSem;pSem22810,861164
  char aSemName[aSemName22811,861227
  struct unixOpenCnt *pNext,pNext22813,861298
  struct unixOpenCnt *pNext, *pPrev;pPrev22813,861298
static struct unixLockInfo *lockList lockList22822,861644
static struct unixOpenCnt *openList openList22823,861686
#    define SQLITE_THREAD_OVERRIDE_LOCK 22845,862585
int threadsOverrideEachOthersLocks 22848,862658
static int threadsOverrideEachOthersLocks 22850,862732
struct threadTestData 22858,862947
  int fd;22859,862971
  struct flock lock;22860,863020
  int result;22861,863073
static void *threadLockingTest(threadLockingTest22874,863607
static void testThreadLockingBehavior(22888,864065
static void releaseLockInfo(22923,864918
static void releaseOpenCnt(22950,865620
static int findLockInfo(22992,866976
static int transferOwnership(23126,871244
# define transferOwnership(23159,872313
static int unixCheckReservedLock(23169,872688
static int unixLock(23234,874538
static int closePendingFds(23478,882800
static void setPendingFd(23503,883354
static int _posixUnlock(23525,884198
static int unixUnlock(23704,889847
static int closeUnixFile(23718,890345
static int unixClose(23757,891181
static int nolockCheckReservedLock(23799,892893
static int nolockLock(23804,893033
static int nolockUnlock(23808,893155
static int nolockClose(23816,893305
#define DOTLOCK_SUFFIX 23849,894693
static int dotlockCheckReservedLock(23861,895233
static int dotlockLock(23912,896938
static int dotlockUnlock(23965,898383
static int dotlockClose(24007,899482
static int flockCheckReservedLock(24043,900930
static int flockLock(24125,903398
static int flockUnlock(24169,904634
static int flockClose(24212,905653
static int semCheckReservedLock(24242,906795
static int semLock(24310,908867
static int semUnlock(24344,909742
static int semClose(24381,910610
typedef struct afpLockingContext afpLockingContext;24417,911681
struct afpLockingContext 24418,911733
  int reserved;24419,911760
  const char *dbPath;dbPath24420,911776
struct ByteRangeLockPB224423,911842
  unsigned long long offset;24425,911868
  unsigned long long length;24426,911939
  unsigned long long retRangeStart;24427,912002
  unsigned char unLockFlag;24428,912081
  unsigned char startEndFlag;24429,912144
  int fd;24430,912223
#define afpfsByteRangeLock2FSCTL 24433,912303
static int afpSetLock(24441,912537
static int afpCheckReservedLock(24487,914108
static int afpLock(24556,916171
static int afpUnlock(24746,922454
static int afpClose(24853,925860
static int nfsUnlock(24897,927497
static int seekAndRead(24933,929019
static int unixRead(24971,930011
static int seekAndWrite(25009,931050
static int unixWrite(25045,931917
SQLITE_API int sqlite3_sync_count 25109,933758
SQLITE_API int sqlite3_fullsync_count 25110,933797
# define fdatasync 25120,934161
# define HAVE_FULLFSYNC 25129,934400
# define HAVE_FULLFSYNC 25131,934432
static int full_fsync(25159,935756
static int unixSync(25242,938428
static int unixTruncate(25301,940306
static int unixFileSize(25330,941174
static int unixFileControl(25366,942114
static int unixSectorSize(25407,943431
static int unixDeviceCharacteristics(25415,943634
#define IOMETHODS(25460,945374
IOMETHODS(25488,947219
  static const struct Mapping 25594,951408
    const char *zFilesystem;zFilesystem25595,951440
    const sqlite3_io_methods *pMethods;pMethods25596,951509
static const sqlite3_io_methods *autolockIoFinderImpl(autolockIoFinderImpl25656,953251
typedef const sqlite3_io_methods *(*finder_type)finder_type25689,954202
static int fillInUnixFile(25702,954604
static int openDirectory(25879,960228
static int getTempname(25905,960953
static UnixUnusedFd *findReusableFd(findReusableFd25986,963516
static int unixOpen(26050,965792
static int unixDelete(26283,974016
static int unixAccess(26324,975078
static int unixFullPathname(26361,976133
static void *unixDlOpen(unixDlOpen26399,977289
static void unixDlError(26411,977754
static void (*unixDlSym(unixDlSym26421,977998
static void unixDlClose(26444,979078
  #define unixDlOpen 26449,979245
  #define unixDlError 26450,979269
  #define unixDlSym 26451,979293
  #define unixDlClose 26452,979317
static int unixRandomness(26458,979419
static int unixSleep(26505,981012
SQLITE_API int sqlite3_current_time 26532,981737
static int unixCurrentTime(26540,982033
static int unixGetLastError(26575,983067
typedef struct proxyLockingContext proxyLockingContext;26744,990413
struct proxyLockingContext 26745,990469
  unixFile *conchFile;conchFile26746,990498
  char *conchFilePath;conchFilePath26747,990551
  unixFile *lockProxy;lockProxy26748,990611
  char *lockProxyPath;lockProxyPath26749,990669
  char *dbPath;dbPath26750,990734
  int conchHeld;26751,990793
  void *oldLockingContext;oldLockingContext26752,990869
  sqlite3_io_methods const *pOldMethod;pOldMethod26753,990950
static int proxyGetLockPath(26761,991215
static int proxyCreateLockPath(26802,992249
static int proxyCreateUnixFile(26842,993592
SQLITE_API int sqlite3_hostid_num 26925,995924
#define PROXY_HOSTIDLEN 26928,995971
static int proxyGetHostID(26933,996144
#define PROXY_CONCHVERSION 26957,996786
#define PROXY_HEADERLEN 26958,996860
#define PROXY_PATHINDEX 26959,996922
#define PROXY_MAXCONCHLEN 26960,996983
static int proxyBreakConchLock(26968,997330
static int proxyConchLock(27027,999108
static int proxyTakeConch(27104,1001780
static int proxyReleaseConch(27326,1010037
static int proxyCreateConchPathname(27356,1011195
static int switchLockProxyPath(27393,1012232
static int proxyGetDbPathForUnixFile(27429,1013306
static int proxyTransformUnixFile(27459,1014541
static int proxyFileControl(27546,1017208
static int proxyCheckReservedLock(27616,1019526
static int proxyLock(27655,1020803
static int proxyUnlock(27679,1021534
static int proxyClose(27698,1022060
SQLITE_API int sqlite3_os_init(27760,1024165
  #define UNIXVFS(27781,1025303
SQLITE_API int sqlite3_os_end(27848,1027920
# define SQLITE_W32_THREADS 27909,1030180
#define _OS_COMMON_H_27937,1031101
SQLITE_PRIVATE int sqlite3OSTrace 27949,1031470
#define OSTRACE1(27950,1031509
#define OSTRACE2(27951,1031580
#define OSTRACE3(27952,1031653
#define OSTRACE4(27953,1031728
#define OSTRACE5(27954,1031805
#define OSTRACE6(27955,1031884
#define OSTRACE7(27957,1031971
#define OSTRACE1(27960,1032068
#define OSTRACE2(27961,1032088
#define OSTRACE3(27962,1032110
#define OSTRACE4(27963,1032134
#define OSTRACE5(27964,1032160
#define OSTRACE6(27965,1032188
#define OSTRACE7(27966,1032218
#define _HWTIME_H_27997,1033155
  __inline__ sqlite_uint64 sqlite3Hwtime(28010,1033547
  __declspec(28018,1033755
  __inline__ sqlite_uint64 sqlite3Hwtime(28029,1033970
  __inline__ sqlite_uint64 sqlite3Hwtime(28037,1034165
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(28061,1034907
static sqlite_uint64 g_start;28070,1035193
static sqlite_uint64 g_elapsed;28071,1035223
#define TIMER_START 28072,1035255
#define TIMER_END 28073,1035305
#define TIMER_ELAPSED 28074,1035365
#define TIMER_START28076,1035407
#define TIMER_END28077,1035427
#define TIMER_ELAPSED 28078,1035445
SQLITE_API int sqlite3_io_error_hit 28087,1035716
SQLITE_API int sqlite3_io_error_hardhit 28088,1035801
SQLITE_API int sqlite3_io_error_pending 28089,1035887
SQLITE_API int sqlite3_io_error_persist 28090,1035975
SQLITE_API int sqlite3_io_error_benign 28091,1036060
SQLITE_API int sqlite3_diskfull_pending 28092,1036144
SQLITE_API int sqlite3_diskfull 28093,1036189
#define SimulateIOErrorBenign(28094,1036226
#define SimulateIOError(28095,1036287
static void local_ioerr(28099,1036465
#define SimulateDiskfullError(28104,1036605
#define SimulateIOErrorBenign(28116,1036900
#define SimulateIOError(28117,1036933
#define SimulateDiskfullError(28118,1036960
SQLITE_API int sqlite3_open_file_count 28125,1037085
#define OpenCounter(28126,1037129
#define OpenCounter(28128,1037188
# define INVALID_FILE_ATTRIBUTES 28140,1037506
# define AreFileApisANSI(28148,1037667
# define FormatMessageW(28149,1037696
typedef struct winceLock 28157,1037870
  int nReaders;28158,1037897
  BOOL bPending;28159,1037957
  BOOL bReserved;28160,1038028
  BOOL bExclusive;28161,1038100
} winceLock;28162,1038174
typedef struct winFile winFile;28169,1038301
struct winFile 28170,1038333
  const sqlite3_io_methods *pMethod;pMethod28171,1038350
  HANDLE h;28172,1038406
  unsigned char locktype;28173,1038468
  short sharedLockByte;28174,1038541
  DWORD lastErrno;28175,1038616
  DWORD sectorSize;28176,1038690
  WCHAR *zDeleteOnClose;zDeleteOnClose28178,1038779
  HANDLE hMutex;28179,1038847
  HANDLE hShared;28180,1038925
  winceLock local;28181,1038996
  winceLock *shared;shared28182,1039071
SQLITE_API int sqlite3_os_type 28207,1039701
static int sqlite3_os_type 28209,1039743
# define isNT(28224,1040320
  static int isNT(28226,1040347
static WCHAR *utf8ToUnicode(utf8ToUnicode28242,1040782
static char *unicodeToUtf8(unicodeToUtf828263,1041330
static WCHAR *mbcsToUnicode(mbcsToUnicode28288,1041947
static char *unicodeToMbcs(unicodeToMbcs28313,1042630
SQLITE_API char *sqlite3_win32_mbcs_to_utf8(sqlite3_win32_mbcs_to_utf828336,1043244
static char *utf8ToMbcs(utf8ToMbcs28353,1043641
struct tm *__cdecl localtime(28374,1044127
#define GetTempPathA(28397,1044749
#define LockFile(28399,1044776
#define UnlockFile(28400,1044840
#define LockFileEx(28401,1044906
#define HANDLE_TO_WINFILE(28403,1044976
static void winceMutexAcquire(28408,1045095
#define winceMutexRelease(28417,1045329
static BOOL winceCreateLock(28423,1045468
static void winceDestroyLock(28498,1047694
static BOOL winceLockFile(28532,1048619
static BOOL winceUnlockFile(28596,1050368
static BOOL winceLockFileEx(28658,1052101
#define MX_CLOSE_ATTEMPT 28698,1053484
static int winClose(28699,1053511
#define WINCE_DELETION_ATTEMPTS 28709,1053782
# define INVALID_SET_FILE_POINTER 28731,1054328
static int winRead(28739,1054529
static int winWrite(28777,1055733
static int winTruncate(28818,1056903
SQLITE_API int sqlite3_sync_count 28846,1057800
SQLITE_API int sqlite3_fullsync_count 28847,1057839
static int winSync(28853,1057964
static int winFileSize(28888,1058672
# define LOCKFILE_FAIL_IMMEDIATELY 28911,1059283
static int getReadLock(28919,1059452
static int unlockReadLock(28947,1060146
static int winLock(28990,1061508
static int winCheckReservedLock(29113,1065095
static int winUnlock(29144,1066013
static int winFileControl(29177,1066963
static int winSectorSize(29201,1067697
static int winDeviceCharacteristics(29209,1067859
static const sqlite3_io_methods winIoMethod 29218,1068048
static void *convertUtf8Filename(convertUtf8Filename29246,1068819
static int getTempname(29265,1069296
static int getLastErrorMsg(29322,1071022
static int winOpen(29382,1072976
#define MX_DELETION_ATTEMPTS 29539,1077753
static int winDelete(29540,1077784
static int winAccess(29585,1079277
static int winFullPathname(29631,1080556
static int getSectorSize(29702,1082510
static void *winDlOpen(winDlOpen29775,1084532
static void winDlError(29796,1085117
void (*winDlSym(winDlSym29800,1085247
void winDlClose(29811,1085709
  #define winDlOpen 29816,1085874
  #define winDlError 29817,1085897
  #define winDlSym 29818,1085920
  #define winDlClose 29819,1085943
static int winRandomness(29826,1086032
static int winSleep(29863,1086857
SQLITE_API int sqlite3_current_time 29874,1087174
int winCurrentTime(29882,1087423
static int winGetLastError(29959,1090503
SQLITE_API int sqlite3_os_init(29967,1090708
SQLITE_API int sqlite3_os_end(29993,1091532
#define BITVEC_SZ 30039,1093509
#define BITVEC_USIZE 30043,1093722
#define BITVEC_TELEM 30049,1094035
#define BITVEC_SZELEM 30051,1094107
#define BITVEC_NELEM 30053,1094178
#define BITVEC_NBIT 30055,1094281
#define BITVEC_NINT 30058,1094378
#define BITVEC_MXHASH 30061,1094516
#define BITVEC_HASH(30066,1094759
#define BITVEC_NPTR 30068,1094807
struct Bitvec 30092,1095783
  u32 iSize;30093,1095799
  u32 nSet;30094,1095871
  u32 iDivisor;30097,1096060
    BITVEC_TELEM aBitmap[aBitmap30102,1096337
    u32 aHash[aHash30103,1096408
    Bitvec *apSub[apSub30104,1096473
  } u;30105,1096537
SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(sqlite3BitvecCreate30113,1096710
SQLITE_PRIVATE int sqlite3BitvecTest(30128,1097073
SQLITE_PRIVATE int sqlite3BitvecSet(30164,1098078
SQLITE_PRIVATE void sqlite3BitvecClear(30235,1100167
SQLITE_PRIVATE void sqlite3BitvecDestroy(30272,1101050
SQLITE_PRIVATE u32 sqlite3BitvecSize(30287,1101364
#define SETBIT(30298,1101696
#define CLEARBIT(30299,1101743
#define TESTBIT(30300,1101791
SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(30332,1103176
struct PCache 30428,1105715
  PgHdr *pDirty,pDirty30429,1105731
  PgHdr *pDirty, *pDirtyTail;pDirtyTail30429,1105731
  PgHdr *pSynced;pSynced30430,1105808
  int nRef;30431,1105888
  int nMax;30432,1105959
  int szPage;30433,1106025
  int szExtra;30434,1106102
  int bPurgeable;30435,1106180
  int (*xStress)xStress30436,1106259
  void *pStress;pStress30437,1106333
  sqlite3_pcache *pCache;pCache30438,1106397
  PgHdr *pPage1;pPage130439,1106464
# define expensive_assert(30449,1106825
# define expensive_assert(30451,1106871
static int pcacheCheckSynced(30464,1107313
static void pcacheRemoveFromDirtyList(30476,1107670
static void pcacheAddToDirtyList(30513,1108638
static void pcacheUnpin(30537,1109302
SQLITE_PRIVATE int sqlite3PcacheInitialize(30552,1109702
SQLITE_PRIVATE void sqlite3PcacheShutdown(30558,1109910
SQLITE_PRIVATE int sqlite3PcacheSize(30567,1110141
SQLITE_PRIVATE void sqlite3PcacheOpen(30575,1110444
SQLITE_PRIVATE void sqlite3PcacheSetPageSize(30596,1111213
SQLITE_PRIVATE int sqlite3PcacheFetch(30609,1111546
SQLITE_PRIVATE void sqlite3PcacheRelease(30698,1114174
SQLITE_PRIVATE void sqlite3PcacheRef(30717,1114604
SQLITE_PRIVATE void sqlite3PcacheDrop(30727,1114876
SQLITE_PRIVATE void sqlite3PcacheMakeDirty(30745,1115275
SQLITE_PRIVATE void sqlite3PcacheMakeClean(30758,1115578
SQLITE_PRIVATE void sqlite3PcacheCleanAll(30771,1115850
SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(30781,1116057
SQLITE_PRIVATE void sqlite3PcacheMove(30792,1116315
SQLITE_PRIVATE void sqlite3PcacheTruncate(30813,1117082
SQLITE_PRIVATE void sqlite3PcacheClose(30835,1117603
SQLITE_PRIVATE void sqlite3PcacheClear(30844,1117792
static PgHdr *pcacheMergeDirtyList(pcacheMergeDirtyList30852,1118007
#define N_SORT_BUCKET 30886,1118879
static PgHdr *pcacheSortDirtyList(pcacheSortDirtyList30887,1118905
SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(sqlite3PcacheDirtyList30921,1119678
SQLITE_PRIVATE int sqlite3PcacheRefCount(30932,1119954
SQLITE_PRIVATE int sqlite3PcachePageRefcount(30939,1120116
SQLITE_PRIVATE int sqlite3PcachePagecount(30946,1120250
SQLITE_PRIVATE int sqlite3PcacheGetCachesize(30958,1120504
SQLITE_PRIVATE void sqlite3PcacheSetCachesize(30966,1120644
SQLITE_PRIVATE void sqlite3PcacheIterateDirty(30979,1121051
typedef struct PCache1 PCache1;31009,1122120
typedef struct PgHdr1 PgHdr1;31010,1122152
typedef struct PgFreeslot PgFreeslot;31011,1122182
struct PCache1 31016,1122323
  int szPage;31022,1122616
  int bPurgeable;31023,1122693
  unsigned int nMin;31024,1122764
  unsigned int nMax;31025,1122841
  unsigned int nRecyclable;31031,1123104
  unsigned int nPage;31032,1123180
  unsigned int nHash;31033,1123256
  PgHdr1 **apHash;apHash31034,1123328
  unsigned int iMaxKey;31036,1123407
struct PgHdr1 31045,1123720
  unsigned int iKey;31046,1123736
  PgHdr1 *pNext;pNext31047,1123799
  PCache1 *pCache;pCache31048,1123863
  PgHdr1 *pLruNext;pLruNext31049,1123938
  PgHdr1 *pLruPrev;pLruPrev31050,1124012
struct PgFreeslot 31057,1124217
  PgFreeslot *pNext;pNext31058,1124237
static SQLITE_WSD struct PCacheGlobal 31064,1124325
  sqlite3_mutex *mutex;mutex31065,1124365
  int nMaxPage;31067,1124440
  int nMinPage;31068,1124521
  int nCurrentPage;31069,1124602
  PgHdr1 *pLruHead,pLruHead31070,1124682
  PgHdr1 *pLruHead, *pLruTail;pLruTail31070,1124682
  int szSlot;31073,1124817
  void *pStart,pStart31074,1124884
  void *pStart, *pEnd;pEnd31074,1124884
  PgFreeslot *pFree;pFree31075,1124961
  int isInit;31076,1125022
} pcache1_g;31077,1125086
#define pcache1 31084,1125304
#define PGHDR1_TO_PAGE(31098,1125978
#define PAGE_TO_PGHDR1(31099,1126047
#define pcache1EnterMutex(31104,1126168
#define pcache1LeaveMutex(31105,1126231
SQLITE_PRIVATE void sqlite3PCacheBufferSetup(31116,1126740
static void *pcache1Alloc(pcache1Alloc31139,1127398
static void pcache1Free(31170,1128402
static PgHdr1 *pcache1AllocPage(pcache1AllocPage31189,1128932
static void pcache1FreePage(31211,1129504
SQLITE_PRIVATE void *sqlite3PageMalloc(sqlite3PageMalloc31225,1129889
SQLITE_PRIVATE void sqlite3PageFree(31236,1130102
static int pcache1ResizeHash(31251,1130551
static void pcache1PinPage(31295,1131680
static void pcache1RemoveFromHash(31323,1132457
static void pcache1EnforceMaxPage(31339,1132868
static void pcache1TruncateUnsafe(31356,1133408
static int pcache1Init(31387,1134263
static void pcache1Shutdown(31403,1134701
static sqlite3_pcache *pcache1Create(pcache1Create31414,1134938
static void pcache1Cachesize(31437,1135516
static int pcache1Pagecount(31451,1135861
static void *pcache1Fetch(pcache1Fetch31508,1138106
static void pcache1Unpin(31590,1140299
static void pcache1Rekey(31629,1141512
static void pcache1Truncate(31669,1142425
static void pcache1Destroy(31684,1142808
SQLITE_PRIVATE void sqlite3PCacheSetDefault(31701,1143319
SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(31728,1144389
SQLITE_PRIVATE void sqlite3PcacheStats(31750,1144949
#define ROWSET_ALLOCATION_SIZE 31837,1148271
#define ROWSET_ENTRY_PER_CHUNK 31842,1148368
struct RowSetEntry 31848,1148554
  i64 v;31849,1148587
  struct RowSetEntry *pRight;pRight31850,1148652
  struct RowSetEntry *pLeft;pLeft31851,1148729
struct RowSetChunk 31860,1149047
  struct RowSetChunk *pNextChunk;pNextChunk31861,1149068
  struct RowSetEntry aEntry[aEntry31862,1149146
struct RowSet 31870,1149347
  struct RowSetChunk *pChunk;pChunk31871,1149363
  sqlite3 *db;db31872,1149432
  struct RowSetEntry *pEntry;pEntry31873,1149495
  struct RowSetEntry *pLast;pLast31874,1149563
  struct RowSetEntry *pFresh;pFresh31875,1149632
  struct RowSetEntry *pTree;pTree31876,1149699
  u16 nFresh;31877,1149761
  u8 isSorted;31878,1149828
  u8 iBatch;31879,1149892
SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3RowSetInit31894,1150417
SQLITE_PRIVATE void sqlite3RowSetClear(31915,1151011
SQLITE_PRIVATE void sqlite3RowSetInsert(31935,1151477
static struct RowSetEntry *rowSetMerge(rowSetMerge31973,1152464
static void rowSetSort(32009,1153389
static void rowSetTreeToList(32041,1154216
static struct RowSetEntry *rowSetNDeepTree(rowSetNDeepTree32076,1155353
static struct RowSetEntry *rowSetListToTree(rowSetListToTree32106,1156049
static void rowSetToList(32130,1156746
SQLITE_PRIVATE int sqlite3RowSetNext(32150,1157268
SQLITE_PRIVATE int sqlite3RowSetTest(32168,1157671
int sqlite3PagerTrace=32220,1159278
#define sqlite3DebugPrintf 32221,1159333
#define PAGERTRACE(32222,1159367
#define PAGERTRACE(32224,1159448
#define PAGERID(32235,1159771
#define FILEHANDLEID(32236,1159805
#define PAGER_UNLOCK 32286,1162409
#define PAGER_SHARED 32287,1162437
#define PAGER_RESERVED 32288,1162493
#define PAGER_EXCLUSIVE 32289,1162551
#define PAGER_SYNCED 32290,1162610
# define CODEC1(32296,1162724
# define CODEC2(32298,1162812
# define CODEC1(32302,1162952
# define CODEC2(32303,1162993
#define MAX_SECTOR_SIZE 32312,1163325
typedef struct PagerSavepoint PagerSavepoint;32327,1164018
struct PagerSavepoint 32328,1164064
  i64 iOffset;32329,1164088
  i64 iHdrOffset;32330,1164157
  Bitvec *pInSavepoint;pInSavepoint32331,1164204
  Pgno nOrig;32332,1164272
  Pgno iSubRec;32333,1164342
struct Pager 32432,1168785
  sqlite3_vfs *pVfs;pVfs32433,1168800
  u8 exclusiveMode;32434,1168863
  u8 journalMode;32435,1168940
  u8 useJournal;32436,1169013
  u8 noReadlock;32437,1169085
  u8 noSync;32438,1169155
  u8 fullSync;32439,1169223
  u8 sync_flags;32440,1169304
  u8 tempFile;32441,1169372
  u8 readOnly;32442,1169438
  u8 memDb;32443,1169504
  u8 state;32456,1170147
  u8 dbModified;32457,1170222
  u8 needSync;32458,1170298
  u8 journalStarted;32459,1170378
  u8 changeCountDone;32460,1170450
  u8 setMaster;32461,1170528
  u8 doNotSync;32462,1170608
  u8 dbSizeValid;32463,1170688
  u8 subjInMemory;32464,1170751
  Pgno dbSize;32465,1170822
  Pgno dbOrigSize;32466,1170890
  Pgno dbFileSize;32467,1170964
  int errCode;32468,1171037
  int nRec;32469,1171104
  u32 cksumInit;32470,1171185
  u32 nSubRec;32471,1171264
  Bitvec *pInJournal;pInJournal32472,1171341
  sqlite3_file *fd;fd32473,1171420
  sqlite3_file *jfd;jfd32474,1171485
  sqlite3_file *sjfd;sjfd32475,1171554
  i64 journalOff;32476,1171622
  i64 journalHdr;32477,1171699
  PagerSavepoint *aSavepoint;aSavepoint32478,1171774
  int nSavepoint;32479,1171837
  char dbFileVers[dbFileVers32480,1171908
  u32 sectorSize;32481,1171983
  u16 nExtra;32483,1172056
  i16 nReserve;32484,1172135
  u32 vfsFlags;32485,1172214
  int pageSize;32486,1172280
  Pgno mxPgno;32487,1172342
  char *zFilename;zFilename32488,1172415
  char *zJournal;zJournal32489,1172477
  int (*xBusyHandler)xBusyHandler32490,1172538
  void *pBusyHandlerArg;pBusyHandlerArg32491,1172601
  int nHit,32493,1172690
  int nHit, nMiss;32493,1172690
  int nRead,32494,1172749
  int nRead, nWrite;32494,1172749
  void (*xReiniter)xReiniter32496,1172820
  void *(*xCodec)xCodec32498,1172919
  void (*xCodecSizeChng)xCodecSizeChng32499,1172995
  void (*xCodecFree)xCodecFree32500,1173070
  void *pCodec;pCodec32501,1173142
  char *pTmpSpace;pTmpSpace32503,1173221
  i64 journalSizeLimit;32504,1173299
  PCache *pPCache;pPCache32505,1173375
  sqlite3_backup *pBackup;pBackup32506,1173440
SQLITE_API int sqlite3_pager_readdb_count 32515,1173727
SQLITE_API int sqlite3_pager_writedb_count 32516,1173817
SQLITE_API int sqlite3_pager_writej_count 32517,1173908
# define PAGER_INCR(32518,1173999
# define PAGER_INCR(32520,1174033
static const unsigned char aJournalMagic[aJournalMagic32548,1175367
#define JOURNAL_PG_SZ(32556,1175564
#define JOURNAL_HDR_SZ(32562,1175755
# define MEMDB 32571,1176100
# define MEMDB 32573,1176123
#define PAGER_MAX_PGNO 32579,1176214
static int assert_pager_state(32587,1176327
static int subjRequiresPage(32608,1177024
static int pageInJournal(32624,1177396
static int read32bits(32635,1177745
#define put32bits(32647,1178041
static int write32bits(32653,1178230
#define isOpen(32671,1178670
static int osUnlock(32676,1178769
static int jrnlBufferSize(32701,1179656
static u32 pager_datahash(32733,1180581
static u32 pager_pagehash(32741,1180748
static void pager_set_pagehash(32744,1180872
#define CHECK_PAGE(32753,1181194
static void checkPage(32754,1181229
#define pager_datahash(32761,1181423
#define pager_pagehash(32762,1181454
#define CHECK_PAGE(32763,1181483
static int readMasterJournal(32791,1182749
static i64 journalHdrOffset(32844,1184541
static int zeroJournalHdr(32877,1185855
static int writeJournalHdr(32926,1187685
static int readJournalHdr(33043,1192959
static int writeMasterJournal(33163,1197814
static PgHdr *pager_lookup(pager_lookup33230,1200350
static void pager_reset(33246,1200882
static void releaseAllSavepoints(33259,1201281
static int addToSavepointBitvecs(33278,1201918
static void pager_unlock(33303,1202776
static int pager_error(33365,1205040
static void pagerUnlockAndRollback(33396,1206158
static int pager_end_transaction(33461,1208988
static u32 pager_cksum(33557,1212421
static int pager_playback_one_page(33605,1214568
static int pager_delmaster(33832,1224952
static int pager_truncate(33944,1228960
static void setSectorSize(33979,1230225
static int pager_playback(34055,1233635
static int pagerPlaybackSavepoint(34273,1242414
SQLITE_PRIVATE void sqlite3PagerSetCachesize(34372,1246118
SQLITE_PRIVATE void sqlite3PagerSetSafetyLevel(34403,1247569
SQLITE_API int sqlite3_opentemp_count 34417,1248097
static int pagerOpentemp(34435,1248612
SQLITE_PRIVATE void sqlite3PagerSetBusyhandler(34474,1250113
static void pagerReportSize(34488,1250580
# define pagerReportSize(34495,1250780
SQLITE_PRIVATE int sqlite3PagerSetPagesize(34528,1252173
SQLITE_PRIVATE void *sqlite3PagerTempSpace(sqlite3PagerTempSpace34566,1253502
SQLITE_PRIVATE int sqlite3PagerMaxPageCount(34577,1253873
static int saved_cnt;34596,1254460
void disable_simulated_io_errors(34597,1254482
void enable_simulated_io_errors(34601,1254597
# define disable_simulated_io_errors(34605,1254684
# define enable_simulated_io_errors(34606,1254723
SQLITE_PRIVATE int sqlite3PagerReadFileheader(34623,1255387
SQLITE_PRIVATE int sqlite3PagerPagecount(34652,1256503
static int pager_wait_on_lock(34714,1258467
static void assertTruncateConstraintCb(34775,1260956
static void assertTruncateConstraint(34779,1261116
# define assertTruncateConstraint(34783,1261251
SQLITE_PRIVATE void sqlite3PagerTruncateImage(34792,1261578
SQLITE_PRIVATE int sqlite3PagerClose(34814,1262433
SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(34855,1263701
SQLITE_PRIVATE void sqlite3PagerRef(34863,1263841
static int syncJournal(34905,1265513
static int pager_write_pagelist(35029,1271119
static int subjournalPage(35129,1275127
static int pagerStress(35174,1276827
SQLITE_PRIVATE int sqlite3PagerOpen(35291,1281297
static int hasHotJournal(35575,1292771
static int readDbPage(35667,1296613
SQLITE_PRIVATE int sqlite3PagerSharedLock(35749,1300175
static void pagerUnlockIfUnused(35935,1307004
SQLITE_PRIVATE int sqlite3PagerAcquire(35993,1309757
SQLITE_PRIVATE DbPage *sqlite3PagerLookup(sqlite3PagerLookup36116,1313716
SQLITE_PRIVATE void sqlite3PagerUnref(36134,1314243
static int openSubJournal(36151,1314735
static int pager_open_journal(36185,1316107
SQLITE_PRIVATE int sqlite3PagerBegin(36283,1319678
static int pager_write(36344,1322127
SQLITE_PRIVATE int sqlite3PagerWrite(36499,1327829
SQLITE_PRIVATE int sqlite3PagerIswriteable(36593,1330946
SQLITE_PRIVATE void sqlite3PagerDontWrite(36612,1331636
static int pager_incr_changecounter(36640,1332755
# define DIRECT_MODE 36654,1333378
# define DIRECT_MODE 36658,1333470
SQLITE_PRIVATE int sqlite3PagerSync(36713,1335324
SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne(36750,1336736
SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(36921,1343967
SQLITE_PRIVATE int sqlite3PagerRollback(37002,1347581
SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(37041,1348705
SQLITE_PRIVATE int sqlite3PagerRefcount(37048,1348847
SQLITE_PRIVATE int sqlite3PagerPageRefcount(37055,1349019
SQLITE_PRIVATE int *sqlite3PagerStats(sqlite3PagerStats37063,1349205
SQLITE_PRIVATE int sqlite3PagerIsMemdb(37083,1349754
SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(37097,1350287
SQLITE_PRIVATE int sqlite3PagerSavepoint(37178,1353721
SQLITE_PRIVATE const char *sqlite3PagerFilename(sqlite3PagerFilename37228,1355552
SQLITE_PRIVATE const sqlite3_vfs *sqlite3PagerVfs(sqlite3PagerVfs37235,1355696
SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(sqlite3PagerFile37244,1355936
SQLITE_PRIVATE const char *sqlite3PagerJournalname(sqlite3PagerJournalname37251,1356077
SQLITE_PRIVATE int sqlite3PagerNosync(37259,1356293
static void sqlite3PagerSetCodec(37267,1356449
static void *sqlite3PagerGetCodec(sqlite3PagerGetCodec37281,1356873
SQLITE_PRIVATE int sqlite3PagerMovepage(37312,1358193
SQLITE_PRIVATE void *sqlite3PagerGetData(sqlite3PagerGetData37448,1363098
SQLITE_PRIVATE void *sqlite3PagerGetExtra(sqlite3PagerGetExtra37457,1363338
SQLITE_PRIVATE int sqlite3PagerLockingMode(37471,1363831
SQLITE_PRIVATE int sqlite3PagerJournalMode(37504,1364970
SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(37532,1365894
SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(sqlite3PagerBackupPtr37545,1366311
#define MX_CELL_SIZE(37791,1377606
#define MX_CELL(37798,1377919
typedef struct MemPage MemPage;37801,1377990
typedef struct BtLock BtLock;37802,1378022
#  define SQLITE_FILE_HEADER 37817,1378710
#define PTF_INTKEY 37824,1378893
#define PTF_ZERODATA 37825,1378920
#define PTF_LEAFDATA 37826,1378947
#define PTF_LEAF 37827,1378974
struct MemPage 37842,1379609
  u8 isInit;37843,1379626
  u8 nOverflow;37844,1379702
  u8 intKey;37845,1379773
  u8 leaf;37846,1379829
  u8 hasData;37847,1379883
  u8 hdrOffset;37848,1379942
  u8 childPtrSize;37849,1380000
  u16 maxLocal;37850,1380057
  u16 minLocal;37851,1380132
  u16 cellOffset;37852,1380207
  u16 nFree;37853,1380273
  u16 nCell;37854,1380335
  u16 maskPage;37855,1380409
  struct _OvflCell 37856,1380459
    u8 *pCell;pCell37857,1380523
    u16 idx;37858,1380595
  } aOvfl[aOvfl37859,1380674
  BtShared *pBt;pBt37860,1380688
  u8 *aData;aData37861,1380763
  DbPage *pDbPage;pDbPage37862,1380831
  Pgno pgno;37863,1380878
#define EXTRA_SIZE 37871,1381121
struct BtLock 37880,1381493
  Btree *pBtree;pBtree37881,1381509
  Pgno iTable;37882,1381570
  u8 eLock;37883,1381619
  BtLock *pNext;pNext37884,1381673
#define READ_LOCK 37888,1381775
#define WRITE_LOCK 37889,1381799
struct Btree 37912,1382862
  sqlite3 *db;db37913,1382877
  BtShared *pBt;pBt37914,1382947
  u8 inTrans;37915,1383005
  u8 sharable;37916,1383070
  u8 locked;37917,1383138
  int wantToLock;37918,1383201
  int nBackup;37919,1383274
  Btree *pNext;pNext37920,1383348
  Btree *pPrev;pPrev37921,1383422
  BtLock lock;37923,1383512
#define TRANS_NONE 37934,1383844
#define TRANS_READ 37935,1383866
#define TRANS_WRITE 37936,1383888
struct BtShared 37973,1385390
  Pager *pPager;pPager37974,1385408
  sqlite3 *db;db37975,1385453
  BtCursor *pCursor;pCursor37976,1385530
  MemPage *pPage1;pPage137977,1385587
  u8 readOnly;37978,1385644
  u8 pageSizeFixed;37979,1385714
  u8 secureDelete;37980,1385791
  u8 autoVacuum;37982,1385885
  u8 incrVacuum;37983,1385946
  u16 pageSize;37985,1386014
  u16 usableSize;37986,1386076
  u16 maxLocal;37987,1386142
  u16 minLocal;37988,1386217
  u16 maxLeaf;37989,1386292
  u16 minLeaf;37990,1386364
  u8 inTransaction;37991,1386436
  int nTransaction;37992,1386484
  void *pSchema;pSchema37993,1386557
  void (*xFreeSchema)xFreeSchema37994,1386638
  sqlite3_mutex *mutex;mutex37995,1386707
  Bitvec *pHasContent;pHasContent37996,1386788
  int nRef;37998,1386900
  BtShared *pNext;pNext37999,1386969
  BtLock *pLock;pLock38000,1387043
  Btree *pWriter;pWriter38001,1387120
  u8 isExclusive;38002,1387194
  u8 isPending;38003,1387272
  u8 *pTmpSpace;pTmpSpace38005,1387344
typedef struct CellInfo CellInfo;38013,1387625
struct CellInfo 38014,1387659
  u8 *pCell;pCell38015,1387677
  i64 nKey;38016,1387737
  u32 nData;38017,1387813
  u32 nPayload;38018,1387860
  u16 nHeader;38019,1387907
  u16 nLocal;38020,1387971
  u16 iOverflow;38021,1388025
  u16 nSize;38022,1388101
#define BTCURSOR_MAX_DEPTH 38034,1388555
struct BtCursor 38050,1389094
  Btree *pBtree;pBtree38051,1389112
  BtShared *pBt;pBt38052,1389185
  BtCursor *pNext,pNext38053,1389254
  BtCursor *pNext, *pPrev;pPrev38053,1389254
  struct KeyInfo *pKeyInfo;pKeyInfo38054,1389323
  Pgno pgnoRoot;38055,1389396
  sqlite3_int64 cachedRowid;38056,1389457
  CellInfo info;38057,1389529
  u8 wrFlag;38058,1389602
  u8 atLast;38059,1389653
  u8 validNKey;38060,1389721
  u8 eState;38061,1389782
  void *pKey;pKey38062,1389860
  i64 nKey;38063,1389933
  int skipNext;38064,1389992
  u8 isIncrblobHandle;38066,1390101
  Pgno *aOverflow;aOverflow38067,1390177
  i16 iPage;38069,1390251
  MemPage *apPage[apPage38070,1390329
  u16 aiIdx[aiIdx38071,1390407
#define CURSOR_INVALID 38099,1391531
#define CURSOR_VALID 38100,1391566
#define CURSOR_REQUIRESEEK 38101,1391601
#define CURSOR_FAULT 38102,1391636
# define PENDING_BYTE_PAGE(38107,1391752
#define PTRMAP_PAGENO(38124,1392474
#define PTRMAP_PTROFFSET(38125,1392531
#define PTRMAP_ISPAGE(38126,1392594
#define PTRMAP_ROOTPAGE 38159,1394290
#define PTRMAP_FREEPAGE 38160,1394316
#define PTRMAP_OVERFLOW1 38161,1394342
#define PTRMAP_OVERFLOW2 38162,1394369
#define PTRMAP_BTREE 38163,1394396
#define btreeIntegrity(38168,1394554
#define ISAUTOVACUUM 38181,1395057
#define ISAUTOVACUUM 38183,1395102
typedef struct IntegrityCk IntegrityCk;38191,1395276
struct IntegrityCk 38192,1395316
  BtShared *pBt;pBt38193,1395337
  Pager *pPager;pPager38194,1395390
  Pgno nPage;38195,1395470
  int *anRef;anRef38196,1395528
  int mxErr;38197,1395594
  int nErr;38198,1395668
  int mallocFailed;38199,1395739
  StrAccum errMsg;38200,1395804
#define get2byte(38206,1395944
#define put2byte(38207,1395987
#define get4byte 38208,1396051
#define put4byte 38209,1396084
static void lockBtreeMutex(38221,1396506
static void unlockBtreeMutex(38235,1396851
SQLITE_PRIVATE void sqlite3BtreeEnter(38261,1397832
SQLITE_PRIVATE void sqlite3BtreeLeave(38323,1399867
SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(38340,1400249
SQLITE_PRIVATE void sqlite3BtreeEnterCursor(38357,1400853
SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(38360,1400951
SQLITE_PRIVATE void sqlite3BtreeEnterAll(38380,1401645
SQLITE_PRIVATE void sqlite3BtreeLeaveAll(38408,1402521
SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(38431,1403048
SQLITE_PRIVATE void sqlite3BtreeMutexArrayInsert(38461,1403882
SQLITE_PRIVATE void sqlite3BtreeMutexArrayEnter(38494,1404794
SQLITE_PRIVATE void sqlite3BtreeMutexArrayLeave(38519,1405478
SQLITE_PRIVATE void sqlite3BtreeEnter(38539,1405990
SQLITE_PRIVATE void sqlite3BtreeEnterAll(38542,1406063
static const char zMagicHeader[zMagicHeader38576,1407150
int sqlite3BtreeTrace=38583,1407295
# define TRACE(38584,1407350
# define TRACE(38586,1407423
SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList 38601,1407806
static BtShared *SQLITE_WSD sqlite3SharedCacheList 38603,1407876
SQLITE_API int sqlite3_enable_shared_cache(38615,1408259
  #define querySharedCacheTableLock(38633,1408894
  #define setSharedCacheTableLock(38634,1408947
  #define clearAllSharedCacheTableLocks(38635,1408998
  #define downgradeAllSharedCacheTableLocks(38636,1409041
  #define hasSharedCacheTableLock(38637,1409088
  #define hasReadConflicts(38638,1409133
static int hasSharedCacheTableLock(38666,1410191
static int hasReadConflicts(38747,1413027
static int querySharedCacheTableLock(38767,1413593
static int setSharedCacheTableLock(38839,1416210
static void clearAllSharedCacheTableLocks(38903,1418359
static void downgradeAllSharedCacheTableLocks(38948,1419725
static int cursorHoldsMutex(38972,1420333
static void invalidateOverflowCache(38982,1420533
static void invalidateAllOverflowCache(38992,1420791
static void invalidateIncrblobCursors(39013,1421564
  #define invalidateOverflowCache(39030,1422097
  #define invalidateAllOverflowCache(39031,1422134
  #define invalidateIncrblobCursors(39032,1422174
static int btreeSetHasContent(39070,1424032
static int btreeGetHasContent(39095,1424876
static void btreeClearHasContent(39104,1425172
static int saveCursorPosition(39116,1425552
static int saveAllCursors(39166,1426967
SQLITE_PRIVATE void sqlite3BtreeClearCursor(39185,1427445
static int btreeMoveto(39197,1427822
static int btreeRestoreCursorPosition(39230,1429072
#define restoreCursorPosition(39247,1429556
SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(39260,1430021
static Pgno ptrmapPageno(39282,1430524
static void ptrmapPut(39305,1431199
static int ptrmapGet(39356,1432755
  #define ptrmapPut(39383,1433571
  #define ptrmapGet(39384,1433603
  #define ptrmapPutOvflPtr(39385,1433642
#define findCell(39395,1433928
static u8 *findOverflowCell(findOverflowCell39402,1434140
static void btreeParseCellPtr(39429,1434937
#define parseCell(39500,1437458
static void btreeParseCell(39502,1437565
static u16 cellSizePtr(39516,1438058
static u16 cellSize(39572,1439657
static void ptrmapPutOvflPtr(39583,1439952
static int defragmentPage(39603,1440574
static int allocateSpace(39693,1443945
static int freeSpace(39792,1447474
static int decodeFlags(39885,1450633
static int btreeInitPage(39919,1451747
static void zeroPage(40029,1455747
static MemPage *btreePageFromDbPage(btreePageFromDbPage40064,1456825
static int btreeGetPage(40085,1457634
static MemPage *btreePageLookup(btreePageLookup40106,1458320
static Pgno pagerPagecount(40120,1458698
static int getAndInitPage(40137,1459215
static void releasePage(40169,1460140
static void pageReinit(40188,1460814
static int btreeInvokeBusyHandler(40210,1461611
SQLITE_PRIVATE int sqlite3BtreeOpen(40232,1462491
static int removeFromSharingList(40473,1470654
static void allocateTempSpace(40511,1471586
static void freeTempSpace(40520,1471765
SQLITE_PRIVATE int sqlite3BtreeClose(40528,1471928
SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(40598,1474128
SQLITE_PRIVATE int sqlite3BtreeSetSafetyLevel(40616,1474867
SQLITE_PRIVATE int sqlite3BtreeSyncDisabled(40630,1475296
SQLITE_PRIVATE int sqlite3BtreeSetPageSize(40662,1476469
SQLITE_PRIVATE int sqlite3BtreeGetPageSize(40692,1477359
SQLITE_PRIVATE int sqlite3BtreeGetReserve(40701,1477621
SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(40714,1477985
SQLITE_PRIVATE int sqlite3BtreeSecureDelete(40727,1478355
SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(40746,1478974
SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(40770,1479531
static int lockBtree(40796,1480218
static void unlockBtreeIfUnused(40906,1483898
static int newDatabase(40923,1484437
SQLITE_PRIVATE int sqlite3BtreeBeginTrans(40996,1487214
static int setChildPtrmaps(41121,1490930
static int modifyPagePointer(41171,1492449
static int relocatePage(41230,1494098
static int incrVacuumStep(41324,1497530
SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(41432,1500719
static int autoVacuumCommit(41457,1501463
# define setChildPtrmaps(41514,1503472
SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(41543,1504880
static void btreeEndTransaction(41567,1505488
SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(41615,1507362
SQLITE_PRIVATE int sqlite3BtreeCommit(41644,1508034
static int countWriteCursors(41666,1508699
SQLITE_PRIVATE void sqlite3BtreeTripAllCursors(41693,1509534
SQLITE_PRIVATE int sqlite3BtreeRollback(41718,1510269
SQLITE_PRIVATE int sqlite3BtreeBeginStmt(41781,1512610
SQLITE_PRIVATE int sqlite3BtreeSavepoint(41816,1513972
static int btreeCursor(41864,1515866
SQLITE_PRIVATE int sqlite3BtreeCursor(41912,1517579
SQLITE_PRIVATE int sqlite3BtreeCursorSize(41934,1518405
SQLITE_PRIVATE void sqlite3BtreeCursorZero(41946,1518837
SQLITE_PRIVATE void sqlite3BtreeSetCachedRowid(41962,1519527
SQLITE_PRIVATE sqlite3_int64 sqlite3BtreeGetCachedRowid(41976,1520015
SQLITE_PRIVATE int sqlite3BtreeCloseCursor(41984,1520227
  static void assertCellInfo(42026,1521591
  #define assertCellInfo(42034,1521858
  static void getCellInfo(42038,1521983
#define getCellInfo(42049,1522341
SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(42065,1523218
SQLITE_PRIVATE int sqlite3BtreeKeySize(42082,1523788
SQLITE_PRIVATE int sqlite3BtreeDataSize(42106,1524605
static int getOverflowPage(42133,1525770
static int copyPayload(42201,1527768
static int accessPayload(42250,1529683
SQLITE_PRIVATE int sqlite3BtreeKey(42394,1534571
SQLITE_PRIVATE int sqlite3BtreeData(42411,1535241
static const unsigned char *fetchPayload(fetchPayload42450,1536728
SQLITE_PRIVATE const void *sqlite3BtreeKeyFetch(sqlite3BtreeKeyFetch42502,1538345
SQLITE_PRIVATE const void *sqlite3BtreeDataFetch(sqlite3BtreeDataFetch42511,1538647
static int moveToChild(42531,1539314
static void assertParentIndex(42565,1540280
#  define assertParentIndex(42574,1540565
static void moveToParent(42585,1540877
static int moveToRoot(42622,1542360
static int moveToLeftmost(42698,1544784
static int moveToRightmost(42723,1545628
SQLITE_PRIVATE int sqlite3BtreeFirst(42747,1546349
SQLITE_PRIVATE int sqlite3BtreeLast(42771,1547027
SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked(42835,1549205
SQLITE_PRIVATE int sqlite3BtreeEof(43019,1555412
SQLITE_PRIVATE int sqlite3BtreeNext(43033,1555932
SQLITE_PRIVATE int sqlite3BtreePrevious(43102,1557501
static int allocateBtreePage(43177,1559705
static int freePage2(43456,1568650
static void freePage(43578,1573268
static int clearCell(43587,1573469
static int fillInCell(43658,1576022
static void dropCell(43816,1580960
static void insertCell(43871,1582914
static void assemblePage(43958,1586225
#define NN 44006,1588196
#define NB 44007,1588271
static int balance_quick(44034,1589455
static int ptrmapCheckPages(44120,1592886
static void copyNodeContent(44173,1594637
static int balance_nonroot(44254,1598118
static int balance_deeper(44881,1621684
static int balance(44935,1623587
SQLITE_PRIVATE int sqlite3BtreeInsert(45070,1629207
SQLITE_PRIVATE int sqlite3BtreeDelete(45212,1634882
static int btreeCreateTable(45335,1639764
SQLITE_PRIVATE int sqlite3BtreeCreateTable(45457,1643416
static int clearDatabasePage(45469,1643711
SQLITE_PRIVATE int sqlite3BtreeClearTable(45527,1645500
static int btreeDropTable(45566,1647041
SQLITE_PRIVATE int sqlite3BtreeDropTable(45669,1650052
SQLITE_PRIVATE void sqlite3BtreeGetMeta(45691,1650831
SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(45715,1651540
SQLITE_PRIVATE int sqlite3BtreeCount(45748,1652541
SQLITE_PRIVATE Pager *sqlite3BtreePager(sqlite3BtreePager45813,1654851
static void checkAppendMsg(45821,1655021
static int checkRef(45855,1655915
static void checkPtrmap(45874,1656485
static void checkList(45904,1657490
static int checkTreePage(45990,1660487
SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck(sqlite3BtreeIntegrityCheck46214,1667632
SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(sqlite3BtreeGetFilename46325,1670983
SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(sqlite3BtreeGetJournalname46338,1671439
SQLITE_PRIVATE int sqlite3BtreeIsInTrans(46346,1671641
SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(46354,1671862
SQLITE_PRIVATE int sqlite3BtreeIsInBackup(46360,1672015
SQLITE_PRIVATE void *sqlite3BtreeSchema(sqlite3BtreeSchema46386,1673150
SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(46402,1673635
SQLITE_PRIVATE int sqlite3BtreeLockTable(46419,1674112
SQLITE_PRIVATE int sqlite3BtreePutData(46449,1675118
SQLITE_PRIVATE void sqlite3BtreeCacheOverflow(46492,1676646
# define MIN(46521,1677622
struct sqlite3_backup 46527,1677722
  sqlite3* pDestDb;46528,1677746
  Btree *pDest;pDest46529,1677807
  u32 iDestSchema;46530,1677864
  int bDestLocked;46531,1677935
  Pgno iNext;46533,1678016
  sqlite3* pSrcDb;46534,1678093
  Btree *pSrc;pSrc46535,1678149
  int rc;46537,1678202
  Pgno nRemaining;46542,1678406
  Pgno nPagecount;46543,1678468
  int isAttached;46545,1678532
  sqlite3_backup *pNext;pNext46546,1678613
static Btree *findBtree(findBtree46588,1680516
SQLITE_API sqlite3_backup *sqlite3_backup_init(sqlite3_backup_init46628,1681615
static int isFatalError(46693,1683829
static int backupOnePage(46702,1684102
static int backupTruncateFile(46763,1686334
static void attachBackupObject(46776,1686700
SQLITE_API int sqlite3_backup_step(46788,1686999
SQLITE_API int sqlite3_backup_finish(46974,1693865
SQLITE_API int sqlite3_backup_remaining(47023,1695242
SQLITE_API int sqlite3_backup_pagecount(47031,1695451
SQLITE_PRIVATE void sqlite3BackupUpdate(47047,1696054
SQLITE_PRIVATE void sqlite3BackupRestart(47076,1697218
SQLITE_PRIVATE int sqlite3BtreeCopyFile(47093,1697789
#define expandBlob(47154,1699825
SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(47169,1700454
SQLITE_PRIVATE int sqlite3VdbeMemGrow(47206,1701726
SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(47251,1703096
SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(47274,1703714
SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(47302,1704413
SQLITE_PRIVATE int sqlite3VdbeMemStringify(47329,1705424
SQLITE_PRIVATE int sqlite3VdbeMemFinalize(47373,1706765
SQLITE_PRIVATE void sqlite3VdbeMemReleaseExternal(47398,1707582
SQLITE_PRIVATE void sqlite3VdbeMemRelease(47426,1708492
static i64 doubleToInt64(47446,1709182
SQLITE_PRIVATE i64 sqlite3VdbeIntValue(47486,1710670
SQLITE_PRIVATE double sqlite3VdbeRealValue(47516,1711526
SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(47545,1712426
SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(47574,1713490
SQLITE_PRIVATE int sqlite3VdbeMemRealify(47588,1713886
SQLITE_PRIVATE int sqlite3VdbeMemNumerify(47605,1714449
SQLITE_PRIVATE void sqlite3VdbeMemSetNull(47627,1715135
SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(47642,1715517
SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(47664,1715999
SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(47676,1716307
SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(47692,1716663
SQLITE_PRIVATE int sqlite3VdbeMemTooBig(47713,1717311
#define MEMCELLSIZE 47728,1717634
SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(47736,1717947
SQLITE_PRIVATE int sqlite3VdbeMemCopy(47752,1718455
SQLITE_PRIVATE void sqlite3VdbeMemMove(47776,1719068
SQLITE_PRIVATE int sqlite3VdbeMemSetStr(47803,1720140
SQLITE_PRIVATE int sqlite3MemCompare(47893,1722796
SQLITE_PRIVATE int sqlite3VdbeMemFromBtree(48015,1726575
SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3ValueText48072,1728604
SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3ValueNew48111,1729770
SQLITE_PRIVATE int sqlite3ValueFromExpr(48131,1730480
SQLITE_PRIVATE void sqlite3ValueSetStr(48209,1732788
SQLITE_PRIVATE void sqlite3ValueFree(48222,1733181
SQLITE_PRIVATE int sqlite3ValueBytes(48232,1733437
SQLITE_PRIVATE int sqlite3VdbeAddopTrace 48271,1734763
SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(sqlite3VdbeCreate48278,1734865
SQLITE_PRIVATE void sqlite3VdbeSetSql(48296,1735222
SQLITE_API const char *sqlite3_sql(sqlite3_sql48310,1735604
SQLITE_PRIVATE void sqlite3VdbeSwap(48318,1735792
SQLITE_PRIVATE void sqlite3VdbeTrace(48340,1736204
static int growOpArray(48354,1736647
SQLITE_PRIVATE int sqlite3VdbeAddOp3(48381,1737403
SQLITE_PRIVATE int sqlite3VdbeAddOp0(48413,1738039
SQLITE_PRIVATE int sqlite3VdbeAddOp1(48416,1738140
SQLITE_PRIVATE int sqlite3VdbeAddOp2(48419,1738250
SQLITE_PRIVATE int sqlite3VdbeAddOp4(48427,1738435
SQLITE_PRIVATE int sqlite3VdbeAddOp4Int(48444,1738968
SQLITE_PRIVATE int sqlite3VdbeMakeLabel(48471,1740063
SQLITE_PRIVATE void sqlite3VdbeResolveLabel(48492,1740690
SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(48504,1740953
typedef struct VdbeOpIter VdbeOpIter;48526,1741582
struct VdbeOpIter 48527,1741620
  Vdbe *v;v48528,1741640
  SubProgram **apSub;apSub48529,1741714
  int nSub;48530,1741770
  int iAddr;48531,1741832
  int iSub;48532,1741905
static Op *opIterNext(opIterNext48534,1741988
SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(48598,1743715
static void resolveP2Values(48642,1745295
SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(48682,1746366
SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(sqlite3VdbeTakeOpArray48698,1746983
SQLITE_PRIVATE int sqlite3VdbeAddOpList(48715,1747431
SQLITE_PRIVATE void sqlite3VdbeChangeP1(48757,1748568
SQLITE_PRIVATE void sqlite3VdbeChangeP2(48769,1748861
SQLITE_PRIVATE void sqlite3VdbeChangeP3(48780,1749096
SQLITE_PRIVATE void sqlite3VdbeChangeP5(48792,1749345
SQLITE_PRIVATE void sqlite3VdbeJumpHere(48804,1749623
static void freeEphemeralFunction(48813,1749848
static void freeP4(48822,1750050
static void vdbeFreeOpArray(48867,1751161
SQLITE_PRIVATE void sqlite3VdbeProgramDelete(48893,1752053
SQLITE_PRIVATE void sqlite3VdbeChangeToNoop(48913,1752446
SQLITE_PRIVATE void sqlite3VdbeChangeP4(48951,1753972
SQLITE_PRIVATE void sqlite3VdbeComment(49025,1756134
SQLITE_PRIVATE void sqlite3VdbeNoopComment(49038,1756542
SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(sqlite3VdbeGetOp49072,1758022
static char *displayP4(displayP449095,1758643
SQLITE_PRIVATE void sqlite3VdbeUsesBtree(49197,1761323
SQLITE_PRIVATE void sqlite3VdbePrintOp(49213,1761769
static void releaseMemArray(49234,1762283
SQLITE_PRIVATE void sqlite3VdbeFrameDelete(49271,1763648
SQLITE_PRIVATE int sqlite3VdbeList(49298,1764584
SQLITE_PRIVATE void sqlite3VdbePrintSql(49486,1770673
SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(49503,1771080
static void *allocSpace(allocSpace49550,1772646
SQLITE_PRIVATE void sqlite3VdbeMakeReady(49586,1774085
SQLITE_PRIVATE void sqlite3VdbeFreeCursor(49710,1778364
SQLITE_PRIVATE int sqlite3VdbeFrameRestore(49737,1779133
static void closeAllCursors(49758,1779740
static void Cleanup(49789,1780448
SQLITE_PRIVATE void sqlite3VdbeSetNumCols(49811,1781159
SQLITE_PRIVATE int sqlite3VdbeSetColName(49839,1782069
static int vdbeCommit(49867,1783151
static void checkActiveVdbeCnt(50093,1790712
#define checkActiveVdbeCnt(50109,1791040
static void invalidateCursorsOnModifiedBtrees(50128,1791786
SQLITE_PRIVATE int sqlite3VdbeCloseStatement(50148,1792444
SQLITE_PRIVATE void sqlite3VdbeMutexArrayEnter(50211,1794804
SQLITE_PRIVATE int sqlite3VdbeCheckFk(50231,1795486
SQLITE_PRIVATE int sqlite3VdbeHalt(50256,1796438
SQLITE_PRIVATE void sqlite3VdbeResetStepResult(50443,1802735
SQLITE_PRIVATE int sqlite3VdbeReset(50458,1803202
SQLITE_PRIVATE int sqlite3VdbeFinalize(50534,1805456
SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(50550,1805943
SQLITE_PRIVATE void sqlite3VdbeDelete(50566,1806308
SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(50605,1807517
SQLITE_PRIVATE u32 sqlite3VdbeSerialType(50682,1810213
#   define MAX_6BYTE 50691,1810444
SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(50720,1811112
static u64 floatSwap(50764,1813061
    u64 r;50766,1813101
    u32 i[i50767,1813112
# define swapMixedEndianFloat(50777,1813218
# define swapMixedEndianFloat(50779,1813275
SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(50800,1814185
SQLITE_PRIVATE u32 sqlite3VdbeSerialGet(50850,1815456
SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeRecordUnpack(sqlite3VdbeRecordUnpack50957,1818811
SQLITE_PRIVATE void sqlite3VdbeDeleteUnpackedRecord(51018,1820851
SQLITE_PRIVATE int sqlite3VdbeRecordCompare(51063,1822819
SQLITE_PRIVATE int sqlite3VdbeIdxRowid(51172,1826798
SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare(51252,1829649
SQLITE_PRIVATE void sqlite3VdbeSetChanges(51286,1830811
SQLITE_PRIVATE void sqlite3VdbeCountChanges(51296,1831077
SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(51310,1831575
SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(sqlite3VdbeDb51320,1831771
SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetValue(sqlite3VdbeGetValue51332,1832197
SQLITE_PRIVATE void sqlite3VdbeSetVarmask(51354,1832829
SQLITE_API int sqlite3_expired(51390,1834041
static int vdbeSafety(51401,1834339
static int vdbeSafetyNotNull(51409,1834512
SQLITE_API int sqlite3_finalize(51427,1835054
SQLITE_API int sqlite3_reset(51457,1835840
SQLITE_API int sqlite3_clear_bindings(51476,1836302
SQLITE_API const void *sqlite3_value_blob(sqlite3_value_blob51500,1836913
SQLITE_API int sqlite3_value_bytes(51511,1837193
SQLITE_API int sqlite3_value_bytes16(51514,1837299
SQLITE_API double sqlite3_value_double(51517,1837414
SQLITE_API int sqlite3_value_int(51520,1837520
SQLITE_API sqlite_int64 sqlite3_value_int64(51523,1837624
SQLITE_API const unsigned char *sqlite3_value_text(sqlite3_value_text51526,1837734
SQLITE_API const void *sqlite3_value_text16(sqlite3_value_text1651530,1837904
SQLITE_API const void *sqlite3_value_text16be(sqlite3_value_text16be51533,1838025
SQLITE_API const void *sqlite3_value_text16le(sqlite3_value_text16le51536,1838144
SQLITE_API int sqlite3_value_type(51540,1838294
static void setResultStrOrError(51552,1838746
SQLITE_API void sqlite3_result_blob(51563,1839168
SQLITE_API void sqlite3_result_double(51573,1839400
SQLITE_API void sqlite3_result_error(51577,1839571
SQLITE_API void sqlite3_result_error16(51583,1839836
SQLITE_API void sqlite3_result_int(51589,1840091
SQLITE_API void sqlite3_result_int64(51593,1840260
SQLITE_API void sqlite3_result_null(51597,1840426
SQLITE_API void sqlite3_result_text(51601,1840574
SQLITE_API void sqlite3_result_text16(51611,1840823
SQLITE_API void sqlite3_result_text16be(51620,1841056
SQLITE_API void sqlite3_result_text16le(51629,1841287
SQLITE_API void sqlite3_result_value(51639,1841549
SQLITE_API void sqlite3_result_zeroblob(51643,1841726
SQLITE_API void sqlite3_result_error_code(51647,1841892
SQLITE_API void sqlite3_result_error_toobig(51656,1842193
SQLITE_API void sqlite3_result_error_nomem(51664,1842493
static int sqlite3Step(51680,1843095
SQLITE_API int sqlite3_step(51780,1846049
SQLITE_API void *sqlite3_user_data(sqlite3_user_data51826,1847701
SQLITE_API sqlite3 *sqlite3_context_db_handle(sqlite3_context_db_handle51835,1847912
SQLITE_PRIVATE void sqlite3InvalidFunction(51848,1848418
SQLITE_API void *sqlite3_aggregate_context(sqlite3_aggregate_context51867,1849119
SQLITE_API void *sqlite3_get_auxdata(sqlite3_get_auxdata51894,1849822
SQLITE_API void sqlite3_set_auxdata(51910,1850330
SQLITE_API int sqlite3_aggregate_count(51959,1851657
SQLITE_API int sqlite3_column_count(51968,1851886
SQLITE_API int sqlite3_data_count(51977,1852127
static Mem *columnMem(columnMem51990,1852512
static void columnMallocFailure(52046,1854649
SQLITE_API const void *sqlite3_column_blob(sqlite3_column_blob52064,1855268
SQLITE_API int sqlite3_column_bytes(52074,1855612
SQLITE_API int sqlite3_column_bytes16(52079,1855778
SQLITE_API double sqlite3_column_double(52084,1855948
SQLITE_API int sqlite3_column_int(52089,1856122
SQLITE_API sqlite_int64 sqlite3_column_int64(52094,1856284
SQLITE_API const unsigned char *sqlite3_column_text(sqlite3_column_text52099,1856468
SQLITE_API sqlite3_value *sqlite3_column_value(sqlite3_column_value52104,1856666
SQLITE_API const void *sqlite3_column_text16(sqlite3_column_text1652114,1856965
SQLITE_API int sqlite3_column_type(52120,1857180
static const void *columnName(columnName52149,1858279
SQLITE_API const char *sqlite3_column_name(sqlite3_column_name52183,1859046
SQLITE_API const void *sqlite3_column_name16(sqlite3_column_name1652188,1859240
SQLITE_API const char *sqlite3_column_decltype(sqlite3_column_decltype52208,1859855
SQLITE_API const void *sqlite3_column_decltype16(sqlite3_column_decltype1652213,1860057
SQLITE_API const char *sqlite3_column_database_name(sqlite3_column_database_name52226,1860566
SQLITE_API const void *sqlite3_column_database_name16(sqlite3_column_database_name1652231,1860773
SQLITE_API const char *sqlite3_column_table_name(sqlite3_column_table_name52242,1861213
SQLITE_API const void *sqlite3_column_table_name16(sqlite3_column_table_name1652247,1861414
SQLITE_API const char *sqlite3_column_origin_name(sqlite3_column_origin_name52258,1861855
SQLITE_API const void *sqlite3_column_origin_name16(sqlite3_column_origin_name1652263,1862058
static int vdbeUnbind(52286,1862922
static int bindText(52324,1863934
SQLITE_API int sqlite3_bind_blob(52356,1864838
SQLITE_API int sqlite3_bind_double(52365,1865021
SQLITE_API int sqlite3_bind_int(52375,1865295
SQLITE_API int sqlite3_bind_int64(52378,1865414
SQLITE_API int sqlite3_bind_null(52388,1865692
SQLITE_API int sqlite3_bind_text(52397,1865896
SQLITE_API int sqlite3_bind_text16(52407,1866116
SQLITE_API int sqlite3_bind_value(52417,1866349
SQLITE_API int sqlite3_bind_zeroblob(52448,1867170
SQLITE_API int sqlite3_bind_parameter_count(52463,1867561
static void createVarMap(52473,1867823
SQLITE_API const char *sqlite3_bind_parameter_name(sqlite3_bind_parameter_name52500,1868619
SQLITE_PRIVATE int sqlite3VdbeParameterIndex(52514,1868976
SQLITE_API int sqlite3_bind_parameter_index(52530,1869312
SQLITE_PRIVATE int sqlite3TransferBindings(52537,1869557
SQLITE_API int sqlite3_transfer_bindings(52564,1870480
SQLITE_API sqlite3 *sqlite3_db_handle(sqlite3_db_handle52586,1871163
SQLITE_API sqlite3_stmt *sqlite3_next_stmt(sqlite3_next_stmt52596,1871505
SQLITE_API int sqlite3_stmt_status(52611,1871887
static int findNextHostParameter(52644,1873056
SQLITE_PRIVATE char *sqlite3VdbeExpandSql(sqlite3VdbeExpandSql52679,1874193
SQLITE_API int sqlite3_search_count 52817,1879631
SQLITE_API int sqlite3_interrupt_count 52829,1880032
SQLITE_API int sqlite3_sort_count 52840,1880422
SQLITE_API int sqlite3_max_blobsize 52851,1880829
static void updateMaxBlobsize(52852,1880870
SQLITE_API int sqlite3_found_count 52867,1881350
# define UPDATE_MAX_BLOBSIZE(52875,1881587
# define UPDATE_MAX_BLOBSIZE(52877,1881647
#define Stringify(52884,1881802
#define Deephemeralize(52899,1882436
#define ExpandBlob(52907,1882651
SQLITE_PRIVATE void sqlite3VdbeMemStoreType(52915,1882961
static VdbeCursor *allocateCursor(allocateCursor52937,1883451
static void applyNumericAffinity(52999,1885786
static void applyAffinity(53048,1887186
SQLITE_API int sqlite3_value_numeric_type(53080,1888390
SQLITE_PRIVATE void sqlite3ValueApplyAffinity(53091,1888679
SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(53104,1888953
static void memTracePrint(53186,1891085
static void registerTrace(53206,1891667
#  define REGISTER_TRACE(53214,1891836
#  define REGISTER_TRACE(53216,1891912
#define _HWTIME_H_53244,1892740
  __inline__ sqlite_uint64 sqlite3Hwtime(53257,1893132
  __declspec(53265,1893340
  __inline__ sqlite_uint64 sqlite3Hwtime(53276,1893555
  __inline__ sqlite_uint64 sqlite3Hwtime(53284,1893750
SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(53308,1894492
#define CHECK_FOR_INTERRUPT 53329,1895260
static int fileExists(53333,1895370
static int checkSavepointCount(53360,1896222
SQLITE_PRIVATE int sqlite3VdbeExec(53400,1897698
  union vdbeExecUnion 53433,1899300
    struct OP_Yield_stack_vars 53434,1899324
      int pcDest;53435,1899357
    } aa;53436,1899375
    struct OP_Variable_stack_vars 53437,1899385
      int p1;53438,1899421
      int p2;53439,1899472
      int n;53440,1899521
      Mem *pVar;pVar53441,1899580
    } ab;53442,1899633
    struct OP_Move_stack_vars 53443,1899643
      char *zMalloc;zMalloc53444,1899675
      int n;53445,1899742
      int p1;53446,1899804
      int p2;53447,1899855
    } ac;53448,1899904
    struct OP_ResultRow_stack_vars 53449,1899914
      Mem *pMem;pMem53450,1899951
      int i;53451,1899968
    } ad;53452,1899981
    struct OP_Concat_stack_vars 53453,1899991
      i64 nByte;53454,1900025
    } ae;53455,1900042
    struct OP_Remainder_stack_vars 53456,1900052
      int flags;53457,1900089
      i64 iA;53458,1900155
      i64 iB;53459,1900213
      double rA;53460,1900272
      double rB;53461,1900327
    } af;53462,1900383
    struct OP_Function_stack_vars 53463,1900393
      int i;53464,1900429
      Mem *pArg;pArg53465,1900442
      sqlite3_context ctx;53466,1900459
      sqlite3_value **apVal;apVal53467,1900486
      int n;53468,1900515
    } ag;53469,1900528
    struct OP_ShiftRight_stack_vars 53470,1900538
      i64 a;53471,1900576
      i64 b;53472,1900589
    } ah;53473,1900602
    struct OP_Ge_stack_vars 53474,1900612
      int res;53475,1900642
      char affinity;53476,1900720
      u16 flags1;53477,1900783
      u16 flags3;53478,1900852
    } ai;53479,1900921
    struct OP_Compare_stack_vars 53480,1900931
      int n;53481,1900966
      int i;53482,1900979
      int p1;53483,1900992
      int p2;53484,1901006
      const KeyInfo *pKeyInfo;pKeyInfo53485,1901020
      int idx;53486,1901051
      CollSeq *pColl;pColl53487,1901066
      int bRev;53488,1901136
    } aj;53489,1901198
    struct OP_Or_stack_vars 53490,1901208
      int v1;53491,1901238
      int v2;53492,1901314
    } ak;53493,1901390
    struct OP_IfNot_stack_vars 53494,1901400
      int c;53495,1901433
    } al;53496,1901446
    struct OP_Column_stack_vars 53497,1901456
      u32 payloadSize;53498,1901490
      i64 payloadSize64;53499,1901551
      int p1;53500,1901612
      int p2;53501,1901666
      VdbeCursor *pC;pC53502,1901723
      char *zRec;zRec53503,1901770
      BtCursor *pCrsr;pCrsr53504,1901833
      u32 *aType;aType53505,1901881
      u32 *aOffset;aOffset53506,1901963
      int nField;53507,1902048
      int len;53508,1902110
      int i;53509,1902190
      char *zData;zData53510,1902234
      Mem *pDest;pDest53511,1902298
      Mem sMem;53512,1902364
      u8 *zIdx;zIdx53513,1902432
      u8 *zEndHdr;zEndHdr53514,1902481
      u32 offset;53515,1902551
      u32 szField;53516,1902603
      int szHdr;53517,1902676
      int avail;53518,1902756
      Mem *pReg;pReg53519,1902821
    } am;53520,1902879
    struct OP_Affinity_stack_vars 53521,1902889
      const char *zAffinity;zAffinity53522,1902925
      char cAff;53523,1902989
    } an;53524,1903057
    struct OP_MakeRecord_stack_vars 53525,1903067
      u8 *zNewRecord;zNewRecord53526,1903105
      Mem *pRec;pRec53527,1903185
      u64 nData;53528,1903235
      int nHdr;53529,1903300
      i64 nByte;53530,1903367
      int nZero;53531,1903438
      int nVarint;53532,1903519
      u32 serial_type;53533,1903582
      Mem *pData0;pData053534,1903628
      Mem *pLast;pLast53535,1903706
      int nField;53536,1903766
      char *zAffinity;zAffinity53537,1903832
      int file_format;53538,1903902
      int i;53539,1903969
      int len;53540,1904031
    } ao;53541,1904084
    struct OP_Count_stack_vars 53542,1904094
      i64 nEntry;53543,1904127
      BtCursor *pCrsr;pCrsr53544,1904145
    } ap;53545,1904168
    struct OP_Savepoint_stack_vars 53546,1904178
      int p1;53547,1904215
      char *zName;zName53548,1904279
      int nName;53549,1904341
      Savepoint *pNew;pNew53550,1904358
      Savepoint *pSavepoint;pSavepoint53551,1904381
      Savepoint *pTmp;pTmp53552,1904410
      int iSavepoint;53553,1904433
      int ii;53554,1904455
    } aq;53555,1904469
    struct OP_AutoCommit_stack_vars 53556,1904479
      int desiredAutoCommit;53557,1904517
      int iRollback;53558,1904546
      int turnOnAC;53559,1904567
    } ar;53560,1904587
    struct OP_Transaction_stack_vars 53561,1904597
      Btree *pBt;pBt53562,1904636
    } as;53563,1904654
    struct OP_ReadCookie_stack_vars 53564,1904664
      int iMeta;53565,1904702
      int iDb;53566,1904719
      int iCookie;53567,1904734
    } at;53568,1904753
    struct OP_SetCookie_stack_vars 53569,1904763
      Db *pDb;pDb53570,1904800
    } au;53571,1904815
    struct OP_VerifyCookie_stack_vars 53572,1904825
      int iMeta;53573,1904865
      Btree *pBt;pBt53574,1904882
    } av;53575,1904900
    struct OP_OpenWrite_stack_vars 53576,1904910
      int nField;53577,1904947
      KeyInfo *pKeyInfo;pKeyInfo53578,1904965
      int p2;53579,1904990
      int iDb;53580,1905004
      int wrFlag;53581,1905019
      Btree *pX;pX53582,1905037
      VdbeCursor *pCur;pCur53583,1905054
      Db *pDb;pDb53584,1905078
    } aw;53585,1905093
    struct OP_OpenEphemeral_stack_vars 53586,1905103
      VdbeCursor *pCx;pCx53587,1905144
    } ax;53588,1905167
    struct OP_OpenPseudo_stack_vars 53589,1905177
      VdbeCursor *pCx;pCx53590,1905215
    } ay;53591,1905238
    struct OP_SeekGt_stack_vars 53592,1905248
      int res;53593,1905282
      int oc;53594,1905297
      VdbeCursor *pC;pC53595,1905311
      UnpackedRecord r;53596,1905333
      int nField;53597,1905357
      i64 iKey;53598,1905375
    } az;53599,1905430
    struct OP_Seek_stack_vars 53600,1905440
      VdbeCursor *pC;pC53601,1905472
    } ba;53602,1905494
    struct OP_Found_stack_vars 53603,1905504
      int alreadyExists;53604,1905537
      VdbeCursor *pC;pC53605,1905562
      int res;53606,1905584
      UnpackedRecord *pIdxKey;pIdxKey53607,1905599
      UnpackedRecord r;53608,1905630
      char aTempRec[aTempRec53609,1905654
    } bb;53610,1905727
    struct OP_IsUnique_stack_vars 53611,1905737
      u16 ii;53612,1905773
      VdbeCursor *pCx;pCx53613,1905787
      BtCursor *pCrsr;pCrsr53614,1905810
      u16 nField;53615,1905833
      Mem *aMx;aMx53616,1905851
      UnpackedRecord r;53617,1905867
      i64 R;53618,1905938
    } bc;53619,1906013
    struct OP_NotExists_stack_vars 53620,1906023
      VdbeCursor *pC;pC53621,1906060
      BtCursor *pCrsr;pCrsr53622,1906082
      int res;53623,1906105
      u64 iKey;53624,1906120
    } bd;53625,1906136
    struct OP_NewRowid_stack_vars 53626,1906146
      i64 v;53627,1906182
      VdbeCursor *pC;pC53628,1906231
      int res;53629,1906303
      int cnt;53630,1906370
      Mem *pMem;pMem53631,1906445
      VdbeFrame *pFrame;pFrame53632,1906529
    } be;53633,1906583
    struct OP_InsertInt_stack_vars 53634,1906593
      Mem *pData;pData53635,1906630
      Mem *pKey;pKey53636,1906712
      i64 iKey;53637,1906779
      VdbeCursor *pC;pC53638,1906864
      int nZero;53639,1906939
      int seekResult;53640,1907000
      const char *zDb;zDb53641,1907081
      const char *zTbl;zTbl53642,1907151
      int op;53643,1907218
    } bf;53644,1907303
    struct OP_Delete_stack_vars 53645,1907313
      i64 iKey;53646,1907347
      VdbeCursor *pC;pC53647,1907363
    } bg;53648,1907385
    struct OP_RowData_stack_vars 53649,1907395
      VdbeCursor *pC;pC53650,1907430
      BtCursor *pCrsr;pCrsr53651,1907452
      u32 n;53652,1907475
      i64 n64;53653,1907488
    } bh;53654,1907503
    struct OP_Rowid_stack_vars 53655,1907513
      VdbeCursor *pC;pC53656,1907546
      i64 v;53657,1907568
      sqlite3_vtab *pVtab;pVtab53658,1907581
      const sqlite3_module *pModule;pModule53659,1907608
    } bi;53660,1907645
    struct OP_NullRow_stack_vars 53661,1907655
      VdbeCursor *pC;pC53662,1907690
    } bj;53663,1907712
    struct OP_Last_stack_vars 53664,1907722
      VdbeCursor *pC;pC53665,1907754
      BtCursor *pCrsr;pCrsr53666,1907776
      int res;53667,1907799
    } bk;53668,1907814
    struct OP_Rewind_stack_vars 53669,1907824
      VdbeCursor *pC;pC53670,1907858
      BtCursor *pCrsr;pCrsr53671,1907880
      int res;53672,1907903
    } bl;53673,1907918
    struct OP_Next_stack_vars 53674,1907928
      VdbeCursor *pC;pC53675,1907960
      BtCursor *pCrsr;pCrsr53676,1907982
      int res;53677,1908005
    } bm;53678,1908020
    struct OP_IdxInsert_stack_vars 53679,1908030
      VdbeCursor *pC;pC53680,1908067
      BtCursor *pCrsr;pCrsr53681,1908089
      int nKey;53682,1908112
      const char *zKey;zKey53683,1908128
    } bn;53684,1908152
    struct OP_IdxDelete_stack_vars 53685,1908162
      VdbeCursor *pC;pC53686,1908199
      BtCursor *pCrsr;pCrsr53687,1908221
      int res;53688,1908244
      UnpackedRecord r;53689,1908259
    } bo;53690,1908283
    struct OP_IdxRowid_stack_vars 53691,1908293
      BtCursor *pCrsr;pCrsr53692,1908329
      VdbeCursor *pC;pC53693,1908352
      i64 rowid;53694,1908374
    } bp;53695,1908391
    struct OP_IdxGE_stack_vars 53696,1908401
      VdbeCursor *pC;pC53697,1908434
      int res;53698,1908456
      UnpackedRecord r;53699,1908471
    } bq;53700,1908495
    struct OP_Destroy_stack_vars 53701,1908505
      int iMoved;53702,1908540
      int iCnt;53703,1908558
      Vdbe *pVdbe;pVdbe53704,1908574
      int iDb;53705,1908593
    } br;53706,1908608
    struct OP_Clear_stack_vars 53707,1908618
      int nChange;53708,1908651
    } bs;53709,1908670
    struct OP_CreateTable_stack_vars 53710,1908680
      int pgno;53711,1908719
      int flags;53712,1908735
      Db *pDb;pDb53713,1908752
    } bt;53714,1908767
    struct OP_ParseSchema_stack_vars 53715,1908777
      int iDb;53716,1908816
      const char *zMaster;zMaster53717,1908831
      char *zSql;zSql53718,1908858
      InitData initData;53719,1908876
    } bu;53720,1908901
    struct OP_IntegrityCk_stack_vars 53721,1908911
      int nRoot;53722,1908950
      int *aRoot;aRoot53723,1909030
      int j;53724,1909109
      int nErr;53725,1909150
      char *z;z53726,1909204
      Mem *pnErr;pnErr53727,1909257
    } bv;53728,1909328
    struct OP_RowSetRead_stack_vars 53729,1909338
      i64 val;53730,1909376
    } bw;53731,1909391
    struct OP_RowSetTest_stack_vars 53732,1909401
      int iSet;53733,1909439
      int exists;53734,1909455
    } bx;53735,1909473
    struct OP_Program_stack_vars 53736,1909483
      int nMem;53737,1909518
      int nByte;53738,1909597
      Mem *pRt;pRt53739,1909681
      Mem *pMem;pMem53740,1909752
      Mem *pEnd;pEnd53741,1909825
      VdbeFrame *pFrame;pFrame53742,1909891
      SubProgram *pProgram;pProgram53743,1909956
      void *t;t53744,1910015
    } by;53745,1910077
    struct OP_Param_stack_vars 53746,1910087
      VdbeFrame *pFrame;pFrame53747,1910120
      Mem *pIn;pIn53748,1910145
    } bz;53749,1910161
    struct OP_MemMax_stack_vars 53750,1910171
      Mem *pIn1;pIn153751,1910205
      VdbeFrame *pFrame;pFrame53752,1910222
    } ca;53753,1910247
    struct OP_AggStep_stack_vars 53754,1910257
      int n;53755,1910292
      int i;53756,1910305
      Mem *pMem;pMem53757,1910318
      Mem *pRec;pRec53758,1910335
      sqlite3_context ctx;53759,1910352
      sqlite3_value **apVal;apVal53760,1910379
    } cb;53761,1910408
    struct OP_AggFinal_stack_vars 53762,1910418
      Mem *pMem;pMem53763,1910454
    } cc;53764,1910471
    struct OP_IncrVacuum_stack_vars 53765,1910481
      Btree *pBt;pBt53766,1910519
    } cd;53767,1910537
    struct OP_VBegin_stack_vars 53768,1910547
      VTable *pVTab;pVTab53769,1910581
    } ce;53770,1910602
    struct OP_VOpen_stack_vars 53771,1910612
      VdbeCursor *pCur;pCur53772,1910645
      sqlite3_vtab_cursor *pVtabCursor;pVtabCursor53773,1910669
      sqlite3_vtab *pVtab;pVtab53774,1910709
      sqlite3_module *pModule;pModule53775,1910736
    } cf;53776,1910767
    struct OP_VFilter_stack_vars 53777,1910777
      int nArg;53778,1910812
      int iQuery;53779,1910828
      const sqlite3_module *pModule;pModule53780,1910846
      Mem *pQuery;pQuery53781,1910883
      Mem *pArgc;pArgc53782,1910902
      sqlite3_vtab_cursor *pVtabCursor;pVtabCursor53783,1910920
      sqlite3_vtab *pVtab;pVtab53784,1910960
      VdbeCursor *pCur;pCur53785,1910987
      int res;53786,1911011
      int i;53787,1911026
      Mem **apArg;apArg53788,1911039
    } cg;53789,1911058
    struct OP_VColumn_stack_vars 53790,1911068
      sqlite3_vtab *pVtab;pVtab53791,1911103
      const sqlite3_module *pModule;pModule53792,1911130
      Mem *pDest;pDest53793,1911167
      sqlite3_context sContext;53794,1911185
    } ch;53795,1911217
    struct OP_VNext_stack_vars 53796,1911227
      sqlite3_vtab *pVtab;pVtab53797,1911260
      const sqlite3_module *pModule;pModule53798,1911287
      int res;53799,1911324
      VdbeCursor *pCur;pCur53800,1911339
    } ci;53801,1911363
    struct OP_VRename_stack_vars 53802,1911373
      sqlite3_vtab *pVtab;pVtab53803,1911408
      Mem *pName;pName53804,1911435
    } cj;53805,1911453
    struct OP_VUpdate_stack_vars 53806,1911463
      sqlite3_vtab *pVtab;pVtab53807,1911498
      sqlite3_module *pModule;pModule53808,1911525
      int nArg;53809,1911556
      int i;53810,1911572
      sqlite_int64 rowid;53811,1911585
      Mem **apArg;apArg53812,1911611
      Mem *pX;pX53813,1911630
    } ck;53814,1911645
    struct OP_Pagecount_stack_vars 53815,1911655
      int p1;53816,1911692
      int nPage;53817,1911706
      Pager *pPager;pPager53818,1911723
    } cl;53819,1911744
    struct OP_Trace_stack_vars 53820,1911754
      char *zTrace;zTrace53821,1911787
    } cm;53822,1911807
case OP_Gosub:OP_Gosub54019,1918160
case OP_Return:OP_Return54033,1918479
case OP_HaltIfNull:OP_HaltIfNull54064,1919302
case OP_Copy:OP_Copy54324,1927121
case OP_SCopy:OP_SCopy54346,1927864
case OP_AddImm:OP_AddImm54782,1942432
case OP_MustBeInt:OP_MustBeInt54796,1942841
case OP_RealAffinity:OP_RealAffinity54822,1943561
case OP_ToText:OP_ToText54841,1944064
case OP_ToBlob:OP_ToBlob54863,1944796
case OP_ToNumeric:OP_ToNumeric54887,1945564
case OP_ToInt:OP_ToInt54905,1946165
case OP_ToReal:OP_ToReal54923,1946783
case OP_Not:OP_Not55235,1958082
case OP_BitNot:OP_BitNot55252,1958549
case OP_IsNull:OP_IsNull55301,1959860
case OP_NotNull:OP_NotNull55313,1960118
#   define MAX_ROWID 56988,2022681
#   define MAX_ROWID 56994,2022949
case OP_RowSetAdd:OP_RowSetAdd58088,2060172
case OP_IfPos:OP_IfPos58404,2071413
case OP_IfNeg:OP_IfNeg58420,2071808
case OP_IfZero:OP_IfZero58437,2072276
case OP_Vacuum:OP_Vacuum58541,2075355
case OP_TableLock:OP_TableLock58604,2077121
case OP_VCreate:OP_VCreate58652,2078577
      u64 elapsed 59068,2091428
  p->rc rc59105,2092567
  rc 59111,2092798
  sqlite3BtreeMutexArrayLeave(&p->aMutex)aMutex59118,2093030
  rc 59126,2093253
  goto vdbe_error_halt;59127,2093275
  db->mallocFailed mallocFailed59132,2093352
  rc 59134,2093430
  goto vdbe_error_halt;59135,2093451
  goto vdbe_error_halt;59146,2093779
  rc 59153,2093946
  p->rc rc59154,2093971
  goto vdbe_error_halt;59156,2094047
typedef struct Incrblob Incrblob;59182,2094774
struct Incrblob 59183,2094808
  int flags;59184,2094826
  int nByte;59185,2094904
  int iOffset;59186,2094964
  BtCursor *pCsr;pCsr59187,2095031
  sqlite3_stmt *pStmt;pStmt59188,2095091
  sqlite3 *db;db59189,2095153
SQLITE_API int sqlite3_blob_open(59195,2095242
SQLITE_API int sqlite3_blob_close(59447,2103791
static int blobReadWrite(59467,2104172
SQLITE_API int sqlite3_blob_read(59517,2105394
SQLITE_API int sqlite3_blob_write(59524,2105583
SQLITE_API int sqlite3_blob_bytes(59534,2105919
struct JournalFile 59576,2107394
  sqlite3_io_methods *pMethod;pMethod59577,2107415
  int nBuf;59578,2107484
  char *zBuf;zBuf59579,2107548
  int iSize;59580,2107619
  int flags;59581,2107691
  sqlite3_vfs *pVfs;pVfs59582,2107743
  sqlite3_file *pReal;pReal59583,2107809
  const char *zJournal;zJournal59584,2107887
typedef struct JournalFile JournalFile;59586,2107955
static int createFile(59592,2108096
static int jrnlClose(59611,2108519
static int jrnlRead(59623,2108735
static int jrnlWrite(59644,2109300
static int jrnlTruncate(59671,2110004
static int jrnlSync(59685,2110286
static int jrnlFileSize(59699,2110542
static struct sqlite3_io_methods JournalFileMethods 59713,2110863
SQLITE_PRIVATE int sqlite3JournalOpen(59732,2111389
SQLITE_PRIVATE int sqlite3JournalCreate(59761,2112277
SQLITE_PRIVATE int sqlite3JournalSize(59772,2112576
typedef struct MemJournal MemJournal;59797,2113496
typedef struct FilePoint FilePoint;59798,2113534
typedef struct FileChunk FileChunk;59799,2113570
#define JOURNAL_CHUNKSIZE 59809,2113933
# define MIN(59814,2114060
struct FileChunk 59820,2114184
  FileChunk *pNext;pNext59821,2114203
  u8 zChunk[zChunk59822,2114269
struct FilePoint 59829,2114469
  sqlite3_int64 iOffset;59830,2114488
  FileChunk *pChunk;pChunk59831,2114566
struct MemJournal 59838,2114763
  sqlite3_io_methods *pMethod;pMethod59839,2114783
  FileChunk *pFirst;pFirst59840,2114851
  FilePoint endpoint;59841,2114920
  FilePoint readpoint;59842,2114991
static int memjrnlRead(59849,2115190
static int memjrnlWrite(59894,2116455
static int memjrnlTruncate(59944,2117850
static int memjrnlClose(59962,2118227
static int memjrnlSync(59976,2118621
static int memjrnlFileSize(59985,2119043
static struct sqlite3_io_methods MemJournalMethods 59994,2119282
SQLITE_PRIVATE void sqlite3MemJournalOpen(60013,2119846
SQLITE_PRIVATE int sqlite3IsMemJournal(60024,2120154
SQLITE_PRIVATE int sqlite3MemJournalSize(60032,2120392
SQLITE_PRIVATE int sqlite3WalkExpr(60073,2121842
SQLITE_PRIVATE int sqlite3WalkExprList(60096,2122671
SQLITE_PRIVATE int sqlite3WalkSelectExpr(60113,2123192
SQLITE_PRIVATE int sqlite3WalkSelectFrom(60131,2124026
SQLITE_PRIVATE int sqlite3WalkSelect(60158,2124778
static void resolveAlias(60218,2127036
static int lookupName(60298,2130351
SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3CreateColumnExpr60578,2139957
static int resolveExprStep(60606,2140844
static int resolveAsName(60790,2146944
static int resolveOrderByTermToExprList(60829,2148226
static void resolveOutOfRangeError(60876,2149612
static int resolveCompoundOrderBy(60902,2150726
SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy(60992,2153379
static int resolveOrderGroupBy(61042,2155355
static int resolveSelectStep(61092,2157285
SQLITE_PRIVATE int sqlite3ResolveExprNames(61307,2164816
SQLITE_PRIVATE void sqlite3ResolveSelectNames(61358,2166215
SQLITE_PRIVATE char sqlite3ExprAffinity(61406,2167848
SQLITE_PRIVATE Expr *sqlite3ExprSetColl(sqlite3ExprSetColl61438,2168968
SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(sqlite3ExprCollSeq61458,2169557
SQLITE_PRIVATE char sqlite3CompareAffinity(61497,2170649
static char comparisonAffinity(61524,2171513
SQLITE_PRIVATE int sqlite3IndexAffinityOk(61547,2172358
static u8 binaryCompareP5(61563,2172813
SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq(sqlite3BinaryCompareCollSeq61581,2173479
static int codeCompare(61606,2174027
SQLITE_PRIVATE int sqlite3ExprCheckHeight(61633,2174932
static void heightOfExpr(61654,2175633
static void heightOfExprList(61661,2175768
static void heightOfSelect(61669,2175936
static void exprSetHeight(61689,2176620
SQLITE_PRIVATE void sqlite3ExprSetHeight(61706,2177097
SQLITE_PRIVATE int sqlite3SelectExprHeight(61715,2177351
  #define exprSetHeight(61721,2177482
SQLITE_PRIVATE Expr *sqlite3ExprAlloc(sqlite3ExprAlloc61744,2178559
SQLITE_PRIVATE Expr *sqlite3Expr(sqlite3Expr61791,2179840
SQLITE_PRIVATE void sqlite3ExprAttachSubtrees(61808,2180385
SQLITE_PRIVATE Expr *sqlite3PExpr(sqlite3PExpr61844,2181269
SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3ExprAnd61860,2181800
SQLITE_PRIVATE Expr *sqlite3ExprFunction(sqlite3ExprFunction61876,2182183
SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(61907,2183276
SQLITE_PRIVATE void sqlite3ExprDelete(61977,2185577
static int exprStructSize(62001,2186322
static int dupedExprStructSize(62041,2188181
static int dupedExprNodeSize(62065,2188975
static int dupedExprSize(62086,2189813
static Expr *exprDup(exprDup62105,2190498
SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3ExprDup62206,2194141
SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3ExprListDup62209,2194248
SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3SrcListDup62245,2195473
SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3IdListDup62278,2196760
SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3SelectDup62298,2197349
SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3SelectDup62323,2198306
SQLITE_PRIVATE ExprList *sqlite3ExprListAppend(sqlite3ExprListAppend62338,2198741
SQLITE_PRIVATE void sqlite3ExprListSetName(62384,2200047
SQLITE_PRIVATE void sqlite3ExprListSetSpan(62409,2200930
SQLITE_PRIVATE void sqlite3ExprListCheckLength(62430,2201673
SQLITE_PRIVATE void sqlite3ExprListDelete(62446,2202073
static int exprNodeIsConstant(62474,2202965
static int selectNodeIsConstant(62506,2204047
static int exprIsConst(62511,2204185
SQLITE_PRIVATE int sqlite3ExprIsConstant(62528,2204681
SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(62538,2204998
SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(62551,2205414
SQLITE_PRIVATE int sqlite3ExprIsInteger(62561,2205802
SQLITE_PRIVATE int sqlite3ExprCanBeNull(62611,2207197
SQLITE_PRIVATE void sqlite3ExprCodeIsNullJump(62634,2207839
SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(62655,2208611
SQLITE_PRIVATE int sqlite3IsRowid(62688,2209463
static int isCandidateForInOpt(62708,2210009
SQLITE_PRIVATE int sqlite3FindInIndex(62793,2214040
SQLITE_PRIVATE int sqlite3CodeSubselect(62930,2219674
static void sqlite3ExprCodeIN(63139,2227717
static char *dup8bytes(dup8bytes63246,2231867
static void codeReal(63263,2232358
static void codeInteger(63285,2233020
static void cacheEntryClear(63314,2233794
SQLITE_PRIVATE void sqlite3ExprCacheStore(63328,2234147
SQLITE_PRIVATE void sqlite3ExprCacheRemove(63401,2236236
SQLITE_PRIVATE void sqlite3ExprCachePush(63419,2236730
SQLITE_PRIVATE void sqlite3ExprCachePop(63428,2237001
static void sqlite3ExprCachePinRegister(63448,2237585
SQLITE_PRIVATE int sqlite3ExprCodeGetColumn(63467,2238222
SQLITE_PRIVATE void sqlite3ExprCacheClear(63500,2239260
SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(63516,2239607
SQLITE_PRIVATE void sqlite3ExprCodeMove(63524,2239888
SQLITE_PRIVATE void sqlite3ExprCodeCopy(63541,2240368
static int usedAsColumnCache(63557,2240876
SQLITE_PRIVATE void sqlite3ExprHardCopy(63573,2241374
static int codeAlias(63604,2242466
SQLITE_PRIVATE int sqlite3ExprCodeTarget(63646,2243937
SQLITE_PRIVATE int sqlite3ExprCodeTemp(64262,2265938
SQLITE_PRIVATE int sqlite3ExprCode(64279,2266388
SQLITE_PRIVATE int sqlite3ExprCodeAndCache(64303,2267208
static int isAppropriateForFactoring(64342,2268755
static int evalConstExpr(64390,2270118
SQLITE_PRIVATE void sqlite3ExprCodeConstants(64434,2271415
SQLITE_PRIVATE int sqlite3ExprCodeExprList(64449,2271807
static void exprCodeBetween(64489,2272866
SQLITE_PRIVATE void sqlite3ExprIfTrue(64547,2275290
SQLITE_PRIVATE void sqlite3ExprIfFalse(64665,2279111
SQLITE_PRIVATE int sqlite3ExprCompare(64815,2284337
static int addAggInfoColumn(64862,2285981
static int addAggInfoFunc(64880,2286388
static int analyzeAggregate(64899,2286829
static int analyzeAggregatesInSelect(65022,2291504
SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(65042,2292103
SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(65057,2292540
SQLITE_PRIVATE int sqlite3GetTempReg(65070,2292887
SQLITE_PRIVATE void sqlite3ReleaseTempReg(65085,2293306
SQLITE_PRIVATE int sqlite3GetTempRange(65102,2293745
SQLITE_PRIVATE void sqlite3ReleaseTempRange(65116,2294080
static void renameTableFunc(65161,2295635
static void renameParentFunc(65226,2297694
static void renameTriggerFunc(65281,2299542
SQLITE_PRIVATE void sqlite3AlterFunctions(65353,2301776
static char *whereOrName(whereOrName65382,2302944
static char *whereForeignKeys(whereForeignKeys65400,2303538
static char *whereTempTriggers(whereTempTriggers65416,2304040
static void reloadTableSchema(65445,2305155
SQLITE_PRIVATE void sqlite3AlterRenameTable(65490,2306682
SQLITE_PRIVATE void sqlite3MinimumFileFormat(65690,2313408
SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(65719,2314457
SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(65840,2318599
static void openStatTable(65952,2322567
    const char *zName;zName65959,2322875
    const char *zCols;zCols65960,2322898
static void analyzeOneTable(66022,2324892
static void loadAnalysis(66247,2334568
static void analyzeDatabase(66257,2334790
static void analyzeTable(66280,2335436
SQLITE_PRIVATE void sqlite3Analyze(66307,2336357
typedef struct analysisInfo analysisInfo;66365,2337929
struct analysisInfo 66366,2337971
  sqlite3 *db;db66367,2337993
  const char *zDatabase;zDatabase66368,2338008
static int analysisLoader(66378,2338237
SQLITE_PRIVATE void sqlite3DeleteIndexSamples(66412,2338973
SQLITE_PRIVATE int sqlite3AnalysisLoad(66451,2340359
static int resolveAttachExpr(66601,2345086
static void attachFunc(66629,2345844
static void detachFunc(66802,2351042
static void codeAttach(66854,2352389
SQLITE_PRIVATE void sqlite3Detach(66926,2354526
SQLITE_PRIVATE void sqlite3Attach(66947,2355158
SQLITE_PRIVATE int sqlite3FixInit(66971,2356040
SQLITE_PRIVATE int sqlite3FixSrcList(67004,2357362
SQLITE_PRIVATE int sqlite3FixSelect(67031,2358278
SQLITE_PRIVATE int sqlite3FixExpr(67052,2358808
SQLITE_PRIVATE int sqlite3FixExprList(67070,2359346
SQLITE_PRIVATE int sqlite3FixTriggerStep(67087,2359756
SQLITE_API int sqlite3_set_authorizer(67177,2362870
static void sqliteAuthBadReturnCode(67194,2363332
SQLITE_PRIVATE int sqlite3AuthReadCol(67208,2363927
SQLITE_PRIVATE void sqlite3AuthRead(67241,2365216
SQLITE_PRIVATE int sqlite3AuthCheck(67298,2367064
SQLITE_PRIVATE void sqlite3AuthContextPush(67334,2368009
SQLITE_PRIVATE void sqlite3AuthContextPop(67349,2368352
SQLITE_PRIVATE void sqlite3BeginParse(67389,2369588
struct TableLock 67399,2369859
  int iDb;67400,2369878
  int iTab;67401,2369954
  u8 isWriteLock;67402,2370023
  const char *zName;zName67403,2370096
SQLITE_PRIVATE void sqlite3TableLock(67416,2370557
static void codeTableLocks(67456,2371760
  #define codeTableLocks(67471,2372174
SQLITE_PRIVATE void sqlite3FinishCoding(67484,2372571
SQLITE_PRIVATE void sqlite3NestedParse(67586,2376114
# define SAVE_SZ 67591,2376272
SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3FindTable67624,2377396
SQLITE_PRIVATE Table *sqlite3LocateTable(sqlite3LocateTable67649,2378302
SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3FindIndex67688,2379623
static void freeIndex(67706,2380144
static void sqlite3DeleteIndex(67723,2380613
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(67739,2381088
SQLITE_PRIVATE void sqlite3ResetInternalSchema(67775,2382287
SQLITE_PRIVATE void sqlite3CommitInternalChanges(67825,2383640
static void sqliteResetColumnNames(67832,2383798
SQLITE_PRIVATE void sqlite3DeleteTable(67861,2384661
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(67904,2385754
SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3NameFromToken67932,2386723
SQLITE_PRIVATE void sqlite3OpenMasterTable(67947,2387078
SQLITE_PRIVATE int sqlite3FindDbName(67963,2387668
SQLITE_PRIVATE int sqlite3FindDb(67984,2388305
SQLITE_PRIVATE int sqlite3TwoPartName(68009,2389187
SQLITE_PRIVATE int sqlite3CheckObjectName(68046,2390380
SQLITE_PRIVATE void sqlite3StartTable(68072,2391620
#define STRICMP(68276,2398695
SQLITE_PRIVATE void sqlite3AddColumn(68289,2399136
SQLITE_PRIVATE void sqlite3AddNotNull(68338,2400523
SQLITE_PRIVATE char sqlite3AffinityType(68370,2401627
SQLITE_PRIVATE void sqlite3AddColumnType(68415,2403307
SQLITE_PRIVATE void sqlite3AddDefaultValue(68437,2403971
SQLITE_PRIVATE void sqlite3AddPrimaryKey(68480,2405698
SQLITE_PRIVATE void sqlite3AddCheckConstraint(68544,2407574
SQLITE_PRIVATE void sqlite3AddCollateType(68564,2408068
SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(sqlite3LocateCollSeq68615,2409780
SQLITE_PRIVATE void sqlite3ChangeCookie(68649,2410957
static int identLength(68666,2411565
static void identPut(68687,2412354
static char *createTableStmt(createTableStmt68715,2413122
SQLITE_PRIVATE void sqlite3EndTable(68799,2415870
SQLITE_PRIVATE void sqlite3CreateView(69005,2422004
SQLITE_PRIVATE int sqlite3ViewGetColumnNames(69085,2424627
static void sqliteViewResetAll(69179,2427769
# define sqliteViewResetAll(69191,2428137
SQLITE_PRIVATE void sqlite3RootPageMoved(69212,2429113
static void destroyRootPage(69239,2429941
static void destroyTable(69267,2431123
SQLITE_PRIVATE void sqlite3DropTable(69324,2432859
SQLITE_PRIVATE void sqlite3CreateForeignKey(69501,2438559
SQLITE_PRIVATE void sqlite3DeferForeignKey(69621,2441927
static void sqlite3RefillIndex(69642,2442789
SQLITE_PRIVATE Index *sqlite3CreateIndex(sqlite3CreateIndex69726,2446602
SQLITE_PRIVATE void sqlite3DefaultRowEst(70208,2463859
SQLITE_PRIVATE void sqlite3DropIndex(70229,2464269
SQLITE_PRIVATE void *sqlite3ArrayAllocate(sqlite3ArrayAllocate70312,2466897
SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3IdListAppend70347,2467973
SQLITE_PRIVATE void sqlite3IdListDelete(70374,2468518
SQLITE_PRIVATE int sqlite3IdListIndex(70388,2468852
SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge(sqlite3SrcListEnlarge70416,2469817
SQLITE_PRIVATE SrcList *sqlite3SrcListAppend(sqlite3SrcListAppend70498,2472607
SQLITE_PRIVATE void sqlite3SrcListAssignCursors(70533,2473657
SQLITE_PRIVATE void sqlite3SrcListDelete(70551,2474154
SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm(sqlite3SrcListAppendFromTerm70584,2475523
SQLITE_PRIVATE void sqlite3SrcListIndexedBy(70628,2476974
SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(70658,2478100
SQLITE_PRIVATE void sqlite3BeginTransaction(70671,2478336
SQLITE_PRIVATE void sqlite3CommitTransaction(70697,2478926
SQLITE_PRIVATE void sqlite3RollbackTransaction(70717,2479327
SQLITE_PRIVATE void sqlite3Savepoint(70738,2479825
SQLITE_PRIVATE int sqlite3OpenTempDatabase(70758,2480564
SQLITE_PRIVATE void sqlite3CodeVerifySchema(70810,2482605
SQLITE_PRIVATE void sqlite3BeginWriteOperation(70849,2484082
SQLITE_PRIVATE void sqlite3MultiWrite(70863,2484697
SQLITE_PRIVATE void sqlite3MayAbort(70884,2485702
SQLITE_PRIVATE void sqlite3HaltConstraint(70894,2486033
static int collationMatch(70907,2486449
static void reindexTable(70926,2486880
static void reindexDatabases(70945,2487512
SQLITE_PRIVATE void sqlite3Reindex(70976,2488666
SQLITE_PRIVATE KeyInfo *sqlite3IndexKeyinfo(sqlite3IndexKeyinfo71040,2490917
static void callCollNeeded(71090,2492461
static int synthCollSeq(71119,2493498
SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq(sqlite3GetCollSeq71149,2494558
SQLITE_PRIVATE int sqlite3CheckCollSeq(71186,2495896
static CollSeq *findCollSeqEntry(findCollSeqEntry71216,2496916
SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq(sqlite3FindCollSeq71269,2498727
static int matchQuality(71308,2500197
static FuncDef *functionSearch(functionSearch71332,2500819
SQLITE_PRIVATE void sqlite3FuncDefInsert(71350,2501279
SQLITE_PRIVATE FuncDef *sqlite3FindFunction(sqlite3FindFunction71392,2502802
SQLITE_PRIVATE void sqlite3SchemaFree(71470,2505573
SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3SchemaGet71500,2506451
SQLITE_PRIVATE Table *sqlite3SrcListLookup(sqlite3SrcListLookup71541,2507812
SQLITE_PRIVATE int sqlite3IsReadOnly(71562,2508381
SQLITE_PRIVATE void sqlite3MaterializeView(71599,2509659
SQLITE_PRIVATE Expr *sqlite3LimitWhere(sqlite3LimitWhere71641,2511111
SQLITE_PRIVATE void sqlite3DeleteFrom(71733,2514644
# define pTrigger 71780,2516695
# define isView 71781,2516715
# undef isView71784,2516764
# define isView 71785,2516779
 #undef isView71963,2522863
 #undef pTrigger71966,2522901
SQLITE_PRIVATE void sqlite3GenerateRowDelete(71988,2523618
SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete(72096,2528173
SQLITE_PRIVATE int sqlite3GenerateIndexKey(72124,2529238
static CollSeq *sqlite3GetFuncCollSeq(sqlite3GetFuncCollSeq72181,2531194
static void minmaxFunc(72188,2531358
static void typeofFunc(72218,2532076
static void lengthFunc(72239,2532606
static void absFunc(72279,2533433
static void substrFunc(72329,2535135
static void roundFunc(72415,2536886
static void *contextMalloc(contextMalloc72456,2538137
static void upperFunc(72477,2538688
static void lowerFunc(72497,2539298
static void ifnullFunc(72531,2540347
#define ifnullFunc 72545,2540616
static void randomFunc(72550,2540756
static void randomBlob(72576,2541585
static void last_insert_rowid(72600,2542102
static void changes(72620,2542744
static void total_changes(72634,2543124
struct compareInfo 72649,2543552
  u8 matchAll;72650,2543573
  u8 matchOne;72651,2543588
  u8 matchSet;72652,2543603
  u8 noCase;72653,2543618
# define sqlite3Utf8Read(72663,2543929
# define GlogUpperToLower(72664,2543971
# define GlogUpperToLower(72666,2544037
static const struct compareInfo globInfo 72669,2544122
static const struct compareInfo likeInfoNorm 72672,2544300
static const struct compareInfo likeInfoAlt 72675,2544494
static int patternCompare(72705,2545570
SQLITE_API int sqlite3_like_count 72819,2548998
static void likeFunc(72835,2549426
static void nullifFunc(72888,2551081
static void versionFunc(72904,2551487
static void sourceidFunc(72920,2551979
static void compileoptionusedFunc(72937,2552504
static void compileoptiongetFunc(72959,2553173
static const char hexdigits[hexdigits72976,2553680
static void quoteFunc(72992,2554292
static void hexFunc(73057,2556151
static void zeroblobFunc(73085,2556859
static void replaceFunc(73110,2557623
static void trimFunc(73194,2560391
static void soundexFunc(73286,2563124
static void loadExt(73339,2564694
typedef struct SumCtx SumCtx;73362,2565304
struct SumCtx 73363,2565334
  double rSum;73364,2565350
  i64 iSum;73365,2565395
  i64 cnt;73366,2565436
  u8 overflow;73367,2565488
  u8 approx;73368,2565544
static void sumStep(73381,2566058
static void sumFinalize(73407,2566871
static void avgFinalize(73420,2567228
static void totalFinalize(73427,2567426
typedef struct CountCtx CountCtx;73438,2567763
struct CountCtx 73439,2567797
  i64 n;73440,2567815
static void countStep(73446,2567891
static void countFinalize(73462,2568535
static void minmaxStep(73471,2568766
static void minMaxFinalize(73505,2569880
static void groupConcatStep(73519,2570197
static void groupConcatFinalize(73552,2571123
SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(73572,2571715
static void setLikeOptFlag(73588,2572127
SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(73602,2572571
SQLITE_PRIVATE int sqlite3IsLikeFunction(73625,2573528
SQLITE_PRIVATE void sqlite3RegisterGlobalFunctions(73660,2574770
static int locateFkeyIndex(73932,2587359
static void fkLookupParent(74065,2592736
static void fkScanChildren(74208,2599394
SQLITE_PRIVATE FKey *sqlite3FkReferences(sqlite3FkReferences74331,2604475
static void fkTriggerDelete(74344,2604974
SQLITE_PRIVATE void sqlite3FkDropTable(74372,2606053
SQLITE_PRIVATE void sqlite3FkCheck(74433,2608597
#define COLUMN_MASK(74575,2614144
SQLITE_PRIVATE u32 sqlite3FkOldmask(74581,2614319
SQLITE_PRIVATE int sqlite3FkRequired(74617,2615682
static Trigger *fkActionTrigger(fkActionTrigger74692,2618563
SQLITE_PRIVATE void sqlite3FkActions(74881,2625659
SQLITE_PRIVATE void sqlite3FkDelete(74909,2626810
SQLITE_PRIVATE void sqlite3OpenTable(74964,2628676
SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(sqlite3IndexAffinityStr75001,2630078
SQLITE_PRIVATE void sqlite3TableAffinityStr(75043,2631391
static int readsTable(75080,2632582
static int autoIncBegin(75135,2634308
SQLITE_PRIVATE void sqlite3AutoincrementBegin(75167,2635401
static void autoIncStep(75208,2637168
SQLITE_PRIVATE void sqlite3AutoincrementEnd(75221,2637629
# define autoIncBegin(75259,2638896
# define autoIncStep(75260,2638929
SQLITE_PRIVATE void sqlite3Insert(75375,2643185
# define pTrigger 75452,2646776
# define tmask 75453,2646796
# define isView 75454,2646813
# undef isView75457,2646862
# define isView 75458,2646877
 #undef isView75996,2665450
 #undef pTrigger75999,2665488
 #undef tmask76002,2665525
SQLITE_PRIVATE void sqlite3GenerateConstraintChecks(76081,2669277
SQLITE_PRIVATE void sqlite3CompleteInsertion(76366,2679706
SQLITE_PRIVATE int sqlite3OpenTableAndIndices(76426,2681707
SQLITE_API int sqlite3_xferopt_count;76463,2682845
static int xferCompatibleCollation(76471,2683004
static int xferCompatibleIndex(76492,2683581
static int xferOptimization(76549,2685486
SQLITE_API int sqlite3_exec(76805,2695567
  #define SQLITE_CORE 76940,2699807
#define _SQLITE3EXT_H_76962,2700714
typedef struct sqlite3_api_routines sqlite3_api_routines;76964,2700738
struct sqlite3_api_routines 76976,2701170
  void * (*aggregate_context)aggregate_context76977,2701200
  int  (*aggregate_count)aggregate_count76978,2701260
  int  (*bind_blob)bind_blob76979,2701305
  int  (*bind_double)bind_double76980,2701378
  int  (*bind_int)bind_int76981,2701427
  int  (*bind_int64)bind_int6476982,2701470
  int  (*bind_null)bind_null76983,2701524
  int  (*bind_parameter_count)bind_parameter_count76984,2701564
  int  (*bind_parameter_index)bind_parameter_index76985,2701611
  const char * (*bind_parameter_name)bind_parameter_name76986,2701675
  int  (*bind_text)bind_text76987,2701733
  int  (*bind_text16)bind_text1676988,2701806
  int  (*bind_value)bind_value76989,2701879
  int  (*busy_handler)busy_handler76990,2701941
  int  (*busy_timeout)busy_timeout76991,2701999
  int  (*changes)changes76992,2702040
  int  (*close)close76993,2702069
  int  (*collation_needed)collation_needed76994,2702096
  int  (*collation_needed16)collation_needed1676995,2702189
  const void * (*column_blob)column_blob76996,2702284
  int  (*column_bytes)column_bytes76997,2702339
  int  (*column_bytes16)column_bytes1676998,2702387
  int  (*column_count)column_count76999,2702437
  const char * (*column_database_name)column_database_name77000,2702481
  const void * (*column_database_name16)column_database_name1677001,2702540
  const char * (*column_decltype)column_decltype77002,2702601
  const void * (*column_decltype16)column_decltype1677003,2702657
  double  (*column_double)column_double77004,2702713
  int  (*column_int)column_int77005,2702765
  sqlite_int64  (*column_int64)column_int6477006,2702811
  const char * (*column_name)column_name77007,2702868
  const void * (*column_name16)column_name1677008,2702918
  const char * (*column_origin_name)column_origin_name77009,2702970
  const void * (*column_origin_name16)column_origin_name1677010,2703027
  const char * (*column_table_name)column_table_name77011,2703086
  const void * (*column_table_name16)column_table_name1677012,2703142
  const unsigned char * (*column_text)column_text77013,2703200
  const void * (*column_text16)column_text1677014,2703264
  int  (*column_type)column_type77015,2703321
  sqlite3_value* (*column_value)column_value77016,2703368
  void * (*commit_hook)commit_hook77017,2703426
  int  (*complete)complete77018,2703481
  int  (*complete16)complete1677019,2703517
  int  (*create_collation)create_collation77020,2703555
  int  (*create_collation16)create_collation1677021,2703661
  int  (*create_function)create_function77022,2703769
  int  (*create_function16)create_function1677023,2703969
  int (*create_module)create_module77024,2704171
  int  (*data_count)data_count77025,2704245
  sqlite3 * (*db_handle)db_handle77026,2704287
  int (*declare_vtab)declare_vtab77027,2704328
  int  (*enable_shared_cache)enable_shared_cache77028,2704373
  int  (*errcode)errcode77029,2704409
  const char * (*errmsg)errmsg77030,2704440
  const void * (*errmsg16)errmsg1677031,2704476
  int  (*exec)exec77032,2704514
  int  (*expired)expired77033,2704582
  int  (*finalize)finalize77034,2704616
  void  (*free)free77035,2704656
  void  (*free_table)free_table77036,2704680
  int  (*get_autocommit)get_autocommit77037,2704717
  void * (*get_auxdata)get_auxdata77038,2704753
  int  (*get_table)get_table77039,2704800
  int  (*global_recover)global_recover77040,2704868
  void  (*interruptx)interruptx77041,2704900
  sqlite_int64  (*last_insert_rowid)last_insert_rowid77042,2704933
  const char * (*libversion)libversion77043,2704981
  int  (*libversion_number)libversion_number77044,2705017
  void *(*malloc)malloc77045,2705052
  char * (*mprintf)mprintf77046,2705076
  int  (*open)open77047,2705114
  int  (*open16)open1677048,2705153
  int  (*prepare)prepare77049,2705194
  int  (*prepare16)prepare1677050,2705267
  void * (*profile)profile77051,2705342
  void  (*progress_handler)progress_handler77052,2705420
  void *(*realloc)realloc77053,2705483
  int  (*reset)reset77054,2705514
  void  (*result_blob)result_blob77055,2705551
  void  (*result_double)result_double77056,2705624
  void  (*result_error)result_error77057,2705675
  void  (*result_error16)result_error1677058,2705734
  void  (*result_int)result_int77059,2705795
  void  (*result_int64)result_int6477060,2705840
  void  (*result_null)result_null77061,2705896
  void  (*result_text)result_text77062,2705938
  void  (*result_text16)result_text1677063,2706011
  void  (*result_text16be)result_text16be77064,2706086
  void  (*result_text16le)result_text16le77065,2706163
  void  (*result_value)result_value77066,2706240
  void * (*rollback_hook)rollback_hook77067,2706298
  int  (*set_authorizer)set_authorizer77068,2706356
  void  (*set_auxdata)set_auxdata77069,2706464
  char * (*snprintf)snprintf77070,2706532
  int  (*step)step77071,2706581
  int  (*table_column_metadata)table_column_metadata77072,2706612
  void  (*thread_cleanup)thread_cleanup77073,2706732
  int  (*total_changes)total_changes77074,2706765
  void * (*trace)trace77075,2706800
  int  (*transfer_bindings)transfer_bindings77076,2706868
  void * (*update_hook)update_hook77077,2706926
  void * (*user_data)user_data77078,2707024
  const void * (*value_blob)value_blob77079,2707065
  int  (*value_bytes)value_bytes77080,2707111
  int  (*value_bytes16)value_bytes1677081,2707150
  double  (*value_double)value_double77082,2707191
  int  (*value_int)value_int77083,2707234
  sqlite_int64  (*value_int64)value_int6477084,2707271
  int  (*value_numeric_type)value_numeric_type77085,2707319
  const unsigned char * (*value_text)value_text77086,2707365
  const void * (*value_text16)value_text1677087,2707420
  const void * (*value_text16be)value_text16be77088,2707468
  const void * (*value_text16le)value_text16le77089,2707518
  int  (*value_type)value_type77090,2707568
  char *(*vmprintf)vmprintf77091,2707606
  int (*overload_function)overload_function77093,2707666
  int (*prepare_v2)prepare_v277095,2707761
  int (*prepare16_v2)prepare16_v277096,2707836
  int (*clear_bindings)clear_bindings77097,2707913
  int (*create_module_v2)create_module_v277099,2707976
  int (*bind_zeroblob)bind_zeroblob77101,2708101
  int (*blob_bytes)blob_bytes77102,2708148
  int (*blob_close)blob_close77103,2708184
  int (*blob_open)blob_open77104,2708220
  int (*blob_read)blob_read77105,2708319
  int (*blob_write)blob_write77106,2708368
  int (*create_collation_v2)create_collation_v277107,2708424
  int (*file_control)file_control77108,2708547
  sqlite3_int64 (*memory_highwater)memory_highwater77109,2708602
  sqlite3_int64 (*memory_used)memory_used77110,2708644
  sqlite3_mutex *(*mutex_alloc)mutex_alloc77111,2708682
  void (*mutex_enter)mutex_enter77112,2708720
  void (*mutex_free)mutex_free77113,2708759
  void (*mutex_leave)mutex_leave77114,2708797
  int (*mutex_try)mutex_try77115,2708836
  int (*open_v2)open_v277116,2708872
  int (*release_memory)release_memory77117,2708929
  void (*result_error_nomem)result_error_nomem77118,2708959
  void (*result_error_toobig)result_error_toobig77119,2709007
  int (*sleep)sleep77120,2709056
  void (*soft_heap_limit)soft_heap_limit77121,2709077
  sqlite3_vfs *(*vfs_find)vfs_find77122,2709109
  int (*vfs_register)vfs_register77123,2709150
  int (*vfs_unregister)vfs_unregister77124,2709191
  int (*xthreadsafe)xthreadsafe77125,2709230
  void (*result_zeroblob)result_zeroblob77126,2709258
  void (*result_error_code)result_error_code77127,2709307
  int (*test_control)test_control77128,2709358
  void (*randomness)randomness77129,2709391
  sqlite3 *(*context_db_handle)context_db_handle77130,2709424
  int (*extended_result_codes)extended_result_codes77131,2709475
  int (*limit)limit77132,2709521
  sqlite3_stmt *(*next_stmt)next_stmt77133,2709555
  const char *(*sql)sql77134,2709609
  int (*status)status77135,2709646
#define sqlite3_aggregate_context 77150,2710185
#define sqlite3_aggregate_count 77152,2710286
#define sqlite3_bind_blob 77154,2710361
#define sqlite3_bind_double 77155,2710423
#define sqlite3_bind_int 77156,2710487
#define sqlite3_bind_int64 77157,2710548
#define sqlite3_bind_null 77158,2710611
#define sqlite3_bind_parameter_count 77159,2710673
#define sqlite3_bind_parameter_index 77160,2710746
#define sqlite3_bind_parameter_name 77161,2710819
#define sqlite3_bind_text 77162,2710891
#define sqlite3_bind_text16 77163,2710953
#define sqlite3_bind_value 77164,2711017
#define sqlite3_busy_handler 77165,2711080
#define sqlite3_busy_timeout 77166,2711145
#define sqlite3_changes 77167,2711210
#define sqlite3_close 77168,2711270
#define sqlite3_collation_needed 77169,2711328
#define sqlite3_collation_needed16 77170,2711397
#define sqlite3_column_blob 77171,2711468
#define sqlite3_column_bytes 77172,2711532
#define sqlite3_column_bytes16 77173,2711597
#define sqlite3_column_count 77174,2711664
#define sqlite3_column_database_name 77175,2711729
#define sqlite3_column_database_name16 77176,2711802
#define sqlite3_column_decltype 77177,2711877
#define sqlite3_column_decltype16 77178,2711945
#define sqlite3_column_double 77179,2712015
#define sqlite3_column_int 77180,2712081
#define sqlite3_column_int64 77181,2712144
#define sqlite3_column_name 77182,2712209
#define sqlite3_column_name16 77183,2712273
#define sqlite3_column_origin_name 77184,2712339
#define sqlite3_column_origin_name16 77185,2712410
#define sqlite3_column_table_name 77186,2712483
#define sqlite3_column_table_name16 77187,2712553
#define sqlite3_column_text 77188,2712625
#define sqlite3_column_text16 77189,2712689
#define sqlite3_column_type 77190,2712755
#define sqlite3_column_value 77191,2712819
#define sqlite3_commit_hook 77192,2712884
#define sqlite3_complete 77193,2712948
#define sqlite3_complete16 77194,2713009
#define sqlite3_create_collation 77195,2713072
#define sqlite3_create_collation16 77196,2713141
#define sqlite3_create_function 77197,2713212
#define sqlite3_create_function16 77198,2713280
#define sqlite3_create_module 77199,2713350
#define sqlite3_create_module_v2 77200,2713416
#define sqlite3_data_count 77201,2713485
#define sqlite3_db_handle 77202,2713548
#define sqlite3_declare_vtab 77203,2713610
#define sqlite3_enable_shared_cache 77204,2713675
#define sqlite3_errcode 77205,2713747
#define sqlite3_errmsg 77206,2713807
#define sqlite3_errmsg16 77207,2713866
#define sqlite3_exec 77208,2713927
#define sqlite3_expired 77210,2714015
#define sqlite3_finalize 77212,2714082
#define sqlite3_free 77213,2714143
#define sqlite3_free_table 77214,2714200
#define sqlite3_get_autocommit 77215,2714263
#define sqlite3_get_auxdata 77216,2714330
#define sqlite3_get_table 77217,2714394
#define sqlite3_global_recover 77219,2714487
#define sqlite3_interrupt 77221,2714561
#define sqlite3_last_insert_rowid 77222,2714624
#define sqlite3_libversion 77223,2714694
#define sqlite3_libversion_number 77224,2714757
#define sqlite3_malloc 77225,2714827
#define sqlite3_mprintf 77226,2714886
#define sqlite3_open 77227,2714946
#define sqlite3_open16 77228,2715003
#define sqlite3_prepare 77229,2715062
#define sqlite3_prepare16 77230,2715122
#define sqlite3_prepare_v2 77231,2715184
#define sqlite3_prepare16_v2 77232,2715247
#define sqlite3_profile 77233,2715312
#define sqlite3_progress_handler 77234,2715372
#define sqlite3_realloc 77235,2715441
#define sqlite3_reset 77236,2715501
#define sqlite3_result_blob 77237,2715559
#define sqlite3_result_double 77238,2715623
#define sqlite3_result_error 77239,2715689
#define sqlite3_result_error16 77240,2715754
#define sqlite3_result_int 77241,2715821
#define sqlite3_result_int64 77242,2715884
#define sqlite3_result_null 77243,2715949
#define sqlite3_result_text 77244,2716013
#define sqlite3_result_text16 77245,2716077
#define sqlite3_result_text16be 77246,2716143
#define sqlite3_result_text16le 77247,2716211
#define sqlite3_result_value 77248,2716279
#define sqlite3_rollback_hook 77249,2716344
#define sqlite3_set_authorizer 77250,2716410
#define sqlite3_set_auxdata 77251,2716477
#define sqlite3_snprintf 77252,2716541
#define sqlite3_step 77253,2716602
#define sqlite3_table_column_metadata 77254,2716659
#define sqlite3_thread_cleanup 77255,2716733
#define sqlite3_total_changes 77256,2716800
#define sqlite3_trace 77257,2716866
#define sqlite3_transfer_bindings 77259,2716955
#define sqlite3_update_hook 77261,2717032
#define sqlite3_user_data 77262,2717096
#define sqlite3_value_blob 77263,2717158
#define sqlite3_value_bytes 77264,2717221
#define sqlite3_value_bytes16 77265,2717285
#define sqlite3_value_double 77266,2717351
#define sqlite3_value_int 77267,2717416
#define sqlite3_value_int64 77268,2717478
#define sqlite3_value_numeric_type 77269,2717542
#define sqlite3_value_text 77270,2717613
#define sqlite3_value_text16 77271,2717676
#define sqlite3_value_text16be 77272,2717741
#define sqlite3_value_text16le 77273,2717808
#define sqlite3_value_type 77274,2717875
#define sqlite3_vmprintf 77275,2717938
#define sqlite3_overload_function 77276,2717999
#define sqlite3_prepare_v2 77277,2718069
#define sqlite3_prepare16_v2 77278,2718132
#define sqlite3_clear_bindings 77279,2718197
#define sqlite3_bind_zeroblob 77280,2718264
#define sqlite3_blob_bytes 77281,2718330
#define sqlite3_blob_close 77282,2718393
#define sqlite3_blob_open 77283,2718456
#define sqlite3_blob_read 77284,2718518
#define sqlite3_blob_write 77285,2718580
#define sqlite3_create_collation_v2 77286,2718643
#define sqlite3_file_control 77287,2718715
#define sqlite3_memory_highwater 77288,2718780
#define sqlite3_memory_used 77289,2718849
#define sqlite3_mutex_alloc 77290,2718913
#define sqlite3_mutex_enter 77291,2718977
#define sqlite3_mutex_free 77292,2719041
#define sqlite3_mutex_leave 77293,2719104
#define sqlite3_mutex_try 77294,2719168
#define sqlite3_open_v2 77295,2719230
#define sqlite3_release_memory 77296,2719290
#define sqlite3_result_error_nomem 77297,2719357
#define sqlite3_result_error_toobig 77298,2719428
#define sqlite3_sleep 77299,2719500
#define sqlite3_soft_heap_limit 77300,2719558
#define sqlite3_vfs_find 77301,2719626
#define sqlite3_vfs_register 77302,2719687
#define sqlite3_vfs_unregister 77303,2719752
#define sqlite3_threadsafe 77304,2719819
#define sqlite3_result_zeroblob 77305,2719883
#define sqlite3_result_error_code 77306,2719951
#define sqlite3_test_control 77307,2720021
#define sqlite3_randomness 77308,2720086
#define sqlite3_context_db_handle 77309,2720149
#define sqlite3_extended_result_codes 77310,2720219
#define sqlite3_limit 77311,2720293
#define sqlite3_next_stmt 77312,2720351
#define sqlite3_sql 77313,2720413
#define sqlite3_status 77314,2720469
#define SQLITE_EXTENSION_INIT1 77317,2720554
#define SQLITE_EXTENSION_INIT2(77318,2720634
# define sqlite3_column_database_name 77333,2721104
# define sqlite3_column_database_name16 77334,2721146
# define sqlite3_column_table_name 77335,2721188
# define sqlite3_column_table_name16 77336,2721230
# define sqlite3_column_origin_name 77337,2721272
# define sqlite3_column_origin_name16 77338,2721314
# define sqlite3_table_column_metadata 77339,2721356
# define sqlite3_set_authorizer 77343,2721439
# define sqlite3_bind_text16 77347,2721514
# define sqlite3_collation_needed16 77348,2721556
# define sqlite3_column_decltype16 77349,2721598
# define sqlite3_column_name16 77350,2721640
# define sqlite3_column_text16 77351,2721682
# define sqlite3_complete16 77352,2721724
# define sqlite3_create_collation16 77353,2721766
# define sqlite3_create_function16 77354,2721808
# define sqlite3_errmsg16 77355,2721850
# define sqlite3_open16 77356,2721892
# define sqlite3_prepare16 77357,2721934
# define sqlite3_prepare16_v2 77358,2721976
# define sqlite3_result_error16 77359,2722018
# define sqlite3_result_text16 77360,2722060
# define sqlite3_result_text16be 77361,2722102
# define sqlite3_result_text16le 77362,2722144
# define sqlite3_value_text16 77363,2722186
# define sqlite3_value_text16be 77364,2722228
# define sqlite3_value_text16le 77365,2722270
# define sqlite3_column_database_name16 77366,2722312
# define sqlite3_column_table_name16 77367,2722354
# define sqlite3_column_origin_name16 77368,2722396
# define sqlite3_complete 77372,2722474
# define sqlite3_complete16 77373,2722502
# define sqlite3_progress_handler 77377,2722577
# define sqlite3_create_module 77381,2722653
# define sqlite3_create_module_v2 77382,2722686
# define sqlite3_declare_vtab 77383,2722722
# define sqlite3_enable_shared_cache 77387,2722794
# define sqlite3_profile 77391,2722866
# define sqlite3_trace 77392,2722899
# define sqlite3_free_table 77396,2722969
# define sqlite3_get_table 77397,2723002
#define sqlite3_bind_zeroblob 77401,2723071
#define sqlite3_blob_bytes 77402,2723104
#define sqlite3_blob_close 77403,2723137
#define sqlite3_blob_open 77404,2723170
#define sqlite3_blob_read 77405,2723203
#define sqlite3_blob_write 77406,2723236
static const sqlite3_api_routines sqlite3Apis 77424,2723905
static int sqlite3LoadExtension(77646,2729051
SQLITE_API int sqlite3_load_extension(77730,2731792
SQLITE_PRIVATE void sqlite3CloseExtensions(77748,2732422
SQLITE_API int sqlite3_enable_load_extension(77761,2732808
static const sqlite3_api_routines sqlite3Apis 77781,2733387
typedef struct sqlite3AutoExtList sqlite3AutoExtList;77792,2733658
static SQLITE_WSD struct sqlite3AutoExtList 77793,2733712
  int nExt;77794,2733758
  void (**aExt)aExt77795,2733827
} sqlite3Autoext 77796,2733899
# define wsdAutoextInit 77805,2734290
# define wsdAutoext 77807,2734385
# define wsdAutoextInit77809,2734416
# define wsdAutoext 77810,2734440
SQLITE_API int sqlite3_auto_extension(77818,2734598
SQLITE_API void sqlite3_reset_auto_extension(77857,2735541
SQLITE_PRIVATE void sqlite3AutoLoadExtensions(77879,2736063
static u8 getSafetyLevel(77943,2738087
static u8 getBoolean(77965,2738707
static int getLockingMode(77972,2738838
static int getAutoVacuum(77987,2739324
static int getTempStore(78003,2739904
static int invalidateTempStorage(78021,2740362
static int changeTempStorage(78043,2741063
static void returnSingleInt(78058,2741470
static int flagPragma(78077,2742157
  static const struct sPragmaType 78078,2742234
    const char *zName;zName78079,2742270
    int mask;78080,2742319
static const char *actionName(actionName78156,2745085
SQLITE_PRIVATE void sqlite3Pragma(78185,2746003
#    define SQLITE_ENABLE_LOCKING_STYLE 78680,2763510
#    define SQLITE_ENABLE_LOCKING_STYLE 78682,2763560
# define SQLITE_INTEGRITY_CHECK_ERROR_MAX 78964,2773974
static void corruptSchema(79410,2790825
SQLITE_PRIVATE int sqlite3InitCallback(79440,2791917
static int sqlite3InitOne(79519,2794730
  #define temp_master_schema 79555,2795550
SQLITE_PRIVATE int sqlite3Init(79769,2802652
SQLITE_PRIVATE int sqlite3ReadSchema(79810,2803818
static void schemaIsValid(79830,2804292
SQLITE_PRIVATE int sqlite3SchemaToIndex(79877,2805863
static int sqlite3Prepare(79905,2806789
static int sqlite3LockAndPrepare(80067,2812014
SQLITE_PRIVATE int sqlite3Reprepare(80102,2813296
SQLITE_API int sqlite3_prepare(80139,2814423
SQLITE_API int sqlite3_prepare_v2(80151,2814931
static int sqlite3Prepare16(80169,2815550
SQLITE_API int sqlite3_prepare16(80219,2817475
SQLITE_API int sqlite3_prepare16_v2(80231,2817979
static void clearSelect(80268,2819277
SQLITE_PRIVATE void sqlite3SelectDestInit(80283,2819718
SQLITE_PRIVATE Select *sqlite3SelectNew(sqlite3SelectNew80296,2820003
SQLITE_PRIVATE void sqlite3SelectDelete(80345,2821613
SQLITE_PRIVATE int sqlite3JoinType(80369,2822232
    u8 i;80376,2822533
    u8 nChar;80377,2822596
    u8 code;80378,2822655
static int columnIndex(80430,2824256
static int tableAndColumnIndex(80447,2824708
static void addWhereTerm(80482,2825864
static void setJoinExpr(80541,2828300
static int sqliteProcessJoin(80566,2829263
static void pushOntoSorter(80658,2832594
static void codeOffset(80698,2834037
static void codeDistinct(80722,2834911
static int checkForMultiColumnSelectError(80746,2835741
static void selectInnerLoop(80770,2836535
static KeyInfo *keyInfoFromExprList(keyInfoFromExprList80995,2844368
static void generateSortTail(81029,2845353
static const char *columnType(columnType81142,2849131
static void generateColumnTypes(81270,2853582
static void generateColumnNames(81310,2854937
static const char *selectOpName(selectOpName81377,2857099
static int selectColumnsFromExprList(81402,2857926
static void selectAddColumnTypeAndCollation(81493,2861358
SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(sqlite3ResultSetOfSelect81530,2862490
SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(sqlite3GetVdbe81566,2863628
static void computeLimitRegisters(81598,2864838
static CollSeq *multiSelectCollSeq(multiSelectCollSeq81656,2866937
static int multiSelect(81711,2868711
static int generateOutputSubroutine(82057,2880584
static int multiSelectOrderBy(82280,2888749
static Expr *substExpr(substExpr82640,2902094
static void substExprList(82672,2903181
static void substSelect(82684,2903588
static int flattenSubquery(82817,2908947
static u8 minMaxQuery(83197,2922787
static Table *isSimpleCount(isSimpleCount83228,2923900
SQLITE_PRIVATE int sqlite3IndexedByLookup(83258,2924770
static int selectExpander(83300,2926360
static int exprWalkNoop(83528,2934636
static void sqlite3SelectExpand(83546,2935329
static int selectAddSubqueryTypeInfo(83569,2936091
static void sqlite3SelectAddTypeInfo(83603,2937073
SQLITE_PRIVATE void sqlite3SelectPrep(83626,2937847
static void resetAccumulator(83649,2938625
static void finalizeAggFunctions(83681,2939678
static void updateAccumulator(83697,2940210
SQLITE_PRIVATE int sqlite3Select(83808,2944558
SQLITE_PRIVATE void sqlite3PrintExpr(84453,2969716
SQLITE_PRIVATE void sqlite3PrintExprList(84469,2970112
SQLITE_PRIVATE void sqlite3PrintSelect(84478,2970326
typedef struct TabResult 84561,2973026
  char **azResult;azResult84562,2973053
  char *zErrMsg;zErrMsg84563,2973099
  int nAlloc;84564,2973165
  int nRow;84565,2973223
  int nColumn;84566,2973279
  int nData;84567,2973338
  int rc;84568,2973409
} TabResult;84569,2973468
static int sqlite3_get_table_cb(84576,2973657
SQLITE_API int sqlite3_get_table(84650,2975823
SQLITE_API void sqlite3_free_table(84716,2977808
SQLITE_PRIVATE void sqlite3DeleteTriggerStep(84750,2978842
SQLITE_PRIVATE Trigger *sqlite3TriggerList(sqlite3TriggerList84778,2979903
SQLITE_PRIVATE void sqlite3BeginTrigger(84810,2980982
SQLITE_PRIVATE void sqlite3FinishTrigger(84984,2987454
SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3TriggerSelectStep85065,2990305
static TriggerStep *triggerStepAllocate(triggerStepAllocate85083,2990900
SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep(sqlite3TriggerInsertStep85108,2991627
SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep(sqlite3TriggerUpdateStep85141,2992914
SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep(sqlite3TriggerDeleteStep85166,2993905
SQLITE_PRIVATE void sqlite3DeleteTrigger(85185,2994472
SQLITE_PRIVATE void sqlite3DropTrigger(85203,2995151
static Table *tableOfTrigger(tableOfTrigger85242,2996215
SQLITE_PRIVATE void sqlite3DropTriggerPtr(85251,2996448
SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(85309,2998350
static int checkColumnOverlap(85334,2999336
SQLITE_PRIVATE Trigger *sqlite3TriggersExist(sqlite3TriggersExist85349,2999861
static SrcList *targetSrcList(targetSrcList85381,3000975
static int codeTriggerProgram(85406,3001732
static const char *onErrorText(onErrorText85483,3004241
static void transferParseError(85501,3004748
static TriggerPrg *codeRowTrigger(codeRowTrigger85516,3005180
static TriggerPrg *getRowTrigger(getRowTrigger85626,3009350
SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect(85660,3010561
SQLITE_PRIVATE void sqlite3CodeRowTrigger(85731,3014017
SQLITE_PRIVATE u32 sqlite3TriggerColmask(85793,3016886
SQLITE_PRIVATE void sqlite3ColumnDefault(85884,3020629
SQLITE_PRIVATE void sqlite3Update(85912,3021556
# define pTrigger 85978,3024623
# define isView 85979,3024643
# define tmask 85980,3024661
# undef isView85983,3024709
# define isView 85984,3024724
 #undef isView86393,3038400
 #undef pTrigger86396,3038438
static void updateVirtualTable(86419,3039141
static int vacuumFinalize(86516,3042975
static int execSql(86528,3043253
static int execExecSql(86547,3043805
SQLITE_PRIVATE void sqlite3Vacuum(86575,3044625
SQLITE_PRIVATE int sqlite3RunVacuum(86586,3044849
static int createModule(86842,3054769
SQLITE_API int sqlite3_create_module(86884,3056034
SQLITE_API int sqlite3_create_module_v2(86896,3056498
SQLITE_PRIVATE void sqlite3VtabLock(86914,3057286
SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3GetVTable86924,3057578
SQLITE_PRIVATE void sqlite3VtabUnlock(86935,3057930
static VTable *vtabDisconnectAll(vtabDisconnectAll86959,3058598
SQLITE_PRIVATE void sqlite3VtabUnlockList(87013,3060515
SQLITE_PRIVATE void sqlite3VtabClear(87044,3061559
static void addModuleArgument(87061,3062000
SQLITE_PRIVATE void sqlite3VtabBeginParse(87086,3062782
static void addArgumentToVtab(87130,3064548
SQLITE_PRIVATE void sqlite3VtabFinishParse(87143,3064946
SQLITE_PRIVATE void sqlite3VtabArgInit(87225,3067922
SQLITE_PRIVATE void sqlite3VtabArgExtend(87235,3068203
static int vtabCallConstructor(87251,3068620
SQLITE_PRIVATE int sqlite3VtabCallConnect(87357,3071809
static int addToVTrans(87391,3072677
SQLITE_PRIVATE int sqlite3VtabCallCreate(87420,3073632
SQLITE_API int sqlite3_declare_vtab(87458,3074914
SQLITE_PRIVATE int sqlite3VtabCallDestroy(87521,3076529
static void callFinaliser(87552,3077462
SQLITE_PRIVATE int sqlite3VtabSync(87579,3078266
SQLITE_PRIVATE int sqlite3VtabRollback(87603,3078882
SQLITE_PRIVATE int sqlite3VtabCommit(87612,3079135
SQLITE_PRIVATE int sqlite3VtabBegin(87625,3079564
SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction(sqlite3VtabOverloadFunction87675,3081022
SQLITE_PRIVATE void sqlite3VtabMakeWritable(87741,3083130
SQLITE_PRIVATE int sqlite3WhereTrace 87787,3084795
# define WHERETRACE(87790,3084894
# define WHERETRACE(87792,3084967
typedef struct WhereClause WhereClause;87797,3085022
typedef struct WhereMaskSet WhereMaskSet;87798,3085062
typedef struct WhereOrInfo WhereOrInfo;87799,3085104
typedef struct WhereAndInfo WhereAndInfo;87800,3085144
typedef struct WhereCost WhereCost;87801,3085186
typedef struct WhereTerm WhereTerm;87854,3087713
struct WhereTerm 87855,3087749
  Expr *pExpr;pExpr87856,3087768
  int iParent;87857,3087847
  int leftCursor;87858,3087927
    int leftColumn;87860,3088007
    WhereOrInfo *pOrInfo;pOrInfo87861,3088079
    WhereAndInfo *pAndInfo;pAndInfo87862,3088151
  } u;87863,3088224
  u16 eOperator;87864,3088231
  u8 wtFlags;87865,3088293
  u8 nChild;87866,3088356
  WhereClause *pWC;pWC87867,3088428
  Bitmask prereqRight;87868,3088492
  Bitmask prereqAll;87869,3088564
#define TERM_DYNAMIC 87875,3088683
#define TERM_VIRTUAL 87876,3088762
#define TERM_CODED 87877,3088836
#define TERM_COPIED 87878,3088900
#define TERM_ORINFO 87879,3088949
#define TERM_ANDINFO 87880,3089030
#define TERM_OR_OK 87881,3089109
struct WhereClause 87887,3089331
  Parse *pParse;pParse87888,3089352
  WhereMaskSet *pMaskSet;pMaskSet87889,3089404
  Bitmask vmask;87890,3089481
  u8 op;87891,3089556
  int nTerm;87892,3089622
  int nSlot;87893,3089671
  WhereTerm *a;a87894,3089729
  WhereTerm aStatic[aStatic87896,3089840
  WhereTerm aStatic[aStatic87898,3089908
struct WhereOrInfo 87906,3090121
  WhereClause wc;87907,3090142
  Bitmask indexable;87908,3090203
struct WhereAndInfo 87915,3090428
  WhereClause wc;87916,3090450
struct WhereMaskSet 87945,3091781
  int n;87946,3091803
  int ix[ix87947,3091874
struct WhereCost 87954,3092051
  WherePlan plan;87955,3092070
  double rCost;87956,3092117
  double nRow;87957,3092190
  Bitmask used;87958,3092249
#define WO_IN 87966,3092489
#define WO_EQ 87967,3092513
#define WO_LT 87968,3092537
#define WO_LE 87969,3092578
#define WO_GT 87970,3092619
#define WO_GE 87971,3092660
#define WO_MATCH 87972,3092701
#define WO_ISNULL 87973,3092725
#define WO_OR 87974,3092749
#define WO_AND 87975,3092816
#define WO_ALL 87977,3092885
#define WO_SINGLE 87978,3092954
#define WHERE_ROWID_EQ 87993,3093672
#define WHERE_ROWID_RANGE 87994,3093746
#define WHERE_COLUMN_EQ 87995,3093820
#define WHERE_COLUMN_RANGE 87996,3093899
#define WHERE_COLUMN_IN 87997,3093965
#define WHERE_COLUMN_NULL 87998,3094021
#define WHERE_INDEXED 87999,3094076
#define WHERE_IN_ABLE 88000,3094149
#define WHERE_TOP_LIMIT 88001,3094225
#define WHERE_BTM_LIMIT 88002,3094299
#define WHERE_IDX_ONLY 88003,3094373
#define WHERE_ORDERBY 88004,3094446
#define WHERE_REVERSE 88005,3094527
#define WHERE_UNIQUE 88006,3094594
#define WHERE_VIRTUALTABLE 88007,3094668
#define WHERE_MULTI_OR 88008,3094742
static void whereClauseInit(88013,3094872
static void whereOrInfoDelete(88032,3095397
static void whereAndInfoDelete(88040,3095582
static void whereClauseClear(88049,3095846
static int whereClauseInsert(88087,3097301
static void whereSplit(88132,3098848
#define initMaskSet(88146,3099179
static Bitmask getMask(88152,3099329
static void createMask(88171,3099845
static Bitmask exprTableUsage(88192,3100773
static Bitmask exprListTableUsage(88208,3101244
static Bitmask exprSelectTableUsage(88218,3101485
static int allowedOp(88236,3102092
#define SWAP(88247,3102378
static void exprCommute(88261,3102965
static u16 operatorMask(88284,3103871
static WhereTerm *findTerm(findTerm88311,3104654
static void exprAnalyzeAll(88366,3106356
static int isLikeOrGlob(88385,3106924
static int isMatchOfColumn(88493,3110998
static void transferJoinMarkings(88519,3111539
static void exprAnalyzeOrTerm(88601,3114923
static void exprAnalyze(88851,3125223
static int referencesOtherTables(89093,3134020
static int isSortingIndex(89128,3135441
static double estLog(89257,3140471
static void TRACE_IDX_INPUTS(89274,3140884
static void TRACE_IDX_OUTPUTS(89292,3141411
#define TRACE_IDX_INPUTS(89307,3141936
#define TRACE_IDX_OUTPUTS(89308,3141964
static void bestOrClauseIndex(89324,3142438
static sqlite3_index_info *allocateIndexInfo(allocateIndexInfo89406,3145603
static int vtabBestIndex(89519,3149978
static void bestVirtualIndex(89568,3151594
static int whereRangeRegion(89712,3157187
static int valueFromExpr(89807,3160401
static int whereRangeScanEst(89867,3162811
static void bestBtreeIndex(89969,3166133
static void bestIndex(90293,3178577
static void disableTerm(90339,3180452
static void codeApplyAffinity(90365,3181306
static int codeEqualityTerm(90405,3182448
static int codeAllEqualityTerms(90498,3186088
static Bitmask codeOneLoopStart(90572,3188763
SQLITE_API char sqlite3_query_plan[sqlite3_query_plan91201,3214485
static int nQPlan 91202,3214555
static void whereInfoFree(91210,3214693
SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin(sqlite3WhereBegin91317,3219028
SQLITE_PRIVATE void sqlite3WhereEnd(91756,3236714
#define YYNOERRORRECOVERY 91894,3241708
#define yytestcase(91899,3241787
struct LimitVal 91905,3241928
  Expr *pLimit;pLimit91906,3241946
  Expr *pOffset;pOffset91907,3242020
struct LikeOp 91914,3242204
  Token eOperator;91915,3242220
  int not;91916,3242275
struct TrigEvent 91928,3242616
struct TrigEvent { int a;91928,3242616
struct TrigEvent { int a; IdList * b;91928,3242616
struct AttachKey 91933,3242736
struct AttachKey { int type;91933,3242736
struct AttachKey { int type;  Token key;91933,3242736
  static void spanSet(91940,3242996
  static void spanExpr(91949,3243316
  static void spanBinaryExpr(91958,3243674
  static void spanUnaryPostfix(91972,3244196
  static void binaryToUnaryIfNull(91986,3244829
  static void spanUnaryPrefix(91997,3245151
# define INTERFACE 92021,3246051
#define YYCODETYPE 92057,3248371
#define YYNOCODE 92058,3248404
#define YYACTIONTYPE 92059,3248425
#define YYWILDCARD 92060,3248465
#define sqlite3ParserTOKENTYPE 92061,3248487
  int yyinit;92063,3248540
  sqlite3ParserTOKENTYPE yy0;92064,3248554
  Select* yy3;92065,3248584
  ExprList* yy14;92066,3248599
  SrcList* yy65;92067,3248617
  struct LikeOp yy96;92068,3248634
  Expr* yy132;92069,3248656
  u8 yy186;92070,3248671
  int yy328;92071,3248683
  ExprSpan yy346;92072,3248696
  struct TrigEvent yy378;92073,3248714
  IdList* yy408;92074,3248740
  struct {int value;92075,3248757
  struct {int value; int mask;92075,3248757
  struct {int value; int mask;} yy429;92075,3248757
  TriggerStep* yy473;92076,3248796
  struct LimitVal yy476;92077,3248818
} YYMINORTYPE;92078,3248843
#define YYSTACKDEPTH 92080,3248879
#define sqlite3ParserARG_SDECL 92082,3248911
#define sqlite3ParserARG_PDECL 92083,3248957
#define sqlite3ParserARG_FETCH 92084,3249003
#define sqlite3ParserARG_STORE 92085,3249068
#define YYNSTATE 92086,3249126
#define YYNRULE 92087,3249147
#define YYFALLBACK 92088,3249167
#define YY_NO_ACTION 92089,3249188
#define YY_ACCEPT_ACTION 92090,3249235
#define YY_ERROR_ACTION 92091,3249282
static const YYMINORTYPE yyzerominor 92095,3249426
# define yytestcase(92106,3249820
#define YY_ACTTAB_COUNT 92157,3252052
static const YYACTIONTYPE yy_action[yy_action92158,3252083
static const YYCODETYPE yy_lookahead[yy_lookahead92315,3263598
#define YY_SHIFT_USE_DFLT 92472,3275114
#define YY_SHIFT_COUNT 92473,3275146
#define YY_SHIFT_MIN 92474,3275175
#define YY_SHIFT_MAX 92475,3275204
static const short yy_shift_ofst[yy_shift_ofst92476,3275234
#define YY_REDUCE_USE_DFLT 92520,3278378
#define YY_REDUCE_COUNT 92521,3278412
#define YY_REDUCE_MIN 92522,3278442
#define YY_REDUCE_MAX 92523,3278473
static const short yy_reduce_ofst[yy_reduce_ofst92524,3278504
static const YYACTIONTYPE yy_default[yy_default92558,3280873
static const YYCODETYPE yyFallback[yyFallback92636,3286011
struct yyStackEntry 92719,3288724
  YYACTIONTYPE stateno;92720,3288746
  YYCODETYPE major;92721,3288794
  YYMINORTYPE minor;92723,3288935
typedef struct yyStackEntry yyStackEntry;92726,3289067
struct yyParser 92730,3289209
  int yyidx;92731,3289227
  int yyidxMax;92733,3289323
  int yyerrcnt;92735,3289391
  int yystksz;92738,3289563
  yyStackEntry *yystack;yystack92739,3289627
  yyStackEntry yystack[yystack92741,3289690
typedef struct yyParser yyParser;92744,3289764
static FILE *yyTraceFILE yyTraceFILE92747,3289814
static char *yyTracePrompt yyTracePrompt92748,3289844
SQLITE_PRIVATE void sqlite3ParserTrace(92769,3290388
static const char *const yyTokenName[yyTokenName92780,3290780
static const char *const yyRuleName[yyRuleName92851,3295347
static void yyGrowStack(93190,3309210
SQLITE_PRIVATE void *sqlite3ParserAlloc(sqlite3ParserAlloc93221,3309921
static void yy_destructor(93243,3310522
      break;93265,3311346
      break;93272,3311496
      break;93288,3311925
      break;93296,3312110
      break;93308,3312417
      break;93315,3312582
      break;93321,3312725
      break;93326,3312830
    default:  break;93327,3312843
static int yy_pop_parser_stack(93339,3313136
SQLITE_PRIVATE void sqlite3ParserFree(93371,3314043
SQLITE_PRIVATE int sqlite3ParserStackPeak(93390,3314627
static int yy_find_shift_action(93404,3315030
static int yy_find_reduce_action(93469,3316883
static void yyStackOverflow(93499,3317606
static void yy_shift(93520,3318262
  YYCODETYPE lhs;93567,3319678
  unsigned char nrhs;93568,3319751
} yyRuleInfo[yyRuleInfo93569,3319829
static void yy_reduce(93908,3324628
        break;93990,3327921
        break;93995,3328062
        break;94000,3328218
        break;94005,3328434
        break;94011,3328572
{yygotominor.yy328 yy32894024,3329407
        break;94025,3329432
{yygotominor.yy328 yy32894034,3330005
        break;94035,3330030
        break;94040,3330192
        break;94046,3330369
        break;94052,3330584
        break;94058,3330728
{yygotominor.yy0 yy094081,3332168
        break;94082,3332208
        break;94085,3332315
        break;94091,3332534
        break;94097,3332766
        break;94100,3332961
        break;94104,3333151
        break;94107,3333273
        break;94116,3333546
        break;94123,3333714
        break;94126,3333827
        break;94129,3334009
        break;94132,3334136
        break;94135,3334264
        break;94138,3334444
        break;94141,3334561
        break;94144,3334673
        break;94147,3334784
        break;94150,3334954
{ yygotominor.yy429.value value94153,3335085
{ yygotominor.yy429.value = 0;     yygotominor.yy429.mask mask94153,3335085
        break;94154,3335157
        break;94157,3335312
        break;94160,3335467
        break;94163,3335583
        break;94166,3335702
        break;94169,3335817
        break;94172,3335933
        break;94175,3336050
{yygotominor.yy328 yy32894180,3336386
        break;94181,3336430
        break;94184,3336531
        break;94187,3336640
        break;94190,3336825
        break;94193,3336985
        break;94196,3337120
        break;94202,3337434
        break;94205,3337516
        break;94208,3337598
        break;94211,3337709
        break;94214,3337802
        break;94217,3337897
        break;94222,3338050
        break;94227,3338309
        break;94232,3338461
      case 94233,3338476
        break;94239,3338670
        break;94242,3338768
        break;94253,3339101
        break;94256,3339197
        break;94261,3339592
{yygotominor.yy14 yy1494264,3339734
        break;94265,3339777
{yygotominor.yy14 yy1494271,3340080
        break;94272,3340104
        break;94279,3340458
      case 94280,3340473
        break;94285,3340649
      case 94286,3340664
        break;94293,3341011
        break;94296,3341080
        break;94299,3341207
        break;94305,3341364
        break;94311,3341627
        break;94314,3341703
        break;94320,3342073
        break;94325,3342345
        break;94337,3342958
{yygotominor.yy0.z=z94340,3343069
{yygotominor.yy0.z=0; yygotominor.yy0.n=n94340,3343069
        break;94341,3343113
        break;94344,3343269
        break;94347,3343362
        break;94350,3343497
        break;94353,3343654
        break;94356,3343833
{yygotominor.yy132 yy13294363,3344250
        break;94364,3344300
{yygotominor.yy132 yy13294370,3344604
        break;94371,3344629
        break;94374,3344738
{yygotominor.yy408 yy40894377,3344897
        break;94378,3344942
{yygotominor.yy408 yy40894381,3345061
        break;94382,3345086
{yygotominor.yy14 yy1494386,3345313
        break;94387,3345355
        break;94393,3345648
        break;94399,3345914
{yygotominor.yy328 yy32894402,3346032
        break;94403,3346069
        break;94406,3346163
        break;94409,3346277
        break;94412,3346427
        break;94415,3346615
        break;94418,3346802
        break;94424,3347044
        break;94431,3347410
        break;94437,3347667
        break;94443,3347891
        break;94446,3348116
        break;94449,3348324
        break;94452,3348523
        break;94455,3348633
        break;94458,3348727
{yygotominor.yy14 yy1494461,3348881
        break;94462,3348981
{yygotominor.yy14 yy1494465,3349104
        break;94466,3349185
        break;94469,3349354
        break;94472,3349486
{yygotominor.yy346 yy34694475,3349609
        break;94476,3349653
        break;94479,3349837
{spanExpr(&yygotominor.yy346, pParse, yymsp[0].major, &yymsp[0].minor.yy0)yy094483,3350030
        break;94484,3350107
{spanExpr(&yygotominor.yy346, pParse, TK_ID, &yymsp[0].minor.yy0)yy094487,3350222
        break;94488,3350290
      case 94489,3350305
        break;94496,3350642
      case 94497,3350657
        break;94506,3351137
        break;94521,3351823
        break;94528,3352092
        break;94535,3352396
        break;94541,3352660
        break;94553,3353222
        break;94559,3353440
        break;94570,3353861
{spanBinaryExpr(&yygotominor.yy346,pParse,yymsp[-1].major,&yymsp[-2].minor.yy346,&yymsp[0].minor.yy346)yy34694579,3354478
        break;94580,3354584
{yygotominor.yy96.eOperator eOperator94583,3354706
{yygotominor.yy96.eOperator = yymsp[0].minor.yy0; yygotominor.yy96.not not94583,3354706
        break;94584,3354783
{yygotominor.yy96.eOperator eOperator94587,3354913
{yygotominor.yy96.eOperator = yymsp[0].minor.yy0; yygotominor.yy96.not not94587,3354913
        break;94588,3354990
        break;94591,3355096
        break;94606,3355865
        break;94609,3356036
        break;94612,3356197
        break;94618,3356451
        break;94624,3356713
{spanUnaryPrefix(&yygotominor.yy346,pParse,yymsp[-1].major,&yymsp[0].minor.yy346,&yymsp[-1].minor.yy0)yy094627,3356838
        break;94628,3356943
        break;94631,3357099
        break;94634,3357253
      case 94635,3357268
        break;94649,3357956
        break;94663,3358621
        break;94677,3359185
        break;94692,3359908
      case 94693,3359923
        break;94708,3360808
      case 94709,3360823
        break;94722,3361301
        break;94735,3361856
        break;94741,3362148
        break;94747,3362407
        break;94754,3362826
{yygotominor.yy328 yy32894757,3362954
        break;94758,3362986
        break;94761,3363069
      case 94762,3363084
        break;94774,3363638
      case 94775,3363653
        break;94787,3364180
        break;94790,3364277
        break;94793,3364423
        break;94797,3364567
        break;94800,3364697
        break;94803,3364855
        break;94806,3365017
        break;94809,3365179
        break;94812,3365345
        break;94820,3365636
        break;94826,3366120
{ yygotominor.yy328 yy32894829,3366247
        break;94830,3366282
        break;94833,3366377
        break;94836,3366477
{yygotominor.yy378.a a94839,3366620
{yygotominor.yy378.a = yymsp[0].major; yygotominor.yy378.b b94839,3366620
        break;94840,3366685
        break;94843,3366840
{ yygotominor.yy132 yy13294846,3366954
        break;94847,3366981
{ yygotominor.yy132 yy13294850,3367114
        break;94851,3367166
        break;94859,3367464
        break;94866,3367683
        break;94874,3367928
        break;94881,3368128
        break;94888,3368327
        break;94891,3368580
        break;94894,3368844
        break;94897,3369091
        break;94900,3369283
        break;94903,3369424
        break;94913,3369775
        break;94923,3370176
        break;94926,3370271
        break;94929,3370358
        break;94934,3370510
        break;94939,3370708
        break;94944,3370838
        break;94947,3370923
        break;94950,3371053
        break;94953,3371138
        break;94956,3371268
        break;94961,3371427
        break;94966,3371592
        break;94972,3371763
        break;94975,3371856
        break;94978,3371985
        break;94983,3372182
        break;94986,3372261
        break;94991,3372510
        break;95033,3375212
  yygoto 95035,3375232
  yysize 95036,3375269
  yyact 95038,3375337
static void yy_parse_failed(95066,3376167
static void yy_syntax_error(95085,3376712
#define TOKEN 95091,3376966
static void yy_accept(95103,3377370
SQLITE_PRIVATE void sqlite3Parser(95137,3378436
# define charMap(95316,3384572
# define charMap(95319,3384658
const unsigned char ebcdicToAscii[ebcdicToAscii95320,3384710
static int keywordCode(95368,3387311
SQLITE_PRIVATE int sqlite3KeywordCode(95620,3400233
#define SQLITE_N_KEYWORD 95623,3400340
#define IdChar(95646,3401116
SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[sqlite3IsEbcdicIdChar95649,3401209
#define IdChar(95664,3402064
SQLITE_PRIVATE int sqlite3GetToken(95672,3402259
SQLITE_PRIVATE int sqlite3RunParser(95949,3409112
#define IdChar(96117,3414488
SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[sqlite3IsEbcdicIdChar96120,3414581
#define IdChar(96121,3414632
#define tkSEMI 96130,3414877
#define tkWS 96131,3414897
#define tkOTHER 96132,3414917
#define tkEXPLAIN 96134,3414965
#define tkCREATE 96135,3414985
#define tkTEMP 96136,3415005
#define tkTRIGGER 96137,3415025
#define tkEND 96138,3415045
SQLITE_API int sqlite3_complete(96194,3417280
SQLITE_API int sqlite3_complete16(96352,3422268
SQLITE_API const char sqlite3_version[sqlite3_version96496,3426758
SQLITE_API const char *sqlite3_libversion(sqlite3_libversion96498,3426823
SQLITE_API const char *sqlite3_sourceid(sqlite3_sourceid96499,3426898
SQLITE_API int sqlite3_libversion_number(96500,3426972
SQLITE_API int sqlite3_threadsafe(96501,3427052
SQLITE_API char *sqlite3_temp_directory sqlite3_temp_directory96520,3427711
SQLITE_API int sqlite3_initialize(96553,3429093
SQLITE_API int sqlite3_shutdown(96686,3433889
SQLITE_API int sqlite3_config(96717,3434760
      typedef void(*LOGFUNC_t)LOGFUNC_t96854,3439375
static int setupLookaside(96880,3440110
SQLITE_API sqlite3_mutex *sqlite3_db_mutex(sqlite3_db_mutex96936,3441565
SQLITE_API int sqlite3_db_config(96943,3441715
static int allSpaces(96968,3442201
static int binCollFunc(96980,3442530
static int nocaseCollatingFunc(97010,3443270
SQLITE_API sqlite_int64 sqlite3_last_insert_rowid(97027,3443623
SQLITE_API int sqlite3_changes(97034,3443795
SQLITE_API int sqlite3_total_changes(97041,3443941
SQLITE_PRIVATE void sqlite3CloseSavepoints(97050,3444210
SQLITE_API int sqlite3_close(97064,3444523
SQLITE_PRIVATE void sqlite3RollbackAll(97190,3448125
SQLITE_PRIVATE const char *sqlite3ErrStr(sqlite3ErrStr97225,3449051
static int sqliteDefaultBusyCallback(97269,3450996
# define NDELAY 97278,3451390
SQLITE_PRIVATE int sqlite3InvokeBusyHandler(97315,3452304
SQLITE_API int sqlite3_busy_handler(97331,3452677
SQLITE_API void sqlite3_progress_handler(97350,3453186
SQLITE_API int sqlite3_busy_timeout(97375,3453701
SQLITE_API void sqlite3_interrupt(97388,3454013
SQLITE_PRIVATE int sqlite3CreateFunc(97399,3454368
SQLITE_API int sqlite3_create_function(97483,3456810
SQLITE_API int sqlite3_create_function16(97502,3457310
SQLITE_API int sqlite3_overload_function(97538,3458436
SQLITE_API void *sqlite3_trace(sqlite3_trace97564,3459175
SQLITE_API void *sqlite3_profile(sqlite3_profile97581,3459741
SQLITE_API void *sqlite3_commit_hook(sqlite3_commit_hook97602,3460247
SQLITE_API void *sqlite3_update_hook(sqlite3_update_hook97620,3460793
SQLITE_API void *sqlite3_rollback_hook(sqlite3_rollback_hook97638,3461330
SQLITE_PRIVATE int sqlite3TempInMemory(97671,3462826
SQLITE_PRIVATE int sqlite3BtreeFactory(97699,3463793
SQLITE_API const char *sqlite3_errmsg(sqlite3_errmsg97744,3465326
SQLITE_API const void *sqlite3_errmsg16(sqlite3_errmsg1697771,3465955
SQLITE_API int sqlite3_errcode(97817,3467398
SQLITE_API int sqlite3_extended_errcode(97826,3467625
static int createCollation(97840,3467955
static const int aHardLimit[aHardLimit97921,3470347
SQLITE_API int sqlite3_limit(97980,3472052
static int openDatabase(98000,3472572
SQLITE_API int sqlite3_open(98231,3479322
SQLITE_API int sqlite3_open_v2(98238,3479509
SQLITE_API int sqlite3_open16(98251,3479870
SQLITE_API int sqlite3_create_collation(98288,3480847
SQLITE_API int sqlite3_create_collation_v2(98307,3481320
SQLITE_API int sqlite3_create_collation16(98328,3481847
SQLITE_API int sqlite3_collation_needed(98354,3482574
SQLITE_API int sqlite3_collation_needed16(98372,3483084
SQLITE_API int sqlite3_global_recover(98392,3483665
SQLITE_API int sqlite3_get_autocommit(98406,3484076
SQLITE_PRIVATE int sqlite3CorruptError(98421,3484599
SQLITE_PRIVATE int sqlite3MisuseError(98427,3484821
SQLITE_PRIVATE int sqlite3CantopenError(98432,3485016
SQLITE_API void sqlite3_thread_cleanup(98447,3485507
SQLITE_API int sqlite3_table_column_metadata(98456,3485733
SQLITE_API int sqlite3_sleep(98567,3489043
SQLITE_API int sqlite3_extended_result_codes(98583,3489407
SQLITE_API int sqlite3_file_control(98593,3489677
SQLITE_API int sqlite3_test_control(98627,3490488
      typedef void (*void_function)void_function98684,3492120
#define assertMutexHeld(98848,3498027
static sqlite3 *SQLITE_WSD sqlite3BlockedList 98857,3498379
static void checkListProperties(98874,3499017
# define checkListProperties(98893,3499589
static void removeFromBlockedList(98900,3499777
static void addToBlockedList(98915,3500123
static void enterMutex(98930,3500407
static void leaveMutex(98938,3500578
SQLITE_API int sqlite3_unlock_notify(98965,3501508
SQLITE_PRIVATE void sqlite3ConnectionBlocked(99014,3502869
SQLITE_PRIVATE void sqlite3ConnectionUnlocked(99042,3503837
SQLITE_PRIVATE void sqlite3ConnectionClosed(99141,3507686
# define SQLITE_CORE 99449,3520790
#define _FTSINT_H99469,3521380
# define NDEBUG 99472,3521447
#define _FTS3_TOKENIZER_H_99497,3522317
typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;99523,3523503
typedef struct sqlite3_tokenizer sqlite3_tokenizer;99524,3523569
typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;99525,3523621
struct sqlite3_tokenizer_module 99527,3523688
  int iVersion;99532,3523784
  int (*xCreate)xCreate99551,3524567
  int (*xDestroy)xDestroy99561,3524935
  int (*xOpen)xOpen99568,3525198
  int (*xClose)xClose99578,3525564
  int (*xNext)xNext99604,3526850
struct sqlite3_tokenizer 99613,3527248
  const sqlite3_tokenizer_module *pModule;pModule99614,3527275
struct sqlite3_tokenizer_cursor 99618,3527430
  sqlite3_tokenizer *pTokenizer;pTokenizer99619,3527464
#define _FTS3_HASH_H_99650,3528660
typedef struct Fts3Hash Fts3Hash;99653,3528725
typedef struct Fts3HashElem Fts3HashElem;99654,3528759
struct Fts3Hash 99664,3529258
  char keyClass;99665,3529276
  char copyKey;99666,3529345
  int count;99667,3529412
  Fts3HashElem *first;first99668,3529476
  int htsize;99669,3529539
  struct _fts3ht 99670,3529607
    int count;99671,3529654
    Fts3HashElem *chain;chain99672,3529722
  } *ht;ht99673,3529795
struct Fts3HashElem 99682,3530066
  Fts3HashElem *next,next99683,3530088
  Fts3HashElem *next, *prev;prev99683,3530088
  void *data;data99684,3530163
  void *pKey;pKey99685,3530232
  void *pKey; int nKey;99685,3530232
#define FTS3_HASH_STRING 99700,3530807
#define FTS3_HASH_BINARY 99701,3530837
#define fts3HashInit 99715,3531386
#define fts3HashInsert 99716,3531431
#define fts3HashFind 99717,3531478
#define fts3HashClear 99718,3531523
#define fts3HashFindElem 99719,3531569
#define fts3HashFirst(99733,3531902
#define fts3HashNext(99734,3531941
#define fts3HashData(99735,3531979
#define fts3HashKey(99736,3532017
#define fts3HashKeysize(99737,3532055
#define fts3HashCount(99742,3532138
#define FTS3_MERGE_COUNT 99754,3532541
#define FTS3_MAX_PENDING_DATA 99764,3532986
#define SizeofArray(99771,3533237
#define FTS3_VARINT_MAX 99777,3533442
# define ALWAYS(99789,3533705
# define NEVER(99790,3533728
typedef unsigned char u8;99794,3533791
typedef short int i16;99795,3533867
typedef unsigned int u32;99796,3533941
typedef sqlite3_uint64 u64;99797,3534005
#define UNUSED_PARAMETER(99801,3534142
typedef struct Fts3Table Fts3Table;99804,3534188
typedef struct Fts3Cursor Fts3Cursor;99805,3534224
typedef struct Fts3Expr Fts3Expr;99806,3534262
typedef struct Fts3Phrase Fts3Phrase;99807,3534296
typedef struct Fts3SegReader Fts3SegReader;99808,3534334
typedef struct Fts3SegFilter Fts3SegFilter;99809,3534378
struct Fts3Table 99818,3534719
  sqlite3_vtab base;99819,3534738
  sqlite3 *db;db99820,3534809
  const char *zDb;zDb99821,3534873
  const char *zName;zName99822,3534935
  int nColumn;99823,3534994
  char **azColumn;azColumn99824,3535075
  sqlite3_tokenizer *pTokenizer;pTokenizer99825,3535139
  sqlite3_stmt *aStmt[aStmt99830,3535364
  char *zSelectLeaves;zSelectLeaves99837,3535537
  int nLeavesStmt;99838,3535560
  int nLeavesTotal;99839,3535632
  int nLeavesAlloc;99840,3535710
  sqlite3_stmt **aLeavesStmt;aLeavesStmt99841,3535780
  int nNodeSize;99843,3535859
  u8 bHasContent;99844,3535924
  u8 bHasDocsize;99845,3535995
  int nMaxPendingData;99854,3536467
  int nPendingData;99855,3536490
  sqlite_int64 iPrevDocid;99856,3536510
  Fts3Hash pendingTerms;99857,3536537
struct Fts3Cursor 99865,3536779
  sqlite3_vtab_cursor base;99866,3536799
  i16 eSearch;99867,3536870
  u8 isEof;99868,3536938
  u8 isRequireSeek;99869,3537004
  sqlite3_stmt *pStmt;pStmt99870,3537085
  Fts3Expr *pExpr;pExpr99871,3537165
  sqlite3_int64 iPrevId;99872,3537231
  char *pNextId;pNextId99873,3537302
  char *aDoclist;aDoclist99874,3537376
  int nDoclist;99875,3537453
  int isMatchinfoNeeded;99876,3537520
  u32 *aMatchinfo;aMatchinfo99877,3537600
#define FTS3_FULLSCAN_SEARCH 99895,3538372
#define FTS3_DOCID_SEARCH 99896,3538443
#define FTS3_FULLTEXT_SEARCH 99897,3538518
struct Fts3Phrase 99905,3538831
  int nToken;99906,3538851
  int iColumn;99907,3538917
  int isNot;99908,3538991
  struct PhraseToken 99909,3539068
    char *z;z99910,3539091
    int n;99911,3539144
    int isPrefix;99912,3539221
  } aToken[aToken99913,3539299
struct Fts3Expr 99929,3540010
  int eType;99930,3540028
  int nNear;99931,3540108
  Fts3Expr *pParent;pParent99932,3540173
  Fts3Expr *pLeft;pLeft99933,3540254
  Fts3Expr *pRight;pRight99934,3540302
  Fts3Phrase *pPhrase;pPhrase99935,3540351
  int isLoaded;99937,3540419
  char *aDoclist;aDoclist99938,3540497
  int nDoclist;99939,3540558
  sqlite3_int64 iCurrent;99941,3540620
  char *pCurrent;pCurrent99942,3540646
#define FTSQUERY_NEAR 99956,3540949
#define FTSQUERY_NOT 99957,3540975
#define FTSQUERY_AND 99958,3541001
#define FTSQUERY_OR 99959,3541027
#define FTSQUERY_PHRASE 99960,3541053
#define FTS3_SEGMENT_REQUIRE_POS 99987,3542458
#define FTS3_SEGMENT_IGNORE_EMPTY 99988,3542504
#define FTS3_SEGMENT_COLUMN_FILTER 99989,3542550
#define FTS3_SEGMENT_PREFIX 99990,3542596
struct Fts3SegFilter 99993,3542703
  const char *zTerm;zTerm99994,3542726
  int nTerm;99995,3542747
  int iCol;99996,3542760
  int flags;99997,3542772
SQLITE_PRIVATE int sqlite3Fts3PutVarint(100049,3544647
SQLITE_PRIVATE int sqlite3Fts3GetVarint(100066,3545181
SQLITE_PRIVATE int sqlite3Fts3GetVarint32(100082,3545665
SQLITE_PRIVATE int sqlite3Fts3VarintLen(100093,3545933
SQLITE_PRIVATE void sqlite3Fts3Dequote(100116,3546429
static void fts3GetDeltaVarint(100145,3547279
static void fts3GetDeltaVarint2(100157,3547665
static int fts3DisconnectMethod(100168,3547873
void fts3DbExec(100198,3548658
static int fts3DestroyMethod(100221,3549197
static int fts3DeclareVtab(100246,3550235
static int fts3CreateTables(100279,3551280
static int fts3TableExistsCallback(100334,3552931
static void fts3TableExists(100342,3553108
static int fts3InitVtab(100375,3554131
static int fts3ConnectMethod(100511,3558131
static int fts3CreateMethod(100521,3558651
static int fts3BestIndexMethod(100540,3559458
static int fts3OpenMethod(100593,3561270
static int fulltextClose(100614,3561954
static int fts3CursorSeek(100624,3562234
static int fts3NextMethod(100650,3562978
static int fts3SelectLeaf(100687,3564331
static void fts3PutDeltaVarint(100771,3567559
static void fts3PoslistCopy(100790,3568305
static void fts3ColumnlistCopy(100817,3569142
#define OFFSET_LIST_END 100837,3569646
static void fts3ReadNextPos(100850,3570223
static int fts3PutColNumber(100870,3570817
static void fts3PoslistMerge(100884,3571107
static int fts3PoslistPhraseMerge(100953,3573119
static int fts3PoslistNearMerge(101064,3576026
#define MERGE_NOT 101108,3577271
#define MERGE_AND 101109,3577322
#define MERGE_OR 101110,3577373
#define MERGE_POS_OR 101111,3577424
#define MERGE_PHRASE 101112,3577475
#define MERGE_POS_PHRASE 101113,3577526
#define MERGE_NEAR 101114,3577577
#define MERGE_POS_NEAR 101115,3577628
static int fts3DoclistMerge(101127,3578156
typedef struct TermSelect TermSelect;101282,3582860
struct TermSelect 101283,3582898
  int isReqPos;101284,3582918
  char *aOutput;aOutput101285,3582934
  int nOutput;101286,3582997
static int fts3TermSelectCb(101294,3583235
static int fts3TermSelect(101349,3584967
static int fts3PhraseSelect(101479,3589740
static int fts3NearMerge(101536,3591755
SQLITE_PRIVATE int sqlite3Fts3ExprNearTrim(101570,3592842
static int evalFts3Expr(101608,3593963
static int fts3FilterMethod(101722,3597886
static int fts3EofMethod(101800,3600645
static int fts3RowidMethod(101810,3600992
static int fts3ColumnMethod(101824,3601394
static int fts3UpdateMethod(101863,3602804
static int fts3SyncMethod(101876,3603276
static int fts3BeginMethod(101883,3603447
static int fts3CommitMethod(101894,3603775
static int fts3RollbackMethod(101904,3604080
SQLITE_PRIVATE int sqlite3Fts3ExprLoadDoclist(101915,3604440
SQLITE_PRIVATE char *sqlite3Fts3FindPositions(sqlite3Fts3FindPositions101924,3604786
static int fts3FunctionArg(101978,3606587
static void fts3SnippetFunc(102001,3607330
static void fts3OffsetsFunc(102042,3608803
static void fts3OptimizeFunc(102068,3609594
static void fts3MatchinfoFunc(102102,3610601
static int fts3FindFunctionMethod(102124,3611254
  struct Overloaded 102131,3611609
    const char *zName;zName102132,3611631
    void (*xFunc)xFunc102133,3611654
static int fts3RenameMethod(102160,3612328
static const sqlite3_module fts3Module 102196,3613332
static void hashDestroy(102224,3614356
SQLITE_PRIVATE int sqlite3Fts3Init(102251,3615582
SQLITE_API int sqlite3_extension_init(102323,3617686
SQLITE_API int sqlite3_fts3_enable_parentheses 102402,3620412
#  define sqlite3_fts3_enable_parentheses 102405,3620510
#  define sqlite3_fts3_enable_parentheses 102407,3620561
#define SQLITE_FTS3_DEFAULT_NEAR_PARAM 102414,3620663
typedef struct ParseContext ParseContext;102417,3620707
struct ParseContext 102418,3620749
  sqlite3_tokenizer *pTokenizer;pTokenizer102419,3620771
  const char **azCol;azCol102420,3620832
  int nCol;102421,3620913
  int iDefaultCol;102422,3620986
  sqlite3_context *pCtx;pCtx102423,3621054
  int nNest;102424,3621123
static int fts3isspace(102438,3621744
static int getNextToken(102454,3622412
static void *fts3ReallocOrFree(fts3ReallocOrFree102516,3624384
static int getNextString(102536,3625119
static int getNextNode(102639,3628203
  static const struct Fts3Keyword 102645,3628506
    char *z;z102646,3628542
    unsigned char n;102647,3628603
    unsigned char parenOnly;102648,3628673
    unsigned char eType;102649,3628746
static int opPrecedence(102811,3633808
static void insertBinaryOperator(102832,3634562
static int fts3ExprParse(102863,3635690
SQLITE_PRIVATE int sqlite3Fts3ExprParse(103028,3641137
SQLITE_PRIVATE void sqlite3Fts3ExprFree(103066,3642210
static int queryTestTokenizer(103086,3642717
static void exprToString(103117,3643563
static void fts3ExprTest(103169,3645181
SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(103248,3647192
static void *fts3HashMalloc(fts3HashMalloc103291,3648552
static void fts3HashFree(103298,3648669
SQLITE_PRIVATE void sqlite3Fts3HashInit(103312,3649194
SQLITE_PRIVATE void sqlite3Fts3HashClear(103327,3649661
static int fts3StrHash(103350,3650186
static int fts3StrCompare(103360,3650421
static int fts3BinHash(103368,3650663
static int fts3BinCompare(103376,3650849
static int (*ftsHashFunction(ftsHashFunction103393,3651564
static int (*ftsCompareFunction(ftsCompareFunction103408,3651979
static void fts3HashInsertElement(103419,3652252
static int fts3Rehash(103449,3653161
static Fts3HashElem *fts3FindElementByHash(fts3FindElementByHash103473,3654083
static void fts3RemoveElementByHash(103501,3654971
SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem(sqlite3Fts3HashFindElem103535,3655749
SQLITE_PRIVATE void *sqlite3Fts3HashFind(sqlite3Fts3HashFind103556,3656397
SQLITE_PRIVATE void *sqlite3Fts3HashInsert(sqlite3Fts3HashInsert103578,3657302
typedef struct porter_tokenizer 103672,3660158
  sqlite3_tokenizer base;103673,3660192
} porter_tokenizer;103674,3660240
typedef struct porter_tokenizer_cursor 103679,3660313
  sqlite3_tokenizer_cursor base;103680,3660354
  const char *zInput;zInput103681,3660387
  int nInput;103682,3660448
  int iOffset;103683,3660503
  int iToken;103684,3660567
  char *zToken;zToken103685,3660639
  int nAllocated;103686,3660702
} porter_tokenizer_cursor;103687,3660772
static int porterCreate(103693,3660843
static int porterDestroy(103712,3661219
static int porterOpen(103723,3661532
static int porterClose(103756,3662399
static const char cType[cType103765,3662622
static int isConsonant(103784,3663247
static int isVowel(103793,3663443
static int m_gt_0(103822,3664358
static int m_eq_1(103832,3664582
static int m_gt_1(103846,3664916
static int hasVowel(103860,3665236
static int doubleConsonant(103871,3665483
static int star_oh(103883,3665847
static int stem(103903,3666402
static void copy_stemmer(103928,3667282
static void porter_stemmer(103975,3668778
static const char porterIdChar[porterIdChar104198,3673890
#define isDelim(104206,3674294
static int porterNext(104212,3674502
static const sqlite3_tokenizer_module porterTokenizerModule 104260,3676034
SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule(104273,3676280
static void scalarFunc(104335,3678466
static int fts3IsIdChar(104378,3679538
SQLITE_PRIVATE const char *sqlite3Fts3NextToken(sqlite3Fts3NextToken104392,3680173
SQLITE_PRIVATE int sqlite3Fts3InitTokenizer(104429,3680919
static void testFunc(104528,3683918
int registerTokenizer(104617,3686021
int queryTokenizer(104639,3686483
static void intTestFunc(104684,3687832
SQLITE_PRIVATE int sqlite3Fts3InitHashTable(104736,3689537
typedef struct simple_tokenizer 104807,3691571
  sqlite3_tokenizer base;104808,3691605
  char delim[delim104809,3691631
} simple_tokenizer;104810,3691690
typedef struct simple_tokenizer_cursor 104812,3691711
  sqlite3_tokenizer_cursor base;104813,3691752
  const char *pInput;pInput104814,3691785
  int nBytes;104815,3691846
  int iOffset;104816,3691901
  int iToken;104817,3691965
  char *pToken;pToken104818,3692037
  int nTokenAllocated;104819,3692100
} simple_tokenizer_cursor;104820,3692170
static int simpleDelim(104823,3692199
static int simpleCreate(104830,3692338
static int simpleDestroy(104871,3693374
static int simpleOpen(104882,3693687
static int simpleClose(104915,3694559
static int simpleNext(104926,3694885
static const sqlite3_tokenizer_module simpleTokenizerModule 104983,3696722
SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule(104996,3696968
typedef struct PendingList PendingList;105028,3698081
typedef struct SegmentNode SegmentNode;105029,3698121
typedef struct SegmentWriter SegmentWriter;105030,3698161
struct PendingList 105037,3698388
  int nData;105038,3698409
  char *aData;aData105039,3698422
  int nSpace;105040,3698437
  sqlite3_int64 iLastDocid;105041,3698451
  sqlite3_int64 iLastCol;105042,3698479
  sqlite3_int64 iLastPos;105043,3698505
struct Fts3SegReader 105063,3699149
  int iIdx;105064,3699172
  sqlite3_int64 iStartBlock;105065,3699253
  sqlite3_int64 iEndBlock;105066,3699282
  sqlite3_stmt *pStmt;pStmt105067,3699309
  char *aNode;aNode105068,3699384
  int nNode;105069,3699455
  int nTermAlloc;105070,3699526
  Fts3HashElem **ppNextElem;ppNextElem105071,3699597
  int nTerm;105078,3699873
  char *zTerm;zTerm105079,3699945
  char *aDoclist;aDoclist105080,3700009
  int nDoclist;105081,3700085
  char *pOffsetList;pOffsetList105084,3700239
  sqlite3_int64 iDocid;105085,3700260
#define fts3SegReaderIsPending(105088,3700288
struct SegmentWriter 105099,3700599
  SegmentNode *pTree;pTree105100,3700622
  sqlite3_int64 iFirst;105101,3700697
  sqlite3_int64 iFree;105102,3700770
  char *zTerm;zTerm105103,3700839
  int nTerm;105104,3700911
  int nMalloc;105105,3700976
  char *zMalloc;zMalloc105106,3701051
  int nSize;105107,3701132
  int nData;105108,3701200
  char *aData;aData105109,3701263
struct SegmentNode 105122,3701698
  SegmentNode *pParent;pParent105123,3701719
  SegmentNode *pRight;pRight105124,3701795
  SegmentNode *pLeftmost;pLeftmost105125,3701860
  int nEntry;105126,3701940
  char *zTerm;zTerm105127,3702019
  int nTerm;105128,3702091
  int nMalloc;105129,3702156
  char *zMalloc;zMalloc105130,3702231
  int nData;105131,3702312
  char *aData;aData105132,3702379
#define SQL_DELETE_CONTENT 105138,3702497
#define SQL_IS_EMPTY 105139,3702538
#define SQL_DELETE_ALL_CONTENT 105140,3702579
#define SQL_DELETE_ALL_SEGMENTS 105141,3702621
#define SQL_DELETE_ALL_SEGDIR 105142,3702662
#define SQL_DELETE_ALL_DOCSIZE 105143,3702703
#define SQL_DELETE_ALL_STAT 105144,3702744
#define SQL_SELECT_CONTENT_BY_ROWID 105145,3702785
#define SQL_NEXT_SEGMENT_INDEX 105146,3702826
#define SQL_INSERT_SEGMENTS 105147,3702867
#define SQL_NEXT_SEGMENTS_ID 105148,3702908
#define SQL_INSERT_SEGDIR 105149,3702949
#define SQL_SELECT_LEVEL 105150,3702990
#define SQL_SELECT_ALL_LEVEL 105151,3703031
#define SQL_SELECT_LEVEL_COUNT 105152,3703072
#define SQL_SELECT_SEGDIR_COUNT_MAX 105153,3703113
#define SQL_DELETE_SEGDIR_BY_LEVEL 105154,3703154
#define SQL_DELETE_SEGMENTS_RANGE 105155,3703195
#define SQL_CONTENT_INSERT 105156,3703236
#define SQL_GET_BLOCK 105157,3703277
#define SQL_DELETE_DOCSIZE 105158,3703318
#define SQL_REPLACE_DOCSIZE 105159,3703359
#define SQL_SELECT_DOCSIZE 105160,3703400
#define SQL_SELECT_DOCTOTAL 105161,3703441
#define SQL_REPLACE_DOCTOTAL 105162,3703482
static int fts3SqlStmt(105175,3704037
static void fts3SqlExec(105269,3707580
SQLITE_PRIVATE int sqlite3Fts3ReadBlock(105299,3708500
SQLITE_PRIVATE int sqlite3Fts3AllSegdirs(105343,3709668
static int fts3PendingListAppendVarint(105360,3710210
static int fts3PendingListAppend(105404,3711469
static int fts3PendingTermsAdd(105463,3713167
static int fts3PendingTermsDocid(105537,3715383
SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(105552,3715966
static int fts3InsertTerms(105569,3716554
static int fts3InsertData(105596,3717500
static int fts3DeleteAll(105654,3719407
static void fts3DeleteTerms(105676,3720143
static int fts3AllocateSegdirIdx(105728,3721805
static int fts3SegReaderNext(105765,3723097
static void fts3SegReaderFirstDocid(105833,3725249
static void fts3SegReaderNextDocid(105851,3725940
SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(105892,3727101
SQLITE_PRIVATE int sqlite3Fts3SegReaderNew(105912,3727687
static int fts3CompareElemByTerm(106006,3730823
SQLITE_PRIVATE int sqlite3Fts3SegReaderPending(106024,3731351
static int fts3SegReaderNew(106119,3734410
static int fts3SegReaderCmp(106147,3735302
static int fts3SegReaderDoclistCmp(106180,3736169
static int fts3SegReaderTermCmp(106201,3736885
static void fts3SegReaderSort(106226,3737650
static int fts3WriteSegment(106259,3738607
static int fts3WriteSegdir(106279,3739237
static int fts3PrefixCompress(106312,3740566
static int fts3NodeAddTerm(106328,3741110
static int fts3TreeFinishNode(106439,3744920
static int fts3NodeWrite(106465,3745830
static void fts3NodeFree(106509,3747350
static int fts3SegWriterAdd(106534,3748117
static int fts3SegWriterFlush(106672,3753419
static void fts3SegWriterFree(106707,3754799
static int fts3IsEmpty(106726,3755496
static int fts3SegmentCount(106744,3755981
static int fts3SegmentCountMax(106765,3756642
static int fts3DeleteSegdir(106792,3757553
static void fts3ColumnFilter(106839,3759193
static int fts3MergeCallback(106877,3760064
static int fts3FlushCallback(106893,3760768
SQLITE_PRIVATE int sqlite3Fts3SegReaderIterate(106930,3762575
static int fts3SegmentMerge(107098,3768720
SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(107200,3772224
static void fts3EncodeIntArray(107255,3774168
static void fts3DecodeIntArray(107271,3774594
SQLITE_PRIVATE int sqlite3Fts3MatchinfoDocsizeLocal(107301,3775594
SQLITE_PRIVATE int sqlite3Fts3MatchinfoDocsizeGlobal(107327,3776558
static void fts3InsertDocsize(107361,3777780
static void fts3UpdateDocTotals(107395,3778855
static int fts3SpecialInsert(107465,3780818
SQLITE_PRIVATE int sqlite3Fts3UpdateMethod(107498,3781703
SQLITE_PRIVATE int sqlite3Fts3Optimize(107575,3784443
typedef struct LoadDoclistCtx LoadDoclistCtx;107618,3785639
struct LoadDoclistCtx 107619,3785685
  Fts3Table *pTab;pTab107620,3785709
  int nPhrase;107621,3785760
  int nToken;107622,3785830
typedef struct SnippetIter SnippetIter;107629,3786009
typedef struct SnippetPhrase SnippetPhrase;107630,3786049
typedef struct SnippetFragment SnippetFragment;107631,3786093
struct SnippetIter 107633,3786142
  Fts3Cursor *pCsr;pCsr107634,3786163
  int iCol;107635,3786242
  int nSnippet;107636,3786315
  int nPhrase;107637,3786392
  SnippetPhrase *aPhrase;aPhrase107638,3786459
  int iCurrent;107639,3786521
struct SnippetPhrase 107642,3786596
  int nToken;107643,3786619
  char *pList;pList107644,3786686
  int iHead;107645,3786767
  char *pHead;pHead107646,3786835
  int iTail;107647,3786910
  char *pTail;pTail107648,3786987
struct SnippetFragment 107651,3787066
  int iCol;107652,3787091
  int iPos;107653,3787164
  u64 covered;107654,3787236
  u64 hlmask;107655,3787306
typedef struct MatchInfo MatchInfo;107662,3787521
struct MatchInfo 107663,3787557
  Fts3Cursor *pCursor;pCursor107664,3787576
  int nCol;107665,3787628
  u32 *aMatchinfo;aMatchinfo107666,3787695
typedef struct StrBuffer StrBuffer;107676,3787983
struct StrBuffer 107677,3788019
  char *z;z107678,3788038
  int n;107679,3788114
  int nAlloc;107680,3788192
static void fts3GetDeltaPosition(107704,3788991
static int fts3ExprIterate2(107713,3789190
static int fts3ExprIterate(107745,3790446
static int fts3ExprNearTrim(107768,3791534
static int fts3ExprLoadDoclistsCb1(107804,3792480
static int fts3ExprLoadDoclistsCb2(107829,3793074
static int fts3ExprLoadDoclists(107850,3793827
static void fts3SnippetAdvance(107872,3794696
static int fts3SnippetNextCandidate(107894,3795122
static void fts3SnippetDetails(107940,3796463
static int fts3SnippetFindPositions(107993,3798251
static int fts3BestSnippet(108031,3799510
static int fts3StringAppend(108115,3802313
int fts3SnippetShift(108166,3804110
static int fts3SnippetText(108230,3806696
static int fts3ColumnlistCount(108342,3811451
static void fts3LoadColumnlistCounts(108357,3811747
static int fts3ExprGlobalMatchinfoCb(108382,3812391
static int fts3ExprLocalMatchinfoCb(108410,3813317
static int fts3GetMatchinfo(108437,3814074
SQLITE_PRIVATE void sqlite3Fts3Snippet(108499,3816124
typedef struct TermOffset TermOffset;108597,3819635
typedef struct TermOffsetCtx TermOffsetCtx;108598,3819673
struct TermOffset 108600,3819718
  char *pList;pList108601,3819738
  int iPos;108602,3819792
  int iOff;108603,3819862
struct TermOffsetCtx 108606,3819946
  int iCol;108607,3819969
  int iTerm;108608,3820047
  sqlite3_int64 iDocid;108609,3820060
  TermOffset *aTerm;aTerm108610,3820084
static int fts3ExprTermOffsetInit(108616,3820195
SQLITE_PRIVATE void sqlite3Fts3Offsets(108644,3821050
SQLITE_PRIVATE void sqlite3Fts3Matchinfo(108779,3825500
#define VARIANT_RSTARTREE_CHOOSESUBTREE 108830,3827262
#define VARIANT_RSTARTREE_REINSERT 108831,3827304
#define VARIANT_GUTTMAN_QUADRATIC_SPLIT 108836,3827404
#define VARIANT_GUTTMAN_LINEAR_SPLIT 108837,3827446
#define VARIANT_RSTARTREE_SPLIT 108838,3827488
#define VARIANT_GUTTMAN_SPLIT 108840,3827531
  #define PickNext 108844,3827672
  #define PickSeeds 108845,3827709
  #define AssignCells 108846,3827748
  #define PickNext 108849,3827827
  #define PickSeeds 108850,3827861
  #define AssignCells 108851,3827897
  #define AssignCells 108854,3827971
typedef sqlite3_int64 i64;108865,3828108
typedef unsigned char u8;108866,3828135
typedef unsigned int u32;108867,3828161
typedef struct Rtree Rtree;108870,3828195
typedef struct RtreeCursor RtreeCursor;108871,3828223
typedef struct RtreeNode RtreeNode;108872,3828263
typedef struct RtreeCell RtreeCell;108873,3828299
typedef struct RtreeConstraint RtreeConstraint;108874,3828335
typedef union RtreeCoord RtreeCoord;108875,3828383
#define RTREE_MAX_DIMENSIONS 108878,3828493
#define HASHSIZE 108884,3828675
struct Rtree 108889,3828738
  sqlite3_vtab base;108890,3828753
  sqlite3 *db;db108891,3828774
  int iNodeSize;108892,3828835
  int nDim;108893,3828916
  int nBytesPerCell;108894,3828973
  int iDepth;108895,3829033
  char *zDb;zDb108896,3829107
  char *zName;zName108897,3829184
  RtreeNode *aHash[aHash108898,3829242
  int nBusy;108899,3829310
  RtreeNode *pDeleted;pDeleted108906,3829665
  int iReinsertHeight;108907,3829688
  sqlite3_stmt *pReadNode;pReadNode108910,3829830
  sqlite3_stmt *pWriteNode;pWriteNode108911,3829857
  sqlite3_stmt *pDeleteNode;pDeleteNode108912,3829885
  sqlite3_stmt *pReadRowid;pReadRowid108915,3829979
  sqlite3_stmt *pWriteRowid;pWriteRowid108916,3830007
  sqlite3_stmt *pDeleteRowid;pDeleteRowid108917,3830036
  sqlite3_stmt *pReadParent;pReadParent108920,3830132
  sqlite3_stmt *pWriteParent;pWriteParent108921,3830161
  sqlite3_stmt *pDeleteParent;pDeleteParent108922,3830191
  int eCoordType;108924,3830223
#define RTREE_COORD_REAL32 108928,3830283
#define RTREE_COORD_INT32 108929,3830312
#define RTREE_MINCELLS(108940,3830616
#define RTREE_REINSERT(108941,3830686
#define RTREE_MAXCELLS 108942,3830730
struct RtreeCursor 108947,3830791
  sqlite3_vtab_cursor base;108948,3830812
  RtreeNode *pNode;pNode108949,3830840
  int iCell;108950,3830919
  int iStrategy;108951,3830992
  int nConstraint;108952,3831066
  RtreeConstraint *aConstraint;aConstraint108953,3831141
union RtreeCoord 108956,3831207
  float f;108957,3831226
  int i;108958,3831237
#define DCOORD(108966,3831473
struct RtreeConstraint 108975,3831714
  int iCoord;108976,3831739
  int op;108977,3831813
  double rValue;108978,3831878
#define RTREE_EQ 108982,3831987
#define RTREE_LE 108983,3832009
#define RTREE_LT 108984,3832031
#define RTREE_GE 108985,3832053
#define RTREE_GT 108986,3832075
struct RtreeNode 109006,3832775
  RtreeNode *pParent;pParent109007,3832794
  i64 iNode;109008,3832848
  int nRef;109009,3832861
  int isDirty;109010,3832873
  u8 *zData;zData109011,3832888
  RtreeNode *pNext;pNext109012,3832901
#define NCELL(109014,3832975
struct RtreeCell 109019,3833085
  i64 iRowid;109020,3833104
  RtreeCoord aCoord[aCoord109021,3833118
# define MAX(109025,3833179
# define MIN(109028,3833240
static int readInt16(109035,3833420
static void readCoord(109038,3833478
static i64 readInt64(109047,3833674
static int writeInt16(109065,3834137
static int writeCoord(109070,3834234
static int writeInt64(109081,3834484
static void nodeReference(109096,3834770
static void nodeZero(109105,3834906
static int nodeHash(109116,3835146
static RtreeNode *nodeHashLookup(nodeHashLookup109127,3835437
static void nodeHashInsert(109137,3835673
static void nodeHashDelete(109150,3835966
static RtreeNode *nodeNew(nodeNew109166,3836487
nodeAcquire(109184,3836962
static void nodeOverwriteCell(109247,3838669
static void nodeDeleteCell(109265,3839058
nodeInsertCell(109281,3839594
nodeWrite(109307,3840178
nodeRelease(109333,3840900
static i64 nodeGetRowid(109360,3841579
static void nodeGetCoord(109372,3841826
static void nodeGetCell(109386,3842178
static int rtreeCreate(109410,3842733
static int rtreeConnect(109423,3842982
static void rtreeReference(109436,3843225
static void rtreeRelease(109444,3843404
static int rtreeDisconnect(109463,3843967
static int rtreeDestroy(109471,3844125
static int rtreeOpen(109498,3844709
static int rtreeClose(109516,3845114
static int rtreeEof(109532,3845553
static int testRtreeCell(109543,3845900
static int testRtreeEntry(109577,3846960
static int descendToCell(109609,3847976
static int nodeRowidIndex(109669,3849308
static int nodeParentIndex(109681,3849634
static int rtreeNext(109692,3849880
static int rtreeRowid(109730,3850910
static int rtreeColumn(109743,3851247
static int findLeafNode(109771,3852168
static int rtreeFilter(109789,3852647
static int rtreeBestIndex(109898,3856013
static float cellArea(109988,3859200
static float cellMargin(110001,3859530
static void cellUnion(110013,3859797
static int cellContains(110032,3860419
static float cellGrowth(110050,3860914
static float cellOverlap(110060,3861233
static float cellOverlapEnlargement(110095,3861910
static int ChooseLeaf(110117,3862389
static void AdjustTree(110201,3864626
static int rowidWrite(110225,3865287
static int parentWrite(110235,3865626
static RtreeCell *LinearPickNext(LinearPickNext110249,3866096
static void LinearPickSeeds(110267,3866425
static RtreeCell *QuadraticPickNext(QuadraticPickNext110329,3867894
  #define FABS(110337,3868048
static void QuadraticPickSeeds(110361,3868598
static void SortByDistance(110411,3869808
static void SortByDimension(110477,3871463
static int splitNodeStartree(110537,3873082
static int splitNodeGuttman(110639,3875741
static int updateMapping(110691,3877064
static int SplitNode(110710,3877538
static int fixLeafParent(110835,3880637
static int removeNode(110855,3881245
static void fixBoundingBox(110898,3882422
static int deleteCell(110921,3883135
static int Reinsert(110952,3883985
static int rtreeInsertCell(111055,3886821
static int reinsertNodeContent(111092,3887751
static int newRowid(111121,3888499
static int hashIsEmpty(111132,3888812
static int rtreeUpdate(111144,3889014
static int rtreeRename(111306,3893950
static sqlite3_module rtreeModule 111324,3894523
static int rtreeSqlInit(111347,3895810
  #define N_STATEMENT 111356,3895954
static int getIntFromStmt(111426,3898360
static int getNodeSize(111456,3899503
static int rtreeInit(111494,3900599
static void rtreenode(111597,3904097
static void rtreedepth(111635,3905104
SQLITE_PRIVATE int sqlite3RtreeInit(111651,3905632
SQLITE_API int sqlite3_extension_init(111675,3906287
# define SQLITE_MAX_LIKE_PATTERN_LENGTH 111738,3908069
static void xFree(111744,3908200
static int icuLikeCompare(111753,3908426
static void icuLikeFunc(111844,3911132
static void icuFunctionError(111890,3912462
static void icuRegexpDelete(111905,3912984
static void icuRegexpFunc(111929,3913743
static void icuCaseFunc16(112010,3916243
static void icuCollationDel(112054,3917283
static int icuCollationColl(112063,3917522
static void icuLoadCollation(112095,3918436
SQLITE_PRIVATE int sqlite3IcuInit(112134,3919549
  struct IcuScalar 112135,3919597
    const char *zName;zName112136,3919618
    int nArg;112137,3919684
    int enc;112138,3919756
    void *pContext;pContext112139,3919830
    void (*xFunc)xFunc112140,3919910
SQLITE_API int sqlite3_extension_init(112174,3921000
typedef struct IcuTokenizer IcuTokenizer;112211,3922000
typedef struct IcuCursor IcuCursor;112212,3922042
struct IcuTokenizer 112214,3922079
  sqlite3_tokenizer base;112215,3922101
  char *zLocale;zLocale112216,3922127
struct IcuCursor 112219,3922148
  sqlite3_tokenizer_cursor base;112220,3922167
  UBreakIterator *pIter;pIter112222,3922201
  int nChar;112223,3922263
  UChar *aChar;aChar112224,3922334
  int *aOffset;aOffset112225,3922406
  int nBuffer;112227,3922484
  char *zBuffer;zBuffer112228,3922499
  int iToken;112230,3922517
static int icuCreate(112236,3922577
static int icuDestroy(112266,3923217
static int icuOpen(112278,3923566
static int icuClose(112347,3925313
static int icuNext(112358,3925574
static const sqlite3_tokenizer_module icuTokenizerModule 112423,3927301
SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule(112435,3927718

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/src/sqlite/sqlite3.h,15002
#define _SQLITE3_H_34,1511
# define SQLITE_EXTERN 49,1760
# define SQLITE_API53,1817
#define SQLITE_DEPRECATED70,2483
#define SQLITE_EXPERIMENTAL71,2509
# undef SQLITE_VERSION77,2637
# undef SQLITE_VERSION_NUMBER80,2696
#define SQLITE_VERSION 110,4095
#define SQLITE_VERSION_NUMBER 111,4136
#define SQLITE_SOURCE_ID 112,4174
SQLITE_API SQLITE_EXTERN const char sqlite3_version[sqlite3_version144,5753
typedef struct sqlite3 sqlite3;227,9604
  typedef SQLITE_INT64_TYPE sqlite_int64;246,10327
  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;247,10369
  typedef __int64 sqlite_int64;249,10470
  typedef unsigned __int64 sqlite_uint64;250,10502
  typedef long long int sqlite_int64;252,10550
  typedef unsigned long long int sqlite_uint64;253,10588
typedef sqlite_int64 sqlite3_int64;255,10643
typedef sqlite_uint64 sqlite3_uint64;256,10679
# define double 263,10867
typedef int (*sqlite3_callback)sqlite3_callback297,12165
#define SQLITE_OK 380,16159
#define SQLITE_ERROR 382,16246
#define SQLITE_INTERNAL 383,16314
#define SQLITE_PERM 384,16383
#define SQLITE_ABORT 385,16446
#define SQLITE_BUSY 386,16520
#define SQLITE_LOCKED 387,16586
#define SQLITE_NOMEM 388,16658
#define SQLITE_READONLY 389,16714
#define SQLITE_INTERRUPT 390,16789
#define SQLITE_IOERR 391,16870
#define SQLITE_CORRUPT 392,16945
#define SQLITE_NOTFOUND 393,17020
#define SQLITE_FULL 394,17094
#define SQLITE_CANTOPEN 395,17174
#define SQLITE_PROTOCOL 396,17245
#define SQLITE_EMPTY 397,17322
#define SQLITE_SCHEMA 398,17378
#define SQLITE_TOOBIG 399,17444
#define SQLITE_CONSTRAINT 400,17516
#define SQLITE_MISMATCH 401,17588
#define SQLITE_MISUSE 402,17645
#define SQLITE_NOLFS 403,17708
#define SQLITE_AUTH 404,17785
#define SQLITE_FORMAT 405,17844
#define SQLITE_RANGE 406,17914
#define SQLITE_NOTADB 407,17995
#define SQLITE_ROW 408,18073
#define SQLITE_DONE 409,18148
#define SQLITE_IOERR_READ 435,19380
#define SQLITE_IOERR_SHORT_READ 436,19443
#define SQLITE_IOERR_WRITE 437,19506
#define SQLITE_IOERR_FSYNC 438,19569
#define SQLITE_IOERR_DIR_FSYNC 439,19632
#define SQLITE_IOERR_TRUNCATE 440,19695
#define SQLITE_IOERR_FSTAT 441,19758
#define SQLITE_IOERR_UNLOCK 442,19821
#define SQLITE_IOERR_RDLOCK 443,19884
#define SQLITE_IOERR_DELETE 444,19947
#define SQLITE_IOERR_BLOCKED 445,20011
#define SQLITE_IOERR_NOMEM 446,20075
#define SQLITE_IOERR_ACCESS 447,20139
#define SQLITE_IOERR_CHECKRESERVEDLOCK 448,20203
#define SQLITE_IOERR_LOCK 449,20267
#define SQLITE_IOERR_CLOSE 450,20331
#define SQLITE_IOERR_DIR_CLOSE 451,20395
#define SQLITE_LOCKED_SHAREDCACHE 452,20459
#define SQLITE_OPEN_READONLY 462,20760
#define SQLITE_OPEN_READWRITE 463,20840
#define SQLITE_OPEN_CREATE 464,20920
#define SQLITE_OPEN_DELETEONCLOSE 465,21000
#define SQLITE_OPEN_EXCLUSIVE 466,21064
#define SQLITE_OPEN_AUTOPROXY 467,21128
#define SQLITE_OPEN_MAIN_DB 468,21192
#define SQLITE_OPEN_TEMP_DB 469,21256
#define SQLITE_OPEN_TRANSIENT_DB 470,21320
#define SQLITE_OPEN_MAIN_JOURNAL 471,21384
#define SQLITE_OPEN_TEMP_JOURNAL 472,21448
#define SQLITE_OPEN_SUBJOURNAL 473,21512
#define SQLITE_OPEN_MASTER_JOURNAL 474,21576
#define SQLITE_OPEN_NOMUTEX 475,21640
#define SQLITE_OPEN_FULLMUTEX 476,21720
#define SQLITE_OPEN_SHAREDCACHE 477,21800
#define SQLITE_OPEN_PRIVATECACHE 478,21880
#define SQLITE_IOCAP_ATOMIC 500,22840
#define SQLITE_IOCAP_ATOMIC512 501,22888
#define SQLITE_IOCAP_ATOMIC1K 502,22936
#define SQLITE_IOCAP_ATOMIC2K 503,22984
#define SQLITE_IOCAP_ATOMIC4K 504,23032
#define SQLITE_IOCAP_ATOMIC8K 505,23080
#define SQLITE_IOCAP_ATOMIC16K 506,23128
#define SQLITE_IOCAP_ATOMIC32K 507,23176
#define SQLITE_IOCAP_ATOMIC64K 508,23224
#define SQLITE_IOCAP_SAFE_APPEND 509,23272
#define SQLITE_IOCAP_SEQUENTIAL 510,23320
#define SQLITE_LOCK_NONE 519,23573
#define SQLITE_LOCK_SHARED 520,23609
#define SQLITE_LOCK_RESERVED 521,23645
#define SQLITE_LOCK_PENDING 522,23681
#define SQLITE_LOCK_EXCLUSIVE 523,23717
#define SQLITE_SYNC_NORMAL 539,24349
#define SQLITE_SYNC_FULL 540,24391
#define SQLITE_SYNC_DATAONLY 541,24433
typedef struct sqlite3_file sqlite3_file;554,24903
struct sqlite3_file 555,24945
  const struct sqlite3_io_methods *pMethods;pMethods556,24967
typedef struct sqlite3_io_methods sqlite3_io_methods;646,29087
struct sqlite3_io_methods 647,29141
  int iVersion;648,29169
  int (*xClose)xClose649,29185
  int (*xRead)xRead650,29217
  int (*xWrite)xWrite651,29286
  int (*xTruncate)xTruncate652,29362
  int (*xSync)xSync653,29417
  int (*xFileSize)xFileSize654,29459
  int (*xLock)xLock655,29516
  int (*xUnlock)xUnlock656,29552
  int (*xCheckReservedLock)xCheckReservedLock657,29590
  int (*xFileControl)xFileControl658,29648
  int (*xSectorSize)xSectorSize659,29706
  int (*xDeviceCharacteristics)xDeviceCharacteristics660,29743
#define SQLITE_FCNTL_LOCKSTATE 679,30502
#define SQLITE_GET_LOCKPROXYFILE 680,30542
#define SQLITE_SET_LOCKPROXYFILE 681,30582
#define SQLITE_LAST_ERRNO 682,30622
typedef struct sqlite3_mutex sqlite3_mutex;694,31008
typedef struct sqlite3_vfs sqlite3_vfs;825,37237
struct sqlite3_vfs 826,37277
  int iVersion;827,37298
  int szOsFile;828,37356
  int mxPathname;829,37421
  sqlite3_vfs *pNext;pNext830,37483
  const char *zName;zName831,37536
  void *pAppData;pAppData832,37602
  int (*xOpen)xOpen833,37672
  int (*xDelete)xDelete835,37778
  int (*xAccess)xAccess836,37842
  int (*xFullPathname)xFullPathname837,37918
  void *(*xDlOpen)xDlOpen838,37997
  void (*xDlError)xDlError839,38054
  void (*(*xDlSym)xDlSym840,38114
  void (*xDlClose)xDlClose841,38182
  int (*xRandomness)xRandomness842,38223
  int (*xSleep)xSleep843,38282
  int (*xCurrentTime)xCurrentTime844,38331
  int (*xGetLastError)xGetLastError845,38377
#define SQLITE_ACCESS_EXISTS 863,39087
#define SQLITE_ACCESS_READWRITE 864,39121
#define SQLITE_ACCESS_READ 865,39155
typedef struct sqlite3_mem_methods sqlite3_mem_methods;1072,49770
struct sqlite3_mem_methods 1073,49826
  void *(*xMalloc)xMalloc1074,49855
  void (*xFree)xFree1075,49921
  void *(*xRealloc)xRealloc1076,49984
  int (*xSize)xSize1077,50044
  int (*xRoundup)xRoundup1078,50116
  int (*xInit)xInit1079,50196
  void (*xShutdown)xShutdown1080,50267
  void *pAppData;pAppData1081,50340
#define SQLITE_CONFIG_SINGLETHREAD 1274,60961
#define SQLITE_CONFIG_MULTITHREAD 1275,61010
#define SQLITE_CONFIG_SERIALIZED 1276,61059
#define SQLITE_CONFIG_MALLOC 1277,61108
#define SQLITE_CONFIG_GETMALLOC 1278,61174
#define SQLITE_CONFIG_SCRATCH 1279,61240
#define SQLITE_CONFIG_PAGECACHE 1280,61306
#define SQLITE_CONFIG_HEAP 1281,61372
#define SQLITE_CONFIG_MEMSTATUS 1282,61443
#define SQLITE_CONFIG_MUTEX 1283,61496
#define SQLITE_CONFIG_GETMUTEX 1284,61564
#define SQLITE_CONFIG_LOOKASIDE 1286,61699
#define SQLITE_CONFIG_PCACHE 1287,61752
#define SQLITE_CONFIG_GETPCACHE 1288,61821
#define SQLITE_CONFIG_LOG 1289,61890
#define SQLITE_DBCONFIG_LOOKASIDE 1324,63559
#define SQLITE_DENY 2010,96134
#define SQLITE_IGNORE 2011,96204
#define SQLITE_CREATE_INDEX 2033,97329
#define SQLITE_CREATE_TABLE 2034,97408
#define SQLITE_CREATE_TEMP_INDEX 2035,97487
#define SQLITE_CREATE_TEMP_TABLE 2036,97566
#define SQLITE_CREATE_TEMP_TRIGGER 2037,97645
#define SQLITE_CREATE_TEMP_VIEW 2038,97724
#define SQLITE_CREATE_TRIGGER 2039,97803
#define SQLITE_CREATE_VIEW 2040,97882
#define SQLITE_DELETE 2041,97961
#define SQLITE_DROP_INDEX 2042,98040
#define SQLITE_DROP_TABLE 2043,98119
#define SQLITE_DROP_TEMP_INDEX 2044,98198
#define SQLITE_DROP_TEMP_TABLE 2045,98277
#define SQLITE_DROP_TEMP_TRIGGER 2046,98356
#define SQLITE_DROP_TEMP_VIEW 2047,98435
#define SQLITE_DROP_TRIGGER 2048,98514
#define SQLITE_DROP_VIEW 2049,98593
#define SQLITE_INSERT 2050,98672
#define SQLITE_PRAGMA 2051,98751
#define SQLITE_READ 2052,98830
#define SQLITE_SELECT 2053,98909
#define SQLITE_TRANSACTION 2054,98988
#define SQLITE_UPDATE 2055,99067
#define SQLITE_ATTACH 2056,99146
#define SQLITE_DETACH 2057,99225
#define SQLITE_ALTER_TABLE 2058,99304
#define SQLITE_REINDEX 2059,99383
#define SQLITE_ANALYZE 2060,99462
#define SQLITE_CREATE_VTABLE 2061,99541
#define SQLITE_DROP_VTABLE 2062,99620
#define SQLITE_FUNCTION 2063,99699
#define SQLITE_SAVEPOINT 2064,99778
#define SQLITE_COPY 2065,99857
typedef struct sqlite3_stmt sqlite3_stmt;2278,110086
#define SQLITE_LIMIT_LENGTH 2365,113702
#define SQLITE_LIMIT_SQL_LENGTH 2366,113751
#define SQLITE_LIMIT_COLUMN 2367,113800
#define SQLITE_LIMIT_EXPR_DEPTH 2368,113849
#define SQLITE_LIMIT_COMPOUND_SELECT 2369,113898
#define SQLITE_LIMIT_VDBE_OP 2370,113947
#define SQLITE_LIMIT_FUNCTION_ARG 2371,113996
#define SQLITE_LIMIT_ATTACHED 2372,114045
#define SQLITE_LIMIT_LIKE_PATTERN_LENGTH 2373,114094
#define SQLITE_LIMIT_VARIABLE_NUMBER 2374,114143
#define SQLITE_LIMIT_TRIGGER_DEPTH 2375,114192
typedef struct Mem sqlite3_value;2532,121883
typedef struct sqlite3_context sqlite3_context;2546,122465
#define SQLITE_INTEGER 2923,139578
#define SQLITE_FLOAT 2924,139604
#define SQLITE_BLOB 2925,139630
#define SQLITE_NULL 2926,139656
# undef SQLITE_TEXT2928,139701
# define SQLITE_TEXT 2930,139727
#define SQLITE3_TEXT 2932,139761
#define SQLITE_UTF8 3250,155612
#define SQLITE_UTF16LE 3251,155644
#define SQLITE_UTF16BE 3252,155676
#define SQLITE_UTF16 3253,155708
#define SQLITE_ANY 3254,155771
#define SQLITE_UTF16_ALIGNED 3255,155841
typedef void (*sqlite3_destructor_type)sqlite3_destructor_type3460,165580
#define SQLITE_STATIC 3461,165628
#define SQLITE_TRANSIENT 3462,165684
SQLITE_API SQLITE_EXTERN char *sqlite3_temp_directory;sqlite3_temp_directory3782,180404
typedef struct sqlite3_vtab sqlite3_vtab;4175,197727
typedef struct sqlite3_index_info sqlite3_index_info;4176,197769
typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;4177,197823
typedef struct sqlite3_module sqlite3_module;4178,197879
struct sqlite3_module 4197,198649
  int iVersion;4198,198673
  int (*xCreate)xCreate4199,198689
  int (*xConnect)xConnect4202,198824
  int (*xBestIndex)xBestIndex4205,198960
  int (*xDisconnect)xDisconnect4206,199023
  int (*xDestroy)xDestroy4207,199066
  int (*xOpen)xOpen4208,199106
  int (*xClose)xClose4209,199175
  int (*xFilter)xFilter4210,199214
  int (*xNext)xNext4212,199334
  int (*xEof)xEof4213,199372
  int (*xColumn)xColumn4214,199409
  int (*xRowid)xRowid4215,199472
  int (*xUpdate)xUpdate4216,199534
  int (*xBegin)xBegin4217,199608
  int (*xSync)xSync4218,199646
  int (*xCommit)xCommit4219,199683
  int (*xRollback)xRollback4220,199722
  int (*xFindFunction)xFindFunction4221,199763
  int (*xRename)xRename4224,199952
struct sqlite3_index_info 4278,202397
  int nConstraint;4280,202440
  struct sqlite3_index_constraint 4281,202508
     int iColumn;4282,202544
     unsigned char op;4283,202620
     unsigned char usable;4284,202677
     int iTermOffset;4285,202748
  } *aConstraint;aConstraint4286,202828
  int nOrderBy;4287,202897
  struct sqlite3_index_orderby 4288,202971
     int iColumn;4289,203004
     unsigned char desc;4290,203055
  } *aOrderBy;aOrderBy4291,203123
  struct sqlite3_index_constraint_usage 4293,203194
    int argvIndex;4294,203236
    unsigned char omit;4295,203316
  } *aConstraintUsage;aConstraintUsage4296,203390
  int idxNum;4297,203413
  char *idxStr;idxStr4298,203482
  int needToFreeIdxStr;4299,203563
  int orderByConsumed;4300,203639
  double estimatedCost;4301,203708
#define SQLITE_INDEX_CONSTRAINT_EQ 4303,203781
#define SQLITE_INDEX_CONSTRAINT_GT 4304,203821
#define SQLITE_INDEX_CONSTRAINT_LE 4305,203861
#define SQLITE_INDEX_CONSTRAINT_LT 4306,203901
#define SQLITE_INDEX_CONSTRAINT_GE 4307,203942
#define SQLITE_INDEX_CONSTRAINT_MATCH 4308,203983
struct sqlite3_vtab 4367,206760
  const sqlite3_module *pModule;pModule4368,206782
  int nRef;4369,206856
  char *zErrMsg;zErrMsg4370,206911
struct sqlite3_vtab_cursor 4392,207865
  sqlite3_vtab *pVtab;pVtab4393,207894
typedef struct sqlite3_blob sqlite3_blob;4451,210301
typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;4843,228225
struct sqlite3_mutex_methods 4844,228285
  int (*xMutexInit)xMutexInit4845,228316
  int (*xMutexEnd)xMutexEnd4846,228343
  sqlite3_mutex *(*xMutexAlloc)xMutexAlloc4847,228369
  void (*xMutexFree)xMutexFree4848,228407
  void (*xMutexEnter)xMutexEnter4849,228446
  int (*xMutexTry)xMutexTry4850,228486
  void (*xMutexLeave)xMutexLeave4851,228523
  int (*xMutexHeld)xMutexHeld4852,228563
  int (*xMutexNotheld)xMutexNotheld4853,228601
#define SQLITE_MUTEX_FAST 4900,230636
#define SQLITE_MUTEX_RECURSIVE 4901,230676
#define SQLITE_MUTEX_STATIC_MASTER 4902,230716
#define SQLITE_MUTEX_STATIC_MEM 4903,230756
#define SQLITE_MUTEX_STATIC_MEM2 4904,230820
#define SQLITE_MUTEX_STATIC_OPEN 4905,230876
#define SQLITE_MUTEX_STATIC_PRNG 4906,230942
#define SQLITE_MUTEX_STATIC_LRU 4907,231006
#define SQLITE_MUTEX_STATIC_LRU2 4908,231067
#define SQLITE_TESTCTRL_FIRST 4979,234164
#define SQLITE_TESTCTRL_PRNG_SAVE 4980,234215
#define SQLITE_TESTCTRL_PRNG_RESTORE 4981,234266
#define SQLITE_TESTCTRL_PRNG_RESET 4982,234317
#define SQLITE_TESTCTRL_BITVEC_TEST 4983,234368
#define SQLITE_TESTCTRL_FAULT_INSTALL 4984,234419
#define SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS 4985,234470
#define SQLITE_TESTCTRL_PENDING_BYTE 4986,234521
#define SQLITE_TESTCTRL_ASSERT 4987,234572
#define SQLITE_TESTCTRL_ALWAYS 4988,234623
#define SQLITE_TESTCTRL_RESERVE 4989,234674
#define SQLITE_TESTCTRL_OPTIMIZATIONS 4990,234725
#define SQLITE_TESTCTRL_ISKEYWORD 4991,234776
#define SQLITE_TESTCTRL_LAST 4992,234827
#define SQLITE_STATUS_MEMORY_USED 5104,240229
#define SQLITE_STATUS_PAGECACHE_USED 5105,240274
#define SQLITE_STATUS_PAGECACHE_OVERFLOW 5106,240319
#define SQLITE_STATUS_SCRATCH_USED 5107,240364
#define SQLITE_STATUS_SCRATCH_OVERFLOW 5108,240409
#define SQLITE_STATUS_MALLOC_SIZE 5109,240454
#define SQLITE_STATUS_PARSER_STACK 5110,240499
#define SQLITE_STATUS_PAGECACHE_SIZE 5111,240544
#define SQLITE_STATUS_SCRATCH_SIZE 5112,240589
#define SQLITE_DBSTATUS_LOOKASIDE_USED 5153,242257
#define SQLITE_STMTSTATUS_FULLSCAN_STEP 5204,244279
#define SQLITE_STMTSTATUS_SORT 5205,244325
typedef struct sqlite3_pcache sqlite3_pcache;5219,244761
typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;5349,251801
struct sqlite3_pcache_methods 5350,251863
  void *pArg;pArg5351,251895
  int (*xInit)xInit5352,251909
  void (*xShutdown)xShutdown5353,251932
  sqlite3_pcache *(*xCreate)xCreate5354,251960
  void (*xCachesize)xCachesize5355,252018
  int (*xPagecount)xPagecount5356,252073
  void *(*xFetch)xFetch5357,252111
  void (*xUnpin)xUnpin5358,252177
  void (*xRekey)xRekey5359,252232
  void (*xTruncate)xTruncate5360,252308
  void (*xDestroy)xDestroy5361,252363
typedef struct sqlite3_backup sqlite3_backup;5375,252755
# undef double5727,271133

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/src/sqlite/sqlite3ext.h,13679
#define _SQLITE3EXT_H_19,664
typedef struct sqlite3_api_routines sqlite3_api_routines;22,709
struct sqlite3_api_routines 34,1141
  void * (*aggregate_context)aggregate_context35,1171
  int  (*aggregate_count)aggregate_count36,1231
  int  (*bind_blob)bind_blob37,1276
  int  (*bind_double)bind_double38,1349
  int  (*bind_int)bind_int39,1398
  int  (*bind_int64)bind_int6440,1441
  int  (*bind_null)bind_null41,1495
  int  (*bind_parameter_count)bind_parameter_count42,1535
  int  (*bind_parameter_index)bind_parameter_index43,1582
  const char * (*bind_parameter_name)bind_parameter_name44,1646
  int  (*bind_text)bind_text45,1704
  int  (*bind_text16)bind_text1646,1777
  int  (*bind_value)bind_value47,1850
  int  (*busy_handler)busy_handler48,1912
  int  (*busy_timeout)busy_timeout49,1970
  int  (*changes)changes50,2011
  int  (*close)close51,2040
  int  (*collation_needed)collation_needed52,2067
  int  (*collation_needed16)collation_needed1653,2160
  const void * (*column_blob)column_blob54,2255
  int  (*column_bytes)column_bytes55,2310
  int  (*column_bytes16)column_bytes1656,2358
  int  (*column_count)column_count57,2408
  const char * (*column_database_name)column_database_name58,2452
  const void * (*column_database_name16)column_database_name1659,2511
  const char * (*column_decltype)column_decltype60,2572
  const void * (*column_decltype16)column_decltype1661,2628
  double  (*column_double)column_double62,2684
  int  (*column_int)column_int63,2736
  sqlite_int64  (*column_int64)column_int6464,2782
  const char * (*column_name)column_name65,2839
  const void * (*column_name16)column_name1666,2889
  const char * (*column_origin_name)column_origin_name67,2941
  const void * (*column_origin_name16)column_origin_name1668,2998
  const char * (*column_table_name)column_table_name69,3057
  const void * (*column_table_name16)column_table_name1670,3113
  const unsigned char * (*column_text)column_text71,3171
  const void * (*column_text16)column_text1672,3235
  int  (*column_type)column_type73,3292
  sqlite3_value* (*column_value)column_value74,3339
  void * (*commit_hook)commit_hook75,3397
  int  (*complete)complete76,3452
  int  (*complete16)complete1677,3488
  int  (*create_collation)create_collation78,3526
  int  (*create_collation16)create_collation1679,3632
  int  (*create_function)create_function80,3740
  int  (*create_function16)create_function1681,3940
  int (*create_module)create_module82,4142
  int  (*data_count)data_count83,4216
  sqlite3 * (*db_handle)db_handle84,4258
  int (*declare_vtab)declare_vtab85,4299
  int  (*enable_shared_cache)enable_shared_cache86,4344
  int  (*errcode)errcode87,4380
  const char * (*errmsg)errmsg88,4411
  const void * (*errmsg16)errmsg1689,4447
  int  (*exec)exec90,4485
  int  (*expired)expired91,4553
  int  (*finalize)finalize92,4587
  void  (*free)free93,4627
  void  (*free_table)free_table94,4651
  int  (*get_autocommit)get_autocommit95,4688
  void * (*get_auxdata)get_auxdata96,4724
  int  (*get_table)get_table97,4771
  int  (*global_recover)global_recover98,4839
  void  (*interruptx)interruptx99,4871
  sqlite_int64  (*last_insert_rowid)last_insert_rowid100,4904
  const char * (*libversion)libversion101,4952
  int  (*libversion_number)libversion_number102,4988
  void *(*malloc)malloc103,5023
  char * (*mprintf)mprintf104,5047
  int  (*open)open105,5085
  int  (*open16)open16106,5124
  int  (*prepare)prepare107,5165
  int  (*prepare16)prepare16108,5238
  void * (*profile)profile109,5313
  void  (*progress_handler)progress_handler110,5391
  void *(*realloc)realloc111,5454
  int  (*reset)reset112,5485
  void  (*result_blob)result_blob113,5522
  void  (*result_double)result_double114,5595
  void  (*result_error)result_error115,5646
  void  (*result_error16)result_error16116,5705
  void  (*result_int)result_int117,5766
  void  (*result_int64)result_int64118,5811
  void  (*result_null)result_null119,5867
  void  (*result_text)result_text120,5909
  void  (*result_text16)result_text16121,5982
  void  (*result_text16be)result_text16be122,6057
  void  (*result_text16le)result_text16le123,6134
  void  (*result_value)result_value124,6211
  void * (*rollback_hook)rollback_hook125,6269
  int  (*set_authorizer)set_authorizer126,6327
  void  (*set_auxdata)set_auxdata127,6435
  char * (*snprintf)snprintf128,6503
  int  (*step)step129,6552
  int  (*table_column_metadata)table_column_metadata130,6583
  void  (*thread_cleanup)thread_cleanup131,6703
  int  (*total_changes)total_changes132,6736
  void * (*trace)trace133,6771
  int  (*transfer_bindings)transfer_bindings134,6839
  void * (*update_hook)update_hook135,6897
  void * (*user_data)user_data136,6995
  const void * (*value_blob)value_blob137,7036
  int  (*value_bytes)value_bytes138,7082
  int  (*value_bytes16)value_bytes16139,7121
  double  (*value_double)value_double140,7162
  int  (*value_int)value_int141,7205
  sqlite_int64  (*value_int64)value_int64142,7242
  int  (*value_numeric_type)value_numeric_type143,7290
  const unsigned char * (*value_text)value_text144,7336
  const void * (*value_text16)value_text16145,7391
  const void * (*value_text16be)value_text16be146,7439
  const void * (*value_text16le)value_text16le147,7489
  int  (*value_type)value_type148,7539
  char *(*vmprintf)vmprintf149,7577
  int (*overload_function)overload_function151,7637
  int (*prepare_v2)prepare_v2153,7732
  int (*prepare16_v2)prepare16_v2154,7807
  int (*clear_bindings)clear_bindings155,7884
  int (*create_module_v2)create_module_v2157,7947
  int (*bind_zeroblob)bind_zeroblob159,8072
  int (*blob_bytes)blob_bytes160,8119
  int (*blob_close)blob_close161,8155
  int (*blob_open)blob_open162,8191
  int (*blob_read)blob_read163,8290
  int (*blob_write)blob_write164,8339
  int (*create_collation_v2)create_collation_v2165,8395
  int (*file_control)file_control166,8518
  sqlite3_int64 (*memory_highwater)memory_highwater167,8573
  sqlite3_int64 (*memory_used)memory_used168,8615
  sqlite3_mutex *(*mutex_alloc)mutex_alloc169,8653
  void (*mutex_enter)mutex_enter170,8691
  void (*mutex_free)mutex_free171,8730
  void (*mutex_leave)mutex_leave172,8768
  int (*mutex_try)mutex_try173,8807
  int (*open_v2)open_v2174,8843
  int (*release_memory)release_memory175,8900
  void (*result_error_nomem)result_error_nomem176,8930
  void (*result_error_toobig)result_error_toobig177,8978
  int (*sleep)sleep178,9027
  void (*soft_heap_limit)soft_heap_limit179,9048
  sqlite3_vfs *(*vfs_find)vfs_find180,9080
  int (*vfs_register)vfs_register181,9121
  int (*vfs_unregister)vfs_unregister182,9162
  int (*xthreadsafe)xthreadsafe183,9201
  void (*result_zeroblob)result_zeroblob184,9229
  void (*result_error_code)result_error_code185,9278
  int (*test_control)test_control186,9329
  void (*randomness)randomness187,9362
  sqlite3 *(*context_db_handle)context_db_handle188,9395
  int (*extended_result_codes)extended_result_codes189,9446
  int (*limit)limit190,9492
  sqlite3_stmt *(*next_stmt)next_stmt191,9526
  const char *(*sql)sql192,9580
  int (*status)status193,9617
#define sqlite3_aggregate_context 208,10156
#define sqlite3_aggregate_count 210,10257
#define sqlite3_bind_blob 212,10332
#define sqlite3_bind_double 213,10394
#define sqlite3_bind_int 214,10458
#define sqlite3_bind_int64 215,10519
#define sqlite3_bind_null 216,10582
#define sqlite3_bind_parameter_count 217,10644
#define sqlite3_bind_parameter_index 218,10717
#define sqlite3_bind_parameter_name 219,10790
#define sqlite3_bind_text 220,10862
#define sqlite3_bind_text16 221,10924
#define sqlite3_bind_value 222,10988
#define sqlite3_busy_handler 223,11051
#define sqlite3_busy_timeout 224,11116
#define sqlite3_changes 225,11181
#define sqlite3_close 226,11241
#define sqlite3_collation_needed 227,11299
#define sqlite3_collation_needed16 228,11368
#define sqlite3_column_blob 229,11439
#define sqlite3_column_bytes 230,11503
#define sqlite3_column_bytes16 231,11568
#define sqlite3_column_count 232,11635
#define sqlite3_column_database_name 233,11700
#define sqlite3_column_database_name16 234,11773
#define sqlite3_column_decltype 235,11848
#define sqlite3_column_decltype16 236,11916
#define sqlite3_column_double 237,11986
#define sqlite3_column_int 238,12052
#define sqlite3_column_int64 239,12115
#define sqlite3_column_name 240,12180
#define sqlite3_column_name16 241,12244
#define sqlite3_column_origin_name 242,12310
#define sqlite3_column_origin_name16 243,12381
#define sqlite3_column_table_name 244,12454
#define sqlite3_column_table_name16 245,12524
#define sqlite3_column_text 246,12596
#define sqlite3_column_text16 247,12660
#define sqlite3_column_type 248,12726
#define sqlite3_column_value 249,12790
#define sqlite3_commit_hook 250,12855
#define sqlite3_complete 251,12919
#define sqlite3_complete16 252,12980
#define sqlite3_create_collation 253,13043
#define sqlite3_create_collation16 254,13112
#define sqlite3_create_function 255,13183
#define sqlite3_create_function16 256,13251
#define sqlite3_create_module 257,13321
#define sqlite3_create_module_v2 258,13387
#define sqlite3_data_count 259,13456
#define sqlite3_db_handle 260,13519
#define sqlite3_declare_vtab 261,13581
#define sqlite3_enable_shared_cache 262,13646
#define sqlite3_errcode 263,13718
#define sqlite3_errmsg 264,13778
#define sqlite3_errmsg16 265,13837
#define sqlite3_exec 266,13898
#define sqlite3_expired 268,13986
#define sqlite3_finalize 270,14053
#define sqlite3_free 271,14114
#define sqlite3_free_table 272,14171
#define sqlite3_get_autocommit 273,14234
#define sqlite3_get_auxdata 274,14301
#define sqlite3_get_table 275,14365
#define sqlite3_global_recover 277,14458
#define sqlite3_interrupt 279,14532
#define sqlite3_last_insert_rowid 280,14595
#define sqlite3_libversion 281,14665
#define sqlite3_libversion_number 282,14728
#define sqlite3_malloc 283,14798
#define sqlite3_mprintf 284,14857
#define sqlite3_open 285,14917
#define sqlite3_open16 286,14974
#define sqlite3_prepare 287,15033
#define sqlite3_prepare16 288,15093
#define sqlite3_prepare_v2 289,15155
#define sqlite3_prepare16_v2 290,15218
#define sqlite3_profile 291,15283
#define sqlite3_progress_handler 292,15343
#define sqlite3_realloc 293,15412
#define sqlite3_reset 294,15472
#define sqlite3_result_blob 295,15530
#define sqlite3_result_double 296,15594
#define sqlite3_result_error 297,15660
#define sqlite3_result_error16 298,15725
#define sqlite3_result_int 299,15792
#define sqlite3_result_int64 300,15855
#define sqlite3_result_null 301,15920
#define sqlite3_result_text 302,15984
#define sqlite3_result_text16 303,16048
#define sqlite3_result_text16be 304,16114
#define sqlite3_result_text16le 305,16182
#define sqlite3_result_value 306,16250
#define sqlite3_rollback_hook 307,16315
#define sqlite3_set_authorizer 308,16381
#define sqlite3_set_auxdata 309,16448
#define sqlite3_snprintf 310,16512
#define sqlite3_step 311,16573
#define sqlite3_table_column_metadata 312,16630
#define sqlite3_thread_cleanup 313,16704
#define sqlite3_total_changes 314,16771
#define sqlite3_trace 315,16837
#define sqlite3_transfer_bindings 317,16926
#define sqlite3_update_hook 319,17003
#define sqlite3_user_data 320,17067
#define sqlite3_value_blob 321,17129
#define sqlite3_value_bytes 322,17192
#define sqlite3_value_bytes16 323,17256
#define sqlite3_value_double 324,17322
#define sqlite3_value_int 325,17387
#define sqlite3_value_int64 326,17449
#define sqlite3_value_numeric_type 327,17513
#define sqlite3_value_text 328,17584
#define sqlite3_value_text16 329,17647
#define sqlite3_value_text16be 330,17712
#define sqlite3_value_text16le 331,17779
#define sqlite3_value_type 332,17846
#define sqlite3_vmprintf 333,17909
#define sqlite3_overload_function 334,17970
#define sqlite3_prepare_v2 335,18040
#define sqlite3_prepare16_v2 336,18103
#define sqlite3_clear_bindings 337,18168
#define sqlite3_bind_zeroblob 338,18235
#define sqlite3_blob_bytes 339,18301
#define sqlite3_blob_close 340,18364
#define sqlite3_blob_open 341,18427
#define sqlite3_blob_read 342,18489
#define sqlite3_blob_write 343,18551
#define sqlite3_create_collation_v2 344,18614
#define sqlite3_file_control 345,18686
#define sqlite3_memory_highwater 346,18751
#define sqlite3_memory_used 347,18820
#define sqlite3_mutex_alloc 348,18884
#define sqlite3_mutex_enter 349,18948
#define sqlite3_mutex_free 350,19012
#define sqlite3_mutex_leave 351,19075
#define sqlite3_mutex_try 352,19139
#define sqlite3_open_v2 353,19201
#define sqlite3_release_memory 354,19261
#define sqlite3_result_error_nomem 355,19328
#define sqlite3_result_error_toobig 356,19399
#define sqlite3_sleep 357,19471
#define sqlite3_soft_heap_limit 358,19529
#define sqlite3_vfs_find 359,19597
#define sqlite3_vfs_register 360,19658
#define sqlite3_vfs_unregister 361,19723
#define sqlite3_threadsafe 362,19790
#define sqlite3_result_zeroblob 363,19854
#define sqlite3_result_error_code 364,19922
#define sqlite3_test_control 365,19992
#define sqlite3_randomness 366,20057
#define sqlite3_context_db_handle 367,20120
#define sqlite3_extended_result_codes 368,20190
#define sqlite3_limit 369,20264
#define sqlite3_next_stmt 370,20322
#define sqlite3_sql 371,20384
#define sqlite3_status 372,20440
#define SQLITE_EXTENSION_INIT1 375,20525
#define SQLITE_EXTENSION_INIT2(376,20605

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/src/sqlite.h,0

/Users/sfalcon/src/r-dbi-git/SQLite/RSQLite/src/sqlite-all.c,0
