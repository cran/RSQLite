dnl 
dnl $Id$
dnl
dnl R embedding of the SQLite engine.
dnl
dnl Generate a "configure" script that will install the RSQLite packge.
dnl By default, we install our own statically linked version of the 
dnl SQLite engine to avoid version mismatches.
dnl
dnl    USAGE:  autoconf
dnl
dnl Global variables:  
dnl    In addition to PKG_CPPFLAGS and PKG_LIBS, user may set SQLITE_TAR 
dnl    to specify the SQLite tar file.
dnl
dnl The resulting configure script implements the following logic:
dnl
dnl 1. If both PKG_CPPFLAGS and PKG_LIBS are defined, use them and exit.
dnl
dnl 2. If the user specifies explicitly a particular SQLite
dnl    installation we use that version. This can be requested through 
dnl         --with-sqlite-dir=DIR 
dnl         --with-sqlite-inc=<include-DIR>
dnl    or   --with-sqlite-lib=<library-DIR>
dnl
dnl    In the first case, DIR is assumed to include the lib and include
dnl    subdirectories;  individual locations of these two may be 
dnl    specified independently through <include-dir> and <library-dir>,
dnl    respectively.  If we found these, we exit.
dnl
dnl 3. If the user did not specify a SQLite installation, or if the user 
dnl    explicitly requests to install the SQLite version we provide,
dnl    we run configure/make/make install on the SQLite tarball.
dnl    By default we install it in ${R_PACKAGE_DIR}/sqlite, but users
dnl    may direct the installation to some other directory (or disable it 
dnl    altogether) by
dnl         --enable-sqlite=DIR   (DIR defaults to $R_PACKAGE_DIR/sqlite)
dnl         --enable-sqlite=no
dnl    or   --disable-sqlite
dnl    (note that in this case we compile sqlite as a *static* library).
dnl

AC_INIT(src/RS-SQLite.c)

# As suggested by BDR, I may need to use CFLAGS to compile under 64-bit
# (I can't test this), but see "Writing R Extensions"
: ${R_HOME=`R RHOME`}
if test -z "${R_HOME}"; then
   echo "could not determine R_HOME"
   exit 1
fi
CC=`"${R_HOME}/bin/R" CMD config CC`
CFLAGS=`"${R_HOME}/bin/R" CMD config CFLAGS`
AC_PROG_CPP
AC_PROG_CC

FOUND_ALL="no"

#
# if users provide both PKG_CPPFLAGS *and* PKG_LIBS, then we're done!
#
test -n "${PKG_CPPFLAGS}" -a -n "${PKG_LIBS}"  && FOUND_ALL="yes"

#
# does user want a particular SQLite installation/version (possibly
# overriding system directories)?
#
AC_ARG_WITH(sqlite-dir,
            [--with-sqlite-dir=DIR    specifies an existing SQLite base dir],
            SQLITE_DIR="${with_sqlite_dir}",
            SQLITE_DIR="")
AC_ARG_WITH(sqlite-lib,
            [--with-sqlite-lib=DIR    specifies an existing SQLite lib dir],
            SQLITE_LIB="${with_sqlite_lib}",
            SQLITE_LIB="")
AC_ARG_WITH(sqlite-inc,
            [--with-sqlite-inc=DIR    specifies an existing SQLite include dir],
            SQLITE_INC="${with_sqlite_inc}",
            SQLITE_INC="")
#
# Use SQLITE_DIR (if specified) to initialize SQLITE_{INC,LIB}
# (handle the uniformative cases --with-no-sqlite or w.o. DIR values,
# and make sure the various directories actually exist).  Ignore
# with-sqlite-inc and with-sqlite-lib if with-sqlite-dir is present,
# but issue a warning.
#
if test "${FOUND_ALL}" = "no"; then
    if test -n "${SQLITE_DIR}" ; then
       test ! -d "${SQLITE_DIR}" && \
                  AC_MSG_ERROR([dir ${SQLITE_DIR} does not exist])
       test -n "${SQLITE_INC}" && \
                  AC_WARN([Using sqlite-dir and ignoring sqlite-inc])
       test -n "${SQLITE_LIB}" && \
                  AC_WARN([Using sqlite-dir and ignoring sqlite-lib])
       SQLITE_INC="${SQLITE_DIR}/include"
       SQLITE_LIB="${SQLITE_DIR}/lib"
       test ! -d "${SQLITE_INC}" && \
                  AC_MSG_ERROR([dir ${SQLITE_INC} does not exist])
       test ! -d "${SQLITE_LIB}" && \
                  AC_MSG_ERROR([dir ${SQLITE_LIB} does not exist])
       PKG_LIBS="-L${SQLITE_LIB} -lsqlite3"
       PKG_CPPFLAGS="-I${SQLITE_INC}" 
       FOUND_ALL="yes"
    else
       if test -n "${SQLITE_INC}" || test -n "${SQLITE_LIB}"; then
          ## must have both
          test -n "${SQLITE_INC}" && test -n "${SQLITE_LIB}" || \
               AC_MSG_ERROR([must specify sqlite-inc and sqlite-lib])
          ## must be dirs
          test ! -d "${SQLITE_INC}" && \
               AC_MSG_ERROR([sqlite-inc dir ${SQLITE_INC} does not exist])
          test ! -d "${SQLITE_LIB}" && \
               AC_MSG_ERROR([sqlite-lib dir ${SQLITE_LIB} does not exist])
          PKG_LIBS="-L${SQLITE_LIB} -lsqlite3"
          PKG_CPPFLAGS="-I${SQLITE_INC}" 
          FOUND_ALL="yes"
       fi
    fi
fi


# do users want/need to install our own copy SQLite (taken from
# http://www.sqlite.org)? If provided, force installation regardless
# whether there's one already or not.
#
# SQLITE_TDIR will store the target SQLite installation directory.
#
AC_ARG_ENABLE(sqlite,
              [--enable-sqlite=DIR      install SQLite software into DIR
                         (by default into \${R_PACKAGE_DIR}/sqlite)],
              [ SQLITE_TDIR="${enable_sqlite}" 
                FOUND_ALL="no"
              ],
              [ if test "${FOUND_ALL}" = "yes" ; then
                   SQLITE_TDIR="no"
                else
                   SQLITE_TDIR="yes"
                fi
              ])


if test "${FOUND_ALL}" = "no" -a "${SQLITE_TDIR}" != "no" ; then
   # We need to install SQLite. Note that SQLite's configure will run
   # before the actual $R_PACKAGE_DIR is fully created -- so we'll install 
   # it under inst/sqlite so that when R copies rescursevely "inst" into 
   # $R_PACKAGE_DIR the actual SQLite directoy will be $R_PACKGE_DIR/sqlite
   # If the user doesn't specify a directory, we only build static libraries
   # (to avoid the LD_LIBRARY_PATH dance).
 
   base_dir=`pwd`
   if test "${SQLITE_TDIR}" = "yes" ; then
      SQLITE_TDIR="${base_dir}/inst/sqlite"
      SQLITE_FINAL="${R_PACKAGE_DIR}/sqlite"
      SQLITE_SHARED="no"
   else
      SQLITE_FINAL="${SQLITE_TDIR}"
      SQLITE_SHARED="yes"
   fi
   test ! -d "${SQLITE_TDIR}"         && mkdir "${SQLITE_TDIR}"
   test ! -d "${SQLITE_TDIR}/bin"     && mkdir "${SQLITE_TDIR}/bin"
   test ! -d "${SQLITE_TDIR}/lib"     && mkdir "${SQLITE_TDIR}/lib"
   test ! -d "${SQLITE_TDIR}/include" && mkdir "${SQLITE_TDIR}/include"

   # Are tar and gzip available?  One would hope!  Is basename portable?
   : ${TAR=tar}
   : ${GZIP=gzip}
   : ${MAKE=make}
   : ${SQLITE_TAR="${base_dir}/src/sqlite-3.*.*.tar.gz"}

   if test -r "${SQLITE_TAR}" ; then
      echo "Could not read sqlite source tar file (${SQLITE_TAR})."
      echo "Set and export the shell variable SQLITE_TAR to the appropriate"
      echo "pathname, e.g., 'export SQLITE_TAR=$HOME/sqlite-3.2.1.tar.gz'"
      exit 1
   fi

   tmp_dir=/tmp/bld_sqlite$$
   mkdir "${tmp_dir}" && cd "${tmp_dir}"

   ${GZIP} -c -d ${SQLITE_TAR} | ${TAR} xf - 

   # compute name of source directory (as of 2.8.6, SQLite doesn't follow 
   # the GNU naming standard, and it untars into "sqlite")
   SQLITE_SRC=`basename ${SQLITE_TAR} | \
               sed 's/\.tar\.gz//' | sed 's/\.tgz//' | sed 's/\.tar//' `
   test ! -d "${SQLITE_SRC}" && SQLITE_SRC=sqlite

   cd ./"${SQLITE_SRC}"
   echo ""
   echo "building the SQLite engine ... slowly ...."
   echo ""
   echo "(the file /tmp/sqlite$$ stores compiler messages)"
   echo ""
   export SQLITE_TDIR
   export CC
   ( ./configure --silent --prefix=${SQLITE_TDIR}    \
                 --disable-tcl \
                 --enable-shared=${SQLITE_SHARED} --with-pic && \
       ${MAKE} && ${MAKE} install && ${MAKE} clean ) >/tmp/sqlite$$ 2>&1

   if test $? -ne 0 ; then
      echo ""
      echo "SQLite installation failed."
      echo ""
      echo "INSTRUCTIONS:"
      echo ""
      echo "  1. You need to install SQLite manually.   For details,"
      echo "     consult the web site http://www.sqlite.org"
      echo ""
      echo "  2. After installing SQLite, re-run R CMD INSTALL, specifying"
      echo "     the location of the SQLite directories, e.g.,"
      echo ""
      echo "     R CMD INSTALL --configure-args=--with-sqlite-dir=<DIR> ..."
      echo "" 
      echo "     or set PKG_LIBS and PKG_CPPFLAGS, as described in"
      echo "     R help(INSTALL)."
      echo ""
      exit 1
   fi

   cd ..  && rm -rf "${SQLITE_SRC}"
   cd "${base_dir}"
  
   # Since we installed successfully, now we set PKG_* vars and exit
   PKG_CPPFLAGS="-I${SQLITE_TDIR}/include"
   PKG_LIBS="${SQLITE_TDIR}/lib/libsqlite3.a"
   AC_SEARCH_LIBS(fdatasync, [rt])
   PKG_LIBS="${PKG_LIBS} $LIBS"
   FOUND_ALL="yes"

   echo ""
   echo "-------------------------------------------------------------------"
   echo ""
   echo "SQLite installed successfully:"
   echo ""
   if test "${SQLITE_SHARED}" = yes ; then
      echo "  Do not forget to verify whether you need to include the dir"
      echo "  ${SQLITE_FINAL}/lib in your LD_LIBRARY_PATH, e.g., "
      echo ""
      echo "    LD_LIBRARY_PATH=${SQLITE_FINAL}/lib:\$LD_LIBRARY_PATH"
      echo "    export LD_LIBRARY_PATH"
      echo ""
      echo "  prior to invoking R."
      echo ""
   fi
   echo "-------------------------------------------------------------------"
   echo ""
   rm -rf "${tmp_dir}"
fi

if test "${FOUND_ALL}" = "no" ; then

   ## we failed -- print instructions accordingly

   if test -n "${SQLITE_LIB}" -o -n "${SQLITE_INC}"; then
      echo ""
      echo "Configuration error:"
      echo "  could not find either sqlite.h or lib sqlite."
      echo ""
      echo "INSTRUCTIONS:"
      echo ""
      echo '  Re-run "configure" specifying the SQLite base directory '
      echo '  (with subdirectories "include" and "lib") using the argument'
      echo "     --with-sqlite-dir=<sqlite-base-dir>"
      echo ""
      echo "  Alternatively you may specify individually the header and "
      echo "  lib directories with the arguments"
      echo "     --with-sqlite-inc=<sqlite-include-dir>"
      echo "     --with-sqlite-lib=<sqlite-lib-dir>"
      echo ""
   else 
      echo ""
      echo "Configuration error:"
      echo '  could not find the SQLite "sqlite.h" header or the'
      echo "  library -lsqlite3"
      echo ""
      echo "INSTRUCTIONS:"
      echo ""
      echo "1. Define and export the 2 shell variables PKG_CPPFLAGS and"
      echo "   PKG_LIBS to include the directory for header files (*.h)"
      echo "   and libraries, for example (using Bourne shell syntax):"
      echo ""
      echo '      export PKG_CPPFLAGS="-I<SQLite-include>"'
      echo '      export PKG_LIBS="-L<SQLite-libs> -lsqliteclient3"'
      echo ""
      echo "2. Re-run the R INSTALL command:"
      echo ""
      echo "      R CMD INSTALL RSQLite<version>.tar.gz"
      echo ""
   fi
   exit 1
fi

AC_SUBST(PKG_CPPFLAGS)
AC_SUBST(PKG_LIBS)

AC_OUTPUT(src/Makevars)

exit 0
